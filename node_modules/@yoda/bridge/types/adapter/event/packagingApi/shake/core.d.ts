import type { EventOptions, AccelerometerRes, ShakeProps, LevalMap } from './type';
export declare class ShakeHandler {
    constructor(props: ShakeProps);
    shakeConfig: EventOptions;
    shakedArr: number[];
    isChecking: boolean;
    nowStatus: AccelerometerRes;
    lastStatus: AccelerometerRes;
    stopMark: null | ReturnType<typeof setTimeout>;
    checkIsShakeStoped: boolean;
    notEmitButShaked: boolean;
    isShakeStarted: boolean;
    isAndroid: boolean;
    isArrivedConfigStandard: boolean;
    levelMap: LevalMap;
    dispatchEvent: null | ((params: unknown) => Promise<any>);
    setStillShaking: () => void;
    setOptions(options: EventOptions): void;
    resetShakeStatus(isStoped?: boolean): void;
    checkIsShake(result: AccelerometerRes): void;
    judgeLikelyShake(): boolean;
    judgeArrivedTerminal(): boolean;
    handleArrivedStandard(): void;
    handleShakeHappend(): Promise<void>;
    notShaking(): void;
    updateShakedArr(newTimeStamp: number): void;
    handleArrivedEmitStandard(): void;
    checkDoDelayEmit(): void;
}
