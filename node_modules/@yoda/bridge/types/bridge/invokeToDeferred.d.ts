export interface Deferred {
    traceId?: string;
    isMulti: boolean;
    promise: Promise<unknown>;
    namespace?: string;
    name?: string;
    startTime?: string;
}
declare type singleDeferred = Deferred & {
    resolve: (value: unknown) => void;
    reject: (reason?: any) => void;
};
declare type multiDeferred = Deferred & {
    resolve: Function;
};
export declare const invokeMap: Record<string, singleDeferred | multiDeferred>;
export declare const deferredInvoke: {
    pushMQ(isMulti?: boolean, callBackFn?: Function, isEvent?: boolean): singleDeferred | multiDeferred;
    removeMQ(callbackId: string): void;
    create<Value, Reason>(namespace: string, name: string, isMulti?: boolean, callBackFn?: Function): {
        id: string | undefined;
        promise: Promise<unknown>;
    };
    resolve(id: string, data: unknown): void;
    reject(id: string, reason: unknown): void;
};
export {};
