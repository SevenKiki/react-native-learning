export declare type Func<A extends any[] = any[], R = any> = (...args: A) => R;
export declare type Pretty<T> = {
    [P in keyof T]: T[P];
};
export declare type RequiredKeys<T> = {
    [P in keyof T]-?: T extends Record<P, T[P]> ? P : never;
}[keyof T];
export declare type Split<T extends string, U extends string> = T extends `${infer S}${U}${infer R}` ? [S, ...Split<R, U>] : [T];
export declare type UnionToIntersection<U> = (U extends unknown ? Func<[U]> : never) extends Func<[infer I]> ? I : never;
