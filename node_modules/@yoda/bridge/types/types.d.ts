import type { NativeBridges, NativeEvents } from '@yoda/bridge-types';
import type { IntrinsicAPIs } from './apis';
import type { UseCallbackBridge } from './constants';
import type { RequiredKeys, Split } from './utils';
export interface YodaBridges extends IntrinsicAPIs, NativeBridges {
}
export interface YodaEvents extends NativeEvents {
    shaked: Record<string, never>;
    'shake-start': Record<string, never>;
    'shake-end': Record<string, never>;
}
export declare type InvocationParams<T extends keyof YodaBridges> = YodaBridges[T]['params'];
export interface InvocationOptions {
    timeout?: number | undefined;
}
export declare type InvocationCallback<T extends keyof YodaBridges> = T extends UseCallbackBridge ? (response: InvocationResponse<T>) => void : never;
export declare type InvocationBridgeNamespace<T extends keyof YodaBridges> = Split<T, '.'>[0];
export declare type InvocationBridgeName<T extends keyof YodaBridges> = Split<T, '.'>[1];
export declare type InvocationConfig<T extends keyof YodaBridges> = T extends unknown ? {
    readonly initialBridge: T;
    readonly initialParams: InvocationParams<T>;
    bridge: T;
    params: InvocationParams<T>;
    options: InvocationOptions;
    callback?: InvocationCallback<T> | undefined;
} : never;
export declare type InvocationResponseData<T extends keyof YodaBridges> = YodaBridges[T]['responseData'];
export declare type InvocationResponse<T extends keyof YodaBridges> = InvocationResponseData<T> & {
    result: number;
    message?: string;
};
export declare type InvocationPromise<T extends keyof YodaBridges> = Promise<T extends UseCallbackBridge ? void : InvocationResponseData<T>>;
export declare type InvocationWithCallback<T extends keyof YodaBridges> = [
    bridge: T,
    params: InvocationParams<T>,
    callback: InvocationCallback<T>
];
export declare type InvocationWithoutParams<T extends keyof YodaBridges> = [bridge: T] | [
    bridge: T,
    params: InvocationParams<T>,
    options: InvocationOptions
];
export declare type InvocationWithOptionalParams<T extends keyof YodaBridges> = [
    bridge: T,
    params?: InvocationParams<T>,
    options?: InvocationOptions
];
export declare type InvocationWithParams<T extends keyof YodaBridges> = [
    bridge: T,
    params: InvocationParams<T>,
    options?: InvocationOptions
];
export declare type InvocationParameters<T extends keyof YodaBridges> = T extends UseCallbackBridge ? InvocationWithCallback<T> : InvocationParams<T> extends Record<string, never> ? InvocationWithoutParams<T> : [RequiredKeys<InvocationParams<T>>] extends [never] ? InvocationWithOptionalParams<T> : InvocationParams<T> extends Record<string, unknown> ? InvocationWithOptionalParams<T> : InvocationWithParams<T>;
