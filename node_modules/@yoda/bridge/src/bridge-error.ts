import type { YodaBridges, InvocationParams, InvocationConfig } from './types';

export type BridgeErrorContext<T extends keyof YodaBridges> = T extends unknown ? {
    bridge: T;
    params: InvocationParams<T>;
} : never;

const getContext = <T extends keyof YodaBridges>({
    initialBridge,
    initialParams,
}: InvocationConfig<T>): BridgeErrorContext<T> => ({
    bridge: initialBridge,
    params: initialParams,
}) as BridgeErrorContext<T>;

export class BridgeError<T extends keyof YodaBridges> extends Error {
    override name = 'BridgeError';

    override message: string;

    code: number;

    context: BridgeErrorContext<T>;

    constructor(message: string, code: number, config: InvocationConfig<T>) {
        super(message);

        this.message = message;
        this.code = code;
        this.context = getContext(config);
    }

    toJSON() {
        return {
            name: this.name,
            message: this.message,
            code: this.code,
            context: this.context,
        };
    }
}

export const isBridgeError = (err: unknown): err is BridgeError<keyof YodaBridges> => err instanceof BridgeError;
