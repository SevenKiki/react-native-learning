import type { EventOptions, AccelerometerRes } from './type';
import { ShakeHandler } from './core';
import { ANDROID_LEVEL_MAP } from './constants';
import { checkCanUse, isAndroid } from '../../../../utils';
import { getYoda } from '../../../../instance';

const interval = 60;
let shakeHandler: null | ShakeHandler = null;
let checkIsShake: null | ((result: AccelerometerRes) => void) = null;

const startMonitorShake = async () => {
    const yoda = getYoda();

    /*
     * Const startAccelerometerRes = await yoda.system.startAccelerometer({
     *     interval,
     * });
     */
    const startAccelerometerRes = await yoda.bridge(
        'system',
        'startAccelerometer',
        {
            interval,
        }
    );

    checkIsShake = shakeHandler!.checkIsShake.bind(shakeHandler);

    // Const eventRes = await yoda.event.addEventListener('accelerometer-change', checkIsShake)
    const eventRes = await yoda.bridge('event', 'addEventListener', {
        type: 'accelerometer-change',
        listener: checkIsShake,
    });

    if (startAccelerometerRes.result === 1 && eventRes.result !== 1) {
        stopMonitorShake();
    }

    if (startAccelerometerRes.result !== 1 || eventRes.result !== 1) {
        throw new Error(`摇一摇初始化失败，请稍后重试。AccelerometerRes:${JSON.stringify(startAccelerometerRes)};eventRes:${JSON.stringify(eventRes)}`);
    }
};

const validateOption = (options: EventOptions) => {
    if (!options) {
        return;
    }

    const { level, times, isEmitImmediately } = options;

    // Android 和 iOS 级别类型一致
    if (level !== undefined && !ANDROID_LEVEL_MAP[level]) {
        throw new Error('请传入正确的level，可选值为1、2、3');
    }

    if (times !== undefined) {
        if (!Number.isInteger(times)) {
            throw new Error('times应为整数');
        }

        if (times < 1) {
            throw new Error('times应大于1');
        }
    }

    if (isEmitImmediately !== undefined) {
        if (typeof isEmitImmediately !== 'boolean') {
            throw new Error('isEmitImmediately应为boolean类型');
        }
    }
};

export const initShakeHandler = async (options: EventOptions) => {
    const yoda = getYoda();

    if (!await checkCanUse('system', 'startAccelerometer')) {
        throw new Error('当前APP暂不支持摇一摇');
    }

    if (shakeHandler) {
        throw new Error('当前存在尚未结束监听的摇一摇');
    }

    const dispatchEvent = async (params: { type: string; data: any }) =>
        yoda.bridge('event', 'dispatchEvent', params);

    shakeHandler = new ShakeHandler({
        dispatchEvent,
        isAndroid,
    });
    validateOption(options);
    shakeHandler.setOptions(options);
    shakeHandler.resetShakeStatus();
    await startMonitorShake.bind(yoda)();
};

export const stopMonitorShake = async () => {
    const yoda = getYoda();

    if (!await checkCanUse('system', 'stopAccelerometer')) {
        throw new Error('当前APP暂不支持摇一摇');
    }

    shakeHandler = null;

    // Const eventRes = await yoda.event.removeEventListener('accelerometer-change', checkIsShake)
    const eventRes = await yoda.bridge('event', 'removeEventListener', {
        type: 'accelerometer-change',
        listener: checkIsShake,
    });
    // Const stopRes = await yoda.system.stopAccelerometer()
    const stopRes = await yoda.bridge('system', 'stopAccelerometer', {});

    if (eventRes.result !== 1 || stopRes.result !== 1) {
        throw new Error(`摇一摇停止监听失败。stopRes:${JSON.stringify(stopRes)};eventRes:${JSON.stringify(eventRes)}`);
    }
};
