import type { CallbackArg, Listener, eventControlType } from '../../type';
import { getUUId } from '../../utils/index';
import { getEventIdByNumber } from '../../utils/eventId';

const eventMQ: Record<string, eventControlType> = {};

export function addListener(
    typeStr: string,
    listener: Listener,
    callbackId?: number
): void {
    const targetTypeListener = eventMQ[typeStr] || {
        callbackId,
        eventRecord: {},
    };

    const id = getUUId();

    listener!.__yodaCallbackId__![typeStr] = String(id);
    targetTypeListener.eventRecord[id] = listener;
    eventMQ[typeStr] = targetTypeListener;
}

export function createCb(type: string) {
    return function (ret: CallbackArg) {
        const targetTypeListener = eventMQ[type];

        Object.keys(targetTypeListener?.eventRecord || {}).forEach((key: string) =>
                targetTypeListener.eventRecord[Number(key)](JSON.parse(JSON.stringify(ret)) as CallbackArg));
    };
}

export function getCallbackIdByType(type: string) {
    const targetTypeListener = eventMQ[type];

    return getEventIdByNumber(targetTypeListener.callbackId);
}

export function removeListener(typeStr: string, listener?: Listener): void {
    const targetTypeListener = eventMQ[typeStr];
    const callbackId = listener!.__yodaCallbackId__![typeStr];

    delete targetTypeListener.eventRecord[Number(callbackId)];
    delete listener!.__yodaCallbackId__![typeStr];

    /*
     * 如果当前不存在监听事件，完全有移除
     * 有新监听，则重建监听对象，防止callbackid 异常
     */
    if (!hasListener(typeStr)) {
        delete eventMQ[typeStr];
    }
}

export function hasListener(typeStr: string): boolean {
    const targetTypeListener = eventMQ[typeStr];

    return Object.keys(targetTypeListener?.eventRecord || {}).length > 0;
}
