const SafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991;
let overflow = false;
let _callbackId = 1;
let _instanceId: number = genInstanceId();

/**
 * Ios 客户端目前会将 callbackId 处理为 number
 * 需要尽可能的保证生成的 _instanceId 与其他页面不会重复 & 不会超出 Number.MAX_SAFE_INTEGER
 * 3位随机数 + 9位时间戳 + 4位自增 id
 */
function genInstanceId() {
    const safeIntegerStr = `${SafeInteger}`;

    // 取 3 位随机数避免同一时刻出现重复 & 避免数字溢出
    const maxRandom = Number(safeIntegerStr.slice(0, 3)) - 100;
    const random = Math.floor(Math.random() * maxRandom);

    // 取 9 位时间戳，保证1周内不会重复
    const date = `${Date.now()}`;
    const dateStr = date.slice(date.length - 9);

    // 剩下的都作为自增 id
    const zero = new Array(safeIntegerStr.length - 12).fill(0)
        .join('');

    return Number(`${random}${dateStr}${zero}`);
}

function genCallbackId(dicData?: any): number {
    const id = genNextId(dicData);

    /*
     * 如果生成的 id 溢出了，从头开始
     * 页面中应该不会有这么多的回调
     */
    if (id >= SafeInteger) {
        overflow = true;
        _callbackId = 1;
        // 重新生成 insId 尽量减少重复的概率
        _instanceId = genInstanceId();

        return genCallbackId();
    }

    return id;
}

function genNextId(dicData?: any): number {
    let callbackId = _instanceId + _callbackId++;

    // 溢出后需要判断是否已经存在对应的 id
    while (overflow || dicData && dicData[callbackId]) {
        callbackId = _instanceId + _callbackId++;
    }

    return callbackId;
}

export function getUUId(dicData?: any): number {
    return genCallbackId(dicData);
}
