export const hasOwnProperty = (() => {
    /* eslint-disable-next-line @typescript-eslint/unbound-method */
    const { hasOwnProperty } = Object.prototype;

    return <T extends object, K extends Parameters<typeof hasOwnProperty>[0]>(
        obj: T,
        key: K,
    ): obj is T extends Record<K, unknown> ? T : T & Record<K, unknown> =>
        hasOwnProperty.call(obj, key);
})();

export const hasProperty = <T extends object, K extends PropertyKey>(
    obj: T,
    key: K,
): obj is T extends Record<K, unknown> ? T : T & Record<K, unknown> => key in obj;

export const isNonNullObject = (arg: unknown): arg is object => typeof arg === 'object' && arg !== null;

export const isPlainObject = (arg: unknown): arg is Record<PropertyKey, unknown> => {
    if (!isNonNullObject(arg)) {
        return false;
    }

    const prototype: object | null = Object.getPrototypeOf(arg);

    if (prototype === null) {
        return true;
    }

    return hasOwnProperty(prototype, 'constructor') && prototype.constructor === Object;
};
