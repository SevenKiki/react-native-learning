/**
 * 节流
 * @param fn 对象函数
 * @param wait 节流时间
 */
export function throttle(fn: Function, wait: number): Function {
    let timer: null | ReturnType<typeof setTimeout> = null;

    return function (this: any) {
        const context = this;
        const args = arguments;

        if (!timer) {
            timer = setTimeout(() => {
                fn.apply(context, args);
                timer = null;
            }, wait);
        }
    };
}

/**
 * 防抖
 * @param func
 * @param timeout
 * @returns
 */
export function debounce<T extends ((...args: any[]) => any)>(this: any, func: T, timeout = 300) {
    let timer: null | ReturnType<typeof setTimeout> = null;

    return (...args: Parameters<T>) => {
      clearTimeout(timer!);
      timer = setTimeout(() => {
        func.apply(this, args);
      }, timeout);
    };
}
