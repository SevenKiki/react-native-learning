// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type Func<A extends any[] = any[], R = any> = (...args: A) => R;

export type Pretty<T> = {
    [P in keyof T]: T[P];
};

export type RequiredKeys<T> = {
    [P in keyof T]-?: T extends Record<P, T[P]> ? P : never;
}[keyof T];

export type Split<T extends string, U extends string> =
    T extends `${infer S}${U}${infer R}` ? [S, ...Split<R, U>] : [T];

export type UnionToIntersection<U> =
    (U extends unknown ? Func<[U]> : never) extends Func<[infer I]> ? I : never;
