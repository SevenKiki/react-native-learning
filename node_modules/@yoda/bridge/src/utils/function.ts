import { isNonNullObject } from './object';
import type { Func } from './types';

export const identity = <T>(x: T) => x;

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const isFunction = <A extends any[] = any, R = any>(arg: unknown): arg is Func<A, R> =>
    typeof arg === 'function';

export const delay = (timeout: number) => new Promise<void>(resolve => setTimeout(resolve, timeout));

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const memoize = <A extends any[], R>(
    func: Func<A, R>,
    resolver: Func<A, unknown> = (...args): unknown => args[0],
): Func<A, R> => {
    const map = new Map<unknown, R>();
    const weakMap = new WeakMap<object, R>();

    return (...args: A) => {
        const id = resolver(...args);

        const store = isNonNullObject(id) ? weakMap as Map<unknown, R> : map;
        const value = store.get(id) ?? func(...args);

        if (!store.has(id)) {
            store.set(id, value);
        }

        return value;
    };
};
