import { debounce } from '../utils/throttle';
import type { TRadarLog } from '../type';
import { getPerformanceId, Deferred } from '../utils';
import { getYoda } from '../instance';

/*
 * Release 1.0.3-alpha.4
 * 日志缓存池
 */
const logArrayPool: any[] = [];

/*
 * https://wiki.corp.kuaishou.com/pages/viewpage.action?pageId=152981099
 * Native 上报bridge文档 @张赛
 */

/*
 * 使用一帧的时间间隔作为最小上报区间(ms)
 * native 侧，考虑bridge 耗时，暂定1s
 */
const logSessionMinTime = 1000 * 1;
// 防抖最多次数
const maxTime = 30;

const enum switchEnum {
    unload,
    open,
    close,
}

const isLocalBridge = (logParams: TRadarLog): boolean =>

/*
 * 将原本控制getApiList只记录一次的逻辑移除
 * 默认 canIUse 、getApiList  都是本地api
 */
     ['canIUse', 'getApiList'].includes(logParams.name as any);
let isSendLog = switchEnum.unload;
let getPageLoadDataPromise: Promise<boolean> | null = null;

// 数据上报是否已经打开
const loggerSwitch = () => {
    if (getPageLoadDataPromise) {
        return getPageLoadDataPromise;
    }

    const { promise, resolve } = new Deferred<boolean>();

    getPageLoadDataPromise = promise;

    if (isSendLog == switchEnum.unload) {
        // Window中有注入flag， 直接在window下读取
        if (window.__yodaCommonDataObject__?.sampleData) {
            if (
                typeof window.__yodaCommonDataObject__ .sampleData === 'string'
            ) {
                try {
                    window.__yodaCommonDataObject__.sampleData =
                            JSON.parse(window.__yodaCommonDataObject__
                                .sampleData);
                } catch (e) {
                    window.__yodaCommonDataObject__.sampleData = {};
                }
            }

            isSendLog = window.__yodaCommonDataObject__.sampleData
                ?.bridgeHit
                ? switchEnum.open
                : switchEnum.close;

                resolve(isSendLog == switchEnum.open);
        } else {
            const yoda = getYoda();

            yoda.bridge(
                'webview',
                'getPageLoadData',
                {},
                ({ result, sampleData }) => {
                    if (result == 1) {
                        isSendLog = sampleData?.bridgeHit
                            ? switchEnum.open
                            : switchEnum.close;
                    } else {
                        isSendLog = switchEnum.close;
                    }

                    resolve(isSendLog == switchEnum.open);
                }
            );
        }
    } else {
        resolve(isSendLog == switchEnum.open);
    }

    return getPageLoadDataPromise;
};

function sendLog() {
    window.__yodaBridge__.invoke(
        'tool',
        'sendPerformanceLog',
        JSON.stringify({
            data: logArrayPool,
        }),
        getPerformanceId()
    );

    logArrayPool.length = 0;
}

/**
 * 日志上报
 */
const _logger: Function = debounce((): void => {
    // Const yoda = this;
    sendLog();
}, logSessionMinTime);

const getLog = (logParams: TRadarLog, dataNow: string, dateStr?: string) => {
    const logData: any = {
        key: 'bridge',
        value: {},
        dimension: {
            api: logParams.name,
            namespace: logParams.namespace,
        },
        event_client_timestamp: dataNow, // 这个是事件发生的时间戳
        event_trigger_source: 'H5',
        task_identifier: logParams.callbackId, // 使用bridge 自身的 callbackId 来保证task 唯一
        is_task_event: true, // True时表示这个事件存在前序事件或者后续事件
        task_status: '', // START 代表此为一系列事件的起点 END
    };

    switch (logParams.type) {
        case 'invoke':
            logData.value.h5_invoke_bridge_time = dataNow;
            logData.task_status = 'START';

            if (
                typeof window.__yodaBridge__?.invoke !== 'function'
                || typeof window.webkit?.messageHandlers?.KMYYoda?.postMessage !== 'function'
            ) {
                logData.result = 126002;
                logData.error_msg = '';
            }

            break;
        case 'callback':
            logData.value.h5_receive_callback_time = dataNow;
            logData.value.h5_invoke_bridge_time = dateStr;
            logData.dimension.result_type = logParams.resultCode;
            logData.dimension.result_type
                && (logData.dimension.result_type =
                    logData.dimension.result_type.toString());
            logData.dimension.error_msg = logParams.errorMsg;
            logData.task_status = 'END';
            break;
        case 'event':
            logData.task_status = 'SUCCESS';
            delete logData.dimension.api;
            delete logData.dimension.namespace;
            logData.dimension.event = '';
            break;
    }

    return logData;
}

export const logger = (logParams: TRadarLog, dateStr?: string): string | undefined => {

    /*
     * 当前只在 >= 9.7.40 才会生效
     * if (compareVersion(appVersion, '9.7.40') > 0) return;
     */

    /*
     * 限制特定 bridge 和 前端 bridge 的阻止上报
     * getApiList  只上报一次
     * canIUse 不上报
     */
    if (isLocalBridge(logParams)) {
        return;
    }

    const nowDate = Date.now().toString();

    loggerSwitch().then(switchFlag => {
        if (!switchFlag) {
            return;
        }

        logArrayPool.push(getLog(logParams, nowDate, dateStr));

        // 防止出现大数据提交造成的crash,强制推送
        if (logArrayPool.length >= maxTime) {
            sendLog();
        } else {
            _logger();
        }
    });

    return nowDate;
}
