declare module '@yoda/bridge-types' {
    export type AddEventListenerParams = {
        [T in keyof NativeEvents]: {
            type: T;
            listener: (event: NativeEvents[T]) => void;
        }
    }[keyof NativeEvents];

    export interface AddEventListenerResponseData extends Record<string, never> {}

    export type RemoveEventListenerParams = {
        [T in keyof NativeEvents]: {
            type: T;
            listener?: ((event: NativeEvents[T]) => void) | undefined;
        }
    }[keyof NativeEvents];

    export interface RemoveEventListenerResponseData extends Record<string, never> {}

    export type OnParams = {
        [T in keyof NativeEvents]: {
            type: T;
            handler: (event: NativeEvents[T]) => void;
        }
    }[keyof NativeEvents];

    export interface OnResponseData extends Record<string, never> {}

    export type OffParams = {
        [T in keyof NativeEvents]: {
            type: T;
            handler?: (event: NativeEvents[T]) => void;
        }
    }[keyof NativeEvents];

    export interface OffResponseData extends Record<string, never> {}

    interface CustomizedNativeBridges {
        'event.addEventListener': {
            params: AddEventListenerParams;
            responseData: AddEventListenerResponseData;
        };
        'event.removeEventListener': {
            params: RemoveEventListenerParams;
            responseData: RemoveEventListenerResponseData;
        };
        'kwai.on': {
            params: OnParams;
            responseData: OnResponseData;
        };
        'kwai.off': {
            params: OffParams;
            responseData: OffResponseData;
        };
    }
}

export {};
