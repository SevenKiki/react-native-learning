import { isBridgeError } from '../bridge-error';
import { getContainer } from '../container';
import { compareKwaiAppVersion, isAndroid } from '../utils';

export interface GetLocationParams {
    /**
     * 业务 key
     */
    biz: string;
    /**
     * 弹窗标题
     */
    title?: string;
    /**
     * 弹窗内容，如果为空，使用默认文案（为空的情况仅限同城、生产、POI使用），其他业务请必传
     */
    content?: string;
    /**
     * 是否强制弹出前置弹窗 不受 48 小时控制
     */
    force?: boolean;
    /**
     * 埋点使用的标识，如果 biz 可以标识业务可以不传
     */
    statKey?: string;
    alertScene?: string;
    updateLocationScene?: string;
    /**
     * 受频控时使用上次缓存的位置信息
     */
    useLastLocationWhileLimited?: boolean;
}

export interface GetLocationResponse {
    longitude: number;
    latitude: number;
}

export const getLocation = async ({
    useLastLocationWhileLimited = false,
    ...params
}: GetLocationParams): Promise<GetLocationResponse> => {
    const { invoke } = getContainer();

    if (compareKwaiAppVersion('10.1.30') < 0) {
        // eslint-disable-next-line camelcase
        const { biz: biz_type, force, statKey, alertScene, updateLocationScene, ...restParams } = params;
        // eslint-disable-next-line camelcase
        const forced_permission_request = (() => {
            if (typeof force === 'undefined') {
                return 2;
            }

            return force ? 1 : 3;
        })();
        const legacyParams = {
            ...restParams,
            // eslint-disable-next-line camelcase
            biz_type,
            // eslint-disable-next-line camelcase
            forced_permission_request,
        };

        try {
            const {
                data: {
                    longitude,
                    latitude,
                },
            } = await invoke('kwai.syncLocationWithPermissionCheck', {
                ...legacyParams,
                // eslint-disable-next-line camelcase
                forced_permission_request: 3,
            });

            return {
                longitude,
                latitude,
            };
        } catch {}

        await invoke('kwai.requestLocationPermissionWithPermissionCheck', legacyParams);

        const {
            data: {
                longitude,
                latitude,
            },
        } = await invoke('kwai.syncLocationWithPermissionCheck', legacyParams);

        return {
            longitude,
            latitude,
        };
    }

    if (isAndroid && compareKwaiAppVersion('10.3.30') < 0) {
        const { updateLocationScene = '' } = params;

        Object.assign(params, {
            useInterval: !updateLocationScene,
        });
    }

    try {
        const { longitude, latitude } = await invoke('system.requestLocation', params);

        return {
            longitude,
            latitude,
        };
    } catch (err) {
        if (!isBridgeError(err)) {
            throw err;
        }

        if (err.code === 10014 && useLastLocationWhileLimited) {
            const { longitude, latitude } = await invoke('system.getLocationCityInfo', { biz: params.biz });

            if (typeof longitude === 'number' && typeof latitude === 'number') {
                return {
                    longitude,
                    latitude,
                };
            }
        }

        throw err;
    }
};
