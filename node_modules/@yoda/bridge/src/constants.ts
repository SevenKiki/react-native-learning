export const bridgeToLegacyKwaiBridge = Object.fromEntries(Object.entries({
    advertise: ['startFansTopLivePlay', 'startNeoAdVideo'],
    feed: [
        'authorizationStatusForCalendar',
        'changeEventForCalendar',
        'closeChildLock',
        'getAddressBookAccessStatus',
        'getCoronaTvChasingData',
        'getFeed',
        'openDetailPage',
        'openFansGroup',
        'setSettingEntryForCourse',
        'startPlayLongVideo',
        'updateDeviceBit',
        'updateUserRecoBit',
        'updateWeatherInfo',
        'userIncentivesUpdateTasks',
    ],
    game: [
        'addShortcutToDesktop',
        'appointGame',
        'changeAppointStatus',
        'gameSendLog',
        'gameTaskSelectImage',
        'getAppointStatus',
        'getWebViewDisplayType',
        'kgPageDidShowed',
        'openNativeGamecenter',
    ],
    growth: ['getDeviceSecretInfo', 'unionPhoneNumber'],
    im: ['setEnableIMTip'],
    live: [
        'deleteSubscribe',
        'liveReservationNotification',
        'openLiveQuizLive',
        'showSubscribeEditDialog',
        'showSubscribeSelectPhotoDialog',
        'subscribeLive',
        'unsubscribeLive',
    ],
    merchant: [
        'closeLiveMerchantFloatingWindow',
        'getLatestImage',
        'getSidToken',
        'loadUrlOnNewMerchantPage',
        'merchantSetPhotoPlayStatus',
        'onItemSelected',
        'popupToFollow',
        'querySessionIsStickyOnTop',
        'reqSessionStickyOnTopWithThread',
        'requestLocationAuthorization',
    ],
    minigame: ['publishSogameVideo'],
    pay: [
        'authThirdPartyAccount',
        'bindWithdrawType',
        'couponPay',
        'hasImportSdk',
        'nebulaStartGatewayWithdraw',
        'openKspayWebView',
        'sfBindWithdrawType',
        'startDeposit',
        'startGatewayPay',
        'startGatewayWithdraw',
        'startHalfScreenRecharge',
        'startKspayOrderPrepay',
    ],
    platform: [
        'getDarkMode',
        'openWechatMiniProgram',
        'sendSMS',
        'startFaceRecognition',
    ],
    post: [
        'cancelJsInjectUpload',
        'captureCertVideo',
        'deleteCacheVideoByPhotoId',
        'editAtlas',
        'editDraft',
        'editSmartAlbum',
        'getEditDraftData',
        'getSmartAlbumData',
        'getVideoUploadStatus',
        'intownShare',
        'postAtlas',
        'postVideo',
        'preloadMagicFace',
        'previewVideo',
        'reUploadShopVideo',
        'reeditPhoto',
        'resumeVideoUpload',
        'retryJsInjectUpload',
        'saveImage',
        'saveTempImages',
        'selectAndUploadMedia',
        'selectImage',
        'selectMixMediasAndUpload',
        'selectVideoAndUpload',
        'startAudioRecord',
        'uploadCertVideo',
        'uploadShopVideo',
        'uploadVideoFromAlbum',
        'verifyLiveUser',
    ],
    social: [
        'addTokenBlockShareId',
        'bindPhone',
        'bindRiskPreCheck',
        'decryptContactsName',
        'enterGroupChat',
        'followUser',
        'joinGroup',
        'login',
        'logout',
        'mobileQuickAuthInfo',
        'mobileQuickLoginInfo',
        'needUpdateProfile',
        'requestFollowUserV2',
        'selectCountryPhoneCode',
        'sendIMMessage',
        'sendImFriendMessage',
        'setPageFollowRefer',
        'setShareTokenToClipBoard',
        'share',
        'startAuthActivity',
        'verifyAccount',
        'verifySMSCode',
        'verifyThirdPartyLogin',
        'wechatLogin',
    ],
    system: [
        'collapseKeyboard',
        'getPushPermission',
        'getServerTime',
        'gete2',
        'openPushPermission',
    ],
    tool: [
        'getClipBoard',
        'getExpTagTransList',
        'loadUrlOnNewPage',
        'openBrowser',
        'scanCode',
    ],
    ui: [
        'selectCity',
        'showBottomSheet',
        'showPicker',
    ],
    webview: [
        'clearClipBoard',
        'exitWebView',
        'getABTest',
        'getAppEnvironment',
        'getDeviceInfo',
        'hasInstalledApp',
        'hideNavigationBar',
        'popBack',
        'resetTopButtons',
        'setClipBoard',
        'setPageTitle',
        'setSlideBack',
        'setTopLeftBtn',
        'setTopLeftSecondBtn',
        'setTopRightBtn',
        'setTopRightSecondBtn',
        'submitData',
    ],
}).flatMap(([namespace, names]) => names.map(name => [
    `${namespace}.${name}`,
    `kwai.${name}`,
])));

export const invalidResultBridges = [
    'social.currentUserInfo',
    'post.draftRecommendPhotos',
    'post.draftRecommendPublishPhotos',
    'kwai.KSVerifyRealNameInfo',
    'kwai.verifyRealNameInfo',
    'component.aliyunVerifyRealNameInfo',
    'component.verifyRealNameInfo',
] as const;

export const multipleCallbacksBridges = [
    'component.download',
    'kwai.download',
    'kwai.downloadThirdPartyAPP',
    'kwai.startNFC',
    'kwaiAd.callAdBridge',
    'kwaiAd.callCardHandler',
    'pay.startHalfScreenRecharge',
    'post.postVideo',
    'post.reUploadShopVideo',
    'post.selectImage',
    'post.uploadShopVideo',
    'post.selectMixMediasAndUpload',
    'kwaiLive.subscribeChannel',
] as const;

export const multipleCallbacksBridgeSet = new Set<string>(multipleCallbacksBridges);

export const useCallbackBridgeSet = new Set<string>([...invalidResultBridges, ...multipleCallbacksBridges]);

export type UseCallbackBridge =
    | typeof invalidResultBridges[number]
    | typeof multipleCallbacksBridges[number];
