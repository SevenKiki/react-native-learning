import type { AddEventListenerParams, OffParams, OnParams, RemoveEventListenerParams } from '@yoda/bridge-types';
import { invoke } from './invoke';
import type { YodaEvents } from './types';

const legacyEventTypes = new Set([
    // page lifecycle
    'native_visible',
    'native_background',
    'native_foreground',

    // IOS only
    'native_will_leave',

    'native_leave',
    'native_reentry',

    // page load event
    'native_loadPage',
    'native_pageFinished',

    // login
    'native_userDidLogin',
    'native_userDidLogout',

    // network
    'native_networkChanged',

    // screenshot
    'native_screenshot_event',

    'native_web_view_display_mode_changed',
    'native_share_dialog_event',
    'native_shake',

    // dark mode
    'native_darkModeChange',

    /*
     * physical-back-button
     * Android only
     */
    'physical-back-button',
]);

export interface AddListenerOptions {
    data: unknown;
}

export const addListener = async <T extends keyof YodaEvents>(
    type: T,
    listener: (event: YodaEvents[T]) => void,
    options?: AddListenerOptions
): Promise<void> => {
    if (legacyEventTypes.has(type)) {
        await invoke('kwai.on', {
            type,
            handler: listener,
        } as OnParams);

        return;
    }

    await invoke('event.addEventListener', {
        /**
         * 1. 重构事件机制
         * 2. 重构摇一摇事件
         */
        type: typeof options?.data === 'undefined'
            ? type
            : {
                type,
                options: options.data,
            } as unknown as string,
        listener,
    } as AddEventListenerParams);
};

export const removeListener = async <T extends keyof YodaEvents>(
    type: T,
    listener?: ((event: YodaEvents[T]) => void) | undefined
): Promise<void> => {
    if (legacyEventTypes.has(type)) {
        await invoke('kwai.off', {
            type,
            handler: listener,
        } as OffParams);

        return;
    }

    await invoke('event.removeEventListener', {
        type,
        listener,
    } as RemoveEventListenerParams);
};
