import { bridgeToLegacyKwaiBridge } from './constants';
import { compareKwaiAppVersion, isAndroid, isIOS, isKwaiApp } from './utils';

import type { YodaBridges, InvocationConfig, InvocationParams } from './types';

export const transformConfig = <T extends keyof YodaBridges>(config: InvocationConfig<T>): InvocationConfig<T> => {
    const transformers: ((config: InvocationConfig<T>) => InvocationConfig<T>)[] = [];

    const setLegacyBridge = (bridgeToLegacyBridge: Partial<Record<string, string>>): void => {
        transformers.push(config => {
            const legacyBridge = bridgeToLegacyBridge[config.bridge];

            if (typeof legacyBridge === 'undefined') {
                return config;
            }

            return {
                ...config,
                bridge: legacyBridge,
            };
        });
    };

    const setDefaultParams = (bridgeToDefaultParams: Partial<Record<string, Record<string, unknown>>>): void => {
        transformers.push((config: InvocationConfig<T>) => {
            const defaultParams = bridgeToDefaultParams[config.bridge];

            if (typeof defaultParams === 'undefined') {
                return config;
            }

            const params = {
                ...defaultParams,
                ...config.params,
            } as InvocationParams<T>;

            return {
                ...config,
                params,
            } as InvocationConfig<T>;
        });
    };

    if (config.bridge === 'tool.checkAppInstalled') {
        setDefaultParams({
            [config.bridge]: { identifier: config.params[isAndroid ? 'android' : 'ios'] },
        });
    }

    if (isIOS && compareKwaiAppVersion('9.10.11') >= 0) {
        setLegacyBridge({
            'hybrid.getHybridStatus': 'webview.pageContentStatus',
            'hybrid.getAndUpdateHybridDetail': 'webview.pageContentInfo',
            'hybrid.preloadVideoList': 'media.pvList',
            'hybrid.isVideoFullyCached': 'media.vReady',
        });
    }

    if (isIOS && compareKwaiAppVersion('11.1.40') < 0) {
        setLegacyBridge({
            'advertise.startNeoAdVideo': 'kwai.startNeoAdVideo',
        });
    }

    if (isIOS && compareKwaiAppVersion('10.7.20') < 0) {
        setLegacyBridge({
            'merchant.getSidToken': 'kwai.getSidToken',
        });
    }

    if (isAndroid && compareKwaiAppVersion('10.6.50') < 0) {
        setLegacyBridge({
            'ui.setStatusBarStyle': 'kwai.setStatusBarStyle',
        });
    }

    if (compareKwaiAppVersion('10.4.30') < 0 || !isKwaiApp) {
        setLegacyBridge(bridgeToLegacyKwaiBridge);
    }

    if (isIOS && compareKwaiAppVersion('10.4.10') < 0) {
        setDefaultParams({
            'system.startVibrate': {
                strength: 'low',
                duration: 300,
            },
        });
    }

    if (compareKwaiAppVersion('10.3.20') < 0 || !isKwaiApp) {
        setLegacyBridge({
            'webview.exitCurrentWebView': `kwai.${isIOS ? 'exitCurrentWebview' : 'exitWebView'}`,
        });
    }

    if (compareKwaiAppVersion('9.6.20') < 0) {
        transformers.push(config => {
            const { bridge } = config;

            if (
                ![
                    'syncLocationWithPermissionCheck',
                    'getLocationWithPermissionCheck',
                    'requestLocationPermissionWithPermissionCheck',
                ].some(name => bridge.endsWith(name))
            ) {
                return config;
            }

            return {
                ...config,
                bridge: bridge.replace('WithPermissionCheck', ''),
            };
        });
    }

    return transformers.reduce((config, transformer) => transformer(config), config);
};
