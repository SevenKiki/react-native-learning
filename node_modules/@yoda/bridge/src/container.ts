import type { invoke } from './invoke';
import type { addListener, removeListener } from './event';

interface Container {
    invoke: typeof invoke;
    addListener: typeof addListener;
    removeListener: typeof removeListener;
}

let currentContainer: Container | null = null;

const assertsContainer: (container: Container | null) => asserts container is Container = container => {
    if (__DEV__) {
        if (!container) {
            throw new Error('[@yoda/bridge] This error is caused by a bug');
        }
    }
};

export const getContainer = () => {
    assertsContainer(currentContainer);

    return currentContainer;
};

export const setContainer = (container: Container) => {
    currentContainer = container;
};
