import { compareKwaiAppVersion, isAndroid } from './utils';
import * as bridge from './bridge';
import type { yodaT } from './type';
import { setYoda } from './instance';
import { invokeAndroid9920 } from './compatibility/invoke9920';
import { setContainer } from './container';
import { invoke } from './invoke';
import { addListener, removeListener } from './event';
import { addEventListener, removeEventListener } from './adapter/event';

/**
 * 删除 yoda 对象
 * 1. 事件分发移至 invoke
 * 2. 重构摇一摇事件
 * 3. 移除所有内部调用
 */
const yoda: yodaT = {
    bridge: (
        namespace: string,
        name: string,
        params: unknown,
        callback?: (data: any) => void,
        multiCallback = false,
    ): Promise<any> => {
        const callParams = {
            namespace,
            name,
            params,
            multiCallback,
            callback,
        };

        if (namespace === 'event') {
            if (name === 'addEventListener') {
                return addEventListener(params as any, callback);
            }

            if (name === 'removeEventListener') {
                return removeEventListener(params as any, callback);
            }
        }

        // 兼容 @wangzhaoqi 9920 调用一个不存在的bridge 无法回调问题
        if (compareKwaiAppVersion('9.9.20') === 0 && isAndroid) {
            return invokeAndroid9920(callParams);
        }

        return bridge.invoke(callParams);
    },
};

// 缓存yoda对象
setYoda(yoda);
setContainer({
    invoke,
    addListener,
    removeListener,
});

export { invoke, addListener, removeListener };
export { isBridgeError, type BridgeError, type BridgeErrorContext } from './bridge-error';
export { setGlobalConfig, type GlobalConfig } from './global-config';
export { version } from './version';
export * from './types';
