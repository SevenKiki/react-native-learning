import _createClass from '@babel/runtime/helpers/esm/createClass';
import _classCallCheck from '@babel/runtime/helpers/esm/classCallCheck';
import _typeof from '@babel/runtime/helpers/esm/typeof';
import _regeneratorRuntime from '@babel/runtime/helpers/esm/regeneratorRuntime';
import _asyncToGenerator from '@babel/runtime/helpers/esm/asyncToGenerator';
import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';
import _toConsumableArray from '@babel/runtime/helpers/esm/toConsumableArray';
import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';
import _slicedToArray from '@babel/runtime/helpers/esm/slicedToArray';
import _inherits from '@babel/runtime/helpers/esm/inherits';
import _createSuper from '@babel/runtime/helpers/esm/createSuper';
import _wrapNativeSuper from '@babel/runtime/helpers/esm/wrapNativeSuper';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';

var Deferred = /*#__PURE__*/_createClass(function Deferred() {
  var _this = this;
  _classCallCheck(this, Deferred);
  this.promise = new Promise(function (resolve, reject) {
    _this.resolve = resolve;
    _this.reject = reject;
  });
});

var hasOwnProperty = function () {
  /* eslint-disable-next-line @typescript-eslint/unbound-method */
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  return function (obj, key) {
    return hasOwnProperty.call(obj, key);
  };
}();
var isNonNullObject = function isNonNullObject(arg) {
  return _typeof(arg) === 'object' && arg !== null;
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
var isFunction = function isFunction(arg) {
  return typeof arg === 'function';
};
var delay = function delay(timeout) {
  return new Promise(function (resolve) {
    return setTimeout(resolve, timeout);
  });
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
var memoize = function memoize(func) {
  var resolver = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {
    return arguments.length <= 0 ? undefined : arguments[0];
  };
  var map = new Map();
  var weakMap = new WeakMap();
  return function () {
    var _store$get;
    var id = resolver.apply(void 0, arguments);
    var store = isNonNullObject(id) ? weakMap : map;
    var value = (_store$get = store.get(id)) !== null && _store$get !== void 0 ? _store$get : func.apply(void 0, arguments);
    if (!store.has(id)) {
      store.set(id, value);
    }
    return value;
  };
};

var compareVersion = function compareVersion(leftSemVer, rightSemVer) {
  if (!leftSemVer || !rightSemVer) {
    return Number.NaN;
  }
  var leftVersions = leftSemVer.split('.').map(function (version) {
    return +version;
  });
  var rightVersions = rightSemVer.split('.').map(function (version) {
    return +version;
  });
  for (var i = 0; i < Math.min(leftVersions.length, rightVersions.length); i += 1) {
    if (Number.isNaN(leftVersions[i]) || Number.isNaN(rightVersions[i])) {
      return Number.NaN;
    }
    if (leftVersions[i] !== rightVersions[i]) {
      return leftVersions[i] - rightVersions[i];
    }
  }
  return 0;
};
var getPlatformVersion = memoize(function (platform) {
  var _RegExp$exec$, _RegExp$exec;
  return (_RegExp$exec$ = (_RegExp$exec = new RegExp("(?:".concat(platform, ")\\/([\\d+.]+)")).exec(typeof navigator === 'undefined' ? '' : navigator.userAgent)) === null || _RegExp$exec === void 0 ? void 0 : _RegExp$exec[1]) !== null && _RegExp$exec$ !== void 0 ? _RegExp$exec$ : '';
});
var compareYodaVersion = function compareYodaVersion(version) {
  return compareVersion(getPlatformVersion('Yoda'), version);
};
var compareKwaiAppVersion = function compareKwaiAppVersion(version) {
  return compareVersion(getPlatformVersion('Kwai|ksNebula'), version);
};

var system = function () {
  if (typeof navigator === 'undefined') {
    return 'unknown';
  }
  var _navigator = navigator,
    userAgent = _navigator.userAgent,
    maxTouchPoints = _navigator.maxTouchPoints;
  if (/android/i.test(userAgent)) {
    return 'Android';
  }
  if (/iPhone|iPad|iPod/.test(userAgent) || userAgent.includes('Mac') && maxTouchPoints > 1) {
    return 'iOS';
  }
  return 'unknown';
}();
var isAndroid = system === 'Android';
var isIOS = system === 'iOS';
var isYoda = function isYoda() {
  var _window$__yodaBridge_;
  return typeof window !== 'undefined' && typeof ((_window$__yodaBridge_ = window.__yodaBridge__) === null || _window$__yodaBridge_ === void 0 ? void 0 : _window$__yodaBridge_.invoke) === 'function';
};
var isApp = function isApp(app) {
  return !!getPlatformVersion(app);
};
var isKwaiApp = isApp('Kwai|ksNebula');

var SafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991;
var overflow = false;
var _callbackId = 1;
var _instanceId = genInstanceId();
/**
 * Ios 客户端目前会将 callbackId 处理为 number
 * 需要尽可能的保证生成的 _instanceId 与其他页面不会重复 & 不会超出 Number.MAX_SAFE_INTEGER
 * 3位随机数 + 9位时间戳 + 4位自增 id
 */
function genInstanceId() {
  var safeIntegerStr = "".concat(SafeInteger);
  // 取 3 位随机数避免同一时刻出现重复 & 避免数字溢出
  var maxRandom = Number(safeIntegerStr.slice(0, 3)) - 100;
  var random = Math.floor(Math.random() * maxRandom);
  // 取 9 位时间戳，保证1周内不会重复
  var date = "".concat(Date.now());
  var dateStr = date.slice(date.length - 9);
  // 剩下的都作为自增 id
  var zero = new Array(safeIntegerStr.length - 12).fill(0).join('');
  return Number("".concat(random).concat(dateStr).concat(zero));
}
function genCallbackId(dicData) {
  var id = genNextId(dicData);
  /*
   * 如果生成的 id 溢出了，从头开始
   * 页面中应该不会有这么多的回调
   */
  if (id >= SafeInteger) {
    overflow = true;
    _callbackId = 1;
    // 重新生成 insId 尽量减少重复的概率
    _instanceId = genInstanceId();
    return genCallbackId();
  }
  return id;
}
function genNextId(dicData) {
  var callbackId = _instanceId + _callbackId++;
  // 溢出后需要判断是否已经存在对应的 id
  while (overflow || dicData && dicData[callbackId]) {
    callbackId = _instanceId + _callbackId++;
  }
  return callbackId;
}
function getUUId(dicData) {
  return genCallbackId(dicData);
}

/**
 * 节流
 * @param fn 对象函数
 * @param wait 节流时间
 */
/**
 * 防抖
 * @param func
 * @param timeout
 * @returns
 */
function debounce(func) {
  var _this = this;
  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;
  var timer = null;
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    clearTimeout(timer);
    timer = setTimeout(function () {
      func.apply(_this, args);
    }, timeout);
  };
}

var yodaInstance = null;
function setYoda(yoda) {
  yodaInstance = yoda;
}
function getYoda() {
  return yodaInstance;
}

function checkCanUse(_x, _x2) {
  return _checkCanUse.apply(this, arguments);
}
function _checkCanUse() {
  _checkCanUse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(namespace, name) {
    var yoda, checkReuslt;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            yoda = getYoda();
            _context.next = 3;
            return yoda.bridge('tool', 'canIUse', {
              namespace: namespace,
              name: name
            });
          case 3:
            checkReuslt = _context.sent;
            return _context.abrupt("return", checkReuslt.result == '1' && checkReuslt.canUse);
          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _checkCanUse.apply(this, arguments);
}

var markStr$1 = 'too_performance_';
/**
 * 获取内部调用performance传递id
 * @returns id 字符串
 */
function getPerformanceId() {
  return markStr$1 + getUUId();
}
/**
 * 判断是否是performance的id
 * @param idStr 当前掉用id
 * @returns
 */
function isPerformanceId(callbackId) {
  return callbackId.startsWith(markStr$1);
}

var markStr = 'event_';
/**
 * 获取内部调用Event传递id
 * @returns id 字符串
 */
function getEventId(dicData) {
  return markStr + getUUId(dicData);
}
/**
 * 获取纯数字的id
 * @param idStr event id 字符串
 * @returns 纯数字字符
 */
function getEventIdOnlyNumber(idStr) {
  return idStr.replace(markStr, '');
}
/**
 * 获取添加了事件前缀的id
 * @param idNumber number id
 * @returns 完整id
 */
function getEventIdByNumber(idNumber) {
  return markStr + String(idNumber);
}
/**
 * 判断是否是Event的id
 * @param idStr 当前掉用id
 * @returns
 */
function isEventId(callbackId) {
  return callbackId.startsWith(markStr);
}

/*
 * Release 1.0.3-alpha.4
 * 日志缓存池
 */
var logArrayPool = [];
/*
 * https://wiki.corp.kuaishou.com/pages/viewpage.action?pageId=152981099
 * Native 上报bridge文档 @张赛
 */
/*
 * 使用一帧的时间间隔作为最小上报区间(ms)
 * native 侧，考虑bridge 耗时，暂定1s
 */
var logSessionMinTime = 1000 * 1;
// 防抖最多次数
var maxTime = 30;
var switchEnum;
(function (switchEnum) {
  switchEnum[switchEnum["unload"] = 0] = "unload";
  switchEnum[switchEnum["open"] = 1] = "open";
  switchEnum[switchEnum["close"] = 2] = "close";
})(switchEnum || (switchEnum = {}));
var isLocalBridge = function isLocalBridge(logParams) {
  return (
    /*
     * 将原本控制getApiList只记录一次的逻辑移除
     * 默认 canIUse 、getApiList  都是本地api
     */
    ['canIUse', 'getApiList'].includes(logParams.name)
  );
};
var isSendLog = switchEnum.unload;
var getPageLoadDataPromise = null;
// 数据上报是否已经打开
var loggerSwitch = function loggerSwitch() {
  if (getPageLoadDataPromise) {
    return getPageLoadDataPromise;
  }
  var _Deferred = new Deferred(),
    promise = _Deferred.promise,
    resolve = _Deferred.resolve;
  getPageLoadDataPromise = promise;
  if (isSendLog == switchEnum.unload) {
    var _window$__yodaCommonD;
    // Window中有注入flag， 直接在window下读取
    if ((_window$__yodaCommonD = window.__yodaCommonDataObject__) !== null && _window$__yodaCommonD !== void 0 && _window$__yodaCommonD.sampleData) {
      var _window$__yodaCommonD2;
      if (typeof window.__yodaCommonDataObject__.sampleData === 'string') {
        try {
          window.__yodaCommonDataObject__.sampleData = JSON.parse(window.__yodaCommonDataObject__.sampleData);
        } catch (e) {
          window.__yodaCommonDataObject__.sampleData = {};
        }
      }
      isSendLog = (_window$__yodaCommonD2 = window.__yodaCommonDataObject__.sampleData) !== null && _window$__yodaCommonD2 !== void 0 && _window$__yodaCommonD2.bridgeHit ? switchEnum.open : switchEnum.close;
      resolve(isSendLog == switchEnum.open);
    } else {
      var yoda = getYoda();
      yoda.bridge('webview', 'getPageLoadData', {}, function (_ref) {
        var result = _ref.result,
          sampleData = _ref.sampleData;
        if (result == 1) {
          isSendLog = sampleData !== null && sampleData !== void 0 && sampleData.bridgeHit ? switchEnum.open : switchEnum.close;
        } else {
          isSendLog = switchEnum.close;
        }
        resolve(isSendLog == switchEnum.open);
      });
    }
  } else {
    resolve(isSendLog == switchEnum.open);
  }
  return getPageLoadDataPromise;
};
function sendLog() {
  window.__yodaBridge__.invoke('tool', 'sendPerformanceLog', JSON.stringify({
    data: logArrayPool
  }), getPerformanceId());
  logArrayPool.length = 0;
}
/**
 * 日志上报
 */
var _logger = debounce(function () {
  // Const yoda = this;
  sendLog();
}, logSessionMinTime);
var getLog = function getLog(logParams, dataNow, dateStr) {
  var _window$__yodaBridge_, _window$webkit, _window$webkit$messag, _window$webkit$messag2;
  var logData = {
    key: 'bridge',
    value: {},
    dimension: {
      api: logParams.name,
      namespace: logParams.namespace
    },
    event_client_timestamp: dataNow,
    event_trigger_source: 'H5',
    task_identifier: logParams.callbackId,
    is_task_event: true,
    task_status: '' // START 代表此为一系列事件的起点 END
  };

  switch (logParams.type) {
    case 'invoke':
      logData.value.h5_invoke_bridge_time = dataNow;
      logData.task_status = 'START';
      if (typeof ((_window$__yodaBridge_ = window.__yodaBridge__) === null || _window$__yodaBridge_ === void 0 ? void 0 : _window$__yodaBridge_.invoke) !== 'function' || typeof ((_window$webkit = window.webkit) === null || _window$webkit === void 0 ? void 0 : (_window$webkit$messag = _window$webkit.messageHandlers) === null || _window$webkit$messag === void 0 ? void 0 : (_window$webkit$messag2 = _window$webkit$messag.KMYYoda) === null || _window$webkit$messag2 === void 0 ? void 0 : _window$webkit$messag2.postMessage) !== 'function') {
        logData.result = 126002;
        logData.error_msg = '';
      }
      break;
    case 'callback':
      logData.value.h5_receive_callback_time = dataNow;
      logData.value.h5_invoke_bridge_time = dateStr;
      logData.dimension.result_type = logParams.resultCode;
      logData.dimension.result_type && (logData.dimension.result_type = logData.dimension.result_type.toString());
      logData.dimension.error_msg = logParams.errorMsg;
      logData.task_status = 'END';
      break;
    case 'event':
      logData.task_status = 'SUCCESS';
      delete logData.dimension.api;
      delete logData.dimension.namespace;
      logData.dimension.event = '';
      break;
  }
  return logData;
};
var logger = function logger(logParams, dateStr) {
  /*
   * 当前只在 >= 9.7.40 才会生效
   * if (compareVersion(appVersion, '9.7.40') > 0) return;
   */
  /*
   * 限制特定 bridge 和 前端 bridge 的阻止上报
   * getApiList  只上报一次
   * canIUse 不上报
   */
  if (isLocalBridge(logParams)) {
    return;
  }
  var nowDate = Date.now().toString();
  loggerSwitch().then(function (switchFlag) {
    if (!switchFlag) {
      return;
    }
    logArrayPool.push(getLog(logParams, nowDate, dateStr));
    // 防止出现大数据提交造成的crash,强制推送
    if (logArrayPool.length >= maxTime) {
      sendLog();
    } else {
      _logger();
    }
  });
  return nowDate;
};

function createSingleDeferred(cb) {
  var resolve = null;
  var promise = new Promise(function (r) {
    resolve = r;
  });
  if (cb) {
    promise = promise.then(cb, cb);
  }
  return {
    isMulti: false,
    resolve: resolve,
    promise: promise
  };
}
function createMultiDeferred(cb) {
  /*
   * 多次调用模式下，promise
   * 只是兼容当前调用方式
   * TODO 文档中需要特殊说明
   */
  var promise = new Promise(function () {});
  return {
    isMulti: true,
    resolve: cb,
    promise: promise
  };
}
var invokeMap = {};
var deferredInvoke = {
  pushMQ: function pushMQ() {
    var isMulti = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    var callBackFn = arguments.length > 1 ? arguments[1] : undefined;
    var isEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var id = isEvent ? getEventId() : getUUId(invokeMap);
    var deferred = isMulti ? createMultiDeferred(callBackFn) : createSingleDeferred(callBackFn);
    deferred.traceId = String(id);
    invokeMap[id] = deferred;
    return deferred;
  },
  removeMQ: function removeMQ(callbackId) {
    invokeMap[callbackId] = undefined;
  },
  create: function create(namespace, name) {
    var isMulti = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var callBackFn = arguments.length > 3 ? arguments[3] : undefined;
    var deferred = this.pushMQ(isMulti, callBackFn);
    deferred.namespace = namespace;
    deferred.name = name;
    // 创建
    var startTimeStr = logger({
      namespace: namespace,
      name: name,
      type: 'invoke',
      callbackId: deferred.traceId
    });
    invokeMap[deferred.traceId].startTime = startTimeStr;
    return {
      id: deferred.traceId,
      promise: deferred.promise
    };
  },
  resolve: function resolve(id, data) {
    if (isPerformanceId(id)) {
      return;
    }
    var deferred = invokeMap[id];
    if (!deferred) {
      /*
       * 创建
       * return console.warn('native callback error:', data);
       */
      return;
    }
    deferred.resolve(data);
    // 设置成为undefined保证不内存泄露，不用delete是防止回退字典模式
    if (!deferred.isMulti) {
      this.removeMQ(id);
    }
    if (isEventId(id)) {
      return;
    }
    // 发送回调成功日志
    logger({
      namespace: deferred.namespace,
      name: deferred.name,
      type: 'callback',
      callbackId: deferred.traceId,
      resultCode: data.result
    }, deferred.startTime);
  },
  reject: function reject(id, reason) {
    var deferred = invokeMap[id];
    if (!deferred) {
      /*
       * 若无对应调用，不做处理，稍后增加 log
       * return console.warn('native callback error:', reason);
       */
      return;
    }
    // 以异常信息回调正常业务也逻辑
    deferred.resolve(reason);
    // 设置成为undefined保证不内存泄露，不用delete是防止回退字典模式
    if (!deferred.isMulti) {
      this.removeMQ(id);
    }
    // 由于事件的回调result!=1,导致会使事件的回调会走到reject 中
    if (isEventId(id)) {
      return;
    }
    // 发送回调成功日志
    logger({
      namespace: deferred.namespace,
      name: deferred.name,
      type: 'callback',
      callbackId: deferred.traceId,
      resultCode: reason.result,
      errorMsg: reason.message
    }, deferred.startTime);
  }
};

// 针对 bridge 回调做了一些分类，后续如果有其他类型的 bridge 需要特殊处理再新增分类即可
var BRIDGE_TYPE = {
  noCallbackList: ['popBack', 'exitWebView'],
  onClickList: ['setPhysicalBackButton', 'setTopLeftBtn', 'setTopLeftSecondBtn', 'setTopRightBtn', 'setTopRightSecondBtn'],
  handlerList: ['on', 'off']
};
var NAMESPACE_2_GLOBALVAR = {
  kwai: 'Kwai',
  kwaiAd: 'KwaiAd',
  kwaiAdThird: 'KwaiAdThird',
  kwaiMerchant: 'KwaiMerchant',
  kwaiLive: 'KwaiLive',
  // 以防使用大写 namespace 进行调用，大写的映射关系也加上
  Kwai: 'Kwai',
  KwaiAd: 'KwaiAd',
  KwaiAdThird: 'KwaiAdThird',
  KwaiMerchant: 'KwaiMerchant',
  KwaiLive: 'KwaiLive'
};

var noCallbackList = BRIDGE_TYPE.noCallbackList,
  onClickList = BRIDGE_TYPE.onClickList,
  handlerList = BRIDGE_TYPE.handlerList;
/**
 *
 * 生成唯一的id
 * @export
 * @returns
 */
function generateUUID() {
  var rc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript/2117523#2117523
  var d = new Date().getTime();
  if (typeof performance !== 'undefined' && typeof performance.now === 'function') {
    d += performance.now(); // Use high-precision timer if available
  }

  var pattern = rc ? 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx' : 'xxxxxxxx_xxxx_4xxx_yxxx_xxxxxxxxxxxx';
  return pattern.replace(/[xy]/g, function (c) {
    var r = (d + Math.random() * 16) % 16 | 0;
    d = Math.floor(d / 16);
    return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
  });
}
/**
 *
 * 生成临时唯一的方法挂接到window上，给客户端回调用
 * @name generateUUCallbackFunction
 * @private
 * @param {function} callback 回调函数，客户端方法执行完后会执行该方法
 * @param {boolean} notDelete 是否删除当前回调，留在当前页面的内存中
 * @param {string} bridge 的命名空间和方法名，方便后续问题排查
 * @param {string} 回调方法对应的唯一ID
 * @returns
 */
function generateUUCallbackFunction(callback, notDelete, callbackName) {
  var callbackId = generateUUID(false);
  var name = "yoda_kuaishou_plugin_callback_".concat(callbackName, "_").concat(callbackId);
  window[name] = function (data) {
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) {
        console.warn(e); // eslint-disable-line
      }
    }

    if (isFunction(callback)) {
      callback.call(window, data);
    } else if (typeof callback === 'string' && isFunction(window[callback])) {
      window[callback].call(window, data);
    }
    if (!notDelete) {
      delete window[name];
    }
  };
  return name;
}
// 用于 showDialog 相关 api 中，将回调转化成接口需要的 URL
function transformFuncToURL(btn, callbackName) {
  var tmpBtn = btn;
  if (btn && Array.isArray(btn.actions)) {
    tmpBtn.actions = btn.actions.map(function (action) {
      if (action && action.url && isFunction(action.url)) {
        action.url = generateUUCallbackFunction(action.url, true, callbackName);
      }
      return action;
    });
  }
  return tmpBtn;
}
var handlerCbMap = {};
// 事件相关 api 中处理 handler
function generateHandlerFunction(callback, bridge) {
  var handlerName = '';
  var cb = null;
  Object.keys(handlerCbMap).some(function (cbName) {
    var handlerCb = handlerCbMap[cbName];
    if (handlerCb === callback) {
      cb = handlerCb;
      handlerName = cbName;
      return true;
    }
    return false;
  });
  // 当传递的 handler 回调之前已经挂载过，就不再重新挂载，重新生成 handler 回调名
  if (cb !== callback && callback) {
    var name = generateUUCallbackFunction(callback, true, bridge);
    handlerCbMap[name] = callback;
    handlerName = name;
  }
  return handlerName;
}
/**
 * Bridge 调用参数预处理，针对几类特定 bridge 进行处理
 * @name bridgeParamsHandler
 * @private
 * @param {string} namespace 命名空间
 * @param {string} bridge 桥名
 * @param {Object} 调用参数
 * @param {function} bridge 本身调用的回调
 */
function bridgeParamsHandler(namespace, bridgeName, params, invokeCallback) {
  var handledParams = _objectSpread({}, params);
  var callbackName = "".concat(namespace, "_").concat(bridgeName);
  /*
   * 特殊适配 Kwai 等命名空间下 bridge 回调的传递
   * 回调为 onClick 形式的
   */
  if (onClickList.includes(bridgeName)) {
    handledParams.onClick = generateUUCallbackFunction(handledParams.onClick, true, callbackName);
    // 不允许传递任何参数给 native 的
  } else if (noCallbackList.includes(bridgeName)) {
    handledParams = null;
    // 事件类传 handler 的
  } else if (handlerList.includes(bridgeName)) {
    var callbackUUid = generateUUCallbackFunction(invokeCallback, false, callbackName);
    // 调用 off 桥不传 handler 时，则不能传再对其进行处理
    if (handledParams.handler && isFunction(handledParams.handler)) {
      handledParams.handler = generateHandlerFunction(handledParams.handler, callbackName);
    }
    handledParams.callback = callbackUUid;
    // ShowDialog
  } else if (bridgeName === 'showDialog') {
    var _handledParams = handledParams,
      positiveButton = _handledParams.positiveButton,
      negativeButton = _handledParams.negativeButton,
      neutralButton = _handledParams.neutralButton;
    if (positiveButton) {
      handledParams.positiveButton = transformFuncToURL(positiveButton, callbackName);
    }
    if (negativeButton) {
      handledParams.negativeButton = transformFuncToURL(negativeButton, callbackName);
    }
    if (neutralButton) {
      handledParams.neutralButton = transformFuncToURL(neutralButton, callbackName);
    }
    // 其他默认都是通过 callback 传给 native
  } else if (Object.keys(NAMESPACE_2_GLOBALVAR).includes(namespace)) {
    var _callbackUUid = generateUUCallbackFunction(invokeCallback, true, callbackName);
    handledParams.callback = handledParams.callback || _callbackUUid;
  }
  return handledParams;
}

var getMultiInstanceError = function getMultiInstanceError() {
  return new Error('当前环境存在 Yoda 多实例问题，详细请参考 https://docs.corp.kuaishou.com/k/home/VbQx2ulc6v3M/fcADLOKqHyHpSr7hiCKKQVtVM');
};
var setupMultiInstanceGuard = function setupMultiInstanceGuard() {
  var _window = window,
    __yodaBridgeCallback__ = _window.__yodaBridgeCallback__;
  if (typeof __yodaBridgeCallback__ === 'function') {
    throw getMultiInstanceError();
  }
  Object.defineProperty(window, '__yodaBridgeCallback__', {
    get: function get() {
      return __yodaBridgeCallback__;
    },
    set: function set(value) {
      if (__yodaBridgeCallback__) {
        throw getMultiInstanceError();
      }
      __yodaBridgeCallback__ = value;
    }
  });
};

var currentMode = 'production';
var getCurrentMode = function getCurrentMode() {
  return currentMode;
};
var setCurrentMode = function setCurrentMode(mode) {
  currentMode = mode;
};

var loggerMethods = ['debug', 'info', 'log', 'warn', 'error'];
var createLogger = function createLogger(implFor) {
  return Object.fromEntries(loggerMethods.map(function (method) {
    return [method, implFor(method)];
  }));
};
var print = function print(context, method) {
  var _console;
  if (getCurrentMode() === 'production') {
    return;
  }
  // eslint-disable-next-line no-console
  for (var _len = arguments.length, data = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    data[_key - 2] = arguments[_key];
  }
  (_console = console)[method].apply(_console, ["[".concat(context, "]")].concat(data));
};

var console$1 = createLogger(function (method) {
  return function () {
    for (var _len = arguments.length, data = new Array(_len), _key = 0; _key < _len; _key++) {
      data[_key] = arguments[_key];
    }
    return print.apply(void 0, ['@yoda/bridge', method].concat(data));
  };
});

var invoke$1 = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(invokeConfig) {
    var _bridgeParamsHandler;
    var namespace, name, params, multiCallback, callback, ns, _deferredInvoke$creat, id, promise, originalNamespace, _invokeCallback;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            namespace = invokeConfig.namespace, name = invokeConfig.name, params = invokeConfig.params, multiCallback = invokeConfig.multiCallback, callback = invokeConfig.callback;
            ns = NAMESPACE_2_GLOBALVAR[namespace];
            _deferredInvoke$creat = deferredInvoke.create(namespace, name, multiCallback, callback), id = _deferredInvoke$creat.id, promise = _deferredInvoke$creat.promise; // TODO 确定逻辑后处理 临时添加 活动 namespace
            // if (ns || addCbParamsBridges.includes(name) || namespace == 'sf2022') {
            // 实际调用前需要将 register 中改写的 namespace 改回来
            originalNamespace = ns || namespace;
            _invokeCallback = function _invokeCallback(res) {
              invokeCallback(id, res);
            };
            invokeConfig.namespace = originalNamespace === 'Kwai' && typeof navigator !== 'undefined' && navigator.userAgent.includes('livemate/') ? 'livemate' : originalNamespace;
            // 参数预处理
            invokeConfig.params = (_bridgeParamsHandler = bridgeParamsHandler(originalNamespace, name, params, _invokeCallback)) !== null && _bridgeParamsHandler !== void 0 ? _bridgeParamsHandler : {};
            /*
             * 比较版本号
             * 7730 以上版本不需要做兼容处理
             * 兼容方式注册的桥，双端只关注 params.callback，yoda 方式注册的桥只关注 invoke callbackId
             * if (appVersion && compareVersion(appVersion, '7.7.30') < 0) {
             * 在 js-sdk 层将桥调用的回调方法转到 params 后，需要将 callbackId 重置下
             * 主要处理部分只回调一次的桥（回调执行一次后会被 delete），如果 params.callback 和 invokeCallback 指向一个回调
             * 可能会导致 params.callback 还未执行，回调已被 delete
             * 临时回调函数只在这个地方有声明，原sdk、plugin 并未 指定该 callback
             * const tmpCbKey = '__yoda_kuaishou_plugin_tmp_cb__';
             * yoda._callbacks[tmpCbKey] = yoda._callbacks[tmpCbKey] || noop;
             * invokeConfig.callbackId = tmpCbKey;
             * 需要额外挂到 window 上是因为 iOS 可能会去 window 上找该回调
             *     window.__yoda_kuaishou_plugin_tmp_cb__ = noop;
             * }
             */
            // }
            console$1.info("Invoking '".concat(invokeConfig.namespace, ".").concat(invokeConfig.name, "'"), invokeConfig.params);
            if (!(isIOS && !window.webkit && compareYodaVersion('2.10.9.2') < 0)) {
              _context.next = 10;
              break;
            }
            return _context.abrupt("return", promise);
          case 10:
            window.__yodaBridge__.invoke(invokeConfig.namespace, invokeConfig.name, JSON.stringify(invokeConfig.params), String(id));
            return _context.abrupt("return", promise);
          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return function invoke(_x) {
    return _ref.apply(this, arguments);
  };
}();
var invokeCallback = function invokeCallback(id, res) {
  if (isIOS && compareYodaVersion('2.3.7') < 0) {
    // 以前 Yoda iOS 回调时插值表达式写错了，导致这里的 id 类型是 number
    // eslint-disable-next-line no-param-reassign
    id = "".concat(id);
  }
  var data = typeof res === 'string' ? JSON.parse(res) : res;
  if ((data === null || data === void 0 ? void 0 : data.result) === 1) {
    deferredInvoke.resolve(id, data);
  } else {
    deferredInvoke.reject(id, data);
  }
};
if (typeof window !== 'undefined') {
  // 开启守卫
  setupMultiInstanceGuard();
  // 挂载接收 native 回调事件
  window.__yodaBridgeCallback__ = invokeCallback;
}

var apiSet = new Set();
var invokeAndroid9920 = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(callData) {
    var _NAMESPACE_2_GLOBALVA;
    var namespace, name, params, multiCallback, callback, apiListRes, canUse;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            namespace = callData.namespace, name = callData.name, params = callData.params, multiCallback = callData.multiCallback, callback = callData.callback;
            if (apiSet.size) {
              _context.next = 6;
              break;
            }
            _context.next = 4;
            return invoke$1({
              namespace: 'tool',
              name: 'getApiList',
              params: {}
            });
          case 4:
            apiListRes = _context.sent;
            if (apiListRes.result === 1 && Array.isArray(apiListRes.apiList)) {
              apiListRes.apiList.forEach(function (_ref2) {
                var namespace = _ref2.namespace,
                  name = _ref2.name;
                return apiSet.add("".concat(namespace, ".").concat(name));
              });
            }
          case 6:
            canUse = apiSet.has("".concat((_NAMESPACE_2_GLOBALVA = NAMESPACE_2_GLOBALVAR[namespace]) !== null && _NAMESPACE_2_GLOBALVA !== void 0 ? _NAMESPACE_2_GLOBALVA : namespace, ".").concat(name));
            return _context.abrupt("return", new Promise(function (resolve) {
              if (canUse) {
                void invoke$1({
                  namespace: namespace,
                  name: name,
                  params: params,
                  multiCallback: multiCallback,
                  callback: callback
                }).then(resolve);
              } else {
                var result404 = {
                  result: 125004
                };
                callback === null || callback === void 0 ? void 0 : callback(result404);
                resolve(result404);
              }
            }));
          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return function invokeAndroid9920(_x) {
    return _ref.apply(this, arguments);
  };
}();

var currentContainer = null;
var assertsContainer = function assertsContainer(container) {
  if (process.env.NODE_ENV !== "production") {
    if (!container) {
      throw new Error('[@yoda/bridge] This error is caused by a bug');
    }
  }
};
var getContainer = function getContainer() {
  assertsContainer(currentContainer);
  return currentContainer;
};
var setContainer = function setContainer(container) {
  currentContainer = container;
};

var getContext = function getContext(_ref) {
  var initialBridge = _ref.initialBridge,
    initialParams = _ref.initialParams;
  return {
    bridge: initialBridge,
    params: initialParams
  };
};
var BridgeError = /*#__PURE__*/function (_Error) {
  _inherits(BridgeError, _Error);
  var _super = _createSuper(BridgeError);
  function BridgeError(message, code, config) {
    var _this;
    _classCallCheck(this, BridgeError);
    _this = _super.call(this, message);
    _this.name = 'BridgeError';
    _this.message = message;
    _this.code = code;
    _this.context = getContext(config);
    return _this;
  }
  _createClass(BridgeError, [{
    key: "toJSON",
    value: function toJSON() {
      return {
        name: this.name,
        message: this.message,
        code: this.code,
        context: this.context
      };
    }
  }]);
  return BridgeError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
var isBridgeError = function isBridgeError(err) {
  return err instanceof BridgeError;
};

var _excluded$1 = ["useLastLocationWhileLimited"],
  _excluded2 = ["biz", "force", "statKey", "alertScene", "updateLocationScene"];
var getLocation = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {
    var _ref$useLastLocationW, useLastLocationWhileLimited, params, _getContainer, invoke, biz_type, force, restParams, forced_permission_request, legacyParams, _yield$invoke, _yield$invoke$data, _longitude, _latitude, _yield$invoke2, _yield$invoke2$data, longitude, latitude, _params$updateLocatio, _updateLocationScene, _yield$invoke3, _longitude2, _latitude2, _yield$invoke4, _longitude3, _latitude3;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _ref$useLastLocationW = _ref.useLastLocationWhileLimited, useLastLocationWhileLimited = _ref$useLastLocationW === void 0 ? false : _ref$useLastLocationW, params = _objectWithoutProperties(_ref, _excluded$1);
            _getContainer = getContainer(), invoke = _getContainer.invoke;
            if (!(compareKwaiAppVersion('10.1.30') < 0)) {
              _context.next = 27;
              break;
            }
            // eslint-disable-next-line camelcase
            biz_type = params.biz, force = params.force, params.statKey, params.alertScene, params.updateLocationScene, restParams = _objectWithoutProperties(params, _excluded2); // eslint-disable-next-line camelcase
            forced_permission_request = function () {
              if (typeof force === 'undefined') {
                return 2;
              }
              return force ? 1 : 3;
            }();
            legacyParams = _objectSpread(_objectSpread({}, restParams), {}, {
              // eslint-disable-next-line camelcase
              biz_type: biz_type,
              // eslint-disable-next-line camelcase
              forced_permission_request: forced_permission_request
            });
            _context.prev = 6;
            _context.next = 9;
            return invoke('kwai.syncLocationWithPermissionCheck', _objectSpread(_objectSpread({}, legacyParams), {}, {
              // eslint-disable-next-line camelcase
              forced_permission_request: 3
            }));
          case 9:
            _yield$invoke = _context.sent;
            _yield$invoke$data = _yield$invoke.data;
            _longitude = _yield$invoke$data.longitude;
            _latitude = _yield$invoke$data.latitude;
            return _context.abrupt("return", {
              longitude: _longitude,
              latitude: _latitude
            });
          case 16:
            _context.prev = 16;
            _context.t0 = _context["catch"](6);
          case 18:
            _context.next = 20;
            return invoke('kwai.requestLocationPermissionWithPermissionCheck', legacyParams);
          case 20:
            _context.next = 22;
            return invoke('kwai.syncLocationWithPermissionCheck', legacyParams);
          case 22:
            _yield$invoke2 = _context.sent;
            _yield$invoke2$data = _yield$invoke2.data;
            longitude = _yield$invoke2$data.longitude;
            latitude = _yield$invoke2$data.latitude;
            return _context.abrupt("return", {
              longitude: longitude,
              latitude: latitude
            });
          case 27:
            if (isAndroid && compareKwaiAppVersion('10.3.30') < 0) {
              _params$updateLocatio = params.updateLocationScene, _updateLocationScene = _params$updateLocatio === void 0 ? '' : _params$updateLocatio;
              Object.assign(params, {
                useInterval: !_updateLocationScene
              });
            }
            _context.prev = 28;
            _context.next = 31;
            return invoke('system.requestLocation', params);
          case 31:
            _yield$invoke3 = _context.sent;
            _longitude2 = _yield$invoke3.longitude;
            _latitude2 = _yield$invoke3.latitude;
            return _context.abrupt("return", {
              longitude: _longitude2,
              latitude: _latitude2
            });
          case 37:
            _context.prev = 37;
            _context.t1 = _context["catch"](28);
            if (isBridgeError(_context.t1)) {
              _context.next = 41;
              break;
            }
            throw _context.t1;
          case 41:
            if (!(_context.t1.code === 10014 && useLastLocationWhileLimited)) {
              _context.next = 49;
              break;
            }
            _context.next = 44;
            return invoke('system.getLocationCityInfo', {
              biz: params.biz
            });
          case 44:
            _yield$invoke4 = _context.sent;
            _longitude3 = _yield$invoke4.longitude;
            _latitude3 = _yield$invoke4.latitude;
            if (!(typeof _longitude3 === 'number' && typeof _latitude3 === 'number')) {
              _context.next = 49;
              break;
            }
            return _context.abrupt("return", {
              longitude: _longitude3,
              latitude: _latitude3
            });
          case 49:
            throw _context.t1;
          case 50:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[6, 16], [28, 37]]);
  }));
  return function getLocation(_x) {
    return _ref2.apply(this, arguments);
  };
}();

var apis = {
  getLocation: getLocation
};

var bridgeToLegacyKwaiBridge = Object.fromEntries(Object.entries({
  advertise: ['startFansTopLivePlay', 'startNeoAdVideo'],
  feed: ['authorizationStatusForCalendar', 'changeEventForCalendar', 'closeChildLock', 'getAddressBookAccessStatus', 'getCoronaTvChasingData', 'getFeed', 'openDetailPage', 'openFansGroup', 'setSettingEntryForCourse', 'startPlayLongVideo', 'updateDeviceBit', 'updateUserRecoBit', 'updateWeatherInfo', 'userIncentivesUpdateTasks'],
  game: ['addShortcutToDesktop', 'appointGame', 'changeAppointStatus', 'gameSendLog', 'gameTaskSelectImage', 'getAppointStatus', 'getWebViewDisplayType', 'kgPageDidShowed', 'openNativeGamecenter'],
  growth: ['getDeviceSecretInfo', 'unionPhoneNumber'],
  im: ['setEnableIMTip'],
  live: ['deleteSubscribe', 'liveReservationNotification', 'openLiveQuizLive', 'showSubscribeEditDialog', 'showSubscribeSelectPhotoDialog', 'subscribeLive', 'unsubscribeLive'],
  merchant: ['closeLiveMerchantFloatingWindow', 'getLatestImage', 'getSidToken', 'loadUrlOnNewMerchantPage', 'merchantSetPhotoPlayStatus', 'onItemSelected', 'popupToFollow', 'querySessionIsStickyOnTop', 'reqSessionStickyOnTopWithThread', 'requestLocationAuthorization'],
  minigame: ['publishSogameVideo'],
  pay: ['authThirdPartyAccount', 'bindWithdrawType', 'couponPay', 'hasImportSdk', 'nebulaStartGatewayWithdraw', 'openKspayWebView', 'sfBindWithdrawType', 'startDeposit', 'startGatewayPay', 'startGatewayWithdraw', 'startHalfScreenRecharge', 'startKspayOrderPrepay'],
  platform: ['getDarkMode', 'openWechatMiniProgram', 'sendSMS', 'startFaceRecognition'],
  post: ['cancelJsInjectUpload', 'captureCertVideo', 'deleteCacheVideoByPhotoId', 'editAtlas', 'editDraft', 'editSmartAlbum', 'getEditDraftData', 'getSmartAlbumData', 'getVideoUploadStatus', 'intownShare', 'postAtlas', 'postVideo', 'preloadMagicFace', 'previewVideo', 'reUploadShopVideo', 'reeditPhoto', 'resumeVideoUpload', 'retryJsInjectUpload', 'saveImage', 'saveTempImages', 'selectAndUploadMedia', 'selectImage', 'selectMixMediasAndUpload', 'selectVideoAndUpload', 'startAudioRecord', 'uploadCertVideo', 'uploadShopVideo', 'uploadVideoFromAlbum', 'verifyLiveUser'],
  social: ['addTokenBlockShareId', 'bindPhone', 'bindRiskPreCheck', 'decryptContactsName', 'enterGroupChat', 'followUser', 'joinGroup', 'login', 'logout', 'mobileQuickAuthInfo', 'mobileQuickLoginInfo', 'needUpdateProfile', 'requestFollowUserV2', 'selectCountryPhoneCode', 'sendIMMessage', 'sendImFriendMessage', 'setPageFollowRefer', 'setShareTokenToClipBoard', 'share', 'startAuthActivity', 'verifyAccount', 'verifySMSCode', 'verifyThirdPartyLogin', 'wechatLogin'],
  system: ['collapseKeyboard', 'getPushPermission', 'getServerTime', 'gete2', 'openPushPermission'],
  tool: ['getClipBoard', 'getExpTagTransList', 'loadUrlOnNewPage', 'openBrowser', 'scanCode'],
  ui: ['selectCity', 'showBottomSheet', 'showPicker'],
  webview: ['clearClipBoard', 'exitWebView', 'getABTest', 'getAppEnvironment', 'getDeviceInfo', 'hasInstalledApp', 'hideNavigationBar', 'popBack', 'resetTopButtons', 'setClipBoard', 'setPageTitle', 'setSlideBack', 'setTopLeftBtn', 'setTopLeftSecondBtn', 'setTopRightBtn', 'setTopRightSecondBtn', 'submitData']
}).flatMap(function (_ref) {
  var _ref2 = _slicedToArray(_ref, 2),
    namespace = _ref2[0],
    names = _ref2[1];
  return names.map(function (name) {
    return ["".concat(namespace, ".").concat(name), "kwai.".concat(name)];
  });
}));
var invalidResultBridges = ['social.currentUserInfo', 'post.draftRecommendPhotos', 'post.draftRecommendPublishPhotos', 'kwai.KSVerifyRealNameInfo', 'kwai.verifyRealNameInfo', 'component.aliyunVerifyRealNameInfo', 'component.verifyRealNameInfo'];
var multipleCallbacksBridges = ['component.download', 'kwai.download', 'kwai.downloadThirdPartyAPP', 'kwai.startNFC', 'kwaiAd.callAdBridge', 'kwaiAd.callCardHandler', 'pay.startHalfScreenRecharge', 'post.postVideo', 'post.reUploadShopVideo', 'post.selectImage', 'post.uploadShopVideo', 'post.selectMixMediasAndUpload', 'kwaiLive.subscribeChannel'];
var multipleCallbacksBridgeSet = new Set(multipleCallbacksBridges);
var useCallbackBridgeSet = new Set([].concat(invalidResultBridges, multipleCallbacksBridges));

var version = "2.0.7";

var globalConfig = {
  get mode() {
    return getCurrentMode();
  },
  set mode(mode) {
    setCurrentMode(mode);
    console$1.info("You're currently running version ".concat(version, " in ").concat(mode, " mode."));
  }
};
var setGlobalConfig = function setGlobalConfig(nextGlobalConfig) {
  Object.assign(globalConfig, nextGlobalConfig);
};

var transformConfig = function transformConfig(config) {
  var transformers = [];
  var setLegacyBridge = function setLegacyBridge(bridgeToLegacyBridge) {
    transformers.push(function (config) {
      var legacyBridge = bridgeToLegacyBridge[config.bridge];
      if (typeof legacyBridge === 'undefined') {
        return config;
      }
      return _objectSpread(_objectSpread({}, config), {}, {
        bridge: legacyBridge
      });
    });
  };
  var setDefaultParams = function setDefaultParams(bridgeToDefaultParams) {
    transformers.push(function (config) {
      var defaultParams = bridgeToDefaultParams[config.bridge];
      if (typeof defaultParams === 'undefined') {
        return config;
      }
      var params = _objectSpread(_objectSpread({}, defaultParams), config.params);
      return _objectSpread(_objectSpread({}, config), {}, {
        params: params
      });
    });
  };
  if (config.bridge === 'tool.checkAppInstalled') {
    setDefaultParams(_defineProperty({}, config.bridge, {
      identifier: config.params[isAndroid ? 'android' : 'ios']
    }));
  }
  if (isIOS && compareKwaiAppVersion('9.10.11') >= 0) {
    setLegacyBridge({
      'hybrid.getHybridStatus': 'webview.pageContentStatus',
      'hybrid.getAndUpdateHybridDetail': 'webview.pageContentInfo',
      'hybrid.preloadVideoList': 'media.pvList',
      'hybrid.isVideoFullyCached': 'media.vReady'
    });
  }
  if (isIOS && compareKwaiAppVersion('11.1.40') < 0) {
    setLegacyBridge({
      'advertise.startNeoAdVideo': 'kwai.startNeoAdVideo'
    });
  }
  if (isIOS && compareKwaiAppVersion('10.7.20') < 0) {
    setLegacyBridge({
      'merchant.getSidToken': 'kwai.getSidToken'
    });
  }
  if (isAndroid && compareKwaiAppVersion('10.6.50') < 0) {
    setLegacyBridge({
      'ui.setStatusBarStyle': 'kwai.setStatusBarStyle'
    });
  }
  if (compareKwaiAppVersion('10.4.30') < 0 || !isKwaiApp) {
    setLegacyBridge(bridgeToLegacyKwaiBridge);
  }
  if (isIOS && compareKwaiAppVersion('10.4.10') < 0) {
    setDefaultParams({
      'system.startVibrate': {
        strength: 'low',
        duration: 300
      }
    });
  }
  if (compareKwaiAppVersion('10.3.20') < 0 || !isKwaiApp) {
    setLegacyBridge({
      'webview.exitCurrentWebView': "kwai.".concat(isIOS ? 'exitCurrentWebview' : 'exitWebView')
    });
  }
  if (compareKwaiAppVersion('9.6.20') < 0) {
    transformers.push(function (config) {
      var bridge = config.bridge;
      if (!['syncLocationWithPermissionCheck', 'getLocationWithPermissionCheck', 'requestLocationPermissionWithPermissionCheck'].some(function (name) {
        return bridge.endsWith(name);
      })) {
        return config;
      }
      return _objectSpread(_objectSpread({}, config), {}, {
        bridge: bridge.replace('WithPermissionCheck', '')
      });
    });
  }
  return transformers.reduce(function (config, transformer) {
    return transformer(config);
  }, config);
};

var _excluded = ["result"];
var getInvocationConfig = function getInvocationConfig(args) {
  var _args = _slicedToArray(args, 3),
    bridge = _args[0],
    _args$ = _args[1],
    params = _args$ === void 0 ? {} : _args$,
    optionsOrCallback = _args[2];
  var _ref = typeof optionsOrCallback === 'function' ? [{}, optionsOrCallback] : [optionsOrCallback !== null && optionsOrCallback !== void 0 ? optionsOrCallback : {}],
    _ref2 = _slicedToArray(_ref, 2),
    options = _ref2[0],
    callback = _ref2[1];
  return {
    initialBridge: bridge,
    initialParams: params,
    bridge: bridge,
    params: params,
    options: options,
    callback: callback
  };
};
var getLegacyErrorMessage = function getLegacyErrorMessage(response) {
  return hasOwnProperty(response, 'error_msg') && typeof response.error_msg === 'string' ? response.error_msg : '';
};
var isIntrinsicAPI = function isIntrinsicAPI(config) {
  return config.bridge.startsWith('yoda.');
};
var invokeAPI = function invokeAPI(config) {
  var bridge = config.bridge,
    params = config.params;
  var _bridge$split = bridge.split('.'),
    _bridge$split2 = _slicedToArray(_bridge$split, 2),
    name = _bridge$split2[1];
  var api = apis[name];
  return api(params);
};
var invokeBridge = function invokeBridge(config) {
  var yoda = getYoda();
  var initialBridge = config.initialBridge,
    bridge = config.bridge,
    params = config.params,
    callback = config.callback;
  var _bridge$split3 = bridge.split('.'),
    _bridge$split4 = _slicedToArray(_bridge$split3, 2),
    namespace = _bridge$split4[0],
    name = _bridge$split4[1];
  if (useCallbackBridgeSet.has(initialBridge)) {
    void yoda.bridge(namespace, name, params, function (response) {
      console$1.info("Received a response from '".concat(bridge, "'"), response);
      callback === null || callback === void 0 ? void 0 : callback(response);
    }, multipleCallbacksBridgeSet.has(initialBridge));
    return Promise.resolve();
  }
  return new Promise(function (resolve, reject) {
    void yoda.bridge(namespace, name, params, function (response) {
      var _globalConfig$errorHa;
      console$1.info("Received a response from '".concat(bridge, "'"), response);
      if (response.result === 1) {
        response.result;
          var data = _objectWithoutProperties(response, _excluded);
        resolve(data);
        return;
      }
      var _response$message = response.message,
        message = _response$message === void 0 ? getLegacyErrorMessage(response) : _response$message;
      var bridgeError = new BridgeError(message, response.result, config);
      (_globalConfig$errorHa = globalConfig.errorHandler) === null || _globalConfig$errorHa === void 0 ? void 0 : _globalConfig$errorHa.call(globalConfig, bridgeError);
      reject(bridgeError);
    });
  });
};
var invoke = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var _globalConfig$timeout,
      _len,
      args,
      _key,
      initialConfig,
      config,
      _config$options$timeo,
      timeout,
      baseInvoking,
      data,
      _globalConfig$errorHa2,
      _args2 = arguments;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            for (_len = _args2.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = _args2[_key];
            }
            initialConfig = getInvocationConfig(args);
            if (isYoda()) {
              _context.next = 5;
              break;
            }
            throw new BridgeError(['Cannot invoke bridge'].concat(_toConsumableArray(process.env.NODE_ENV === 'production' ? [] : ["'".concat(initialConfig.bridge, "'")]), ['in non-Yoda environment.']).join(' '), 125014, initialConfig);
          case 5:
            config = transformConfig(initialConfig);
            _config$options$timeo = config.options.timeout, timeout = _config$options$timeo === void 0 ? (_globalConfig$timeout = globalConfig.timeout) !== null && _globalConfig$timeout !== void 0 ? _globalConfig$timeout : 0 : _config$options$timeo;
            baseInvoking = isIntrinsicAPI(config) ? invokeAPI(config) : invokeBridge(config);
            if (!(timeout > 0 && Number.isFinite(timeout))) {
              _context.next = 14;
              break;
            }
            _context.next = 11;
            return Promise.race([baseInvoking, delay(timeout).then(function () {
              return Promise.reject(new BridgeError('Bridge invocation timed out.', 125010, config));
            })]);
          case 11:
            _context.t0 = _context.sent;
            _context.next = 17;
            break;
          case 14:
            _context.next = 16;
            return baseInvoking;
          case 16:
            _context.t0 = _context.sent;
          case 17:
            data = _context.t0;
            return _context.abrupt("return", data);
          case 21:
            _context.prev = 21;
            _context.t1 = _context["catch"](0);
            if (isBridgeError(_context.t1)) {
              (_globalConfig$errorHa2 = globalConfig.errorHandler) === null || _globalConfig$errorHa2 === void 0 ? void 0 : _globalConfig$errorHa2.call(globalConfig, _context.t1);
            }
            throw _context.t1;
          case 25:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 21]]);
  }));
  return function invoke() {
    return _ref3.apply(this, arguments);
  };
}();

var legacyEventTypes = new Set([
// page lifecycle
'native_visible', 'native_background', 'native_foreground',
// IOS only
'native_will_leave', 'native_leave', 'native_reentry',
// page load event
'native_loadPage', 'native_pageFinished',
// login
'native_userDidLogin', 'native_userDidLogout',
// network
'native_networkChanged',
// screenshot
'native_screenshot_event', 'native_web_view_display_mode_changed', 'native_share_dialog_event', 'native_shake',
// dark mode
'native_darkModeChange',
/*
 * physical-back-button
 * Android only
 */
'physical-back-button']);
var addListener$1 = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(type, listener, options) {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!legacyEventTypes.has(type)) {
              _context.next = 4;
              break;
            }
            _context.next = 3;
            return invoke('kwai.on', {
              type: type,
              handler: listener
            });
          case 3:
            return _context.abrupt("return");
          case 4:
            _context.next = 6;
            return invoke('event.addEventListener', {
              /**
               * 1. 重构事件机制
               * 2. 重构摇一摇事件
               */
              type: typeof (options === null || options === void 0 ? void 0 : options.data) === 'undefined' ? type : {
                type: type,
                options: options.data
              },
              listener: listener
            });
          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return function addListener(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
var removeListener$1 = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(type, listener) {
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!legacyEventTypes.has(type)) {
              _context2.next = 4;
              break;
            }
            _context2.next = 3;
            return invoke('kwai.off', {
              type: type,
              handler: listener
            });
          case 3:
            return _context2.abrupt("return");
          case 4:
            _context2.next = 6;
            return invoke('event.removeEventListener', {
              type: type,
              listener: listener
            });
          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return function removeListener(_x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();

var eventMQ = {};
function addListener(typeStr, listener, callbackId) {
  var targetTypeListener = eventMQ[typeStr] || {
    callbackId: callbackId,
    eventRecord: {}
  };
  var id = getUUId();
  listener.__yodaCallbackId__[typeStr] = String(id);
  targetTypeListener.eventRecord[id] = listener;
  eventMQ[typeStr] = targetTypeListener;
}
function createCb(type) {
  return function (ret) {
    var targetTypeListener = eventMQ[type];
    Object.keys((targetTypeListener === null || targetTypeListener === void 0 ? void 0 : targetTypeListener.eventRecord) || {}).forEach(function (key) {
      return targetTypeListener.eventRecord[Number(key)](JSON.parse(JSON.stringify(ret)));
    });
  };
}
function getCallbackIdByType(type) {
  var targetTypeListener = eventMQ[type];
  return getEventIdByNumber(targetTypeListener.callbackId);
}
function removeListener(typeStr, listener) {
  var targetTypeListener = eventMQ[typeStr];
  var callbackId = listener.__yodaCallbackId__[typeStr];
  delete targetTypeListener.eventRecord[Number(callbackId)];
  delete listener.__yodaCallbackId__[typeStr];
  /*
   * 如果当前不存在监听事件，完全有移除
   * 有新监听，则重建监听对象，防止callbackid 异常
   */
  if (!hasListener(typeStr)) {
    delete eventMQ[typeStr];
  }
}
function hasListener(typeStr) {
  var targetTypeListener = eventMQ[typeStr];
  return Object.keys((targetTypeListener === null || targetTypeListener === void 0 ? void 0 : targetTypeListener.eventRecord) || {}).length > 0;
}

var Direction;
(function (Direction) {
  Direction["x"] = "x";
  Direction["y"] = "y";
  Direction["z"] = "z";
})(Direction || (Direction = {}));

var SHAKE_EVENT = 'shaked';
var SHAKE_START_EVENT = 'shake-start';
var SHAKE_END_EVENT = 'shake-end';
var JUDGE_STOP_TIME = 1000;
var DEFAULT_SETTING = {
  level: 2,
  times: 3,
  intervalTime: 1300,
  iOSIntervalTime: 500,
  androidIntervalTime: 1300,
  isEmitImmediately: true
};
var ANDROID_LEVEL_MAP = {
  1: {
    basic: 13,
    total: 450
  },
  2: {
    basic: 16,
    total: 700
  },
  3: {
    basic: 20,
    total: 1100
  }
};
var IOS_LEVEL_MAP = {
  1: {
    basic: 9,
    total: 220
  },
  2: {
    basic: 12,
    total: 400
  },
  3: {
    basic: 14,
    total: 500
  }
};

var ShakeHandler = /*#__PURE__*/function () {
  function ShakeHandler(props) {
    var _this = this;
    _classCallCheck(this, ShakeHandler);
    this.shakeConfig = {};
    this.shakedArr = [];
    this.isChecking = false;
    this.nowStatus = {
      x: 0,
      y: 0,
      z: 0
    };
    this.lastStatus = {
      x: 0,
      y: 0,
      z: 0
    };
    this.stopMark = null;
    this.checkIsShakeStoped = false;
    this.notEmitButShaked = true;
    this.isShakeStarted = false;
    this.isAndroid = false;
    this.isArrivedConfigStandard = false;
    this.levelMap = ANDROID_LEVEL_MAP;
    this.dispatchEvent = null;
    this.setStillShaking = debounce(function () {
      return _this.notShaking();
    }, JUDGE_STOP_TIME);
    this.dispatchEvent = props.dispatchEvent;
    this.isAndroid = props.isAndroid;
    this.levelMap = this.isAndroid ? ANDROID_LEVEL_MAP : IOS_LEVEL_MAP;
  }
  _createClass(ShakeHandler, [{
    key: "setOptions",
    value: function setOptions(options) {
      if (options) {
        this.shakeConfig = _objectSpread(_objectSpread({}, DEFAULT_SETTING), options);
        // IOS 和 Android重力感应的灵敏度等都不太一样，数值分端调试，并在次数上允许小量误差
        this.shakeConfig.times = this.isAndroid ? this.shakeConfig.times - 1 : (this.shakeConfig.times - 1) * 2;
        this.shakeConfig.intervalTime = this.isAndroid ? this.shakeConfig.androidIntervalTime : this.shakeConfig.iOSIntervalTime;
      } else {
        this.shakeConfig = _objectSpread({}, DEFAULT_SETTING);
      }
    }
  }, {
    key: "resetShakeStatus",
    value: function resetShakeStatus(isStoped) {
      this.shakedArr = [];
      this.isChecking = false;
      this.notEmitButShaked = false;
      if (isStoped) {
        this.isArrivedConfigStandard = false;
        this.isShakeStarted = false;
      }
    }
  }, {
    key: "checkIsShake",
    value: function checkIsShake(result) {
      var _this2 = this;
      this.isChecking = true;
      Object.keys(this.nowStatus).forEach(function (key) {
        return _this2.nowStatus[key] = result[key] * 9.8;
      });
      if (this.judgeArrivedTerminal()) {
        this.lastStatus = {
          x: 0,
          y: 0,
          z: 0
        };
        this.handleShakeHappend();
        this.setStillShaking();
        this.isChecking = false;
        return;
      }
      if (this.judgeLikelyShake()) {
        this.handleArrivedStandard();
      } else {
        this.isChecking = false;
      }
    }
  }, {
    key: "judgeLikelyShake",
    value: function judgeLikelyShake() {
      var _this$nowStatus = this.nowStatus,
        x = _this$nowStatus.x,
        y = _this$nowStatus.y,
        z = _this$nowStatus.z;
      var _this$levelMap$this$s = this.levelMap[this.shakeConfig.level],
        basic = _this$levelMap$this$s.basic,
        total = _this$levelMap$this$s.total;
      return x > basic || y > basic || z > basic || x * x + y * y + z * z > total;
    }
    // 用加速度变化最大的方向作为判断依据，确认加速度是否反向，从而判定是否到达一次摇动的端点
  }, {
    key: "judgeArrivedTerminal",
    value: function judgeArrivedTerminal() {
      var _this3 = this;
      var maxDiffVal = 0;
      var diffVal = 0;
      var toJudgeKey = Direction.x;
      // 获取加速度变化最大的方向
      Object.keys(this.nowStatus).forEach(function (key) {
        diffVal = Math.abs(_this3.lastStatus[key] - _this3.nowStatus[key]);
        if (maxDiffVal < diffVal) {
          toJudgeKey = key;
          maxDiffVal = diffVal;
        }
      });
      if (this.lastStatus[toJudgeKey] * this.nowStatus[toJudgeKey] < 0) {
        return true;
      }
      return false;
    }
  }, {
    key: "handleArrivedStandard",
    value: function handleArrivedStandard() {
      this.lastStatus = _objectSpread({}, this.nowStatus);
      this.checkIsShakeStoped = false;
      this.setStillShaking();
    }
  }, {
    key: "handleShakeHappend",
    value: function () {
      var _handleShakeHappend = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.isShakeStarted) {
                  _context.next = 3;
                  break;
                }
                _context.next = 3;
                return this.dispatchEvent({
                  type: SHAKE_START_EVENT,
                  data: {}
                });
              case 3:
                this.isShakeStarted = true;
                this.updateShakedArr(new Date().getTime());
              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function handleShakeHappend() {
        return _handleShakeHappend.apply(this, arguments);
      }
      return handleShakeHappend;
    }()
  }, {
    key: "notShaking",
    value: function notShaking() {
      this.checkIsShakeStoped = true;
      this.checkDoDelayEmit();
    }
  }, {
    key: "updateShakedArr",
    value: function updateShakedArr(newTimeStamp) {
      var intervalTime = this.shakeConfig.intervalTime;
      if (this.shakedArr.length > 0) {
        if (newTimeStamp - this.shakedArr[this.shakedArr.length - 1] <= intervalTime) {
          this.shakedArr.push(newTimeStamp);
        } else {
          this.shakedArr = [];
          this.isChecking = false;
        }
      } else {
        this.shakedArr.push(newTimeStamp);
      }
      // 允许少许误差
      if (this.shakedArr.length >= this.shakeConfig.times) {
        this.handleArrivedEmitStandard();
      } else {
        this.isChecking = false;
      }
    }
  }, {
    key: "handleArrivedEmitStandard",
    value: function handleArrivedEmitStandard() {
      this.isArrivedConfigStandard = true;
      this.resetShakeStatus();
      if (this.shakeConfig.isEmitImmediately) {
        this.dispatchEvent({
          type: SHAKE_EVENT,
          data: {}
        });
      } else {
        this.notEmitButShaked = true;
      }
    }
  }, {
    key: "checkDoDelayEmit",
    value: function checkDoDelayEmit() {
      if (this.notEmitButShaked && this.checkIsShakeStoped && !this.shakeConfig.isEmitImmediately) {
        this.dispatchEvent({
          type: SHAKE_EVENT,
          data: {}
        });
      }
      if (this.isShakeStarted) {
        this.dispatchEvent({
          type: SHAKE_END_EVENT,
          data: {
            isArrivedConfigStandard: this.isArrivedConfigStandard
          }
        });
      }
      this.resetShakeStatus(true);
    }
  }]);
  return ShakeHandler;
}();

var interval = 60;
var shakeHandler = null;
var checkIsShake = null;
var startMonitorShake = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var yoda, startAccelerometerRes, eventRes;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            yoda = getYoda(); /*
                               * Const startAccelerometerRes = await yoda.system.startAccelerometer({
                               *     interval,
                               * });
                               */
            _context.next = 3;
            return yoda.bridge('system', 'startAccelerometer', {
              interval: interval
            });
          case 3:
            startAccelerometerRes = _context.sent;
            checkIsShake = shakeHandler.checkIsShake.bind(shakeHandler);
            // Const eventRes = await yoda.event.addEventListener('accelerometer-change', checkIsShake)
            _context.next = 7;
            return yoda.bridge('event', 'addEventListener', {
              type: 'accelerometer-change',
              listener: checkIsShake
            });
          case 7:
            eventRes = _context.sent;
            if (startAccelerometerRes.result === 1 && eventRes.result !== 1) {
              stopMonitorShake();
            }
            if (!(startAccelerometerRes.result !== 1 || eventRes.result !== 1)) {
              _context.next = 11;
              break;
            }
            throw new Error("\u6447\u4E00\u6447\u521D\u59CB\u5316\u5931\u8D25\uFF0C\u8BF7\u7A0D\u540E\u91CD\u8BD5\u3002AccelerometerRes:".concat(JSON.stringify(startAccelerometerRes), ";eventRes:").concat(JSON.stringify(eventRes)));
          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return function startMonitorShake() {
    return _ref.apply(this, arguments);
  };
}();
var validateOption = function validateOption(options) {
  if (!options) {
    return;
  }
  var level = options.level,
    times = options.times,
    isEmitImmediately = options.isEmitImmediately;
  // Android 和 iOS 级别类型一致
  if (level !== undefined && !ANDROID_LEVEL_MAP[level]) {
    throw new Error('请传入正确的level，可选值为1、2、3');
  }
  if (times !== undefined) {
    if (!Number.isInteger(times)) {
      throw new Error('times应为整数');
    }
    if (times < 1) {
      throw new Error('times应大于1');
    }
  }
  if (isEmitImmediately !== undefined) {
    if (typeof isEmitImmediately !== 'boolean') {
      throw new Error('isEmitImmediately应为boolean类型');
    }
  }
};
var initShakeHandler = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(options) {
    var yoda, dispatchEvent;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            yoda = getYoda();
            _context3.next = 3;
            return checkCanUse('system', 'startAccelerometer');
          case 3:
            if (_context3.sent) {
              _context3.next = 5;
              break;
            }
            throw new Error('当前APP暂不支持摇一摇');
          case 5:
            if (!shakeHandler) {
              _context3.next = 7;
              break;
            }
            throw new Error('当前存在尚未结束监听的摇一摇');
          case 7:
            dispatchEvent = /*#__PURE__*/function () {
              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params) {
                return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        return _context2.abrupt("return", yoda.bridge('event', 'dispatchEvent', params));
                      case 1:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));
              return function dispatchEvent(_x2) {
                return _ref3.apply(this, arguments);
              };
            }();
            shakeHandler = new ShakeHandler({
              dispatchEvent: dispatchEvent,
              isAndroid: isAndroid
            });
            validateOption(options);
            shakeHandler.setOptions(options);
            shakeHandler.resetShakeStatus();
            _context3.next = 14;
            return startMonitorShake.bind(yoda)();
          case 14:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return function initShakeHandler(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var stopMonitorShake = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
    var yoda, eventRes, stopRes;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            yoda = getYoda();
            _context4.next = 3;
            return checkCanUse('system', 'stopAccelerometer');
          case 3:
            if (_context4.sent) {
              _context4.next = 5;
              break;
            }
            throw new Error('当前APP暂不支持摇一摇');
          case 5:
            shakeHandler = null;
            // Const eventRes = await yoda.event.removeEventListener('accelerometer-change', checkIsShake)
            _context4.next = 8;
            return yoda.bridge('event', 'removeEventListener', {
              type: 'accelerometer-change',
              listener: checkIsShake
            });
          case 8:
            eventRes = _context4.sent;
            _context4.next = 11;
            return yoda.bridge('system', 'stopAccelerometer', {});
          case 11:
            stopRes = _context4.sent;
            if (!(eventRes.result !== 1 || stopRes.result !== 1)) {
              _context4.next = 14;
              break;
            }
            throw new Error("\u6447\u4E00\u6447\u505C\u6B62\u76D1\u542C\u5931\u8D25\u3002stopRes:".concat(JSON.stringify(stopRes), ";eventRes:").concat(JSON.stringify(eventRes)));
          case 14:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return function stopMonitorShake() {
    return _ref4.apply(this, arguments);
  };
}();

var yodaCustomEvent = {
  shaked: SHAKE_EVENT
};
var eventToInitMap = _defineProperty({}, yodaCustomEvent.shaked, initShakeHandler);
var handleEventUnregisterMap = _defineProperty({}, yodaCustomEvent.shaked, stopMonitorShake);

// 添加事件监听
var addEventListener = function addEventListener(params, callback) {
  var _eventToInitMap$type;
  var baseType = params.type,
    listener = params.listener;
  var type = typeof baseType === 'string' ? baseType : baseType.type;
  var options = typeof baseType === 'string' ? {} : baseType.options;
  (_eventToInitMap$type = eventToInitMap[type]) === null || _eventToInitMap$type === void 0 ? void 0 : _eventToInitMap$type.call(eventToInitMap, options);
  !listener.__yodaCallbackId__ && (listener.__yodaCallbackId__ = {});
  // 保持原有判断逻辑不变，若当前lisetener
  if (listener.__yodaCallbackId__[type]) {
    throw new Error("addEventListener ".concat(type, " \u7684 listener \u5DF2\u7ECF\u88AB\u7ED1\u5B9A\u8FC7\u4E86"));
  }
  var registerForNativeListener = hasListener(type);
  var callBackId = null;
  var returnPromise = Promise.resolve();
  // Call native 新增监听
  if (!registerForNativeListener) {
    var deferredIns = deferredInvoke.pushMQ(true, createCb(type), true);
    callBackId = parseInt(getEventIdOnlyNumber(deferredIns.traceId));
    returnPromise = invoke$1({
      namespace: 'event',
      name: 'addEventListener',
      params: {
        type: type,
        listener: String(deferredIns.traceId)
      },
      callback: callback
    });
  } else {
    // 前端维护，直接回调
    isFunction(callback) && callback({
      result: 1
    });
  }
  addListener(type, listener, callBackId);
  return returnPromise;
};
// 移除事件监听
var removeEventListener = function removeEventListener(params, callback) {
  var _handleEventUnregiste;
  var type = params.type,
    listener = params.listener;
  (_handleEventUnregiste = handleEventUnregisterMap[type]) === null || _handleEventUnregiste === void 0 ? void 0 : _handleEventUnregiste.call(handleEventUnregisterMap);
  var resultPromise = Promise.resolve();
  if (listener.__yodaCallbackId__) {
    var callbackId = getCallbackIdByType(type);
    // 移除前端监听
    removeListener(type, listener);
    // 若当前不包含监听
    if (!hasListener(type)) {
      // 移除native 侧监听
      resultPromise = invoke$1({
        namespace: 'event',
        name: 'removeEventListener',
        params: {
          type: type,
          listener: callbackId
        },
        callback: callback
      });
      // 移除js 侧监听
      deferredInvoke.removeMQ(callbackId);
    }
  }
  return resultPromise;
};

/**
 * 删除 yoda 对象
 * 1. 事件分发移至 invoke
 * 2. 重构摇一摇事件
 * 3. 移除所有内部调用
 */
var yoda = {
  bridge: function bridge(namespace, name, params, callback) {
    var multiCallback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    var callParams = {
      namespace: namespace,
      name: name,
      params: params,
      multiCallback: multiCallback,
      callback: callback
    };
    if (namespace === 'event') {
      if (name === 'addEventListener') {
        return addEventListener(params, callback);
      }
      if (name === 'removeEventListener') {
        return removeEventListener(params, callback);
      }
    }
    // 兼容 @wangzhaoqi 9920 调用一个不存在的bridge 无法回调问题
    if (compareKwaiAppVersion('9.9.20') === 0 && isAndroid) {
      return invokeAndroid9920(callParams);
    }
    return invoke$1(callParams);
  }
};
// 缓存yoda对象
setYoda(yoda);
setContainer({
  invoke: invoke,
  addListener: addListener$1,
  removeListener: removeListener$1
});

export { addListener$1 as addListener, invoke, isBridgeError, removeListener$1 as removeListener, setGlobalConfig, version };
