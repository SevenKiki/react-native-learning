"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var radar_util_1 = require("@ks-radar/radar-util");
var RadarSpaFmpCollect = /** @class */ (function (_super) {
    __extends(RadarSpaFmpCollect, _super);
    function RadarSpaFmpCollect(data) {
        var _this = this;
        var _a, _b, _c;
        _this = _super.call(this, {
            name: 'radarSpaFmpSdk',
            core: data.core,
            sampling: data.sampling,
            key: radar_util_1.RADAR_KEY.EVENT,
            version: process.env.VERSION // 采集器版本
        }) || this;
        /**
         * 进入页面前初始化
         * @param currentRoutePath 当前页面的路由path
         */
        _this.metricReportInit = function (currentRoutePath) {
            _this.routerBeforeachTimestamp = Date.now();
            if (!_this.firstRoutePath) {
                _this.firstRoutePath = currentRoutePath; // 记录浏览器第一次打开时的页面routeName
            }
            _this.checkPageSwitched(currentRoutePath);
            if (!_this.reportedMetrics) {
                _this.reportedMetrics = {
                    // 已上报的指标
                    sfmp: {},
                    sffp: {},
                    fmp: {},
                    ffp: {}
                };
            }
        };
        /**
         * 上报spa的指标：fmp、sfmp、ffp、sffp
         * @param currentRoutePath 当前页面路由path
         * @param extendInfo 雷达extra_info字段
         */
        _this.spa = function (currentRoutePath, extendInfo) {
            var _a;
            if (currentRoutePath === void 0) { currentRoutePath = 'UNKNOWN'; }
            if (extendInfo === void 0) { extendInfo = {}; }
            if (!((_a = _this.core) === null || _a === void 0 ? void 0 : _a.collect)) {
                console.error('RadarSpaFmpCollect---->未找到core包中的collect方法');
                return;
            }
            _this.ffp(currentRoutePath, extendInfo);
            _this.sffp(currentRoutePath, extendInfo);
            _this.checkPageRendered(currentRoutePath, function () {
                _this.fmp(currentRoutePath);
                _this.sfmp(currentRoutePath, extendInfo);
            });
        };
        /**
         * 上报FMP
         * @param currentRoutePath 当前页面的路由path
         * @param timestamp 用户自定义的发生fmp时的时间戳
         */
        _this.fmp = function (currentRoutePath, timestamp) {
            if (currentRoutePath === void 0) { currentRoutePath = 'UNKNOWN'; }
            if (timestamp === void 0) { timestamp = Date.now(); }
            // 页面上报过一次就不再上报
            if (!_this.baseCollect ||
                _this.pageSwitched ||
                (_this.reportedMetrics.fmp && _this.reportedMetrics.fmp[currentRoutePath])) {
                return;
            }
            var _fmpTimestamp = typeof timestamp === 'number' && timestamp > 0 ? timestamp : Date.now();
            if (!_this.navCollectInstance || !_this.navCollectInstance.fmp) {
                console.error('请传入navCollect参数');
                return;
            }
            _this.navCollectInstance.fmp(_fmpTimestamp); // 上报fmp性能指标
            var _fmp = _fmpTimestamp - performance.timing.navigationStart;
            if (_this.reportedMetrics.fmp) {
                _this.reportedMetrics.fmp[currentRoutePath] = _fmp;
            }
            if (_this.isDebugger) {
                console.log('RadarSpaFmpCollect---->FMP上报成功:', _fmp, 'ms');
            }
        };
        /**
         * 上报SFMP
         * @param currentRoutePath 当前页面的路由path
         * @param extendInfo 雷达extra_info字段
         * @param timestamp 外部自定义发生sfmp的时间戳
         */
        _this.sfmp = function (currentRoutePath, extendInfo, timestamp) {
            if (currentRoutePath === void 0) { currentRoutePath = 'UNKNOWN'; }
            if (extendInfo === void 0) { extendInfo = {}; }
            if (timestamp === void 0) { timestamp = Date.now(); }
            // 页面上报过一次就不再上报
            if (!_this.baseCollect ||
                (currentRoutePath && _this.reportedMetrics.sfmp && _this.reportedMetrics.sfmp[currentRoutePath])) {
                return;
            }
            _this.contentRendedTimestamp =
                typeof timestamp === 'number' && timestamp > 0 ? timestamp : Date.now();
            if (!_this.contentRendedTimestamp || !_this.routerBeforeachTimestamp) {
                console.warn('RadarSpaFmpCollect---->contentRendedTimestamp或者routerBeforeachTimestamp内部打点出现问题');
                return;
            }
            var duration = _this.contentRendedTimestamp - _this.routerBeforeachTimestamp; // sfmp耗时
            if (!duration || duration < 0) {
                console.warn('RadarSpaFmpCollect---->sfmp的值小于0');
                return;
            }
            _this.baseCollect({
                key: RadarSpaFmpCollect.key,
                dimension: {
                    name: 'radar_spa_sfmp',
                    src: window.location.href,
                    extra_info: extendInfo // 【可选】
                },
                value: {
                    duration: duration
                }
            });
            // 清空进入路由的时间戳，防止一次路由跳转后上报多个sfmp
            _this.routerBeforeachTimestamp = null;
            if (_this.reportedMetrics.sfmp) {
                _this.reportedMetrics.sfmp[currentRoutePath] = duration;
            }
            if (_this.isDebugger) {
                console.log('RadarSpaFmpCollect---->SFMP上报成功:', duration, 'ms');
            }
        };
        /**
         * 上报FFP
         * @param currentRoutePath 当前页面的路由path
         * @param extendInfo 雷达extra_info字段
         */
        _this.ffp = function (currentRoutePath, extendInfo) {
            if (currentRoutePath === void 0) { currentRoutePath = 'UNKNOWN'; }
            if (extendInfo === void 0) { extendInfo = {}; }
            // 页面上报过一次就不再上报
            if (!_this.baseCollect ||
                _this.pageSwitched ||
                (_this.reportedMetrics.ffp && _this.reportedMetrics.ffp[currentRoutePath])) {
                return;
            }
            var _ffp = performance.now();
            _this.baseCollect({
                key: RadarSpaFmpCollect.key,
                dimension: {
                    name: 'radar_spa_ffp',
                    src: window.location.href,
                    extra_info: extendInfo // 【可选】
                },
                value: {
                    duration: _ffp
                }
            });
            if (_this.reportedMetrics.ffp) {
                _this.reportedMetrics.ffp[currentRoutePath] = _ffp;
            }
            if (_this.isDebugger) {
                console.log('RadarSpaFmpCollect---->FFP上报成功:', _ffp, 'ms');
            }
        };
        /**
         * 上报SFFP
         * @param currentRoutePath 当前页面的路由path
         * @param extendInfo 雷达extra_info字段
         */
        _this.sffp = function (currentRoutePath, extendInfo) {
            if (extendInfo === void 0) { extendInfo = {}; }
            // 页面上报过一次就不再上报
            if (!_this.baseCollect ||
                (currentRoutePath && _this.reportedMetrics.ffp && _this.reportedMetrics.sffp[currentRoutePath])) {
                return;
            }
            if (!_this.routerBeforeachTimestamp) {
                console.warn('RadarSpaFmpCollect---->routerBeforeachTimestamp内部打点出现问题');
                return;
            }
            _this.sffpTimestamp = Date.now();
            var duration = _this.sffpTimestamp - _this.routerBeforeachTimestamp; // sffp耗时
            if (!duration || duration < 0) {
                console.warn('RadarSpaFmpCollect---->sffp的值小于0');
                return;
            }
            _this.baseCollect({
                key: RadarSpaFmpCollect.key,
                dimension: {
                    name: 'radar_spa_sffp',
                    src: window.location.href,
                    extra_info: extendInfo // 【可选】
                },
                value: {
                    duration: duration
                }
            });
            if (_this.reportedMetrics.sffp) {
                _this.reportedMetrics.sffp[currentRoutePath] = duration;
            }
            if (_this.isDebugger) {
                console.log('RadarSpaFmpCollect---->SFFP上报成功:', duration, 'ms');
            }
        };
        /**
         * 检测页面是否切换过
         * @param currentRoutePath 当前页面的路由path
         */
        _this.checkPageSwitched = function (currentRoutePath) {
            if (_this.pageSwitched) {
                // 页面已经切换过
                return;
            }
            if (currentRoutePath !== _this.firstRoutePath) {
                _this.pageSwitched = true;
            }
        };
        /**
         * 检测页面是否渲染完成
         * @param currentRoutePath 当前页面的路由path
         */
        _this.checkPageRendered = function (currentRoutePath, callback) {
            var elQuery = _this.pageMainElMap[currentRoutePath];
            if (!elQuery) {
                return;
            }
            var _el = document.querySelector(elQuery);
            if (!_el) {
                console.warn("RadarSpaFmpCollect---->\u672A\u627E\u5230MutationObserver\u5143\u7D20".concat(elQuery));
                return;
            }
            _this.domObserve(_el, callback);
        };
        //
        /**
         * 监听el元素是否渲染完
         * @param el 需要监听的元素
         * @param callback 元素渲染完成后回调函数
         */
        _this.domObserve = function (el, callback) {
            var observer = new MutationObserver(function (mutationsList) {
                observer.disconnect();
                callback(mutationsList);
            });
            observer.observe(el, {
                childList: true,
                subtree: true,
                characterDataOldValue: false // 将旧的数据传递给回调
            });
        };
        _this.pageMainElMap = ((_a = data === null || data === void 0 ? void 0 : data.config) === null || _a === void 0 ? void 0 : _a.pageMainElMap) || {};
        _this.VueRouterInstance = data === null || data === void 0 ? void 0 : data.router;
        _this.isDebugger = ((_b = data === null || data === void 0 ? void 0 : data.config) === null || _b === void 0 ? void 0 : _b.isDebugger) || false;
        _this.enableReportRpv = ((_c = data === null || data === void 0 ? void 0 : data.config) === null || _c === void 0 ? void 0 : _c.enableReportRpv) || false;
        _this.routerBeforeachTimestamp = null;
        _this.contentRendedTimestamp = null;
        _this.sffpTimestamp = null;
        _this.navCollectInstance = data === null || data === void 0 ? void 0 : data.navCollect;
        _this.firstRoutePath = '';
        _this.pageSwitched = false;
        _this.reportedMetrics = {
            sfmp: {},
            sffp: {},
            fmp: {},
            ffp: {}
        };
        _this.init();
        return _this;
    }
    /**
     * 更新依赖的外部实例
     */
    RadarSpaFmpCollect.prototype.updateDependence = function (params) {
        if (params.navCollect) {
            this.navCollectInstance = params === null || params === void 0 ? void 0 : params.navCollect;
        }
        if (params.core) {
            this.updateCore(params.core);
        }
    };
    /** 初始化采集器 */
    RadarSpaFmpCollect.prototype.init = function () {
        var _this = this;
        try {
            if (this.VueRouterInstance) {
                this.VueRouterInstance.beforeEach(function (to, from, next) {
                    try {
                        _this.metricReportInit(to.path);
                    }
                    finally {
                        next();
                    }
                });
                this.VueRouterInstance.afterEach(function (to, from, failure) {
                    if (failure)
                        return;
                    // 限制只有path不同的情况下才认为是页面跳转
                    if (!from.path || to.path === from.path)
                        return;
                    _this.enableReportRpv && _this.reportRpv();
                });
            }
        }
        catch (error) {
            console.error('RadarSpaFmpCollect---->插件初始化错误', error);
        }
    };
    /**
     * route改动调用的api，未传入router时可用
     * 若没有在router改变时调用该方法，会引起fmp/sfmp/pv等获取不准确，谨慎使用
     * @param routePath 当前页面的路由
     */
    RadarSpaFmpCollect.prototype.routeChange = function (routePath) {
        if (!this.VueRouterInstance) {
            this.metricReportInit(routePath);
        }
        else {
            console.warn('RadarSpaFmpCollect---->已初始化router，routeChange方法不可用');
        }
    };
    /**
     * 上报spa的路由改变次数，rpv
     * @param extendInfo extra_info
     */
    RadarSpaFmpCollect.prototype.reportRpv = function (extendInfo) {
        if (extendInfo === void 0) { extendInfo = {}; }
        this.baseCollect({
            key: RadarSpaFmpCollect.key,
            dimension: {
                name: 'radar_spa_pv',
                src: window.location.href,
                extra_info: extendInfo // 【可选】
            },
            value: {}
        });
        if (this.isDebugger) {
            console.log('RadarSpaFmpCollect---->RPV上报成功');
        }
    };
    /** 数据上报的key */
    RadarSpaFmpCollect.key = radar_util_1.RADAR_KEY.EVENT;
    return RadarSpaFmpCollect;
}(radar_util_1.BaseCollect));
exports.default = RadarSpaFmpCollect;
//# sourceMappingURL=ks-fe-radar-sdk-third-spafmp.js.map