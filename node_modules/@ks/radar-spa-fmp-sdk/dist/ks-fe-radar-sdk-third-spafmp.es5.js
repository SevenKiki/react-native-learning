/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign$1 = function() {
    __assign$1 = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign$1.apply(this, arguments);
};

function __read$1(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function consoleWarn() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    try {
        var warn = console === null || console === void 0 ? void 0 : console.warn;
        return warn && warn.call.apply(warn, __spreadArray([console, 'radar:'], __read$1(args), false));
    }
    catch (e) {
        return;
    }
}

// 采样控制 迁移自radar.ts 子类重写该方法
function samplingControl(sampling) {
    if (sampling === null || typeof sampling !== 'number') {
        return false;
    }
    // 计算随机数
    var rand = Math.random();
    return rand < sampling;
}

var RADAR_KEY;
(function (RADAR_KEY) {
    // 页面加载监控
    RADAR_KEY["LOAD"] = "load";
    // 静态资源监控
    RADAR_KEY["RES"] = "resource";
    // API 性能监控
    RADAR_KEY["API"] = "api";
    // 异常
    RADAR_KEY["ERROR"] = "error";
    // 脚本自身上报异常
    RADAR_KEY["SDK_ERROR"] = "sdk_error";
    // 用户自定义性能监控
    RADAR_KEY["CUSTOM"] = "custom";
    // 批量日志，用于处理批量情况
    RADAR_KEY["BATCH"] = "batch";
    // 事件
    RADAR_KEY["EVENT"] = "event";
})(RADAR_KEY || (RADAR_KEY = {}));

var BaseCollect = /** @class */ (function () {
    function BaseCollect(options) {
        if (options === void 0) { options = {}; }
        if (options === undefined) {
            throw new Error('radar error 100');
        }
        if (!options.key) {
            throw new Error('radar error 101');
        }
        if (options.core &&
            (typeof options.core.sampleData !== 'object' || typeof options.core.collect !== 'function')) {
            throw new Error('radar error 121');
        }
        this.baseOptions = options;
        this.key = options.key;
        this.version = options.version;
        this.name = options.name;
        if (options.core) {
            this.core = options.core;
            this.sampling = this.getSample(options.sampling);
            this.sampling !== undefined && (this.isHit = this.samplingControl(this.sampling));
        }
    }
    BaseCollect.prototype.updateCore = function (core) {
        if (typeof core.sampleData !== 'object' || typeof core.collect !== 'function') {
            throw new Error('radar error 121');
        }
        this.core = core;
        this.sampling = this.getSample(this.baseOptions.sampling);
        this.sampling && (this.isHit = this.samplingControl(this.sampling));
    };
    // 获取采样率
    BaseCollect.prototype.getSample = function (sampling) {
        var _a, _b, _c, _d;
        if (sampling === void 0) { sampling = 1; }
        var coreSample = (_a = this.core) === null || _a === void 0 ? void 0 : _a.sampleData.core;
        if (this.key === RADAR_KEY.LOAD) {
            return coreSample;
        }
        // 校验采样率
        if (typeof sampling !== 'number' || sampling < 0 || sampling > 1) {
            consoleWarn("102\uFF0C".concat(this.key, "\uFF0C\u91C7\u7528Core\u7684\u91C7\u6837\u7387").concat((_b = this.core) === null || _b === void 0 ? void 0 : _b.sampleData.core));
            return coreSample;
        }
        // 如果配置的采样率大于core的采样率 直接使用core的采样率，否则按照core换算
        var keySample = ((_c = this.core) === null || _c === void 0 ? void 0 : _c.isInYoda)
            ? ((_d = this.core) === null || _d === void 0 ? void 0 : _d.sampleData[this.key]) === undefined
                ? 1
                : this.core.sampleData[this.key]
            : sampling;
        if (coreSample && keySample > coreSample) {
            consoleWarn("115\uFF0C".concat(this.key));
            return coreSample;
        }
        else {
            return keySample;
        }
    };
    // 判断是否采样
    BaseCollect.prototype.samplingControl = function (sampling) {
        var _a;
        return ((_a = this.core) === null || _a === void 0 ? void 0 : _a.sampleData.isHit) && samplingControl(sampling / this.core.sampleData.core);
    };
    BaseCollect.prototype.baseCollect = function (data) {
        if (!this.core) {
            consoleWarn("110,".concat(this.key));
        }
        else if (this.isHit) {
            var value_1 = data.value || {};
            value_1 = Object.keys(value_1)
                .filter(function (key) { return value_1[key] !== null && value_1[key] !== undefined; })
                .reduce(function (acc, key) {
                var _a;
                return (__assign$1(__assign$1({}, acc), (_a = {}, _a[key] = value_1[key], _a)));
            }, {});
            this.core.collect(data.key || this.key, __assign$1(__assign$1({}, data.dimension), { sample_rate: this.sampling, event_client_timestamp: handleNumber(Date.now()), collect_version: this.version, collect_name: this.name }), value_1);
        }
        else {
            consoleWarn("105,".concat(this.key, "\uFF1A").concat(this.sampling));
        }
    };
    return BaseCollect;
}());
function handleNumber(value) {
    if (typeof value === 'number') {
        return value.toFixed();
    }
    return value;
}

var RadarKey = [RADAR_KEY.LOAD, RADAR_KEY.RES, RADAR_KEY.API, RADAR_KEY.ERROR, RADAR_KEY.EVENT];
var LOAD_EVENT_NAME;
(function (LOAD_EVENT_NAME) {
    LOAD_EVENT_NAME["RADAR_INIT"] = "radar_init";
    LOAD_EVENT_NAME["H5_LOAD"] = "h5_load";
    LOAD_EVENT_NAME["FMP"] = "fmp";
    LOAD_EVENT_NAME["MAIN_API"] = "main_api";
    LOAD_EVENT_NAME["H5_CUSTOM_METRIC"] = "h5_custom_metric";
})(LOAD_EVENT_NAME || (LOAD_EVENT_NAME = {}));
var LoadEventName = [
    LOAD_EVENT_NAME.FMP,
    LOAD_EVENT_NAME.H5_LOAD,
    LOAD_EVENT_NAME.MAIN_API,
    LOAD_EVENT_NAME.RADAR_INIT,
    LOAD_EVENT_NAME.H5_CUSTOM_METRIC,
];

var RadarSpaFmpCollect = /** @class */ (function (_super) {
    __extends(RadarSpaFmpCollect, _super);
    function RadarSpaFmpCollect(data) {
        var _this = this;
        var _a, _b, _c;
        _this = _super.call(this, {
            name: 'radarSpaFmpSdk',
            core: data.core,
            sampling: data.sampling,
            key: RADAR_KEY.EVENT,
            version: "0.0.2-alpha.7" // 采集器版本
        }) || this;
        /**
         * 进入页面前初始化
         * @param currentRoutePath 当前页面的路由path
         */
        _this.metricReportInit = function (currentRoutePath) {
            _this.routerBeforeachTimestamp = Date.now();
            if (!_this.firstRoutePath) {
                _this.firstRoutePath = currentRoutePath; // 记录浏览器第一次打开时的页面routeName
            }
            _this.checkPageSwitched(currentRoutePath);
            if (!_this.reportedMetrics) {
                _this.reportedMetrics = {
                    // 已上报的指标
                    sfmp: {},
                    sffp: {},
                    fmp: {},
                    ffp: {}
                };
            }
        };
        /**
         * 上报spa的指标：fmp、sfmp、ffp、sffp
         * @param currentRoutePath 当前页面路由path
         * @param extendInfo 雷达extra_info字段
         */
        _this.spa = function (currentRoutePath, extendInfo) {
            var _a;
            if (currentRoutePath === void 0) { currentRoutePath = 'UNKNOWN'; }
            if (extendInfo === void 0) { extendInfo = {}; }
            if (!((_a = _this.core) === null || _a === void 0 ? void 0 : _a.collect)) {
                console.error('RadarSpaFmpCollect---->未找到core包中的collect方法');
                return;
            }
            _this.ffp(currentRoutePath, extendInfo);
            _this.sffp(currentRoutePath, extendInfo);
            _this.checkPageRendered(currentRoutePath, function () {
                _this.fmp(currentRoutePath);
                _this.sfmp(currentRoutePath, extendInfo);
            });
        };
        /**
         * 上报FMP
         * @param currentRoutePath 当前页面的路由path
         * @param timestamp 用户自定义的发生fmp时的时间戳
         */
        _this.fmp = function (currentRoutePath, timestamp) {
            if (currentRoutePath === void 0) { currentRoutePath = 'UNKNOWN'; }
            if (timestamp === void 0) { timestamp = Date.now(); }
            // 页面上报过一次就不再上报
            if (!_this.baseCollect ||
                _this.pageSwitched ||
                (_this.reportedMetrics.fmp && _this.reportedMetrics.fmp[currentRoutePath])) {
                return;
            }
            var _fmpTimestamp = typeof timestamp === 'number' && timestamp > 0 ? timestamp : Date.now();
            if (!_this.navCollectInstance || !_this.navCollectInstance.fmp) {
                console.error('请传入navCollect参数');
                return;
            }
            _this.navCollectInstance.fmp(_fmpTimestamp); // 上报fmp性能指标
            var _fmp = _fmpTimestamp - performance.timing.navigationStart;
            if (_this.reportedMetrics.fmp) {
                _this.reportedMetrics.fmp[currentRoutePath] = _fmp;
            }
            if (_this.isDebugger) {
                console.log('RadarSpaFmpCollect---->FMP上报成功:', _fmp, 'ms');
            }
        };
        /**
         * 上报SFMP
         * @param currentRoutePath 当前页面的路由path
         * @param extendInfo 雷达extra_info字段
         * @param timestamp 外部自定义发生sfmp的时间戳
         */
        _this.sfmp = function (currentRoutePath, extendInfo, timestamp) {
            if (currentRoutePath === void 0) { currentRoutePath = 'UNKNOWN'; }
            if (extendInfo === void 0) { extendInfo = {}; }
            if (timestamp === void 0) { timestamp = Date.now(); }
            // 页面上报过一次就不再上报
            if (!_this.baseCollect ||
                (currentRoutePath && _this.reportedMetrics.sfmp && _this.reportedMetrics.sfmp[currentRoutePath])) {
                return;
            }
            _this.contentRendedTimestamp =
                typeof timestamp === 'number' && timestamp > 0 ? timestamp : Date.now();
            if (!_this.contentRendedTimestamp || !_this.routerBeforeachTimestamp) {
                console.warn('RadarSpaFmpCollect---->contentRendedTimestamp或者routerBeforeachTimestamp内部打点出现问题');
                return;
            }
            var duration = _this.contentRendedTimestamp - _this.routerBeforeachTimestamp; // sfmp耗时
            if (!duration || duration < 0) {
                console.warn('RadarSpaFmpCollect---->sfmp的值小于0');
                return;
            }
            _this.baseCollect({
                key: RadarSpaFmpCollect.key,
                dimension: {
                    name: 'radar_spa_sfmp',
                    src: window.location.href,
                    extra_info: extendInfo // 【可选】
                },
                value: {
                    duration: duration
                }
            });
            // 清空进入路由的时间戳，防止一次路由跳转后上报多个sfmp
            _this.routerBeforeachTimestamp = null;
            if (_this.reportedMetrics.sfmp) {
                _this.reportedMetrics.sfmp[currentRoutePath] = duration;
            }
            if (_this.isDebugger) {
                console.log('RadarSpaFmpCollect---->SFMP上报成功:', duration, 'ms');
            }
        };
        /**
         * 上报FFP
         * @param currentRoutePath 当前页面的路由path
         * @param extendInfo 雷达extra_info字段
         */
        _this.ffp = function (currentRoutePath, extendInfo) {
            if (currentRoutePath === void 0) { currentRoutePath = 'UNKNOWN'; }
            if (extendInfo === void 0) { extendInfo = {}; }
            // 页面上报过一次就不再上报
            if (!_this.baseCollect ||
                _this.pageSwitched ||
                (_this.reportedMetrics.ffp && _this.reportedMetrics.ffp[currentRoutePath])) {
                return;
            }
            var _ffp = performance.now();
            _this.baseCollect({
                key: RadarSpaFmpCollect.key,
                dimension: {
                    name: 'radar_spa_ffp',
                    src: window.location.href,
                    extra_info: extendInfo // 【可选】
                },
                value: {
                    duration: _ffp
                }
            });
            if (_this.reportedMetrics.ffp) {
                _this.reportedMetrics.ffp[currentRoutePath] = _ffp;
            }
            if (_this.isDebugger) {
                console.log('RadarSpaFmpCollect---->FFP上报成功:', _ffp, 'ms');
            }
        };
        /**
         * 上报SFFP
         * @param currentRoutePath 当前页面的路由path
         * @param extendInfo 雷达extra_info字段
         */
        _this.sffp = function (currentRoutePath, extendInfo) {
            if (extendInfo === void 0) { extendInfo = {}; }
            // 页面上报过一次就不再上报
            if (!_this.baseCollect ||
                (currentRoutePath && _this.reportedMetrics.ffp && _this.reportedMetrics.sffp[currentRoutePath])) {
                return;
            }
            if (!_this.routerBeforeachTimestamp) {
                console.warn('RadarSpaFmpCollect---->routerBeforeachTimestamp内部打点出现问题');
                return;
            }
            _this.sffpTimestamp = Date.now();
            var duration = _this.sffpTimestamp - _this.routerBeforeachTimestamp; // sffp耗时
            if (!duration || duration < 0) {
                console.warn('RadarSpaFmpCollect---->sffp的值小于0');
                return;
            }
            _this.baseCollect({
                key: RadarSpaFmpCollect.key,
                dimension: {
                    name: 'radar_spa_sffp',
                    src: window.location.href,
                    extra_info: extendInfo // 【可选】
                },
                value: {
                    duration: duration
                }
            });
            if (_this.reportedMetrics.sffp) {
                _this.reportedMetrics.sffp[currentRoutePath] = duration;
            }
            if (_this.isDebugger) {
                console.log('RadarSpaFmpCollect---->SFFP上报成功:', duration, 'ms');
            }
        };
        /**
         * 检测页面是否切换过
         * @param currentRoutePath 当前页面的路由path
         */
        _this.checkPageSwitched = function (currentRoutePath) {
            if (_this.pageSwitched) {
                // 页面已经切换过
                return;
            }
            if (currentRoutePath !== _this.firstRoutePath) {
                _this.pageSwitched = true;
            }
        };
        /**
         * 检测页面是否渲染完成
         * @param currentRoutePath 当前页面的路由path
         */
        _this.checkPageRendered = function (currentRoutePath, callback) {
            var elQuery = _this.pageMainElMap[currentRoutePath];
            if (!elQuery) {
                return;
            }
            var _el = document.querySelector(elQuery);
            if (!_el) {
                console.warn("RadarSpaFmpCollect---->\u672A\u627E\u5230MutationObserver\u5143\u7D20".concat(elQuery));
                return;
            }
            _this.domObserve(_el, callback);
        };
        //
        /**
         * 监听el元素是否渲染完
         * @param el 需要监听的元素
         * @param callback 元素渲染完成后回调函数
         */
        _this.domObserve = function (el, callback) {
            var observer = new MutationObserver(function (mutationsList) {
                observer.disconnect();
                callback(mutationsList);
            });
            observer.observe(el, {
                childList: true,
                subtree: true,
                characterDataOldValue: false // 将旧的数据传递给回调
            });
        };
        _this.pageMainElMap = ((_a = data === null || data === void 0 ? void 0 : data.config) === null || _a === void 0 ? void 0 : _a.pageMainElMap) || {};
        _this.VueRouterInstance = data === null || data === void 0 ? void 0 : data.router;
        _this.isDebugger = ((_b = data === null || data === void 0 ? void 0 : data.config) === null || _b === void 0 ? void 0 : _b.isDebugger) || false;
        _this.enableReportRpv = ((_c = data === null || data === void 0 ? void 0 : data.config) === null || _c === void 0 ? void 0 : _c.enableReportRpv) || false;
        _this.routerBeforeachTimestamp = null;
        _this.contentRendedTimestamp = null;
        _this.sffpTimestamp = null;
        _this.navCollectInstance = data === null || data === void 0 ? void 0 : data.navCollect;
        _this.firstRoutePath = '';
        _this.pageSwitched = false;
        _this.reportedMetrics = {
            sfmp: {},
            sffp: {},
            fmp: {},
            ffp: {}
        };
        _this.init();
        return _this;
    }
    /**
     * 更新依赖的外部实例
     */
    RadarSpaFmpCollect.prototype.updateDependence = function (params) {
        if (params.navCollect) {
            this.navCollectInstance = params === null || params === void 0 ? void 0 : params.navCollect;
        }
        if (params.core) {
            this.updateCore(params.core);
        }
    };
    /** 初始化采集器 */
    RadarSpaFmpCollect.prototype.init = function () {
        var _this = this;
        try {
            if (this.VueRouterInstance) {
                this.VueRouterInstance.beforeEach(function (to, from, next) {
                    try {
                        _this.metricReportInit(to.path);
                    }
                    finally {
                        next();
                    }
                });
                this.VueRouterInstance.afterEach(function (to, from, failure) {
                    if (failure)
                        return;
                    // 限制只有path不同的情况下才认为是页面跳转
                    if (!from.path || to.path === from.path)
                        return;
                    _this.enableReportRpv && _this.reportRpv();
                });
            }
        }
        catch (error) {
            console.error('RadarSpaFmpCollect---->插件初始化错误', error);
        }
    };
    /**
     * route改动调用的api，未传入router时可用
     * 若没有在router改变时调用该方法，会引起fmp/sfmp/pv等获取不准确，谨慎使用
     * @param routePath 当前页面的路由
     */
    RadarSpaFmpCollect.prototype.routeChange = function (routePath) {
        if (!this.VueRouterInstance) {
            this.metricReportInit(routePath);
        }
        else {
            console.warn('RadarSpaFmpCollect---->已初始化router，routeChange方法不可用');
        }
    };
    /**
     * 上报spa的路由改变次数，rpv
     * @param extendInfo extra_info
     */
    RadarSpaFmpCollect.prototype.reportRpv = function (extendInfo) {
        if (extendInfo === void 0) { extendInfo = {}; }
        this.baseCollect({
            key: RadarSpaFmpCollect.key,
            dimension: {
                name: 'radar_spa_pv',
                src: window.location.href,
                extra_info: extendInfo // 【可选】
            },
            value: {}
        });
        if (this.isDebugger) {
            console.log('RadarSpaFmpCollect---->RPV上报成功');
        }
    };
    /** 数据上报的key */
    RadarSpaFmpCollect.key = RADAR_KEY.EVENT;
    return RadarSpaFmpCollect;
}(BaseCollect));

export default RadarSpaFmpCollect;
//# sourceMappingURL=ks-fe-radar-sdk-third-spafmp.es5.js.map
