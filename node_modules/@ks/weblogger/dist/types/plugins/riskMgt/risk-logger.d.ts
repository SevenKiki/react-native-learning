/**
 * 如果引用radar，会导致整包引入&与业务冲突。所以摘取了radar部分上报代码，自定义上报。
 */
export declare function compose(middlewares: any[]): (context: any, next?: any) => any;
export declare class MiddlewareManager {
    middlewares: any[];
    constructor(...middleware: any[]);
    /**
     * 添加使用一个新的中间件
     * @param middlewares
     */
    use(...middlewares: any[]): void;
    /**
     * 执行所有已添加的中间件
     * @param context
     * @returns
     */
    invoke(context: any): any;
}
export default class riskRadar {
    private projectId;
    private weblog;
    private radarSessionIdNext;
    constructor(params: any);
    getCommonData: () => {
        h5_extra_attr: string;
        url_package: any;
        app_version_name: any;
        project_id: string;
    };
    private uuid;
    getUAList(): {
        [key: string]: string;
    };
    reportByHttp(event: any): void;
    collectLog(commonLogData: any, logList: any, serviceName: string): void;
    event(dimension: any, value?: object): void;
    logCollectNext(incomeKv: any): void;
    getWebViewType: () => "" | "WebView" | "YodaWKWebView" | "WKWebView" | "UIWebView";
    riskEvent(name: string, event_type: string, extra_info: string): void;
    pushException(error: any): void;
}
export declare function deepClone(data: any): any;
/**
 * 获取 localStorage 缓存
 */
export declare function getLocalStorageItem(key: string): any;
/**
 * 设置 localStorage 缓存
 */
export declare function setLocalStorageItem(key: string, value: any): boolean;
export declare const genSessionIncreaseId: (key: string) => number;
declare function pushException(error: any): void;
export { riskRadar, pushException, };
