import type { Weblogger } from "../../config/types";
import { BasePlugin } from "../base";
interface ViewModel {
    [key: string]: any;
    $root: object;
    $options: {
        [key: string]: any;
        name?: string;
        propsData?: {
            [key: string]: any;
        };
        _componentTag?: string;
        __file?: string;
        $_sentryPerfHook?: boolean;
    };
    $once(hook: string, cb: () => void): void;
}
interface VueInstance {
    config: {
        errorHandler?(error: Error, vm?: ViewModel, info?: string): void;
    };
    util?: {
        warn(...input: any): void;
    };
    mixin(hooks: {
        [key: string]: () => void;
    }): void;
}
interface RrwebOptions {
    vue?: VueInstance;
    ignoreErrors?: string[];
    routerChangeReset?: false;
    reportUrl: string;
    compressedType: 'pako' | 'rrweb';
    dataFormat: 'initialDataFormat' | 'webloggerFormat';
}
export default class RecordWeb extends BasePlugin {
    static key: string;
    private removeCurrentHandlers;
    private recordEvents;
    private isInBrowser;
    private originalPushStateFunc;
    private originalReplaceStateFunc;
    private originVueErrorFunc?;
    private vue;
    private ignoreErrors;
    private routerChangeReset;
    private reportUrl;
    private compressedType;
    private dataFormat;
    private isInitRecord;
    constructor(options: RrwebOptions);
    apply(weblog: Weblogger): void;
    /**
     * webLogger销毁，插件随之销毁释放内存
     */
    destroy(): void;
    /**
     * 清除掉所有记录的数据以及回调函数
     */
    private resetState;
    /**
     * 清除数据，并启动监控上报数据
     * @private
     */
    resetStateAndStartRecord: () => void;
    /**
     * 开始rrweb监控记录
     */
    initRecord(): void;
    /**
     * 添加错误事件监听
     * @private
     */
    private addErrorEventListener;
    /**
     * 去除错误事件监听
     * @private
     */
    private removeErrorEventListener;
    /**
     * 捕捉页面报错事件回调，执行weblogger事件上报。
     * @private
     */
    private reportEventsRecords;
    /**
     * 发送压缩的数据请求
     * @param data
     */
    private send;
    /**
     * 页面url变化后，直接重新全量记录
     * @private
     */
    private proxyPushState;
    private proxyReplaceState;
    private proxyVueErrorHandler;
}
export {};
