/**
 * hybrid 以及 browser 包使用此文件，将 invoke 定义和 bridge 包隔离，避免 browser 以及 hybrid 包必须引用 yoda 包 ts 定义问题。
 */
import type { SetClientLogTypes } from "../types/bridge";
export declare const isInYoda: () => boolean;
/**
 * 是否支持桥接上报埋点接口
 */
export declare const isSupportBridgeLog: () => Promise<boolean>;
/**
 * 传入 invoke 方法
 */
export declare const postInvoke: (invokeOrYoda: any) => void;
/**
 * 发送业务事件
 */
export declare const setClientLog: (type: SetClientLogTypes, data: unknown) => Promise<any>;
/**
 * 发送雷达事件
 */
export declare const sendRadarLog: (params: any) => Promise<any>;
/**
 * 发送web日志，支持日志回捞
 */
export declare const sendWebLog: (params: any) => Promise<any>;
/**
 * 发送汇总数据
 */
export declare const sendSummarizedLog: (params: any) => Promise<any>;
/**
 * 获取应用信息
 * @returns
 */
export declare const getAppInfo: () => Promise<any>;
/**
 * 获取 webview 信息
 */
export declare const getWebviewLoadPerf: (params: any, options: any) => Promise<any>;
/**
 * 获取 webview 加载信息
 */
export declare const getWebviewInfo: () => Promise<any>;
/**
 * 获取 ksd相关webview 信息
 */
export declare const getKDSWebviewLoadPerf: (params?: any) => Promise<any>;
/**
 * 获取设备信息
 * @returns
 */
export declare const getDeviceInfo: () => Promise<any>;
declare const _default: {
    setClientLog: (type: SetClientLogTypes, data: unknown) => Promise<any>;
    sendRadarLog: (params: any) => Promise<any>;
    sendWebLog: (params: any) => Promise<any>;
    sendSummarizedLog: (params: any) => Promise<any>;
    getWebviewLoadPerf: (params: any, options: any) => Promise<any>;
    getKDSWebviewLoadPerf: (params?: any) => Promise<any>;
    isSupportBridgeLog: () => Promise<boolean>;
    isSupportBridge: (name: string, namespace?: string) => Promise<boolean>;
    invoke: any;
};
export default _default;
