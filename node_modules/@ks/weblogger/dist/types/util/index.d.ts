import type { UrlMapFn, UrlMap, UrlMapFnParam } from '../config/types';
/**
 * 获取 localStorage 缓存
 */
export declare function getLocalStorageItem(key: string): any;
/**
 * 设置 localStorage 缓存
 */
export declare function setLocalStorageItem(key: string, value: any): boolean;
/**
 * 判断item是否在目标数组arr中
 * @param {*} arr   目标数组
 * @param {*} item  item
 */
export declare function inArray(arr: any[], item: any): boolean;
/**
 * 从目标arr中删除item
 * @param {*} arr  目标数组
 * @param {*} item  item
 */
export declare function deleteArray(arr: any[], item: any): void;
/**
 * 事件监听兼容处理
 * @param {*} evtTarget  事件监听目标
 * @param {*} evtName   事件名
 * @param {*} callback  回调函数
 * @param {*} options  相关参数设置
 */
export declare function addMonitor(evtTarget: Element | Window | Document, evtName: string, callback: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
/**
 * 事件监听解绑兼容处理
 * @param {*} evtTarget  事件监听目标
 * @param {*} evtName   事件名
 * @param {*} callback  事件回调
 */
export declare function removeMonitor(evtTarget: Element | Window | Document, evtName: string, callback: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
export declare function leftPad(str: string, len: number, ch?: string): string;
/**
 * 是否是快手系APP
 */
export declare const isInApp: (ua?: string) => boolean | undefined;
export declare function parseQueryString(queryString: string): any;
export declare function stringifyQuery(paramsString: any): string;
export declare function getStringBytes(data: any): number;
/**
 * lodash 的 pick 方法
 */
export declare function pick(data: any, paths: string[]): any;
/**
 * lodash的omit方法
 * @param data
 * @param paths
 */
export declare function omit(data: any, paths: string[]): any;
/**
 * 检查依赖版本号是否不小于推荐版本
 */
export declare function checkVersion(recommendVersion: string, version: string): boolean;
export declare function checkSupportCloseCoPage(): any;
/**
 * 获取元素xpath
 * @param element 元素
 */
export declare function getXpathFromNode(element: HTMLElement): string;
/**
 * url中获取path和query
 */
export declare function getPathAndQueryFromUrl(): {
    pageUrl: string;
    pagePath: string;
    pageParams: any;
};
export declare function getUrlAndQueryFromUrl(url?: string): {
    page: string;
    params?: undefined;
} | {
    page: string;
    params: any;
};
export declare const getMappingPage: (urlPackage: UrlMapFnParam, urlMap?: UrlMap | UrlMapFn) => {
    page: string | undefined;
    params: any;
    pageId: string | undefined;
};
export declare function cloneDeep(obj: [] | {}): [] | {};
/**
 * 对象打平赋值
 * @param target
 * @param options
 * @returns
 */
export declare const flattenAssign: (target: any, options: any) => void;
export declare function pageUrlValidate(page: string): boolean;
export declare const getResolution: () => string;
export declare function supportsPushState(): boolean;
export declare function deleteUrlQueryAndReturnFullUrl(url: string, deleteKeyArray: string[]): string;
interface TypeQueryMap {
    [key: string]: string | number;
}
/**
 * 设置url中的参数，并返回完整url
 * @param url
 * @param configQueryMap
 */
export declare function setUrlQueryAndReturnFullUrl(url: string, configQueryMap: TypeQueryMap): string;
export declare function isMobileAndIpad(): boolean;
/**
 * 是否支持 worker gzip 压缩
 * @returns
 */
export declare const enableAsyncGzip: () => boolean;
/**
 * 返回正整数数值
 * @param value
 */
export declare const getPositiveInteger: (value: number) => number;
export declare function stringifyParams(params: string | any): string;
export {};
