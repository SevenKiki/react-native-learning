import type { ClientLog as ClientLogV3 } from '../proto/v3/client_log';
import type { ClientLog as ClientLogV2 } from '../proto/v2/client_log';
import type { CommonPackage } from './common';
import type { CommonConfig } from "../types/configuration";
import type { SendCallback, LoggerSender } from "../config/types";
export declare type LogPackage = (ClientLogV3.ReportPackage | ClientLogV2.ReportPackage) & {
    seqid?: number;
};
export declare type ReportEvent = ClientLogV3.ReportEvent | ClientLogV2.ReportEvent;
export declare class BatchLog {
    asyncQueue: ReportEvent[];
    throttleQueue: ReportEvent[];
    errorQueue: LogPackage[];
    sendingQueue: {
        [key: string]: LogPackage;
    };
    protected batchWaitTimer: any;
    private compensateTimer;
    commonPackage: CommonPackage;
    config: CommonConfig;
    url: string;
    isV2: boolean;
    isDebug: boolean;
    radarUrl: string;
    drained: boolean;
    baseSendData: LoggerSender;
    batchCount: number;
    isSetSamplingResult: boolean;
    sendingYield?: Promise<any> | null;
    constructor(config: any, commonPackage: CommonPackage);
    sendData(data: {
        url: string;
        data: any;
        [key: string]: any;
    }, callback?: SendCallback): any;
    get responseSamplingStorageKey(): string;
    /**
     * 根据配置生成上报的 url 地址
     */
    updateUrls(): void;
    formatUrl(): void;
    /**
     * 之所以使用 JSON 而不是 commonPackage 对象，是因为对象可能会变化，而 JSON 则是当时的一个快照，一旦生成不会变化
     */
    getCommonPackageJSON(): import("../proto/base").Base.CommonPackage;
    /**
     * 进入发送流程
     * @param data
     * @param immediate
     * @param callback 用户自定义 callback
     * @returns
     */
    send(data: ReportEvent, immediate?: boolean, callback?: SendCallback): void | Boolean;
    /**
     * 短时异步上报
     */
    sendAsync(data: ReportEvent, callback?: SendCallback): Promise<void>;
    /**
     * 节流上报
     */
    sendThrottle(data: ReportEvent): void;
    /**
     * 批量发送日志
     * @param logs
     * @param callback 用户自定义 callback
     */
    sendLogs(logs: ReportEvent[], callback?: SendCallback): void | Boolean;
    /**
     * 将日志包通过接口发送
     * @param data
     * @param callback
     */
    sendPackage(data: LogPackage, callback?: SendCallback): void;
    /**
     * 每个 logPackage 包含了所有上报所需的信息，上报地址和上报数据
     * @param logs
     * @param url
     */
    buildLogPackage(logs: ReportEvent[], url: string): ClientLogV3.ReportPackage | ClientLogV2.ReportPackage;
    buildV2Package(logs: ClientLogV2.ReportEvent[], url: string): ClientLogV2.ReportPackage;
    buildV3Package(logs: ClientLogV3.ReportEvent[], url: string, commonPackageOptions?: {
        [key: string]: any;
    }): ClientLogV3.ReportPackage;
    /**
     * 清空当前日志队列
     * @param callback
     */
    flush: (callback?: SendCallback) => void;
    /**
     * 页面关闭前排干所有未发送的和发送失败的日志
     */
    drain: () => void;
    /**
     * 日志上报出错处理，一般为网络异常
     * @param logPackage
     */
    errHandler(logPackage: LogPackage): void;
    flushErrorLogs(): void;
    destory(): void;
    /**
     * 雷达专用上报（雷达上报接口和其他事件上报接口做了区分，用于分流统计）
     * @param radar
     */
    sendRadar(radar: ClientLogV3.ReportEvent, service_name?: string): void;
}
