import type { LogPackage, BatchLog as Logger } from './logger';
import type { BasePlugin, BasePluginConstructor } from "../plugins/base";
import type { CommonPackage, CommonPackageOptions } from './common';
import type { HttpCommonPackage, CommonConfig, UrlObj, PageTypeKey } from "../types/configuration";
import UrlPackage from './url-package';
import EventEmitter from '../util/events';
import type { EventType as IEventType, EventOptions as IEventOptions } from "../types/event";
export default class Weblog extends EventEmitter {
    static __instance: Weblog;
    version: string;
    currentUrlPackage: UrlPackage;
    referUrlPackage?: UrlPackage;
    baseOption: HttpCommonPackage;
    logConfig: CommonConfig;
    logger: Logger;
    commonPackage: CommonPackage;
    plugins: {
        [key: string]: BasePlugin | any;
    };
    /**
     * @param {?object} logConfig Logger初始化配置
     * @param {object=} options 额外配置参数
     *                    - base 公参的覆盖
     */
    constructor(logConfig: CommonConfig, base?: HttpCommonPackage);
    get sessionId(): string;
    initUrlPackage(): void;
    /**
     * 更新当前 url 信息
     * @param url
     * @param type
     */
    updateCurrentUrlPackage(url?: UrlObj | string, type?: PageTypeKey): void;
    /**
     * 更新 refer url 信息
     * @param url
     * @param type
     */
    updateReferUrlPackage(url?: UrlObj | UrlPackage | string, type?: PageTypeKey): void;
    /**
     * 重设 common_package 信息
     * @param base
     */
    updateBase(base: HttpCommonPackage): void;
    /**
     * 更新现有 common_package 信息
     */
    updateCommonPackage(options: HttpCommonPackage | CommonPackageOptions): void;
    /**
     * 初始化插件
     * @param plugins
     */
    addPlugins(): void;
    /**
     * 加载插件实例
     */
    addPluginInstance(pluginInstance: any): void;
    /**
     * 加载插件构造函数
     * @param plugin
     * @param pluginOptions
     */
    plug(plugin: BasePluginConstructor, pluginOptions?: any): void;
    unplug(name: string): void;
    unplugAll(): void;
    flush: () => void;
    /**
     * 扩展类实现
     * @param eventType
     * @param eventOptions
     * @returns
     */
    generateLog<T extends IEventType>(eventType: T, eventOptions?: IEventOptions<T>): {};
    send<T extends IEventType>(type: T, options: IEventOptions<T>, immediately?: boolean): void | Boolean;
    /**
     * 收集上报
     * @param type
     * @param options
     * @returns
     */
    collect<T extends IEventType>(type: T, options: IEventOptions<T>): void;
    sendImmediately<T extends IEventType>(type: T, options: IEventOptions<T>): void;
    sendPackage(data: LogPackage, callback?: (error?: any) => void): void;
    destroy(): void;
}
