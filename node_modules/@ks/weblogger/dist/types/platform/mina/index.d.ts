import type { PageData, ExtraInfo, PublicParams, TrackParams, PVParams, CustomParams } from './types';
import type { EventType as IEventType, EventOptions as IEventOptions, ImmediatelyEventOptions } from "../../types/mina";
import type { HttpWeblogInitParamsMina } from "../../types/configuration";
import BaseWeblog from "../../core";
import UrlPackage from './url-package';
import Logger from './logger';
import { UrlObj, EntryTagType, PageTypeKey } from "../../config/types";
import EntryTag from './entry-tag';
import { CommonPackage } from './common';
export default class Weblog extends BaseWeblog {
    currentUrlPackage: UrlPackage;
    referUrlPackage?: UrlPackage;
    logger: Logger;
    entryTag: EntryTag | null;
    logConfig: HttpWeblogInitParamsMina[0];
    commonPackage: CommonPackage;
    perennialExtra: {
        [key: string]: any;
    };
    constructor(logConfig: HttpWeblogInitParamsMina[0], base?: HttpWeblogInitParamsMina[1]);
    initUrlPackage(): void;
    updateCurrentUrlPackage(url?: string | UrlObj, type?: PageTypeKey): void;
    generateLog<T extends IEventType>(eventType: T, eventOptions: IEventOptions<T>, factory?: (type: string, data: any) => any): any;
    /**
     * 更新 refer url 信息
     * @param url
     * @param type
     */
    updateReferUrlPackage(url?: UrlObj | UrlPackage, type?: PageTypeKey): void;
    /**
     * 获取染色参数信息
     */
    getEntryTags(): EntryTagType[] | null;
    /**
     * 设置染色参数
     * @param entryTag
     */
    setEntryTag(entryTag: EntryTagType): number | null;
    /**
     * 消费 entryTags 信息
     * @param subPage
     */
    consumeEntryTag(subPage: string): void | null;
    /**
     * 清空 entryTags 信息
     * @param subPage
     * @param containSelf
     */
    clearEntryTag(subPage: string, containSelf?: boolean): void | null;
    initBuildInPlugins(): void;
    init(logConfig: HttpWeblogInitParamsMina[0], base?: HttpWeblogInitParamsMina[1]): Weblog;
    track(params: TrackParams): void;
    sendPV(params: PVParams): void;
    setPage({ page, pageParam: params }: PageData): void;
    sendCustomEvent(params: CustomParams): void;
    private genWebloggerParams;
    setPublicParam(params: PublicParams): void;
    sendExceptionEvent(params: any): void;
    setSystemInfo(): void;
    setLoggerSessionUrl(url: string): void;
    setExtraInfo(extraInfo: ExtraInfo, append?: boolean): void;
    setPerennialExtra(extraInfo: ExtraInfo): void;
    updateSessionId(did?: string): void;
    setCommonPackageReady(): void;
    /**
     * 事件发送前的处理
     * @param type
     * @param options
     */
    beforeSend<T extends IEventType>(type: T, options?: IEventOptions<T>): void;
    /**
     * 收集上报
     * @param type
     * @param options
     * @returns
     */
    collect<T extends IEventType>(type: T, options?: IEventOptions<T>): void;
    sendImmediately<T extends IEventType>(type: T, options?: ImmediatelyEventOptions<T>): void;
    send<T extends IEventType>(type: T, params: ImmediatelyEventOptions<T>, immediately?: boolean): void;
}
