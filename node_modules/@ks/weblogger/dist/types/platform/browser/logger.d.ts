import type { ReportEvent } from "../../core/logger";
import type { CommonPackage } from './common';
import type { SendCallback } from "../../config/types";
import { BatchLog as BaseLogger } from "../../core/logger";
export declare const RESPONSE_SAMPLING_STORAGE_KEY = "RESPONSE_SAMPLING_STORAGE_KEY";
export default class Logger extends BaseLogger {
    static Gzipper?: any;
    commonPackage: CommonPackage;
    enableAsyncGzip: boolean | undefined;
    baseSendData: (data: {
        [key: string]: any;
        url: string;
        data: any;
    }, callback?: ((error?: any) => void) | undefined) => void;
    sendEffectiveTime: undefined | number;
    constructor(config: any, commonPackage: CommonPackage);
    getResponseSamplingStorage(): Promise<void>;
    /**
     * 返回 true 代表不发送埋点
     * @param log
     * @param immediate
     * @param callback
     */
    isResponseSampling(): boolean;
    setResponseSamplingConfig(responsePromise?: Promise<string | undefined>): void;
    /**
     * 根据配置生成上报的 url 地址
     */
    updateUrls(): void;
    sendLog(data: {
        url: string;
        data: any;
        [key: string]: any;
    }, callback?: (error?: any) => void): void;
    /**
     *
     * @param data
     * @param callback weblogger 系统级错误回调，会清除缓存的发送错误的日志。
     */
    sendGzip(data: {
        url: string;
        data: any;
        [key: string]: any;
    }, callback?: (error?: any) => void): boolean;
    /**
     * 埋点发送前获取 common_package 信息
     * @param data
     * @returns
     */
    getCommonPackageJSON(): import("../../proto/base").Base.CommonPackage;
    send(data: ReportEvent, immediate?: boolean, callback?: SendCallback): void;
}
