import { Base } from '../base';
/**
 * 启动来源
 ```
0: UNKNOWN_SOURCE, // 未知
1: LAUNCHER, // 桌面
2: NOTIFICATION_BAR, // 废弃，不要用。
3: WEB_VIEW, // 废弃，不要用
4: URI, // 通过设置 uri 方式打开
5: APP, // 其他 app 打开
6: PUSH, // 从 Push 启动
 ```
 */
export declare enum Source {
    UNKNOWN_SOURCE = 0,
    LAUNCHER = 1,
    NOTIFICATION_BAR = 2,
    WEB_VIEW = 3,
    URI = 4,
    APP = 5,
    PUSH = 6
}
/** 启动的方式
 ```
0: UNKNOWN_MODE, // 未知
1: COLD, // 冷启动
2: HOT,  // 热启动，进程还在存活，界面已退出
3: RESUME, // 恢复状态，进程存储，界面暂定状态恢复
 ```
 */
export declare enum Mode {
    UNKNOWN_MODE = 0,
    COLD = 1,
    HOT = 2,
    RESUME = 3
}
/** 应用启动事件
 ```
source?: Source; // 启动来源
cold?: Boolean; // 是否冷启动
time_cost?: Number; // 程序从启动到页面布局加载完成的时间 单位 ms
detail?: String; // 启动的 uri 或者启动来源的参数，如果是从 push 启动，会是 push 的渠道，例如 xiaomi,  getui 等
target?: String; // 具体启动的页面
framework_cost?: Number; // 框架启动耗时 单位 ms
fetch_data_cost?: Number; // 获取数据耗时 单位 ms
all_visible_cost?: Number; // 当前页面加载出来耗时 单位 ms，例如现在的首页就是指第一屏所有封面的加载时间
element_count?: Number;
use_cache?: Boolean; // 是否使用了缓存
mode?: Mode; // 启动的方式
push_id?: String; // push启动情况下上报push id
home_post_cost?: Number; // 首页启动耗时
oaid?: String; // Android 10之后无法获取IMEI，使用OAID作为补充。信通院制定OAID的标准，各厂商实现。
```
 */
export interface LaunchEvent {
    source?: Source;
    cold?: Boolean;
    time_cost?: Number;
    detail?: String;
    target?: String;
    framework_cost?: Number;
    fetch_data_cost?: Number;
    all_visible_cost?: Number;
    element_count?: Number;
    use_cache?: Boolean;
    mode?: Mode;
    push_id?: String;
    home_post_cost?: Number;
    oaid?: String;
}
/** app离开时信息记录
 ```
app_use_duration?: Number; // 应用的使用时长，单位 ms
last_url_package?: Base.UrlPackage; // 离开前停留的页面
 ```
 */
export interface AppUsageStatEvent {
    app_use_duration?: Number;
    last_url_package?: Base.UrlPackage;
}
/**
 * 异常类型
 */
declare enum ExceptionEventType {
    UNKNOWN_TYPE = 0,
    CRASH = 1,
    EXCEPTION = 2,
    ANR = 3,
    NATIVE_CRASH = 4,
    OOM = 5,
    FLUTTER_EXCEPTION = 6,
    OOM_STACKS = 7,
    ABNORMAL_EXIT = 8,
    NATIVE_LEAK = 9,
    MEMORY_MONITOR = 10,
    FD_STACKS = 11,
    THREAD_STACKS = 12,
    LONG_BLOCK = 13,
    DEAD_LOOP = 14,
    SYSTEM_EXIT_STAT = 15,
    METRICS_DIAGNOSTIC_PAYLOAD = 16,
    ENERGY_IMPACT = 17,
    RETAIN_CYCLES = 18
}
/** 应用异常事件
 *
 */
export interface ExceptionEvent {
    type: ExceptionEventType;
    message: String;
    url_package: Base.UrlPackage;
    flag?: String;
}
/** 设备信息收集
 *
 */
export interface DeviceStatEvent {
    os_version?: String;
    model?: String;
    cpu_cores?: Number;
    memory?: Number;
    density_dpi?: Number;
    screen_width?: Number;
    screen_height?: Number;
    battery_temperature?: Number;
    cpu_usage?: Number;
    memory_usage?: Number;
    battery?: Number;
    charging?: Boolean;
    volume?: Number;
    brightness?: Number;
    using_earphone?: Boolean;
    disk_all?: Number;
    disk_free?: Number;
    app_disk_used?: Number;
    imeis?: String;
    imsi?: String;
    jail_broken?: Boolean;
    jail_broken_detail?: String;
    gdb?: Boolean;
    ad_id?: String;
    notification_setting?: any;
    permission_authorization_status?: any;
    umeng_id?: String;
    shumeng_id?: String;
    android_id?: String;
    imei?: String;
    mac?: String;
    oaid?: String;
}
export {};
