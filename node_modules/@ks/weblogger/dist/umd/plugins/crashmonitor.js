(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.CrashMonitor = factory());
})(this, (function () { 'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    /* global Reflect, Promise */
    var _extendStatics = function extendStatics(d, b) {
      _extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        }
      };

      return _extendStatics(d, b);
    };

    function __extends(d, b) {
      if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");

      _extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var _assign = function __assign() {
      _assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

      return _assign.apply(this, arguments);
    };

    var BasePlugin = /** @class */ (function () {
        function BasePlugin() {
        }
        BasePlugin.prototype.apply = function (weblog) {
            this.weblog = weblog;
        };
        return BasePlugin;
    }());

    /**
     * 事件监听兼容处理
     * @param {*} evtTarget  事件监听目标
     * @param {*} evtName   事件名
     * @param {*} callback  回调函数
     * @param {*} options  相关参数设置
     */
    function addMonitor(evtTarget, evtName, callback, options) {
        if ('attachEvent' in evtTarget) {
            return evtTarget.attachEvent('on' + evtName, callback);
        }
        return evtTarget.addEventListener(evtName, callback, options);
    }
    /**
     * 事件监听解绑兼容处理
     * @param {*} evtTarget  事件监听目标
     * @param {*} evtName   事件名
     * @param {*} callback  事件回调
     */
    function removeMonitor(evtTarget, evtName, callback, options) {
        if ('attachEvent' in evtTarget) {
            return evtTarget.detachEvent('on' + evtName, callback);
        }
        return evtTarget.removeEventListener(evtName, callback, options);
    }

    /**
     * @file crash-monitor.js
     * @author kevin (lanlazy@163.com)
     * beforeunload触发条件:正常关闭标签,刷新,关闭浏览器
     * @created 2018-08-08
     */
    var defaultOptions = {
        updateInterval: 20 * 1000,
        crashThreshold: 10 * 1000,
    };
    var monitorPrefix = '@ks.monitor.crash_';
    var CrashMonitor = /** @class */ (function (_super) {
        __extends(CrashMonitor, _super);
        /**
         * 兼容写法，如果在 Weblog 初始化设置 plugins 时，不需要设置 weblog
         * @param weblog
         */
        function CrashMonitor(weblog) {
            var _this = _super.call(this) || this;
            _this.eventName = 'onpagehide' in window ? 'pagehide' : 'beforeunload';
            _this.options = _assign({}, defaultOptions);
            _this.historyMoniorInfo = null;
            /**
             * 停止监控过程
             * 1.在页面正常卸载时自动调用
             * 2.需要手动卸载时手动调用
             */
            _this.stop = function () {
                clearInterval(_this.updateIntervalId);
                try {
                    localStorage.removeItem(_this.monitorId);
                }
                catch (e) {
                    // nothing
                }
            };
            if (weblog === null || weblog === void 0 ? void 0 : weblog.collect) {
                _this.apply(weblog);
            }
            addMonitor(window, _this.eventName, _this.stop);
            return _this;
        }
        CrashMonitor.prototype.apply = function (weblog) {
            if (!weblog)
                return;
            this.weblog = weblog;
            this.monitorId = monitorPrefix + this.weblog.sessionId;
            this.start();
        };
        CrashMonitor.prototype.destroy = function () {
            this.stop();
            removeMonitor(window, this.eventName, this.stop);
        };
        CrashMonitor.prototype.pickHistoryInfo = function () {
            for (var key in localStorage) {
                if (key.indexOf(monitorPrefix) === 0) {
                    try {
                        var historyMoniorString = localStorage.getItem(key);
                        var data = JSON.parse(historyMoniorString);
                        this.checkHistoryCrash(data);
                    }
                    catch (e) {
                        // nothing
                    }
                }
            }
        };
        CrashMonitor.prototype.checkHistoryCrash = function (data) {
            var now = new Date().valueOf();
            if (data && data.time && now - data.time > this.options.crashThreshold) {
                this.weblog.collect('CUSTOM', {
                    key: 'crash',
                    value: data
                });
            }
        };
        /**
         * 开始定时更新快照
         */
        CrashMonitor.prototype.start = function () {
            var _this = this;
            this.pickHistoryInfo();
            this.updateIntervalId = window.setInterval(function () {
                _this.update();
            }, this.options.updateInterval);
            this.update();
        };
        /**
         * 更新监控快照
         * @param {*} data 外部追加额外的快照信息
         */
        CrashMonitor.prototype.update = function () {
            var _a, _b;
            // TODO，非标准api后续可能会需要更新
            if (!window.performance || !window.performance.memory) {
                return;
            }
            // TODO后面看看需要补其他什么信息
            var monitorInfo = {
                time: new Date().valueOf(),
                memory: {
                    limit: Math.floor(window.performance.memory.jsHeapSizeLimit / 1024),
                    total: Math.floor(window.performance.memory.totalJSHeapSize / 1024),
                    used: Math.floor(window.performance.memory.usedJSHeapSize / 1024),
                },
                href: (_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.href,
                sessionId: (_b = this.weblog) === null || _b === void 0 ? void 0 : _b.sessionId
            };
            try {
                localStorage.setItem(this.monitorId, JSON.stringify(monitorInfo));
            }
            catch (e) {
                // nothing
            }
        };
        CrashMonitor.key = 'crachMonitor';
        return CrashMonitor;
    }(BasePlugin));

    return CrashMonitor;

}));
//# sourceMappingURL=crashmonitor.js.map
