(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.FPSMonitor = factory());
})(this, (function () { 'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    /* global Reflect, Promise */
    var _extendStatics = function extendStatics(d, b) {
      _extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        }
      };

      return _extendStatics(d, b);
    };

    function __extends(d, b) {
      if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");

      _extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var _assign = function __assign() {
      _assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

      return _assign.apply(this, arguments);
    };

    var BasePlugin = /** @class */ (function () {
        function BasePlugin() {
        }
        BasePlugin.prototype.apply = function (weblog) {
            this.weblog = weblog;
        };
        return BasePlugin;
    }());

    /**
     * 事件监听兼容处理
     * @param {*} evtTarget  事件监听目标
     * @param {*} evtName   事件名
     * @param {*} callback  回调函数
     * @param {*} options  相关参数设置
     */
    function addMonitor(evtTarget, evtName, callback, options) {
        if ('attachEvent' in evtTarget) {
            return evtTarget.attachEvent('on' + evtName, callback);
        }
        return evtTarget.addEventListener(evtName, callback, options);
    }
    /**
     * 事件监听解绑兼容处理
     * @param {*} evtTarget  事件监听目标
     * @param {*} evtName   事件名
     * @param {*} callback  事件回调
     */
    function removeMonitor(evtTarget, evtName, callback, options) {
        if ('attachEvent' in evtTarget) {
            return evtTarget.detachEvent('on' + evtName, callback);
        }
        return evtTarget.removeEventListener(evtName, callback, options);
    }

    var defaultOptions = {
        // 更新间隔
        interval: 10 * 1000,
        // 浮点精度 0 取整
        decimals: 2,
    };
    function fakeRaf(callback) {
        return setTimeout(callback, 1000 / 16);
    }
    var fakeCaf = clearTimeout;
    var raf = function (callback) {
        var fn = window.requestAnimationFrame
            || window.mozRequestAnimationFrame
            // @ts-ignore
            || window.webkitRequestAnimationFrame
            || fakeRaf;
        return fn.call(this, callback);
    };
    var caf = function (handle) {
        var fn = window.cancelAnimationFrame
            || window.mozCancelAnimationFrame
            // @ts-ignore
            || window.webkitCancelAnimationFrame
            || fakeCaf;
        return fn.call(this, handle);
    };
    var FPSMonitor = /** @class */ (function (_super) {
        __extends(FPSMonitor, _super);
        function FPSMonitor(weblog, options) {
            var _this = _super.call(this) || this;
            _this.options = _assign({}, defaultOptions);
            _this.count = 0;
            _this.visibilityChange = function () {
                var state = document.visibilityState;
                if (state === 'visible') {
                    _this.start();
                }
                else if (state === 'hidden') {
                    // hidden 之后 fps 会变成 0，属于无效数据
                    _this.stop();
                }
            };
            if (options) ;
            else if (weblog) {
                if (weblog === null || weblog === void 0 ? void 0 : weblog.collect) {
                    _this.apply(weblog);
                }
            }
            Object.assign(_this.options, options);
            addMonitor(window, 'visibilitychange', _this.visibilityChange);
            _this.start();
            return _this;
        }
        FPSMonitor.prototype.destroy = function () {
            this.stop();
            removeMonitor(window, 'visibilitychange', this.visibilityChange);
        };
        FPSMonitor.prototype.start = function () {
            if (this.loopId || this.fpsTickId)
                return;
            this.loop();
            this.fpsTick();
        };
        FPSMonitor.prototype.fpsTick = function () {
            var _this = this;
            this.fpsTickId = raf(function () {
                _this.count++;
                _this.fpsTick();
            });
        };
        FPSMonitor.prototype.loop = function () {
            var _this = this;
            this.loopBeginTime = new Date().valueOf();
            this.loopId = window.setTimeout(function () {
                _this.loopEndTime = new Date().valueOf();
                var fps = _this.calculate();
                _this.weblog.collect('CUSTOM', {
                    key: 'fps',
                    value: { key: 'fps', value: fps }
                });
                _this.count = 0;
                _this.loop();
            }, this.options.interval);
        };
        FPSMonitor.prototype.stop = function () {
            caf(this.fpsTickId);
            window.clearTimeout(this.loopId);
            this.loopId = 0;
            this.fpsTickId = 0;
        };
        FPSMonitor.prototype.calculate = function () {
            var during = this.loopEndTime - this.loopBeginTime;
            // raf执行次数
            var runCount = during / this.count;
            return +(1000 / runCount).toFixed(this.options.decimals);
        };
        FPSMonitor.key = 'fpsMonitor';
        return FPSMonitor;
    }(BasePlugin));

    return FPSMonitor;

}));
//# sourceMappingURL=fpsmonitor.js.map
