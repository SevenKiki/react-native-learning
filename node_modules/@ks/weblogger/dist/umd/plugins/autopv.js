(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.AutoPV = factory());
})(this, (function () { 'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    /* global Reflect, Promise */
    var _extendStatics = function extendStatics(d, b) {
      _extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        }
      };

      return _extendStatics(d, b);
    };

    function __extends(d, b) {
      if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");

      _extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var BasePlugin = /** @class */ (function () {
        function BasePlugin() {
        }
        BasePlugin.prototype.apply = function (weblog) {
            this.weblog = weblog;
        };
        return BasePlugin;
    }());

    /**
     * 事件监听兼容处理
     * @param {*} evtTarget  事件监听目标
     * @param {*} evtName   事件名
     * @param {*} callback  回调函数
     * @param {*} options  相关参数设置
     */
    function addMonitor(evtTarget, evtName, callback, options) {
        if ('attachEvent' in evtTarget) {
            return evtTarget.attachEvent('on' + evtName, callback);
        }
        return evtTarget.addEventListener(evtName, callback, options);
    }
    /**
     * 事件监听解绑兼容处理
     * @param {*} evtTarget  事件监听目标
     * @param {*} evtName   事件名
     * @param {*} callback  事件回调
     */
    function removeMonitor(evtTarget, evtName, callback, options) {
        if ('attachEvent' in evtTarget) {
            return evtTarget.detachEvent('on' + evtName, callback);
        }
        return evtTarget.removeEventListener(evtName, callback, options);
    }
    function parseQueryString(queryString) {
        var result = {};
        var queries = queryString.split('&');
        for (var _i = 0, queries_1 = queries; _i < queries_1.length; _i++) {
            var query = queries_1[_i];
            var _a = query.split('='), key = _a[0], value = _a[1];
            if (!(key in result)) {
                result[key] = value;
                continue;
            }
            if (result[key] instanceof Array) {
                result[key].push(value);
                continue;
            }
            result[key] = [result[key], value];
        }
        return result;
    }
    function getUrlAndQueryFromUrl(url) {
        if (url === void 0) { url = location.href; }
        var queryIndex = url.lastIndexOf('?');
        if (queryIndex === -1) {
            return {
                page: url
            };
        }
        var page = url.slice(0, queryIndex);
        var queryString = url.slice(queryIndex + 1);
        return {
            page: page,
            params: parseQueryString(queryString),
        };
    }
    var getMappingPage = function (urlPackage, urlMap) {
        var url = urlPackage.url, page = urlPackage.page, params = urlPackage.params, pageId = urlPackage.pageId;
        if (!page && typeof url === 'string') {
            var parsed = getUrlAndQueryFromUrl(url);
            page = parsed.page;
            params = parsed.params;
        }
        if (typeof urlMap === 'function') {
            try {
                var res = urlMap({ url: url, page: page, params: params });
                if (typeof res === 'string') {
                    page = res;
                }
                else if (typeof res === 'object') {
                    if (res.page) {
                        page = res.page;
                    }
                    if (res.params) {
                        params = res.params;
                    }
                    if (res.pageId) {
                        pageId = res.pageId;
                    }
                }
            }
            catch (err) { }
        }
        else if (typeof urlMap === 'object') {
            var mappingPage = '';
            for (var key in urlMap) {
                if ((url || page || '').indexOf(key) > -1) {
                    mappingPage = urlMap[key];
                    break;
                }
            }
            if (mappingPage) {
                page = mappingPage;
            }
        }
        return {
            page: page,
            params: params,
            pageId: pageId
        };
    };

    var willunload = false;
    var urlChangeEventId = 'hashchange';
    var AutoPV = /** @class */ (function (_super) {
        __extends(AutoPV, _super);
        function AutoPV(weblog, options) {
            var _this = _super.call(this) || this;
            _this.beginTime = new Date().valueOf();
            _this.oldPushState = history.pushState;
            _this.oldReplaceState = history.replaceState;
            _this.visibilityChange = function () {
                var state = document.visibilityState;
                if (state === 'visible') {
                    willunload = false;
                }
                // 页面关闭也会触发 hidden 事件，这种情况下不再上报事件
                if (!_this.weblog || willunload)
                    return;
                if (_this.autoPVFilter(location.href, null, state)) {
                    if (state === 'hidden' || state === 'visible') {
                        if (state === 'visible')
                            _this.beginTime = new Date().valueOf();
                        _this.weblog.sendImmediately('PV', {
                            type: state,
                            // @ts-ignore
                            auto: true,
                            beginTime: _this.beginTime
                        });
                    }
                }
            };
            _this.proxyPushState = function (data, title, url) {
                _this.urlChange();
                return _this.oldPushState.call(history, data, title, url);
            };
            _this.proxyReplaceState = function (data, title, url) {
                _this.urlChange();
                return _this.oldReplaceState.call(history, data, title, url);
            };
            _this.urlChange = function () {
                if (!_this.weblog)
                    return;
                setTimeout(function () {
                    var _a = getMappingPage({ url: location.href }, _this.weblog.logConfig.urlMap), page = _a.page, params = _a.params;
                    if (page && page === _this.weblog.currentUrlPackage.page) {
                        // @ts-ignore
                        _this.weblog.currentUrlPackage.update(page, params);
                        return;
                    }
                    if (_this.autoPVFilter(location.href, _this.weblog.currentUrlPackage.page, 'leave')) {
                        // 触发旧页面离开
                        _this.weblog.sendImmediately('PV', {
                            type: 'leave',
                            // @ts-ignore
                            auto: true,
                            beginTime: _this.beginTime,
                            // @ts-ignore
                            urlPage: _this.weblog.currentUrlPackage.toJSON()
                        });
                    }
                    if (_this.autoPVFilter(location.href, _this.weblog.currentUrlPackage.page, 'enter')) {
                        // 更新当前页面信息
                        _this.weblog.updateReferUrlPackage(_this.weblog.currentUrlPackage);
                        _this.weblog.updateCurrentUrlPackage(location.href);
                        if (_this.weblog.currentUrlPackage.page.indexOf('http') === 0) {
                            console.warn('[warn 302]', "autoPV \u63D2\u4EF6 - \u4E0A\u62A5 page \u4FE1\u606F\u4E0D\u7B26\u5408\u89C4\u8303\uFF0C\u53EF\u4EE5\u4F7F\u7528 urlMap \u5C06 url \u8F6C\u6362\u4E3A\u82F1\u6587\u6807\u8BC6!");
                        }
                        // 更新新页面 enter 时间
                        _this.beginTime = new Date().valueOf();
                        _this.weblog.sendImmediately('PV', {
                            type: 'enter',
                            // @ts-ignore
                            auto: true,
                        });
                    }
                }, 0);
            };
            _this.beforeUnload = function () {
                willunload = true;
                if (!_this.weblog || !_this.autoPVFilter(location.href, null, 'leave')) {
                    return;
                }
                _this.weblog.sendImmediately('PV', {
                    type: 'leave',
                    // @ts-ignore
                    auto: true,
                    beginTime: _this.beginTime
                });
            };
            _this.autoPVFilter = function () { return true; };
            // 兼容处理
            if (weblog) {
                if (typeof weblog === 'function') {
                    _this.autoPVFilter = weblog;
                }
                else if (typeof (weblog === null || weblog === void 0 ? void 0 : weblog.collect) === 'function') {
                    if (options === null || options === void 0 ? void 0 : options.autoPVFilter) {
                        _this.autoPVFilter = options.autoPVFilter;
                    }
                    _this.apply(weblog);
                }
                else if ('autoPVFilter' in weblog && typeof weblog.autoPVFilter === 'function') {
                    _this.autoPVFilter = weblog.autoPVFilter;
                }
            }
            if (options && typeof options.autoPVFilter === 'function') {
                _this.autoPVFilter = options.autoPVFilter;
            }
            history.pushState = _this.proxyPushState;
            history.replaceState = _this.proxyReplaceState;
            return _this;
        }
        AutoPV.prototype.apply = function (weblog) {
            if (!weblog || !weblog.sendImmediately)
                return;
            this.weblog = weblog;
            if (this.autoPVFilter(location.href, null, 'enter')) {
                this.weblog.sendImmediately('PV', {
                    type: 'enter',
                    // @ts-ignore
                    auto: true
                });
            }
            var supportsPushState = weblog.Utils.ua.supportsPushState;
            urlChangeEventId = supportsPushState() ? 'popstate' : 'hashchange';
            addMonitor(window, urlChangeEventId, this.urlChange);
            addMonitor(document, 'visibilitychange', this.visibilityChange);
        };
        AutoPV.prototype.destroy = function () {
            removeMonitor(window, urlChangeEventId, this.urlChange);
            removeMonitor(document, 'visibilitychange', this.visibilityChange);
            history.pushState = this.oldPushState;
            history.replaceState = this.oldReplaceState;
        };
        AutoPV.key = 'autoPV';
        return AutoPV;
    }(BasePlugin));

    return AutoPV;

}));
//# sourceMappingURL=autopv.js.map
