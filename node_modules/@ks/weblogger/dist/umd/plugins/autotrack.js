(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.AutoTrack = factory());
})(this, (function () { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  /******************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  /* global Reflect, Promise */
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");

    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  var _assign = function __assign() {
    _assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];

        for (var p in s) {
          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
      }

      return t;
    };

    return _assign.apply(this, arguments);
  };
  function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator(thisArg, body) {
    var _ = {
      label: 0,
      sent: function sent() {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) {
        try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];

          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;

            case 4:
              _.label++;
              return {
                value: op[1],
                done: false
              };

            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;

            case 7:
              op = _.ops.pop();

              _.trys.pop();

              continue;

            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }

              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }

              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }

              if (t && _.label < t[2]) {
                _.label = t[2];

                _.ops.push(op);

                break;
              }

              if (t[2]) _.ops.pop();

              _.trys.pop();

              continue;
          }

          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  }

  var BasePlugin = /** @class */ (function () {
      function BasePlugin() {
      }
      BasePlugin.prototype.apply = function (weblog) {
          this.weblog = weblog;
      };
      return BasePlugin;
  }());

  var visualMessageStatus;
  (function (visualMessageStatus) {
      visualMessageStatus[visualMessageStatus["START"] = 0] = "START";
      visualMessageStatus[visualMessageStatus["RECEIVED"] = 1] = "RECEIVED";
  })(visualMessageStatus || (visualMessageStatus = {}));

  /**
   * 获取元素xpath
   * @param element 元素
   */
  function getXpathFromNode(element) {
      // if (element && element.id !== '')
      //     return 'id("' + element.id + '")';
      if (element === document.body)
          return 'HTML/' + element.tagName;
      var ix = 0;
      if (element && element.parentNode) {
          var siblings = element.parentNode.childNodes;
          for (var i = 0; i < siblings.length; i++) {
              var sibling = siblings[i];
              if (sibling === element)
                  return getXpathFromNode(element.parentNode) + '/' + element.tagName + '[' + (ix + 1) + ']';
              if (sibling.nodeType === 1 && sibling.tagName === element.tagName)
                  ix++;
          }
      }
      return '';
  }

  function sendMessageToOpener(data) {
      window.opener && window.opener.postMessage(data, '*');
      // window.opener && window.opener.postMessage(data, 'https://sep-track.corp.kuaishou.com/store');
      // window.opener && window.opener.postMessage(data, 'http://my.platform-track.test.kuaishou.com:8080/');
  }
  function sendMessageToParent(data) {
      window.parent && window.parent.postMessage(data, '*');
  }

  function insertVisualJs(type) {
      var head = document.getElementsByTagName('head')[0];
      // js
      // const timeStamp = String(+Date.now()).slice(0, -7); // 过期时间2个多小时
      var timeStamp = String(+Date.now()); // 每次拉新的
      var script = document.createElement('script');
      script.crossOrigin = 'anonymous';
      script.type = 'text/javascript';
      script.src = insertUrlHandle(type, timeStamp);
      script.onload = function () {
          var visualTrack = new window.VisualTrack();
          visualTrack.init();
          if (type === 'hotChart') {
              sendMessageToParent({
                  data: {},
                  type: 'weblogger_auto_track_hot_chart_finish'
              });
          }
      };
      head === null || head === void 0 ? void 0 : head.appendChild(script);
  }
  function insertUrlHandle(type, timeStamp) {
      var result = '';
      switch (type) {
          case 'toolbar':
              result = "https://static.yximgs.com/udata/pkg/ks-track-platform-new/visual-track-plugin/index.js?".concat(timeStamp);
              break;
          case 'hotChart':
              result = "https://static.yximgs.com/udata/pkg/ks-track-platform-new/visual-track-plugin/vice.js?".concat(timeStamp);
              break;
      }
      return result;
  }

  /**
   * Copyright 2016 Google Inc. All Rights Reserved.
   *
   * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.
   *
   *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document
   *
   */
  (function () {

    if ((typeof window === "undefined" ? "undefined" : _typeof(window)) !== 'object') {
      return;
    } // Exit early if all IntersectionObserver and IntersectionObserverEntry
    // features are natively supported.


    if ('IntersectionObserver' in window && 'IntersectionObserverEntry' in window && 'intersectionRatio' in window.IntersectionObserverEntry.prototype) {
      // Minimal polyfill for Edge 15's lack of `isIntersecting`
      // See: https://github.com/w3c/IntersectionObserver/issues/211
      if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {
        Object.defineProperty(window.IntersectionObserverEntry.prototype, 'isIntersecting', {
          get: function get() {
            return this.intersectionRatio > 0;
          }
        });
      }

      return;
    }
    /**
     * Returns the embedding frame element, if any.
     * @param {!Document} doc
     * @return {!Element}
     */


    function getFrameElement(doc) {
      try {
        return doc.defaultView && doc.defaultView.frameElement || null;
      } catch (e) {
        // Ignore the error.
        return null;
      }
    }
    /**
     * A local reference to the root document.
     */


    var document = function (startDoc) {
      var doc = startDoc;
      var frame = getFrameElement(doc);

      while (frame) {
        doc = frame.ownerDocument;
        frame = getFrameElement(doc);
      }

      return doc;
    }(window.document);
    /**
     * An IntersectionObserver registry. This registry exists to hold a strong
     * reference to IntersectionObserver instances currently observing a target
     * element. Without this registry, instances without another reference may be
     * garbage collected.
     */


    var registry = [];
    /**
     * The signal updater for cross-origin intersection. When not null, it means
     * that the polyfill is configured to work in a cross-origin mode.
     * @type {function(DOMRect|ClientRect, DOMRect|ClientRect)}
     */

    var crossOriginUpdater = null;
    /**
     * The current cross-origin intersection. Only used in the cross-origin mode.
     * @type {DOMRect|ClientRect}
     */

    var crossOriginRect = null;
    /**
     * Creates the global IntersectionObserverEntry constructor.
     * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry
     * @param {Object} entry A dictionary of instance properties.
     * @constructor
     */

    function IntersectionObserverEntry(entry) {
      this.time = entry.time;
      this.target = entry.target;
      this.rootBounds = ensureDOMRect(entry.rootBounds);
      this.boundingClientRect = ensureDOMRect(entry.boundingClientRect);
      this.intersectionRect = ensureDOMRect(entry.intersectionRect || getEmptyRect());
      this.isIntersecting = !!entry.intersectionRect; // Calculates the intersection ratio.

      var targetRect = this.boundingClientRect;
      var targetArea = targetRect.width * targetRect.height;
      var intersectionRect = this.intersectionRect;
      var intersectionArea = intersectionRect.width * intersectionRect.height; // Sets intersection ratio.

      if (targetArea) {
        // Round the intersection ratio to avoid floating point math issues:
        // https://github.com/w3c/IntersectionObserver/issues/324
        this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));
      } else {
        // If area is zero and is intersecting, sets to 1, otherwise to 0
        this.intersectionRatio = this.isIntersecting ? 1 : 0;
      }
    }
    /**
     * Creates the global IntersectionObserver constructor.
     * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface
     * @param {Function} callback The function to be invoked after intersection
     *     changes have queued. The function is not invoked if the queue has
     *     been emptied by calling the `takeRecords` method.
     * @param {Object=} opt_options Optional configuration options.
     * @constructor
     */


    function IntersectionObserver(callback, opt_options) {
      var options = opt_options || {};

      if (typeof callback != 'function') {
        throw new Error('callback must be a function');
      }

      if (options.root && options.root.nodeType != 1 && options.root.nodeType != 9) {
        throw new Error('root must be a Document or Element');
      } // Binds and throttles `this._checkForIntersections`.


      this._checkForIntersections = throttle(this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT); // Private properties.

      this._callback = callback;
      this._observationTargets = [];
      this._queuedEntries = [];
      this._rootMarginValues = this._parseRootMargin(options.rootMargin); // Public properties.

      this.thresholds = this._initThresholds(options.threshold);
      this.root = options.root || null;
      this.rootMargin = this._rootMarginValues.map(function (margin) {
        return margin.value + margin.unit;
      }).join(' ');
      /** @private @const {!Array<!Document>} */

      this._monitoringDocuments = [];
      /** @private @const {!Array<function()>} */

      this._monitoringUnsubscribes = [];
    }
    /**
     * The minimum interval within which the document will be checked for
     * intersection changes.
     */


    IntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;
    /**
     * The frequency in which the polyfill polls for intersection changes.
     * this can be updated on a per instance basis and must be set prior to
     * calling `observe` on the first target.
     */

    IntersectionObserver.prototype.POLL_INTERVAL = null;
    /**
     * Use a mutation observer on the root element
     * to detect intersection changes.
     */

    IntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;
    /**
     * Sets up the polyfill in the cross-origin mode. The result is the
     * updater function that accepts two arguments: `boundingClientRect` and
     * `intersectionRect` - just as these fields would be available to the
     * parent via `IntersectionObserverEntry`. This function should be called
     * each time the iframe receives intersection information from the parent
     * window, e.g. via messaging.
     * @return {function(DOMRect|ClientRect, DOMRect|ClientRect)}
     */

    IntersectionObserver._setupCrossOriginUpdater = function () {
      if (!crossOriginUpdater) {
        /**
         * @param {DOMRect|ClientRect} boundingClientRect
         * @param {DOMRect|ClientRect} intersectionRect
         */
        crossOriginUpdater = function crossOriginUpdater(boundingClientRect, intersectionRect) {
          if (!boundingClientRect || !intersectionRect) {
            crossOriginRect = getEmptyRect();
          } else {
            crossOriginRect = convertFromParentRect(boundingClientRect, intersectionRect);
          }

          registry.forEach(function (observer) {
            observer._checkForIntersections();
          });
        };
      }

      return crossOriginUpdater;
    };
    /**
     * Resets the cross-origin mode.
     */


    IntersectionObserver._resetCrossOriginUpdater = function () {
      crossOriginUpdater = null;
      crossOriginRect = null;
    };
    /**
     * Starts observing a target element for intersection changes based on
     * the thresholds values.
     * @param {Element} target The DOM element to observe.
     */


    IntersectionObserver.prototype.observe = function (target) {
      var isTargetAlreadyObserved = this._observationTargets.some(function (item) {
        return item.element == target;
      });

      if (isTargetAlreadyObserved) {
        return;
      }

      if (!(target && target.nodeType == 1)) {
        throw new Error('target must be an Element');
      }

      this._registerInstance();

      this._observationTargets.push({
        element: target,
        entry: null
      });

      this._monitorIntersections(target.ownerDocument);

      this._checkForIntersections();
    };
    /**
     * Stops observing a target element for intersection changes.
     * @param {Element} target The DOM element to observe.
     */


    IntersectionObserver.prototype.unobserve = function (target) {
      this._observationTargets = this._observationTargets.filter(function (item) {
        return item.element != target;
      });

      this._unmonitorIntersections(target.ownerDocument);

      if (this._observationTargets.length == 0) {
        this._unregisterInstance();
      }
    };
    /**
     * Stops observing all target elements for intersection changes.
     */


    IntersectionObserver.prototype.disconnect = function () {
      this._observationTargets = [];

      this._unmonitorAllIntersections();

      this._unregisterInstance();
    };
    /**
     * Returns any queue entries that have not yet been reported to the
     * callback and clears the queue. This can be used in conjunction with the
     * callback to obtain the absolute most up-to-date intersection information.
     * @return {Array} The currently queued entries.
     */


    IntersectionObserver.prototype.takeRecords = function () {
      var records = this._queuedEntries.slice();

      this._queuedEntries = [];
      return records;
    };
    /**
     * Accepts the threshold value from the user configuration object and
     * returns a sorted array of unique threshold values. If a value is not
     * between 0 and 1 and error is thrown.
     * @private
     * @param {Array|number=} opt_threshold An optional threshold value or
     *     a list of threshold values, defaulting to [0].
     * @return {Array} A sorted list of unique and valid threshold values.
     */


    IntersectionObserver.prototype._initThresholds = function (opt_threshold) {
      var threshold = opt_threshold || [0];
      if (!Array.isArray(threshold)) threshold = [threshold];
      return threshold.sort().filter(function (t, i, a) {
        if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {
          throw new Error('threshold must be a number between 0 and 1 inclusively');
        }

        return t !== a[i - 1];
      });
    };
    /**
     * Accepts the rootMargin value from the user configuration object
     * and returns an array of the four margin values as an object containing
     * the value and unit properties. If any of the values are not properly
     * formatted or use a unit other than px or %, and error is thrown.
     * @private
     * @param {string=} opt_rootMargin An optional rootMargin value,
     *     defaulting to '0px'.
     * @return {Array<Object>} An array of margin objects with the keys
     *     value and unit.
     */


    IntersectionObserver.prototype._parseRootMargin = function (opt_rootMargin) {
      var marginString = opt_rootMargin || '0px';
      var margins = marginString.split(/\s+/).map(function (margin) {
        var parts = /^(-?\d*\.?\d+)(px|%)$/.exec(margin);

        if (!parts) {
          throw new Error('rootMargin must be specified in pixels or percent');
        }

        return {
          value: parseFloat(parts[1]),
          unit: parts[2]
        };
      }); // Handles shorthand.

      margins[1] = margins[1] || margins[0];
      margins[2] = margins[2] || margins[0];
      margins[3] = margins[3] || margins[1];
      return margins;
    };
    /**
     * Starts polling for intersection changes if the polling is not already
     * happening, and if the page's visibility state is visible.
     * @param {!Document} doc
     * @private
     */


    IntersectionObserver.prototype._monitorIntersections = function (doc) {
      var win = doc.defaultView;

      if (!win) {
        // Already destroyed.
        return;
      }

      if (this._monitoringDocuments.indexOf(doc) != -1) {
        // Already monitoring.
        return;
      } // Private state for monitoring.


      var callback = this._checkForIntersections;
      var monitoringInterval = null;
      var domObserver = null; // If a poll interval is set, use polling instead of listening to
      // resize and scroll events or DOM mutations.

      if (this.POLL_INTERVAL) {
        monitoringInterval = win.setInterval(callback, this.POLL_INTERVAL);
      } else {
        addEvent(win, 'resize', callback, true);
        addEvent(doc, 'scroll', callback, true);

        if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in win) {
          domObserver = new win.MutationObserver(callback);
          domObserver.observe(doc, {
            attributes: true,
            childList: true,
            characterData: true,
            subtree: true
          });
        }
      }

      this._monitoringDocuments.push(doc);

      this._monitoringUnsubscribes.push(function () {
        // Get the window object again. When a friendly iframe is destroyed, it
        // will be null.
        var win = doc.defaultView;

        if (win) {
          if (monitoringInterval) {
            win.clearInterval(monitoringInterval);
          }

          removeEvent(win, 'resize', callback, true);
        }

        removeEvent(doc, 'scroll', callback, true);

        if (domObserver) {
          domObserver.disconnect();
        }
      }); // Also monitor the parent.


      var rootDoc = this.root && (this.root.ownerDocument || this.root) || document;

      if (doc != rootDoc) {
        var frame = getFrameElement(doc);

        if (frame) {
          this._monitorIntersections(frame.ownerDocument);
        }
      }
    };
    /**
     * Stops polling for intersection changes.
     * @param {!Document} doc
     * @private
     */


    IntersectionObserver.prototype._unmonitorIntersections = function (doc) {
      var index = this._monitoringDocuments.indexOf(doc);

      if (index == -1) {
        return;
      }

      var rootDoc = this.root && (this.root.ownerDocument || this.root) || document; // Check if any dependent targets are still remaining.

      var hasDependentTargets = this._observationTargets.some(function (item) {
        var itemDoc = item.element.ownerDocument; // Target is in this context.

        if (itemDoc == doc) {
          return true;
        } // Target is nested in this context.


        while (itemDoc && itemDoc != rootDoc) {
          var frame = getFrameElement(itemDoc);
          itemDoc = frame && frame.ownerDocument;

          if (itemDoc == doc) {
            return true;
          }
        }

        return false;
      });

      if (hasDependentTargets) {
        return;
      } // Unsubscribe.


      var unsubscribe = this._monitoringUnsubscribes[index];

      this._monitoringDocuments.splice(index, 1);

      this._monitoringUnsubscribes.splice(index, 1);

      unsubscribe(); // Also unmonitor the parent.

      if (doc != rootDoc) {
        var frame = getFrameElement(doc);

        if (frame) {
          this._unmonitorIntersections(frame.ownerDocument);
        }
      }
    };
    /**
     * Stops polling for intersection changes.
     * @param {!Document} doc
     * @private
     */


    IntersectionObserver.prototype._unmonitorAllIntersections = function () {
      var unsubscribes = this._monitoringUnsubscribes.slice(0);

      this._monitoringDocuments.length = 0;
      this._monitoringUnsubscribes.length = 0;

      for (var i = 0; i < unsubscribes.length; i++) {
        unsubscribes[i]();
      }
    };
    /**
     * Scans each observation target for intersection changes and adds them
     * to the internal entries queue. If new entries are found, it
     * schedules the callback to be invoked.
     * @private
     */


    IntersectionObserver.prototype._checkForIntersections = function () {
      if (!this.root && crossOriginUpdater && !crossOriginRect) {
        // Cross origin monitoring, but no initial data available yet.
        return;
      }

      var rootIsInDom = this._rootIsInDom();

      var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();

      this._observationTargets.forEach(function (item) {
        var target = item.element;
        var targetRect = getBoundingClientRect(target);

        var rootContainsTarget = this._rootContainsTarget(target);

        var oldEntry = item.entry;

        var intersectionRect = rootIsInDom && rootContainsTarget && this._computeTargetAndRootIntersection(target, targetRect, rootRect);

        var rootBounds = null;

        if (!this._rootContainsTarget(target)) {
          rootBounds = getEmptyRect();
        } else if (!crossOriginUpdater || this.root) {
          rootBounds = rootRect;
        }

        var newEntry = item.entry = new IntersectionObserverEntry({
          time: now(),
          target: target,
          boundingClientRect: targetRect,
          rootBounds: rootBounds,
          intersectionRect: intersectionRect
        });

        if (!oldEntry) {
          this._queuedEntries.push(newEntry);
        } else if (rootIsInDom && rootContainsTarget) {
          // If the new entry intersection ratio has crossed any of the
          // thresholds, add a new entry.
          if (this._hasCrossedThreshold(oldEntry, newEntry)) {
            this._queuedEntries.push(newEntry);
          }
        } else {
          // If the root is not in the DOM or target is not contained within
          // root but the previous entry for this target had an intersection,
          // add a new record indicating removal.
          if (oldEntry && oldEntry.isIntersecting) {
            this._queuedEntries.push(newEntry);
          }
        }
      }, this);

      if (this._queuedEntries.length) {
        this._callback(this.takeRecords(), this);
      }
    };
    /**
     * Accepts a target and root rect computes the intersection between then
     * following the algorithm in the spec.
     * TODO(philipwalton): at this time clip-path is not considered.
     * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo
     * @param {Element} target The target DOM element
     * @param {Object} targetRect The bounding rect of the target.
     * @param {Object} rootRect The bounding rect of the root after being
     *     expanded by the rootMargin value.
     * @return {?Object} The final intersection rect object or undefined if no
     *     intersection is found.
     * @private
     */


    IntersectionObserver.prototype._computeTargetAndRootIntersection = function (target, targetRect, rootRect) {
      // If the element isn't displayed, an intersection can't happen.
      if (window.getComputedStyle(target).display == 'none') return;
      var intersectionRect = targetRect;
      var parent = getParentNode(target);
      var atRoot = false;

      while (!atRoot && parent) {
        var parentRect = null;
        var parentComputedStyle = parent.nodeType == 1 ? window.getComputedStyle(parent) : {}; // If the parent isn't displayed, an intersection can't happen.

        if (parentComputedStyle.display == 'none') return null;

        if (parent == this.root || parent.nodeType ==
        /* DOCUMENT */
        9) {
          atRoot = true;

          if (parent == this.root || parent == document) {
            if (crossOriginUpdater && !this.root) {
              if (!crossOriginRect || crossOriginRect.width == 0 && crossOriginRect.height == 0) {
                // A 0-size cross-origin intersection means no-intersection.
                parent = null;
                parentRect = null;
                intersectionRect = null;
              } else {
                parentRect = crossOriginRect;
              }
            } else {
              parentRect = rootRect;
            }
          } else {
            // Check if there's a frame that can be navigated to.
            var frame = getParentNode(parent);
            var frameRect = frame && getBoundingClientRect(frame);

            var frameIntersect = frame && this._computeTargetAndRootIntersection(frame, frameRect, rootRect);

            if (frameRect && frameIntersect) {
              parent = frame;
              parentRect = convertFromParentRect(frameRect, frameIntersect);
            } else {
              parent = null;
              intersectionRect = null;
            }
          }
        } else {
          // If the element has a non-visible overflow, and it's not the <body>
          // or <html> element, update the intersection rect.
          // Note: <body> and <html> cannot be clipped to a rect that's not also
          // the document rect, so no need to compute a new intersection.
          var doc = parent.ownerDocument;

          if (parent != doc.body && parent != doc.documentElement && parentComputedStyle.overflow != 'visible') {
            parentRect = getBoundingClientRect(parent);
          }
        } // If either of the above conditionals set a new parentRect,
        // calculate new intersection data.


        if (parentRect) {
          intersectionRect = computeRectIntersection(parentRect, intersectionRect);
        }

        if (!intersectionRect) break;
        parent = parent && getParentNode(parent);
      }

      return intersectionRect;
    };
    /**
     * Returns the root rect after being expanded by the rootMargin value.
     * @return {ClientRect} The expanded root rect.
     * @private
     */


    IntersectionObserver.prototype._getRootRect = function () {
      var rootRect;

      if (this.root && !isDoc(this.root)) {
        rootRect = getBoundingClientRect(this.root);
      } else {
        // Use <html>/<body> instead of window since scroll bars affect size.
        var doc = isDoc(this.root) ? this.root : document;
        var html = doc.documentElement;
        var body = doc.body;
        rootRect = {
          top: 0,
          left: 0,
          right: html.clientWidth || body.clientWidth,
          width: html.clientWidth || body.clientWidth,
          bottom: html.clientHeight || body.clientHeight,
          height: html.clientHeight || body.clientHeight
        };
      }

      return this._expandRectByRootMargin(rootRect);
    };
    /**
     * Accepts a rect and expands it by the rootMargin value.
     * @param {DOMRect|ClientRect} rect The rect object to expand.
     * @return {ClientRect} The expanded rect.
     * @private
     */


    IntersectionObserver.prototype._expandRectByRootMargin = function (rect) {
      var margins = this._rootMarginValues.map(function (margin, i) {
        return margin.unit == 'px' ? margin.value : margin.value * (i % 2 ? rect.width : rect.height) / 100;
      });

      var newRect = {
        top: rect.top - margins[0],
        right: rect.right + margins[1],
        bottom: rect.bottom + margins[2],
        left: rect.left - margins[3]
      };
      newRect.width = newRect.right - newRect.left;
      newRect.height = newRect.bottom - newRect.top;
      return newRect;
    };
    /**
     * Accepts an old and new entry and returns true if at least one of the
     * threshold values has been crossed.
     * @param {?IntersectionObserverEntry} oldEntry The previous entry for a
     *    particular target element or null if no previous entry exists.
     * @param {IntersectionObserverEntry} newEntry The current entry for a
     *    particular target element.
     * @return {boolean} Returns true if a any threshold has been crossed.
     * @private
     */


    IntersectionObserver.prototype._hasCrossedThreshold = function (oldEntry, newEntry) {
      // To make comparing easier, an entry that has a ratio of 0
      // but does not actually intersect is given a value of -1
      var oldRatio = oldEntry && oldEntry.isIntersecting ? oldEntry.intersectionRatio || 0 : -1;
      var newRatio = newEntry.isIntersecting ? newEntry.intersectionRatio || 0 : -1; // Ignore unchanged ratios

      if (oldRatio === newRatio) return;

      for (var i = 0; i < this.thresholds.length; i++) {
        var threshold = this.thresholds[i]; // Return true if an entry matches a threshold or if the new ratio
        // and the old ratio are on the opposite sides of a threshold.

        if (threshold == oldRatio || threshold == newRatio || threshold < oldRatio !== threshold < newRatio) {
          return true;
        }
      }
    };
    /**
     * Returns whether or not the root element is an element and is in the DOM.
     * @return {boolean} True if the root element is an element and is in the DOM.
     * @private
     */


    IntersectionObserver.prototype._rootIsInDom = function () {
      return !this.root || containsDeep(document, this.root);
    };
    /**
     * Returns whether or not the target element is a child of root.
     * @param {Element} target The target element to check.
     * @return {boolean} True if the target element is a child of root.
     * @private
     */


    IntersectionObserver.prototype._rootContainsTarget = function (target) {
      var rootDoc = this.root && (this.root.ownerDocument || this.root) || document;
      return containsDeep(rootDoc, target) && (!this.root || rootDoc == target.ownerDocument);
    };
    /**
     * Adds the instance to the global IntersectionObserver registry if it isn't
     * already present.
     * @private
     */


    IntersectionObserver.prototype._registerInstance = function () {
      if (registry.indexOf(this) < 0) {
        registry.push(this);
      }
    };
    /**
     * Removes the instance from the global IntersectionObserver registry.
     * @private
     */


    IntersectionObserver.prototype._unregisterInstance = function () {
      var index = registry.indexOf(this);
      if (index != -1) registry.splice(index, 1);
    };
    /**
     * Returns the result of the performance.now() method or null in browsers
     * that don't support the API.
     * @return {number} The elapsed time since the page was requested.
     */


    function now() {
      return window.performance && performance.now && performance.now();
    }
    /**
     * Throttles a function and delays its execution, so it's only called at most
     * once within a given time period.
     * @param {Function} fn The function to throttle.
     * @param {number} timeout The amount of time that must pass before the
     *     function can be called again.
     * @return {Function} The throttled function.
     */


    function throttle(fn, timeout) {
      var timer = null;
      return function () {
        if (!timer) {
          timer = setTimeout(function () {
            fn();
            timer = null;
          }, timeout);
        }
      };
    }
    /**
     * Adds an event handler to a DOM node ensuring cross-browser compatibility.
     * @param {Node} node The DOM node to add the event handler to.
     * @param {string} event The event name.
     * @param {Function} fn The event handler to add.
     * @param {boolean} opt_useCapture Optionally adds the even to the capture
     *     phase. Note: this only works in modern browsers.
     */


    function addEvent(node, event, fn, opt_useCapture) {
      if (typeof node.addEventListener == 'function') {
        node.addEventListener(event, fn, opt_useCapture || false);
      } else if (typeof node.attachEvent == 'function') {
        node.attachEvent('on' + event, fn);
      }
    }
    /**
     * Removes a previously added event handler from a DOM node.
     * @param {Node} node The DOM node to remove the event handler from.
     * @param {string} event The event name.
     * @param {Function} fn The event handler to remove.
     * @param {boolean} opt_useCapture If the event handler was added with this
     *     flag set to true, it should be set to true here in order to remove it.
     */


    function removeEvent(node, event, fn, opt_useCapture) {
      if (typeof node.removeEventListener == 'function') {
        node.removeEventListener(event, fn, opt_useCapture || false);
      } else if (typeof node.detatchEvent == 'function') {
        node.detatchEvent('on' + event, fn);
      }
    }
    /**
     * Returns the intersection between two rect objects.
     * @param {Object} rect1 The first rect.
     * @param {Object} rect2 The second rect.
     * @return {?Object|?ClientRect} The intersection rect or undefined if no
     *     intersection is found.
     */


    function computeRectIntersection(rect1, rect2) {
      var top = Math.max(rect1.top, rect2.top);
      var bottom = Math.min(rect1.bottom, rect2.bottom);
      var left = Math.max(rect1.left, rect2.left);
      var right = Math.min(rect1.right, rect2.right);
      var width = right - left;
      var height = bottom - top;
      return width >= 0 && height >= 0 && {
        top: top,
        bottom: bottom,
        left: left,
        right: right,
        width: width,
        height: height
      } || null;
    }
    /**
     * Shims the native getBoundingClientRect for compatibility with older IE.
     * @param {Element} el The element whose bounding rect to get.
     * @return {DOMRect|ClientRect} The (possibly shimmed) rect of the element.
     */


    function getBoundingClientRect(el) {
      var rect;

      try {
        rect = el.getBoundingClientRect();
      } catch (err) {// Ignore Windows 7 IE11 "Unspecified error"
        // https://github.com/w3c/IntersectionObserver/pull/205
      }

      if (!rect) return getEmptyRect(); // Older IE

      if (!(rect.width && rect.height)) {
        rect = {
          top: rect.top,
          right: rect.right,
          bottom: rect.bottom,
          left: rect.left,
          width: rect.right - rect.left,
          height: rect.bottom - rect.top
        };
      }

      return rect;
    }
    /**
     * Returns an empty rect object. An empty rect is returned when an element
     * is not in the DOM.
     * @return {ClientRect} The empty rect.
     */


    function getEmptyRect() {
      return {
        top: 0,
        bottom: 0,
        left: 0,
        right: 0,
        width: 0,
        height: 0
      };
    }
    /**
     * Ensure that the result has all of the necessary fields of the DOMRect.
     * Specifically this ensures that `x` and `y` fields are set.
     *
     * @param {?DOMRect|?ClientRect} rect
     * @return {?DOMRect}
     */


    function ensureDOMRect(rect) {
      // A `DOMRect` object has `x` and `y` fields.
      if (!rect || 'x' in rect) {
        return rect;
      } // A IE's `ClientRect` type does not have `x` and `y`. The same is the case
      // for internally calculated Rect objects. For the purposes of
      // `IntersectionObserver`, it's sufficient to simply mirror `left` and `top`
      // for these fields.


      return {
        top: rect.top,
        y: rect.top,
        bottom: rect.bottom,
        left: rect.left,
        x: rect.left,
        right: rect.right,
        width: rect.width,
        height: rect.height
      };
    }
    /**
     * Inverts the intersection and bounding rect from the parent (frame) BCR to
     * the local BCR space.
     * @param {DOMRect|ClientRect} parentBoundingRect The parent's bound client rect.
     * @param {DOMRect|ClientRect} parentIntersectionRect The parent's own intersection rect.
     * @return {ClientRect} The local root bounding rect for the parent's children.
     */


    function convertFromParentRect(parentBoundingRect, parentIntersectionRect) {
      var top = parentIntersectionRect.top - parentBoundingRect.top;
      var left = parentIntersectionRect.left - parentBoundingRect.left;
      return {
        top: top,
        left: left,
        height: parentIntersectionRect.height,
        width: parentIntersectionRect.width,
        bottom: top + parentIntersectionRect.height,
        right: left + parentIntersectionRect.width
      };
    }
    /**
     * Checks to see if a parent element contains a child element (including inside
     * shadow DOM).
     * @param {Node} parent The parent element.
     * @param {Node} child The child element.
     * @return {boolean} True if the parent node contains the child node.
     */


    function containsDeep(parent, child) {
      var node = child;

      while (node) {
        if (node == parent) return true;
        node = getParentNode(node);
      }

      return false;
    }
    /**
     * Gets the parent node of an element or its host element if the parent node
     * is a shadow root.
     * @param {Node} node The node whose parent to get.
     * @return {Node|null} The parent node or null if no parent exists.
     */


    function getParentNode(node) {
      var parent = node.parentNode;

      if (node.nodeType ==
      /* DOCUMENT */
      9 && node != document) {
        // If this node is a document node, look for the embedding frame.
        return getFrameElement(node);
      } // If the parent has element that is assigned through shadow root slot


      if (parent && parent.assignedSlot) {
        parent = parent.assignedSlot.parentNode;
      }

      if (parent && parent.nodeType == 11 && parent.host) {
        // If the parent is a shadow root, return the host element.
        return parent.host;
      }

      return parent;
    }
    /**
     * Returns true if `node` is a Document.
     * @param {!Node} node
     * @returns {boolean}
     */


    function isDoc(node) {
      return node && node.nodeType === 9;
    } // Exposes the constructors globally.


    window.IntersectionObserver = IntersectionObserver;
    window.IntersectionObserverEntry = IntersectionObserverEntry;
  })();

  var defaultCollectAttribute = [
      'class',
      'alt',
      'src',
      'href'
  ];
  // const defaultCollectTags = ['A', 'INPUT', 'BUTTON', 'TEXTAREA', 'DIV', 'UL', 'LI', 'SPAN'];
  var defaultCollectTags = [];
  var getTextContent = function (element) {
      var text = element.textContent;
      if (!text)
          return;
      text = text.trim();
      // 文本处理
      var finnalInnterText = text.substring(0, 20).trim();
      if (text.length > finnalInnterText.length) {
          finnalInnterText += '...';
      }
      return finnalInnterText;
  };
  var AutoTrack = /** @class */ (function (_super) {
      __extends(AutoTrack, _super);
      function AutoTrack(trackOption) {
          if (trackOption === void 0) { trackOption = {}; }
          var _this = _super.call(this) || this;
          _this.mode = 'all'; // 监听模式
          _this.maxScrollX = 0; // X最大滚动距离
          _this.maxScrollY = 0; // Y最大滚动距离
          _this.scrollStayTime = 4000; // 驻足时长
          _this.symbol = 'weblog-';
          _this.tags = defaultCollectTags;
          _this.attributes = defaultCollectAttribute;
          _this.hiddenContent = false; // 是否上报innerText
          _this.followCurPage = false; // 是否跟随当前页面page上报
          _this.isInsertToolbar = false; // 是否已插入工具栏
          _this.timeId = null; // 计时器ID
          _this.touchStartObject = {}; // 多个触点touchStart的数据
          _this.touchMoveObject = {}; // 多个触点touchMove的数据
          // PV 更新之后重置
          _this.resetObserver = function (event) {
              var type = event.type, action = event.action;
              if (type === 'PV' && action === 'enter') {
                  _this.initIntersecionObserver(true);
                  _this.initMutationObserver();
              }
          };
          // touchStart
          _this.touchStartEvent = function (event) {
              var touches = event.touches;
              for (var i = 0; i < touches.length; i++) {
                  var _a = touches[i], clientX = _a.clientX, clientY = _a.clientY, identifier = _a.identifier;
                  if (_this.touchStartObject[identifier]) {
                      return;
                  }
                  _this.touchStartObject[identifier] = {
                      clientX: Number(clientX.toFixed(2)),
                      clientY: Number(clientY.toFixed(2)),
                      timestamp: Date.now()
                  };
              }
          };
          // touchMove
          _this.touchMoveEvent = function (event) {
              var touches = event.changedTouches;
              for (var i = 0; i < touches.length; i++) {
                  var _a = touches[i], clientX = _a.clientX, clientY = _a.clientY, identifier = _a.identifier;
                  var data = {
                      clientX: Number(clientX.toFixed(2)),
                      clientY: Number(clientY.toFixed(2)),
                      timestamp: Date.now()
                  };
                  if (_this.touchMoveObject[identifier]) {
                      _this.touchMoveObject[identifier].push(data);
                      return;
                  }
                  _this.touchMoveObject[identifier] = [data];
              }
          };
          // touchEnd
          _this.touchEndEvent = function (event) { return __awaiter(_this, void 0, void 0, function () {
              var touches, touchesInfo, i, _a, clientX, clientY, identifier, touchItem, currentTouchStartPointerInfo, currentTouchMovePointerInfo, formatData;
              return __generator(this, function (_b) {
                  touches = event.changedTouches;
                  touchesInfo = [];
                  for (i = 0; i < touches.length; i++) {
                      _a = touches[i], clientX = _a.clientX, clientY = _a.clientY, identifier = _a.identifier;
                      touchItem = {
                          touchStart: {},
                          touchMove: [],
                          touchEnd: {}
                      };
                      currentTouchStartPointerInfo = this.touchStartObject[identifier];
                      currentTouchMovePointerInfo = this.touchMoveObject[identifier];
                      // touchstart info
                      if (currentTouchStartPointerInfo) {
                          touchItem.touchStart = currentTouchStartPointerInfo;
                          delete this.touchStartObject[identifier];
                      }
                      // touchmove info
                      if (currentTouchMovePointerInfo) {
                          touchItem.touchMove = currentTouchMovePointerInfo;
                          delete this.touchMoveObject[identifier];
                      }
                      // touchend info
                      touchItem.touchEnd = {
                          clientX: Number(clientX.toFixed(2)),
                          clientY: Number(clientY.toFixed(2)),
                          timestamp: Date.now()
                      };
                      touchesInfo.push(touchItem);
                  }
                  formatData = this.dataFormat(event);
                  if (formatData) {
                      this.collect('CLICK', formatData, 'WEBLOGGER_AUTO_TRACK_TOUCH');
                  }
                  return [2 /*return*/];
              });
          }); };
          _this.clickEvent = function (event) { return __awaiter(_this, void 0, void 0, function () {
              var formatData;
              return __generator(this, function (_a) {
                  formatData = this.dataFormat(event);
                  if (formatData) {
                      this.collect('CLICK', formatData, 'WEBLOGGER_AUTO_TRACK_CLICK');
                  }
                  return [2 /*return*/];
              });
          }); };
          _this.scrollEvent = function () {
              // 停止scrollStayTime时间才算做停留过
              // 与晓康分歧：是不是应该将每个滚动先做计算再进行延时
              _this.timeId && clearTimeout(_this.timeId);
              _this.timeId = setTimeout(function () {
                  var innerWidth = window.innerWidth, innerHeight = window.innerHeight, scrollX = window.scrollX, scrollY = window.scrollY;
                  var bodyClientWidth = document.body.clientWidth;
                  var currentScrollX = Math.min(innerWidth + scrollX, bodyClientWidth);
                  var currentScrollY = innerHeight + scrollY;
                  if (currentScrollX > _this.maxScrollX || currentScrollY > _this.maxScrollY) {
                      _this.maxScrollX = currentScrollX;
                      _this.maxScrollY = currentScrollY;
                      _this.timeId = null;
                  }
              }, _this.scrollStayTime);
          };
          _this.messageEvent = function (event) {
              var data = event.data;
              var setCookie = _this.weblog.Utils.cookie.setCookie;
              // 工具栏
              if (data && data.type === 'visual') {
                  var messageData = data.data;
                  var status_1 = messageData.status, visualData = messageData.visualData;
                  if (status_1 === visualMessageStatus.RECEIVED) {
                      // 种cookie是否插入toolbar
                      var expires = new Date(+Date.now() + 1000 * 60 * 60);
                      setCookie('_visual_switch', 'true', {
                          expires: expires
                      });
                      setCookie('_visual_username', visualData.userName, {
                          expires: expires
                      });
                      setCookie('_visual_appName', visualData.appName, {
                          expires: expires
                      });
                      // 会收到uuid生成的id，放到sessionStorage里
                      try {
                          sessionStorage.setItem('_weblog_visual_data', JSON.stringify({ id: visualData.id }));
                      }
                      catch (err) { }
                      // 插入toolbar
                      !_this.isInsertToolbar && insertVisualJs('toolbar');
                      _this.isInsertToolbar = true;
                  }
              }
              // 热力图&触发率图
              if (data && data.type === 'weblogger_auto_track_hot_chart') {
                  insertVisualJs('hotChart');
              }
          };
          _this.collect = function (type, params, action) { return __awaiter(_this, void 0, void 0, function () {
              var err_1;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          if (this.hiddenContent)
                              params.innerText = undefined;
                          if (!(typeof this.beforeSend === 'function')) return [3 /*break*/, 4];
                          _a.label = 1;
                      case 1:
                          _a.trys.push([1, 3, , 4]);
                          return [4 /*yield*/, this.beforeSend(type, action, params)];
                      case 2:
                          _a.sent();
                          return [3 /*break*/, 4];
                      case 3:
                          err_1 = _a.sent();
                          console.error(err_1);
                          return [3 /*break*/, 4];
                      case 4:
                          this.weblog.collect(
                          // @ts-ignore
                          type.toUpperCase(), {
                              action: action,
                              params: params,
                              urlPage: this.followCurPage ? this.weblog.currentUrlPackage.page : this.weblog.currentUrlPackage.getRealUrlPackage()
                          });
                          return [2 /*return*/];
                  }
              });
          }); };
          _this.beforeUnload = function () {
              _this.weblog.sendImmediately('PULL_DOWN', {
                  action: 'WEBLOGGER_AUTO_TRACK_SCROLL',
                  params: {
                      maxScrollX: _this.maxScrollX,
                      maxScrollY: _this.maxScrollY
                  }
              });
          };
          if (typeof trackOption === 'object') {
              Object.assign(_this, trackOption);
              if (_this.tags && _this.tags.length) {
                  _this.tags = _this.tags.map(function (tag) { return tag.toLowerCase(); });
              }
              if (_this.monitorShow) {
                  if (typeof _this.monitorShow !== 'object')
                      _this.monitorShow = {};
                  if (!_this.monitorShow.root || _this.monitorShow.root.nodeType !== Node.ELEMENT_NODE) {
                      _this.monitorShow.root = undefined;
                  }
              }
          }
          return _this;
      }
      AutoTrack.prototype.apply = function (weblog) {
          this.weblog = weblog;
          this.init();
          // 进入页面先触发一次滚动上报
          this.scrollEvent();
      };
      AutoTrack.prototype.init = function () {
          // Todo: delay内点了两次如何处理合理？1.立即上报第一次，第二次delay 2.取消第一次，第二次上报 3.两次都delay（目前的）
          // 放在cookie为了保障需要reload的页面
          var getCookie = this.weblog.Utils.cookie.getCookie;
          var visiualSwitch = getCookie('_visual_switch');
          if (visiualSwitch === 'true') {
              !this.isInsertToolbar && insertVisualJs('toolbar');
              this.isInsertToolbar = true;
              return;
          }
          // 开始询问埋点平台是否注册圈选
          this.startRegisterAutoTrackPlugin();
          // 注册完成后告知parent
          this.applyPluginMessageToParent();
          // 绑定事件
          window.addEventListener('click', this.clickEvent, true);
          window.addEventListener('scroll', this.scrollEvent);
          window.addEventListener("message", this.messageEvent, false);
          if (this.isMobile()) {
              window.addEventListener('touchstart', this.touchStartEvent, true);
              window.addEventListener('touchmove', this.touchMoveEvent, true);
              window.addEventListener('touchend', this.touchEndEvent, true);
          }
          if (this.monitorShow) {
              // @ts-ignore
              this.weblog.on('event', this.resetObserver);
              // 如果有 autoPV
              if (this.weblog.plugins.autoPV) {
                  this.initIntersecionObserver(true);
                  this.initMutationObserver();
              }
          }
      };
      // 监听视图滚动曝光
      AutoTrack.prototype.initIntersecionObserver = function (auto) {
          var _this = this;
          var _a;
          (_a = this.intersectionObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
          var _b = this.monitorShow, _c = _b.root, root = _c === void 0 ? null : _c, _d = _b.rootMargin, rootMargin = _d === void 0 ? '0px' : _d, _e = _b.threshold, threshold = _e === void 0 ? 0.3 : _e;
          this.intersectionObserver = new IntersectionObserver(function (entries) {
              entries.forEach(function (entry) {
                  if (entry.isIntersecting) {
                      _this.collectElementShow(entry.target, false, 'intersection');
                      _this.intersectionObserver.unobserve(entry.target);
                  }
              });
          }, {
              root: root,
              rootMargin: rootMargin,
              threshold: threshold
          });
          if (auto)
              this.autoObserve();
      };
      AutoTrack.prototype.autoObserve = function () {
          var _this = this;
          var _a = this.monitorShow.mutationDelay, mutationDelay = _a === void 0 ? 300 : _a;
          setTimeout(function () {
              // 自动监听所有带标记的元素
              var elements = document.querySelectorAll("[".concat(_this.symbol, "show]"));
              if (elements.length) {
                  elements.forEach(function (el) {
                      var _a, _b;
                      (_a = _this.intersectionObserver) === null || _a === void 0 ? void 0 : _a.unobserve(el);
                      (_b = _this.intersectionObserver) === null || _b === void 0 ? void 0 : _b.observe(el);
                  });
              }
          }, Math.max(mutationDelay, 0));
      };
      // 主动监控元素滚动
      AutoTrack.prototype.observe = function (element) {
          var _a;
          if (!this.intersectionObserver) {
              this.initIntersecionObserver();
          }
          (_a = this.intersectionObserver) === null || _a === void 0 ? void 0 : _a.observe(element);
      };
      // 监听元素插入曝光
      AutoTrack.prototype.initMutationObserver = function () {
          var _this = this;
          var _a;
          try {
              if (typeof window.MutationObserver === 'undefined')
                  return;
              (_a = this.mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
              var _b = this.monitorShow, _c = _b.root, root_1 = _c === void 0 ? document.body : _c, _d = _b.mutationDelay, mutationDelay = _d === void 0 ? 300 : _d;
              this.mutationObserver = new window.MutationObserver(function (mutations) {
                  setTimeout(function () {
                      var mutation = mutations.pop();
                      var addedNodes = mutation && mutation.addedNodes;
                      if (addedNodes && addedNodes.length) {
                          for (var i = 0; i < addedNodes.length; i++) {
                              var el = addedNodes[i];
                              if (el && el.getBoundingClientRect) {
                                  var _a = el.getBoundingClientRect(), x = _a.x, y = _a.y, width = _a.width, height = _a.height;
                                  // 如果元素插入时不在可视区，则添加到 intersectionObserver 中
                                  if (Math.max(width, height) === 0 || y > window.innerHeight || x > window.innerWidth) {
                                      _this.observe(el);
                                  }
                                  else {
                                      _this.collectElementShow(el, true, 'mutation');
                                  }
                              }
                          }
                      }
                  });
              });
              setTimeout(function () {
                  _this.mutationObserver && _this.mutationObserver.observe(root_1, { childList: true, subtree: true });
              }, Math.max(mutationDelay, 0));
          }
          catch (err) {
              console.error(err);
          }
      };
      // 元素曝光事件
      AutoTrack.prototype.collectElementShow = function (element, subtree, trackMethod) {
          var _this = this;
          if (element.nodeType !== Node.ELEMENT_NODE)
              return;
          var attr = "".concat(this.symbol, "show");
          var signedEls = [element];
          if (subtree) {
              // 对于子元素，只对有标记的元素曝光
              signedEls = signedEls.concat(Array.from(element.querySelectorAll("[".concat(attr, "]"))));
          }
          signedEls.forEach(function (el) {
              var xpath = getXpathFromNode(el);
              _this.trackCodeEvent('show', el, { xpath: xpath, trackMethod: trackMethod });
              if (el === element && _this.mode === 'all') {
                  var nodeName = el.nodeName;
                  var innerText = getTextContent(el);
                  var attributesSerialize = _this.pickElementAttrs(el);
                  _this.collect('SHOW', {
                      xpath: xpath,
                      innerText: innerText,
                      nodeName: nodeName,
                      attributesSerialize: attributesSerialize,
                      trackMethod: trackMethod
                  }, 'WEBLOGGER_AUTO_TRACK_SHOW');
              }
          });
      };
      // 是不是移动端
      AutoTrack.prototype.isMobile = function () {
          var ua = navigator.userAgent;
          var isAndroid = ua.indexOf('Android') > -1 || ua.indexOf('Adr') > -1; //android终端
          var isiOS = !!ua.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端
          return isAndroid || isiOS;
      };
      // 元素过滤
      AutoTrack.prototype.elementFilter = function (target, type) {
          if (!target)
              return false;
          if (this.mode === 'symbol' && !target.hasAttribute("".concat(this.symbol, "type")))
              return;
          var tagName = target.tagName;
          // 顶级标签不采集
          if (['html', 'body'].indexOf(tagName.toLowerCase()) !== -1)
              return false;
          // 是否符合用户筛选的tag
          if (this.tags && this.tags.length && this.tags.indexOf(tagName) === -1)
              return false;
          // 是否满足用户精确匹配,未匹配则不继续执行
          if (this.exactMatchElement && target && !this.exactMatchElement(target))
              return false;
          return true;
      };
      // 属性采集
      AutoTrack.prototype.pickElementAttrs = function (target) {
          var attributes = target.attributes;
          var params = {};
          for (var i = 0; i < attributes.length; i++) {
              var _a = attributes[i], name_1 = _a.name, value = _a.value;
              if (name_1.indexOf(this.symbol) === 0)
                  continue;
              // 强制采集：自定义属性
              if (name_1.indexOf('data-') === 0) {
                  params[name_1] = value;
              }
              else if (this.attributes && this.attributes.indexOf(name_1) !== -1) {
                  params[name_1] = value;
              }
          }
          return params;
      };
      // 代码埋点触发
      AutoTrack.prototype.trackCodeEvent = function (type, target, extraParams) {
          var weblogTag = this.symbol + type;
          if (target.hasAttribute(weblogTag)) {
              var value = target.getAttribute(weblogTag);
              if (value) {
                  try {
                      var _a = JSON.parse(value), action = _a.action, params = _a.params;
                      if (action) {
                          this.collect(type, _assign(_assign({}, params), extraParams), action);
                      }
                  }
                  catch (err) {
                      console.error("".concat(weblogTag, " parsed error:"), err);
                  }
              }
          }
      };
      // 数据组织
      AutoTrack.prototype.dataFormat = function (event) {
          var _a = event, target = _a.target, clientX = _a.clientX, clientY = _a.clientY, type = _a.type;
          var enable = this.elementFilter(target, type);
          if (!enable)
              return;
          var bounding = target.getBoundingClientRect();
          var x = clientX - bounding.x;
          var y = clientY - bounding.y;
          var xpath = getXpathFromNode(target);
          var nodeName = target.nodeName;
          var innerText = getTextContent(target);
          var attributesSerialize = this.pickElementAttrs(target);
          this.trackCodeEvent(type, target, { xpath: xpath });
          return { xpath: xpath, innerText: innerText, nodeName: nodeName, attributesSerialize: attributesSerialize, clientX: clientX, clientY: clientY, x: x, y: y };
      };
      AutoTrack.prototype.startRegisterAutoTrackPlugin = function () {
          if (window.opener) {
              // 被新窗口打开
              // 已经开始注册plugin
              var weblogVisualData = sessionStorage.getItem('_weblog_visual_data');
              var formatData = weblogVisualData && JSON.parse(weblogVisualData);
              var id = formatData ? formatData.id : 0; // 第一次发为0，就给新id
              sendMessageToOpener({
                  data: {
                      id: id,
                      status: visualMessageStatus.START
                  },
                  type: 'visual'
              });
          }
      };
      AutoTrack.prototype.applyPluginMessageToParent = function () {
          sendMessageToParent({
              data: {},
              type: 'weblogger_auto_track_finish'
          });
      };
      AutoTrack.prototype.destroy = function () {
          window.removeEventListener('click', this.clickEvent, true);
          window.removeEventListener('scroll', this.scrollEvent);
          window.removeEventListener("message", this.messageEvent, false);
          if (this.isMobile()) {
              window.removeEventListener('touchstart', this.touchStartEvent, true);
              window.removeEventListener('touchmove', this.touchMoveEvent, true);
              window.removeEventListener('touchend', this.touchEndEvent, true);
          }
      };
      AutoTrack.key = 'autoTrack';
      return AutoTrack;
  }(BasePlugin));

  return AutoTrack;

}));
//# sourceMappingURL=autotrack.js.map
