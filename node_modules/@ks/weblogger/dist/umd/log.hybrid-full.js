(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@yoda/bridge')) :
  typeof define === 'function' && define.amd ? define(['exports', '@yoda/bridge'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Weblog = {}, global.KSYoda));
})(this, (function (exports, bridge) { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  /******************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  /* global Reflect, Promise */
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");

    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  var _assign = function __assign() {
    _assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];

        for (var p in s) {
          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
      }

      return t;
    };

    return _assign.apply(this, arguments);
  };
  function __rest(s, e) {
    var t = {};

    for (var p in s) {
      if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    }

    if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
  }
  function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function (resolve) {
        resolve(value);
      });
    }

    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }

      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }

      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }

      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator(thisArg, body) {
    var _ = {
      label: 0,
      sent: function sent() {
        if (t[0] & 1) throw t[1];
        return t[1];
      },
      trys: [],
      ops: []
    },
        f,
        y,
        t,
        g;
    return g = {
      next: verb(0),
      "throw": verb(1),
      "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
      return this;
    }), g;

    function verb(n) {
      return function (v) {
        return step([n, v]);
      };
    }

    function step(op) {
      if (f) throw new TypeError("Generator is already executing.");

      while (_) {
        try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];

          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;

            case 4:
              _.label++;
              return {
                value: op[1],
                done: false
              };

            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;

            case 7:
              op = _.ops.pop();

              _.trys.pop();

              continue;

            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }

              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }

              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }

              if (t && _.label < t[2]) {
                _.label = t[2];

                _.ops.push(op);

                break;
              }

              if (t[2]) _.ops.pop();

              _.trys.pop();

              continue;
          }

          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
      }

      if (op[0] & 5) throw op[1];
      return {
        value: op[0] ? op[1] : void 0,
        done: true
      };
    }
  }
  function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
  }

  /**
   * 兼容 SSR、react native、worker 等非浏览器场景
   */
  var commonGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
  (function () {
      if (typeof commonGlobal.window === 'undefined') {
          commonGlobal.window = {
              addEventListener: function () { },
              removeEventListener: function () { },
              setTimeout: function () { },
              setInterval: function () { },
              _WEBLOGGER_MOCKED_WINDOW_: true,
              global: commonGlobal
          };
      }
      if (typeof commonGlobal.document === 'undefined') {
          commonGlobal.document = commonGlobal.window.document || {
              cookie: '',
              addEventListener: function () { },
              removeEventListener: function () { },
              querySelector: function () { },
              querySelectorAll: function () { },
          };
          if (typeof commonGlobal.window.document === 'undefined') {
              commonGlobal.window.document = commonGlobal.document;
          }
      }
      if (typeof commonGlobal.navigator === 'undefined') {
          commonGlobal.navigator = commonGlobal.window.navigator || {
              userAgent: ''
          };
          if (typeof commonGlobal.window.navigator === 'undefined') {
              commonGlobal.window.navigator = commonGlobal.navigator;
          }
      }
      if (typeof commonGlobal.screen === 'undefined') {
          commonGlobal.screen = commonGlobal.window.screen || {};
          if (typeof commonGlobal.window.screen === 'undefined') {
              commonGlobal.window.screen = commonGlobal.screen;
          }
      }
      if (typeof commonGlobal.history === 'undefined') {
          commonGlobal.history = commonGlobal.window.history || {};
          if (typeof commonGlobal.window.history === 'undefined') {
              commonGlobal.window.history = commonGlobal.history;
          }
      }
      if (typeof commonGlobal.location === 'undefined') {
          commonGlobal.location = commonGlobal.window.location || {
              hostname: '',
              search: '',
              href: '',
              origin: ''
          };
          if (typeof commonGlobal.window.location === 'undefined') {
              commonGlobal.window.location = commonGlobal.location;
          }
      }
      try {
          if (typeof commonGlobal.localStorage === 'undefined') {
              commonGlobal.localStorage = commonGlobal.window.localStorage || {
                  getItem: function () { },
                  setItem: function () { }
              };
              if (typeof commonGlobal.window.localStorage === 'undefined') {
                  commonGlobal.window.localStorage = commonGlobal.localStorage;
              }
          }
      }
      catch (err) { }
  })();

  /**
   * Object.defineProperty 容错暂时处理
   */
  if (!Object.defineProperty) {
      // @ts-ignore
      Object.defineProperty = function (target, key, descriptor) {
          // @ts-ignore
          target[key] = Object.prototype.toString.call(descriptor) === '[object Object]'
              && descriptor.hasOwnProperty('value')
              ? descriptor.value
              : descriptor;
      };
  }
  /**
   * Object.assign polyfill
   */
  if (!Object.assign) {
      // Must be writable: true, enumerable: false, configurable: true
      Object.defineProperty(Object, 'assign', {
          value: function (target) {
              if (target === null) { // TypeError if undefined or null
                  throw new TypeError('Cannot convert undefined or null to object');
              }
              var to = Object(target);
              for (var index = 1; index < arguments.length; index++) {
                  var nextSource = arguments[index];
                  if (nextSource !== null) { // Skip over if undefined or null
                      for (var nextKey in nextSource) {
                          // Avoid bugs when hasOwnProperty is shadowed
                          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                              to[nextKey] = nextSource[nextKey];
                          }
                      }
                  }
              }
              return to;
          },
          writable: true,
          configurable: true,
      });
  }
  /**
   * bind polyfill
   */
  if (!Function.prototype.bind) {
      Function.prototype.bind = function (oThis) {
          if (typeof this !== 'function') {
              // closest thing possible to the ECMAScript 5
              // internal IsCallable function
              throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
          }
          var aArgs = Array.prototype.slice.call(arguments, 1);
          var fToBind = this;
          var FNOP = /** @class */ (function () {
              function FNOP() {
              }
              return FNOP;
          }());
          var fBound = function () {
              var currentThis = this instanceof FNOP
                  ? this
                  : oThis;
              // this instanceof FNOP === true时,说明返回的fBound被当做new的构造函数调用
              return fToBind.apply(currentThis, 
              // 获取调用时(fBound)的传参.bind 返回的函数入参往往是这么传递的
              aArgs.concat(Array.prototype.slice.call(arguments)));
          };
          // 维护原型关系
          if (this.prototype) {
              // Function.prototype doesn't have a prototype property
              FNOP.prototype = this.prototype;
          }
          // 下行的代码使fBound.prototype是FNOP的实例,因此
          // 返回的fBound若作为new的构造函数,new生成的新对象作为this传入fBound,新对象的__proto__就是FNOP的实例
          fBound.prototype = new FNOP();
          return fBound;
      };
  }
  /**
   * indexOf polyfill
   */
  // Production steps of ECMA-262, Edition 5, 15.4.4.14
  // Reference: http://es5.github.io/#x15.4.4.14
  if (!Array.prototype.indexOf) {
      Array.prototype.indexOf = function (searchElement, fromIndex) {
          var k;
          // 1. Let O be the result of calling ToObject passing
          //    the this value as the argument.
          if (this == null) {
              throw new TypeError('"this" is null or not defined');
          }
          var O = Object(this);
          // 2. Let lenValue be the result of calling the Get
          //    internal method of O with the argument "length".
          // 3. Let len be ToUint32(lenValue).
          var len = O.length >>> 0;
          // 4. If len is 0, return -1.
          if (len === 0) {
              return -1;
          }
          // 5. If argument fromIndex was passed let n be
          //    ToInteger(fromIndex); else let n be 0.
          var n = +fromIndex || 0;
          if (Math.abs(n) === Infinity) {
              n = 0;
          }
          // 6. If n >= len, return -1.
          if (n >= len) {
              return -1;
          }
          // 7. If n >= 0, then Let k be n.
          // 8. Else, n<0, Let k be len - abs(n).
          //    If k is less than 0, then let k be 0.
          k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);
          // 9. Repeat, while k < len
          while (k < len) {
              // a. Let Pk be ToString(k).
              //   This is implicit for LHS operands of the in operator
              // b. Let kPresent be the result of calling the
              //    HasProperty internal method of O with argument Pk.
              //   This step can be combined with c
              // c. If kPresent is true, then
              //    i.  Let elementK be the result of calling the Get
              //        internal method of O with the argument ToString(k).
              //   ii.  Let same be the result of applying the
              //        Strict Equality Comparison Algorithm to
              //        searchElement and elementK.
              //  iii.  If same is true, return k.
              if (k in O && O[k] === searchElement) {
                  return k;
              }
              k++;
          }
          return -1;
      };
  }
  if (!Object.keys) {
      Object.keys = (function () {
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var hasDontEnumBug = !({ toString: null }).propertyIsEnumerable('toString');
          var dontEnums = [
              'toString',
              'toLocaleString',
              'valueOf',
              'hasOwnProperty',
              'isPrototypeOf',
              'propertyIsEnumerable',
              'constructor',
          ];
          return function (obj) {
              if (typeof obj !== 'object' && typeof obj !== 'function' || obj === null) {
                  throw new TypeError('Object.keys called on non-object');
              }
              var result = [];
              for (var prop in obj) {
                  if (hasOwnProperty.call(obj, prop))
                      result.push(prop);
              }
              if (hasDontEnumBug) {
                  for (var _i = 0, dontEnums_1 = dontEnums; _i < dontEnums_1.length; _i++) {
                      var key = dontEnums_1[_i];
                      if (hasOwnProperty.call(obj, key)) {
                          result.push(key);
                      }
                  }
              }
              return result;
          };
      })();
  }
  // Production steps of ECMA-262, Edition 5, 15.4.4.18
  // Reference: http://es5.github.io/#x15.4.4.18
  if (!Array.prototype.forEach) {
      Array.prototype.forEach = function (callback, thisArg) {
          var T;
          var k;
          if (this == null) {
              throw new TypeError(' this is null or not defined');
          }
          // 1. Let O be the result of calling toObject() passing the
          // |this| value as the argument.
          var O = Object(this);
          // 2. Let lenValue be the result of calling the Get() internal
          // method of O with the argument "length".
          // 3. Let len be toUint32(lenValue).
          var len = O.length >>> 0;
          // 4. If isCallable(callback) is false, throw a TypeError exception.
          // See: http://es5.github.com/#x9.11
          if (typeof callback !== 'function') {
              throw new TypeError(callback + ' is not a function');
          }
          // 5. If thisArg was supplied, let T be thisArg; else let
          // T be undefined.
          if (arguments.length > 1) {
              T = thisArg;
          }
          // 6. Let k be 0
          k = 0;
          // 7. Repeat, while k < len
          while (k < len) {
              var kValue = void 0;
              // a. Let Pk be ToString(k).
              //    This is implicit for LHS operands of the in operator
              // b. Let kPresent be the result of calling the HasProperty
              //    internal method of O with argument Pk.
              //    This step can be combined with c
              // c. If kPresent is true, then
              if (k in O) {
                  // i. Let kValue be the result of calling the Get internal
                  // method of O with argument Pk.
                  kValue = O[k];
                  // ii. Call the Call internal method of callback with T as
                  // the this value and argument list containing kValue, k, and O.
                  callback.call(T, kValue, k, O);
              }
              // d. Increase k by 1.
              k++;
          }
          // 8. return undefined
      };
  }

  var GlobalConfig = {
      sessionId: '',
      // 小程序专用
      appDevicePackageReady: false,
      identityPackageReady: false, // identity数据是否设置完成，调用setPublicParam后 设置完成。
  };
  var updateConfig = function (key, value) {
      GlobalConfig[key] = value;
  };

  var UrlPackage$1 = /** @class */ (function () {
      function UrlPackage(url, pageType) {
          // 一级页面。参考埋点需求填写即可
          this.page = '';
          // 实例的全局唯一标识，使用UUID即可
          this.identity = '';
          switch (pageType) {
              case 'web':
                  this.page_type = 2;
                  break;
              case 'native':
                  this.page_type = 1;
                  break;
              case 'mina':
                  this.page_type = 3;
                  break;
              default:
                  this.page_type = 0; // unknown
          }
          this.update(url.page, url.params);
      }
      // 更新urlPackage
      UrlPackage.prototype.update = function (page, params) {
          if (page === void 0) { page = ''; }
          if (page && page !== this.page) {
              this.page = page;
              this.identity = this.generatePageId(page);
          }
          if (params) {
              this.params = Object.assign(this.params || {}, params);
          }
      };
      UrlPackage.prototype.toJSON = function () {
          return {
              page: this.page,
              identity: this.identity,
              page_type: this.page_type,
              params: JSON.stringify(this.params),
              category: this.category,
          };
      };
      /**
       * 生成页面唯一id
       * 未自定义页面唯一ID生成方法，请自行添加后重新尝试
       * @param page
       */
      UrlPackage.prototype.generatePageId = function (page) {
          return page + new Date().getTime();
      };
      return UrlPackage;
  }());

  /**
   * 快手系应用UA标示
   */
  // TODO 海外 APP List 要求不区分大小写判断
  var ksOverseaAppList = ['UVideo', 'Vstatus', 'Kwaigo', 'MvMaster'];
  // TODO这么加没个完了，后面想办法搞成自行传入吧
  var ksAppList = [
      'Kwai',
      'Kwai_Lite',
      'Kwai_Pro',
      'livemate',
      'ksthanos',
      'ksNebula',
      'ksnebula',
      'kwaiying',
      'pearl',
      'kinder',
      'm2u',
      'LOLita',
      'XFunCore',
      'ACVideoCore',
      'ZIKZAK', // ZIKZAK
  ].concat(ksOverseaAppList);

  /**
   * 创建一个cookie字符串，可被赋值给document.cookie.
   * @param {string} name cookie名称.
   * @param {string} value cookie值.
   * @param {boolean} encode 是否对值进行编码.
   * @param {Object} options (Optional) 配置项.
   * @return {string} 返回 cookie 字符串.
   */
  function createCookieString(name, value, encode, options) {
      if (options === void 0) { options = {}; }
      var text = "".concat(encodeURIComponent(name), "=").concat((encode ? encodeURIComponent(value) : value));
      var expires = options.expires;
      var path = options.path || '/';
      var domain = options.domain || '';
      if (expires instanceof Date) {
          text += "; expires=".concat(expires.toUTCString());
      }
      if (typeof expires === 'number') {
          text += "; max-age==".concat(expires);
      }
      if (path !== '') {
          text += "; path=".concat(path);
      }
      if (domain !== '') {
          text += "; domain=".concat(domain);
      }
      if (options.secure === true) {
          text += '; secure';
      }
      return text;
  }
  /**
   * 将cookie序列化成对象.
   * @param {string} text cookie值.
   * @param {boolean=} shouldDecode cookie是否需要被解码. 默认为true.
   * @param {object=} options 如何读取cookie的配置.
   * @return {object} 可访问cookie的序列化结果
   */
  function parseCookieString(text, shouldDecode, options) {
      var _a;
      var cookies = {};
      if (text.length > 0) {
          var decodeValue = !shouldDecode
              ? function (s) {
                  return s;
              }
              : decodeURIComponent;
          var cookieParts = text.split(/;\s/g);
          var cookieName = null;
          var cookieValue = null;
          var cookieNameValue = null;
          for (var i = 0, len = cookieParts.length; i < len; i++) {
              cookieNameValue = (_a = cookieParts[i]) === null || _a === void 0 ? void 0 : _a.match(/([^=]+)=/i);
              if (cookieNameValue && cookieNameValue !== null) {
                  try {
                      cookieName = decodeURIComponent(cookieNameValue[1]);
                      cookieValue = decodeValue(cookieParts[i].substring(cookieNameValue[1].length + 1));
                  }
                  catch (ex) {
                      // 忽略
                  }
              }
              else {
                  // cookie 中没有 "=", 当成布尔值
                  cookieName = decodeURIComponent(cookieParts[i]);
                  cookieValue = '';
              }
              if (cookieName !== null) {
                  // 默认后面的cookie覆盖前面的
                  cookies[cookieName] = cookieValue;
              }
          }
      }
      return cookies;
  }
  var cookiesMap = {};
  var prevCookie;
  /**
   * 获取cookie值.
   * @param {string} name cookie名称.
   * @param {object=} options 配置项
   *                    raw: 是否进行编码，true则是未编码
   * @return {*} 不存在返回null.
   */
  function getCookie(name, options, force) {
      if (options === void 0) { options = {}; }
      if (force === void 0) { force = false; }
      try {
          if (!force && name in cookiesMap) {
              return cookiesMap[name];
          }
          if (!(window === null || window === void 0 ? void 0 : window.document))
              return;
          // 处理 cookie 动态更新情形
          var curCookie = document.cookie || '';
          if (curCookie === prevCookie)
              return cookiesMap[name];
          prevCookie = curCookie;
          cookiesMap = parseCookieString(curCookie, !options.raw, options);
          return cookiesMap[name];
      }
      catch (err) { }
  }
  /**
   * 给定的键值设置cookie
   * @param {string} name 名称.
   * @param {*} value cookie值.
   * @param {object=} options (Optional) 配置项:
   *      path 路径
   *      domain 域名
   *      expires 过期时间，一个Date对象
   *      secure 是否安全cookie
   *      raw (true/false). Setting raw to true indicates that the cookie should not be URI encoded before being set.
   */
  function setCookie(name, value, options) {
      if (options === void 0) { options = {}; }
      try {
          document.cookie = createCookieString(name, value, !options.raw, options);
          cookiesMap[name] = value;
      }
      catch (err) { }
  }
  var cookieUtils = {
      getCookie: getCookie,
      setCookie: setCookie,
      parseCookieString: parseCookieString
  };

  function log() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      try {
          var log_1 = console === null || console === void 0 ? void 0 : console.log;
          return log_1 && log_1.call.apply(log_1, __spreadArray([console], args, false));
      }
      catch (e) {
          return;
      }
  }
  function warn() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      try {
          var warn_1 = console === null || console === void 0 ? void 0 : console.warn;
          return warn_1 && warn_1.call.apply(warn_1, __spreadArray([console], args, false));
      }
      catch (e) {
          return;
      }
  }
  var sdkName = 'webLogger';
  function error() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      try {
          var error_1 = sdkName === 'webLogger_krn' ? console === null || console === void 0 ? void 0 : console.log : console === null || console === void 0 ? void 0 : console.error;
          return error_1 && error_1.call.apply(error_1, __spreadArray([console], args, false));
      }
      catch (e) {
          return;
      }
  }

  /**
   * 获取 localStorage 缓存
   */
  function getLocalStorageItem(key) {
      try {
          if (window && window.localStorage) {
              var value = window.localStorage.getItem(key);
              if (value) {
                  try {
                      return JSON.parse(value);
                  }
                  catch (err) {
                      return value;
                  }
              }
          }
      }
      catch (err) {
          return null;
      }
      return null;
  }
  /**
   * 设置 localStorage 缓存
   */
  function setLocalStorageItem(key, value) {
      try {
          if (window && window.localStorage) {
              window.localStorage.setItem(key, JSON.stringify(value));
              return true;
          }
      }
      catch (err) {
          return false;
      }
      return false;
  }
  /**
   * 从目标arr中删除item
   * @param {*} arr  目标数组
   * @param {*} item  item
   */
  function deleteArray(arr, item) {
      var index = arr.indexOf(item);
      if (index > -1) {
          arr.splice(index, 1);
      }
  }
  /**
   * 事件监听兼容处理
   * @param {*} evtTarget  事件监听目标
   * @param {*} evtName   事件名
   * @param {*} callback  回调函数
   * @param {*} options  相关参数设置
   */
  function addMonitor(evtTarget, evtName, callback, options) {
      if ('attachEvent' in evtTarget) {
          return evtTarget.attachEvent('on' + evtName, callback);
      }
      return evtTarget.addEventListener(evtName, callback, options);
  }
  /**
   * 事件监听解绑兼容处理
   * @param {*} evtTarget  事件监听目标
   * @param {*} evtName   事件名
   * @param {*} callback  事件回调
   */
  function removeMonitor(evtTarget, evtName, callback, options) {
      if ('attachEvent' in evtTarget) {
          return evtTarget.detachEvent('on' + evtName, callback);
      }
      return evtTarget.removeEventListener(evtName, callback, options);
  }
  function leftPad(str, len, ch) {
      if (ch === void 0) { ch = ' '; }
      len = len - str.length;
      if (len <= 0) {
          return str;
      }
      var pad = '';
      while (len) {
          if (len & 1) {
              pad += ch;
          }
          len >>= 1;
          ch += ch;
      }
      return pad + str;
  }
  /**
   * 是否是快手系APP
   */
  var isInApp = function (ua) {
      if (ua === void 0) { ua = window.navigator.userAgent.toLowerCase(); }
      try {
          for (var i = 0; i < ksAppList.length; i++) {
              if (ua.indexOf(ksAppList[i].toLowerCase()) > -1) {
                  return true;
              }
          }
      }
      catch (err) {
          return false;
      }
  };
  function parseQueryString(queryString) {
      var result = {};
      var queries = queryString.split('&');
      for (var _i = 0, queries_1 = queries; _i < queries_1.length; _i++) {
          var query = queries_1[_i];
          var _a = query.split('='), key = _a[0], value = _a[1];
          if (!(key in result)) {
              result[key] = value;
              continue;
          }
          if (result[key] instanceof Array) {
              result[key].push(value);
              continue;
          }
          result[key] = [result[key], value];
      }
      return result;
  }
  /**
   * 检查依赖版本号是否不小于推荐版本
   */
  function checkVersion(recommendVersion, version) {
      if (!version)
          return false;
      if (version.indexOf('alpha') !== -1)
          return false;
      if (version.indexOf('beta') !== -1)
          return false;
      try {
          var matches = recommendVersion.match(/\d+\.\d+\.\d+/);
          recommendVersion = (matches === null || matches === void 0 ? void 0 : matches[0]) || '';
          if (!recommendVersion)
              return true;
          matches = version.match(/\d+\.\d+\.\d+/);
          version = (matches === null || matches === void 0 ? void 0 : matches[0]) || '';
          if (!version)
              return false;
          var _a = recommendVersion.split('.').map(function (i) { return Number(i); }), rMajor = _a[0], rMinor = _a[1], rPatch = _a[2];
          var _b = version.split('.').map(function (i) { return Number(i); }), major = _b[0], minor = _b[1], patch = _b[2];
          if (major < rMajor)
              return false;
          if (major > rMajor)
              return true;
          if (minor < rMinor)
              return false;
          if (minor > rMinor)
              return true;
          if (patch < rPatch)
              return false;
          return true;
      }
      catch (err) {
          return false;
      }
  }
  function checkSupportCloseCoPage() {
      var version = getCookie('appver', undefined, true);
      return version && checkVersion('10.8.30', version);
  }
  function getUrlAndQueryFromUrl(url) {
      if (url === void 0) { url = location.href; }
      var queryIndex = url.lastIndexOf('?');
      if (queryIndex === -1) {
          return {
              page: url
          };
      }
      var page = url.slice(0, queryIndex);
      var queryString = url.slice(queryIndex + 1);
      return {
          page: page,
          params: parseQueryString(queryString),
      };
  }
  var getMappingPage = function (urlPackage, urlMap) {
      var url = urlPackage.url, page = urlPackage.page, params = urlPackage.params, pageId = urlPackage.pageId;
      if (!page && typeof url === 'string') {
          var parsed = getUrlAndQueryFromUrl(url);
          page = parsed.page;
          params = parsed.params;
      }
      if (typeof urlMap === 'function') {
          try {
              var res = urlMap({ url: url, page: page, params: params });
              if (typeof res === 'string') {
                  page = res;
              }
              else if (typeof res === 'object') {
                  if (res.page) {
                      page = res.page;
                  }
                  if (res.params) {
                      params = res.params;
                  }
                  if (res.pageId) {
                      pageId = res.pageId;
                  }
              }
          }
          catch (err) { }
      }
      else if (typeof urlMap === 'object') {
          var mappingPage = '';
          for (var key in urlMap) {
              if ((url || page || '').indexOf(key) > -1) {
                  mappingPage = urlMap[key];
                  break;
              }
          }
          if (mappingPage) {
              page = mappingPage;
          }
      }
      return {
          page: page,
          params: params,
          pageId: pageId
      };
  };
  /**
   * 非空纯对象判定
   * @param obj
   * @returns
   */
  var isObj = function (obj) { return obj && typeof obj === 'object' && !Array.isArray(obj); };
  /**
   * 对象打平赋值
   * @param target
   * @param options
   * @returns
   */
  var flattenAssign = function (target, options) {
      if (!isObj(target) || !isObj(options))
          return;
      var merge = function (obj1, obj2, key) {
          if (isObj(obj1[key]) && isObj(obj2[key])) {
              Object.assign(obj1[key], obj2[key]);
          }
          else if (!isObj(obj1[key]) && !isObj(obj2[key])) {
              obj1[key] = obj2[key];
          }
      };
      for (var key in options) {
          if (target.hasOwnProperty(key)) {
              merge(target, options, key);
              continue;
          }
          for (var deepKey in target) {
              if (isObj(target[deepKey]) && target[deepKey].hasOwnProperty(key)) {
                  merge(target[deepKey], options, key);
              }
          }
      }
  };
  function pageUrlValidate(page) {
      // 对于上报到v2，page为url的埋点，给予警告
      if (page && /^(https?:)?\/\//.test(page)) {
          error('[error 108]', "\u8BF7\u6CE8\u610F\u5F53\u524D\u57CB\u70B9\u9875\u9762\u4FE1\u606F\u4E3A ".concat(page, "\uFF0C\u4E0D\u7B26\u5408\u89C4\u8303\uFF0C\u4E0A\u62A5\u5931\u8D25\uFF01"));
          return false;
      }
      return true;
  }
  var getResolution = (function () {
      var resolution = '';
      return function () {
          if (resolution) {
              return resolution;
          }
          try {
              var ratio = window.devicePixelRatio || 1;
              var width = Math.floor(screen.width * ratio); // 有的devicePixelRatio为小数，在此转为整数
              var height = Math.floor(screen.height * ratio);
              resolution = "".concat(width, "x").concat(height);
              return resolution;
          }
          catch (err) {
              return '';
          }
      };
  })();
  // 从vue-router里面拿的……
  function supportsPushState() {
      var ua = window.navigator.userAgent;
      if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1)
          && ua.indexOf('Mobile Safari') !== -1
          && ua.indexOf('Chrome') === -1
          && ua.indexOf('Windows Phone') === -1) {
          return false;
      }
      return window.history && 'pushState' in window.history;
  }
  function isMobileAndIpad() {
      var _a, _b;
      var ua = ((_a = window === null || window === void 0 ? void 0 : window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) || '';
      var isMobile = /mobile|tablet|ip(ad|hone|od)|android|(windows phone)/i.test(ua);
      // 兼容最新版本 ipad 版本 ua 判断
      var isiPad = (window === null || window === void 0 ? void 0 : window.navigator.platform) === 'MacIntel' && ((_b = window === null || window === void 0 ? void 0 : window.navigator) === null || _b === void 0 ? void 0 : _b.maxTouchPoints) > 1;
      return isMobile || isiPad;
  }
  /**
   * 是否支持 worker gzip 压缩
   * @returns
   */
  var enableAsyncGzip = function () { return !!((window === null || window === void 0 ? void 0 : window.Worker // 可以新建 worker
  )
      && (window === null || window === void 0 ? void 0 : window.Uint8Array) // 支持二进制存储
      && window.URL // 可以创建文件路径
      && window.Promise // 可以使用 promise
      && !isMobileAndIpad() // 移动端禁止使用压缩
  ); };
  /**
   * 返回正整数数值
   * @param value
   */
  var getPositiveInteger = function (value) {
      try {
          return Math.abs(Math.floor(value));
      }
      catch (e) {
          return value;
      }
  };
  function stringifyParams(params) {
      return typeof params === 'string' ? params : typeof params === 'object' ? JSON.stringify(params) : '';
  }

  // 为了减少点代码体积，自己搞一个简易的EventEmitter
  var EventEmitter = /** @class */ (function () {
      function EventEmitter() {
          this.events = {};
      }
      EventEmitter.prototype.on = function (eventName, callback) {
          var _a;
          if (callback && typeof callback === 'function') {
              this.events[eventName] = this.events[eventName] || [];
              (_a = this.events[eventName]) === null || _a === void 0 ? void 0 : _a.push(callback);
          }
      };
      EventEmitter.prototype.off = function (eventName, callback) {
          if (!this.events[eventName]) {
              return;
          }
          if (callback && typeof callback === 'function') {
              var array = this.events[eventName];
              if (array) {
                  deleteArray(array, callback);
              }
          }
          if (!callback) {
              this.events[eventName] = [];
          }
      };
      EventEmitter.prototype.emit = function (eventName) {
          var _a;
          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              args[_i - 1] = arguments[_i];
          }
          if (!this.events[eventName]) {
              return;
          }
          (_a = this.events[eventName]) === null || _a === void 0 ? void 0 : _a.forEach(function (callback) {
              callback.apply(void 0, args);
          });
      };
      return EventEmitter;
  }());

  var initConfig = (function (options) {
      var logConfig = _assign({ env: 'production', proto: 'v3', timeout: 30000, wait: 1000, maxBatchLength: 50, sampleRate: 1, 
          // 尝试从全局中获取 yoda
          yoda: typeof window !== 'undefined' && window.yoda, forbidV2HttpUrlPage: true }, (options || {}));
      return logConfig;
  });

  var pluginIndex = 0;
  var Weblog$2 = /** @class */ (function (_super) {
      __extends(Weblog, _super);
      /**
       * @param {?object} logConfig Logger初始化配置
       * @param {object=} options 额外配置参数
       *                    - base 公参的覆盖
       */
      function Weblog(logConfig, base) {
          var _this = _super.call(this) || this;
          _this.version = '3.10.23';
          // 插件
          _this.plugins = {};
          _this.flush = function () {
              _this.logger.flush();
          };
          // 初始化初始化参数配置和埋点基础信息配置
          _this.baseOption = _assign({}, base);
          _this.logConfig = initConfig(logConfig);
          // 初始化页面信息
          _this.initUrlPackage();
          // 记录首个实例
          if (!Weblog.__instance) {
              Weblog.__instance = _this;
          }
          return _this;
      }
      Object.defineProperty(Weblog.prototype, "sessionId", {
          get: function () {
              return GlobalConfig.sessionId;
          },
          enumerable: false,
          configurable: true
      });
      Weblog.prototype.initUrlPackage = function () {
          this.updateCurrentUrlPackage();
      };
      /**
       * 更新当前 url 信息
       * @param url
       * @param type
       */
      Weblog.prototype.updateCurrentUrlPackage = function (url, type) {
          if (url === void 0) { url = {}; }
          if (type === void 0) { type = 'web'; }
          // 该接口不改变 refer 信息
          if (typeof url === 'object' && url.page) {
              if (this.currentUrlPackage && url.page === this.currentUrlPackage.page) {
                  return this.currentUrlPackage.update(url.page, url.params);
              }
          }
          this.currentUrlPackage = new UrlPackage$1(url, type);
      };
      /**
       * 更新 refer url 信息
       * @param url
       * @param type
       */
      Weblog.prototype.updateReferUrlPackage = function (url, type) {
          if (url === void 0) { url = this.currentUrlPackage; }
          if (type === void 0) { type = 'web'; }
          if (url instanceof UrlPackage$1) {
              this.referUrlPackage = url;
          }
          else {
              this.referUrlPackage = new UrlPackage$1(url, type);
          }
      };
      /**
       * 重设 common_package 信息
       * @param base
       */
      Weblog.prototype.updateBase = function (base) {
          this.updateCommonPackage(base);
      };
      /**
       * 更新现有 common_package 信息
       */
      Weblog.prototype.updateCommonPackage = function (options) {
          if (typeof options !== 'object')
              return;
          this.commonPackage.update(options);
      };
      /**
       * 初始化插件
       * @param plugins
       */
      Weblog.prototype.addPlugins = function () {
          var _this = this;
          if (!this.logConfig.plugins || !this.logConfig.plugins.length)
              return;
          // 类似 webpack plugins 的实例数组
          this.logConfig.plugins.forEach(function (plugin) {
              if (typeof plugin === 'object' && typeof plugin.apply === 'function') {
                  _this.addPluginInstance(plugin);
              }
          });
      };
      /**
       * 加载插件实例
       */
      Weblog.prototype.addPluginInstance = function (pluginInstance) {
          if (pluginInstance) {
              var key = pluginInstance.key || pluginInstance.constructor && pluginInstance.constructor.key || "plugin_auto_key_".concat(pluginIndex++);
              if (typeof pluginInstance.apply === 'function'
                  && (!pluginInstance.weblog || pluginInstance.weblog !== this)) {
                  pluginInstance.apply(this);
              }
              this.plugins[key] = pluginInstance;
          }
      };
      /**
       * 加载插件构造函数
       * @param plugin
       * @param pluginOptions
       */
      Weblog.prototype.plug = function (plugin, pluginOptions) {
          if (this.plugins[plugin.key]) {
              return error('[code 301]', "".concat(plugin.key, " \u63D2\u4EF6\u91CD\u590D\u52A0\u8F7D\uFF01"));
          }
          this.addPluginInstance(new plugin(this, pluginOptions));
      };
      Weblog.prototype.unplug = function (name) {
          var plugin = this.plugins[name];
          if (plugin) {
              plugin.destroy();
              delete this.plugins[name];
          }
      };
      Weblog.prototype.unplugAll = function () {
          for (var key in this.plugins) {
              if (this.plugins[key]) {
                  this.unplug(key);
              }
          }
      };
      /**
       * 扩展类实现
       * @param eventType
       * @param eventOptions
       * @returns
       */
      Weblog.prototype.generateLog = function (eventType, eventOptions) {
          return {};
      };
      Weblog.prototype.send = function (type, options, immediately) {
          var log = this.generateLog(type.toUpperCase(), options);
          // @ts-ignore
          if (typeof this.beforeSend === 'function') {
              // @ts-ignore
              this.beforeSend(type, options, log);
          }
          return this.logger.send(log, !!immediately, options.callback);
      };
      /**
       * 收集上报
       * @param type
       * @param options
       * @returns
       */
      Weblog.prototype.collect = function (type, options) {
          this.send(type, options);
      };
      Weblog.prototype.sendImmediately = function (type, options) {
          this.send(type, options, true);
      };
      Weblog.prototype.sendPackage = function (data, callback) {
          this.logger.sendPackage(data, callback);
      };
      Weblog.prototype.destroy = function () {
          this.unplugAll();
      };
      return Weblog;
  }(EventEmitter));

  function uuid() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
          var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
          return v.toString(16);
      });
  }
  /**
   * 生成nano id
   * @return {string} 16长度的字符串
   */
  function nanoId() {
      var ts = ((Math.random() * 1e9) >>> 0);
      var randomer = [];
      var seed = '0123456789ABCDEF';
      for (var i = 0; i < 7; i++) {
          randomer.push(seed.charAt(Math.random() * 16));
      }
      return ts + randomer.join('');
  }
  /**
   * 提取顶级域名
   * @param {?string=} hostname
   * @return {string} 返回顶级域名
   */
  function resolveTopLevelDomain(hostname) {
      if (hostname === void 0) { hostname = typeof location !== 'undefined' ? location.hostname : ''; }
      if (!hostname) {
          return '';
      }
      var ret = hostname.split('.');
      var len = ret.length;
      return (len <= 2 ? '' : ".".concat(ret[len - 2], ".").concat(ret[len - 1]));
  }
  var didKey = 'did';
  /**
   * 生成did
   * @return {string}
   */
  function generateDID() {
      try {
          // 兼容一下原下发的did逻辑，如果能从did获取，那么就走did
          // 如果不能，那就通过log sdk自行维护的_did来搞
          var did = getCookie(didKey) || getCookie('_did');
          if (!did) {
              did = "web_".concat(nanoId());
              var expires = new Date();
              expires.setFullYear(expires.getFullYear() + 1);
              setCookie('_did', did, {
                  expires: expires,
                  domain: resolveTopLevelDomain(),
                  path: '/',
              });
          }
          return did;
      }
      catch (err) {
          return '';
      }
  }
  var sessionKey = 'WEBLOGGER_SESSIONID';
  // session_id 用来串联在一次打开 App 期间跳转不同页面的用户行为
  var getSessionId = function () {
      var sessionId = '';
      var defaultKey = 'session_id';
      try {
          if (isInApp()) {
              sessionId = getCookie(defaultKey) || getCookie('sid'); // 端内从 cookie 中获取客户端传来的 session_id
              if (sessionId)
                  return sessionId;
          }
          else if (typeof sessionStorage !== 'undefined') {
              sessionId = sessionStorage.getItem(sessionKey) || '';
              if (!sessionId) {
                  sessionId = uuid();
                  sessionStorage.setItem(sessionKey, sessionId);
              }
          }
      }
      catch (err) {
          sessionId = uuid();
      }
      return sessionId || uuid();
  };

  var UrlPackage = /** @class */ (function (_super) {
      __extends(UrlPackage, _super);
      function UrlPackage(url, pageType, urlMap) {
          var _this = _super.call(this, {}, pageType) || this;
          if (typeof url === 'string') {
              // TODO: 避免兼容问题，暂不处理
              // try {
              //     url = window.decodeURIComponent(url);
              // } catch (err) {}
              var obj = getUrlAndQueryFromUrl(url);
              _this.page = obj.page;
              _this.params = obj.params;
          }
          else {
              _this.page = (url || {}).page || '';
              _this.params = (url || {}).params || undefined;
          }
          _this.identity = _this.generatePageId();
          if (urlMap && typeof url === 'string') {
              _this.init(url, urlMap);
          }
          return _this;
      }
      UrlPackage.prototype.init = function (url, urlMap) {
          if (urlMap === void 0) { urlMap = {}; }
          var _a = getMappingPage({ url: url, page: this.page, params: this.params }, urlMap), page = _a.page, params = _a.params;
          this.update(page, params);
      };
      UrlPackage.prototype.attachUrl = function () {
          if (!this.params) {
              this.params = {};
          }
          if (location === null || location === void 0 ? void 0 : location.href) {
              // 电商需求，页面信息携带原始 url 和 pathname
              this.params.origin_url = this.params.origin_url || (location === null || location === void 0 ? void 0 : location.href);
              var _a = getUrlAndQueryFromUrl(location.href).page, page = _a === void 0 ? '' : _a;
              this.params.origin_pathname = page;
          }
      };
      UrlPackage.prototype.getRealUrlPackage = function () {
          var _a = getUrlAndQueryFromUrl(location.href), page = _a.page, params = _a.params;
          return {
              page: page,
              params: JSON.stringify(_assign({ page_code: this.page, url: location.href, query: params }, params)),
              page_type: this.page_type,
              identity: this.identity
          };
      };
      UrlPackage.prototype.generatePageId = function () {
          return uuid();
      };
      return UrlPackage;
  }(UrlPackage$1));

  var dataTrackHost = 'https://data-track.corp.kuaishou.com';
  var overseaDataTrackHost = 'https://data-track-sgp.corp.kuaishou.com';
  var testHost = dataTrackHost + '/';
  var PROD = 'production';
  var TEST = 'test';
  var DEV = 'development';
  var OVERSEA = 'oversea';
  var LOGGER = 'logger';
  var LOGGER_SGP = 'logger-oversea';
  var v3Api = 'rest/wd/common/log/collect/';
  var Envs = [PROD, TEST, DEV, LOGGER, OVERSEA];
  var overseaHost = 'https://logsdk.kwai-pro.com/';
  var Apis = {
      // v2 接口一定要带上 _json=1 参数，不然服务端会解析失败
      v2: "rest/kd/log/collect?_json=1&biz=",
      v3: "".concat(v3Api, "misc2"),
      // 雷达都上报到 v3
      radar: "".concat(v3Api, "radar")
  };
  var Hosts = {
      v2: {
          // 正式环境随机域名分流
          production: ['https://wlog.ksapisrv.com/', 'https://wlog.gifshow.com/'][Math.round(Math.random())],
          development: testHost,
          test: testHost,
          oversea: overseaHost
      },
      v3: {
          production: 'https://log-sdk.ksapisrv.com/',
          development: testHost,
          test: testHost,
          oversea: overseaHost
      }
  };
  var buildUrl = function (env, radar, proto) {
      if (env === void 0) { env = PROD; }
      if (radar === void 0) { radar = false; }
      if (proto === void 0) { proto = 'v3'; }
      if (Envs.indexOf(env) === -1) {
          return env + Apis[proto];
      }
      if (radar && Hosts.v3[env]) {
          return Hosts.v3[env] + Apis.radar;
      }
      if (Hosts[proto][env] && Apis[proto]) {
          return Hosts[proto][env] + Apis[proto];
      }
      return Hosts.v3.production + Apis.v3;
  };
  var formatUrlQuery = function (url, querys) {
      if (!querys)
          return url;
      var reg = /\?(.+?)$/;
      try {
          return reg.test(url) ? url.replace(/\?(.+?)$/, "?".concat(querys, "&$1")) : url + "?".concat(querys);
      }
      catch (err) {
          return url;
      }
  };

  var BatchLog = /** @class */ (function () {
      function BatchLog(config, commonPackage) {
          var _this = this;
          // 立即发送队列
          this.asyncQueue = [];
          // 存储待发送的消息
          this.throttleQueue = [];
          // 存储失败或者超时的数据
          this.errorQueue = [];
          this.sendingQueue = {};
          this.url = '';
          this.isV2 = false;
          this.isDebug = false;
          this.radarUrl = '';
          this.drained = false; // 是否未排干日志队列
          this.batchCount = 50;
          this.isSetSamplingResult = false;
          // 有值时阻塞日志发送
          this.sendingYield = null;
          /**
           * 清空当前日志队列
           * @param callback
           */
          this.flush = function (callback) {
              _this.sendLogs(_this.throttleQueue.concat(_this.asyncQueue), callback);
              _this.throttleQueue = [];
              _this.asyncQueue = [];
          };
          /**
           * 页面关闭前排干所有未发送的和发送失败的日志
           */
          this.drain = function () {
              _this.drained = true;
              _this.flush();
              _this.flushErrorLogs();
              // 处理 beforunload 中断，实际页面未退出的情况
              setTimeout(function () {
                  _this.drained = false;
              }, 1000);
          };
          this.config = config;
          if (this.config.maxBatchLength && this.config.maxBatchLength > 1) {
              this.batchCount = Math.min(50, this.config.maxBatchLength);
          }
          this.commonPackage = commonPackage;
          this.isDebug = this.config.logger || this.config.env === 'logger';
          this.isV2 = this.config.proto === 'v2';
          this.updateUrls();
      }
      BatchLog.prototype.sendData = function (data, callback) {
          if (typeof this.config.sender === 'function') {
              return this.config.sender(data, callback);
          }
          return this.baseSendData(data, callback);
      };
      Object.defineProperty(BatchLog.prototype, "responseSamplingStorageKey", {
          get: function () {
              var _a = this.commonPackage.app_package, product_name = _a.product_name, product = _a.product;
              var device_id = this.commonPackage.identity_package.device_id;
              // tslint:disable-next-line:max-line-length
              return "RESPONSE_SAMPLING_STORAGE_KEY_".concat(product_name || product, "_").concat(device_id);
          },
          enumerable: false,
          configurable: true
      });
      /**
       * 根据配置生成上报的 url 地址
       */
      BatchLog.prototype.updateUrls = function () {
          var env = this.config.env;
          // 线上地址 -> 抓包查找工具后端，用以测试后端
          // 兼容方式：若小程序里有扫码工具，扫码后直接进行切换
          if (env && /^(https?:)?\/\//.test(env)) {
              this.url = env;
          }
          else {
              this.url = buildUrl(env);
          }
          this.formatUrl();
      };
      BatchLog.prototype.formatUrl = function () {
          if (!this.radarUrl) {
              this.radarUrl = this.url.replace(this.url.indexOf(Apis.v2) !== -1 ? Apis.v2 : Apis.v3, Apis.radar);
              // v2 域名不能上报雷达事件
              if (this.radarUrl.indexOf(Hosts.v2.production || '') !== -1) {
                  this.radarUrl.replace(Hosts.v2.production || '', Hosts.v3.production);
              }
          }
          var _a = this.commonPackage.app_package, product_name = _a.product_name, product = _a.product;
          var querys = "v=3.10.23&kpn=".concat(product_name || product);
          this.url = formatUrlQuery(this.url, querys);
          this.radarUrl = formatUrlQuery(this.radarUrl, querys);
      };
      /**
       * 之所以使用 JSON 而不是 commonPackage 对象，是因为对象可能会变化，而 JSON 则是当时的一个快照，一旦生成不会变化
       */
      BatchLog.prototype.getCommonPackageJSON = function () {
          return this.commonPackage.toJSON();
      };
      /**
       * 进入发送流程
       * @param data
       * @param immediate
       * @param callback 用户自定义 callback
       * @returns
       */
      BatchLog.prototype.send = function (data, immediate, callback) {
          if (immediate === void 0) { immediate = false; }
          // 有回调的立即上报
          if (callback || this.drained) {
              return this.sendLogs([data], callback);
          }
          if (immediate) {
              this.sendAsync(data, callback);
              return;
          }
          this.sendThrottle(data);
      };
      /**
       * 短时异步上报
       */
      BatchLog.prototype.sendAsync = function (data, callback) {
          return __awaiter(this, void 0, void 0, function () {
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          this.asyncQueue.push(data);
                          if (this.asyncQueue.length >= this.batchCount) {
                              this.flush();
                              return [2 /*return*/];
                          }
                          if (!this.sendingYield) return [3 /*break*/, 2];
                          return [4 /*yield*/, this.sendingYield];
                      case 1:
                          _a.sent();
                          this.sendingYield = null;
                          _a.label = 2;
                      case 2:
                          _a.trys.push([2, 4, , 5]);
                          return [4 /*yield*/, Promise.resolve()];
                      case 3:
                          _a.sent();
                          return [3 /*break*/, 5];
                      case 4:
                          _a.sent();
                          return [3 /*break*/, 5];
                      case 5:
                          if (!this.asyncQueue.length)
                              return [2 /*return*/];
                          this.flush();
                          return [2 /*return*/];
                  }
              });
          });
      };
      /**
       * 节流上报
       */
      BatchLog.prototype.sendThrottle = function (data) {
          var _this = this;
          this.throttleQueue.push(data);
          // 积攒超过最大
          if (this.throttleQueue.length >= this.batchCount) {
              this.flush();
              return;
          }
          // debounce逻辑
          clearTimeout(this.batchWaitTimer);
          this.batchWaitTimer = setTimeout(function () {
              _this.flush();
          }, this.config.wait);
      };
      /**
       * 批量发送日志
       * @param logs
       * @param callback 用户自定义 callback
       */
      BatchLog.prototype.sendLogs = function (logs, callback) {
          var _this = this;
          if (!logs || !logs.length) {
              return typeof callback === 'function' && callback();
          }
          var data = this.buildLogPackage(logs, this.url);
          // 网络发送错误回调
          var callbackFn = function (error) {
              // 如果网络异常，日志发送失败，则将错误日志缓存，在网络恢复时清空一次错误队列
              if (error) {
                  _this.errHandler(data);
              }
              else {
                  _this.flushErrorLogs();
              }
              typeof callback === 'function' && callback(error);
          };
          this.sendPackage(data, callbackFn);
      };
      /**
       * 将日志包通过接口发送
       * @param data
       * @param callback
       */
      BatchLog.prototype.sendPackage = function (data, callback) {
          var timeout = this.config.timeout;
          try {
              // 如果业务方配置了 sender
              this.sendData(_assign(_assign({}, data), { isDebug: this.isDebug, isDrained: this.drained, timeout: timeout }), callback);
          }
          catch (err) {
              typeof callback === 'function' && callback(err);
          }
      };
      /**
       * 每个 logPackage 包含了所有上报所需的信息，上报地址和上报数据
       * @param logs
       * @param url
       */
      BatchLog.prototype.buildLogPackage = function (logs, url) {
          if (this.isV2) {
              return this.buildV2Package(logs, url);
          }
          return this.buildV3Package(logs, url);
      };
      BatchLog.prototype.buildV2Package = function (logs, url) {
          return {
              url: url,
              data: {
                  log: {
                      event: logs
                  }
              }
          };
      };
      BatchLog.prototype.buildV3Package = function (logs, url, commonPackageOptions) {
          var common = this.getCommonPackageJSON();
          commonPackageOptions && Object.assign(common, commonPackageOptions);
          return {
              url: url,
              data: {
                  common: common,
                  logs: logs
              }
          };
      };
      /**
       * 日志上报出错处理，一般为网络异常
       * @param logPackage
       */
      BatchLog.prototype.errHandler = function (logPackage) {
          var _a;
          if (this.isV2) {
              this.errorQueue.unshift(logPackage);
              return;
          }
          var data = logPackage.data;
          if (!data.logs.length)
              return;
          // http_seq_id 和 client_timestamp 不是必须的，合并时删除
          delete data.common.h5_extra_attr.http_seq_id;
          delete data.common.h5_extra_attr.client_timestamp;
          // 尝试合并相同 url 和 common 的请求
          var merged = false;
          for (var i = 0; i < this.errorQueue.length; i++) {
              var currentLog = this.errorQueue[i];
              if (currentLog.url === logPackage.url &&
                  currentLog.data.logs.length + data.logs.length <= 100 &&
                  JSON.stringify(currentLog.data.common) === JSON.stringify(data.common)) {
                  merged = true;
                  (_a = currentLog.data.logs).push.apply(_a, data.logs);
                  break;
              }
          }
          if (!merged) {
              // 先进后出
              // 最大错误数量限制为 5
              if (this.errorQueue.length >= 5) {
                  this.errorQueue.pop();
              }
              this.errorQueue.unshift(logPackage);
          }
      };
      // 当网络恢复时尝试一次上报
      BatchLog.prototype.flushErrorLogs = function () {
          var _this = this;
          this.errorQueue.forEach(function (logPackage) {
              _this.sendPackage(logPackage);
          });
          this.errorQueue = [];
      };
      BatchLog.prototype.destory = function () {
          this.batchWaitTimer && clearTimeout(this.batchWaitTimer);
          this.compensateTimer && clearTimeout(this.compensateTimer);
      };
      /**
       * 雷达专用上报（雷达上报接口和其他事件上报接口做了区分，用于分流统计）
       * @param radar
       */
      BatchLog.prototype.sendRadar = function (radar, service_name) {
          var options = service_name ? { service_name: service_name } : undefined;
          var radarPackage = this.buildV3Package([radar], this.radarUrl || this.url, options);
          this.sendPackage(radarPackage);
      };
      return BatchLog;
  }());

  var xhrErrorLog = function (err, url, data) { return error('[error 400]', '埋点上报接口请求报错', '\nurl:', url, '\ndata', data, '\nerror:', err || 'server decode log failed'); };
  var logXhrResponseCheck = function (status, response, url, data) {
      var err;
      if (status < 200 || (status >= 300 && status !== 304)) ;
      else {
          try {
              var _a = JSON.parse(response), exception = _a.exception, result = _a.result, error_msg = _a.error_msg;
              if (exception) {
                  err = exception;
              }
              if (result !== 1) {
                  err = error_msg || "result is ".concat(result);
              }
          }
          catch (e) {
              err = e.message;
          }
      }
      err && xhrErrorLog(err, url, data);
      return err;
  };

  function send$1(_a, callback) {
      var url = _a.url, data = _a.data, timeout = _a.timeout;
      return new Promise(function (resolve) {
          var xhr = new XMLHttpRequest();
          // async 同步情况会报错，而且影响性能，取消使用同步
          xhr.open('POST', url);
          xhr.setRequestHeader('Content-Type', 'text/plain;charset=UTF-8');
          if (typeof data === 'object' && !(data instanceof Uint8Array)) {
              data = JSON.stringify(data);
          }
          if (timeout) {
              xhr.timeout = timeout;
          }
          xhr.onload = function () {
              var err = logXhrResponseCheck(xhr.status, xhr.response, url, data);
              callback && callback(err);
              resolve({
                  error: err,
                  response: err ? undefined : xhr.response,
              });
          };
          xhr.ontimeout = xhr.onerror = function (err) {
              if (err)
                  xhrErrorLog(err, url, data);
              // err 不能直接传入 postMessage，会导致 postMessage 直接报错，误认为 worker 内部直接逻辑报错，以后发送埋点直接无法压缩
              callback && callback(err ? 'networkTimeout' : '');
              resolve({
                  error: 'networkTimeout',
              });
          };
          xhr.send(data);
          return xhr;
      });
  }
  var get = function (url) {
      var errorHandler = function (err) { return error('[error 401]', "GET \u8BF7\u6C42\u51FA\u9519 url: ".concat(url), err); };
      try {
          var xhr = new XMLHttpRequest();
          xhr.open('GET', url);
          xhr.setRequestHeader('Content-Type', 'text/plain;charset=UTF-8');
          xhr.send();
          xhr.onerror = errorHandler;
      }
      catch (err) {
          errorHandler(err);
      }
  };

  var navigator$1 = window === null || window === void 0 ? void 0 : window.navigator;
  var navigatorEnable = navigator$1 && navigator$1.userAgent.indexOf('Chrome') !== -1;
  var functionEnable = typeof navigator$1.sendBeacon === 'function';
  /**
   *
   * @param url 发送地址
   * @param data 发送内容
   * @param forceSendBeacon 是否强制使用 sendBeacon 方式发送埋点。
   */
  function send(_a) {
      var url = _a.url, data = _a.data, forceSendBeacon = _a.forceSendBeacon;
      if (!navigatorEnable && !forceSendBeacon || !functionEnable)
          return false;
      // xhook 如果改写了 FormData
      if (typeof data === 'object' && data.fd) {
          data = data.fd;
      }
      try {
          return navigator$1.sendBeacon(url, data);
      }
      catch (err) {
          error('[error 403]', 'navigator.sendBeacon 报错', err);
          return false;
      }
  }

  function sendData(_a, callback) {
      var url = _a.url, data = _a.data, timeout = _a.timeout; _a.isDebug; var isDrained = _a.isDrained, forceSendBeacon = _a.forceSendBeacon;
      return __awaiter(this, void 0, void 0, function () {
          var result;
          return __generator(this, function (_b) {
              switch (_b.label) {
                  case 0:
                      data = JSON.stringify(data);
                      // 优先走 sendBeacon，如果成功把数据添加到 beacon 通道，则认为发送成功
                      if (isDrained && send({ url: url, data: data, forceSendBeacon: forceSendBeacon })) {
                          callback && callback();
                          return [2 /*return*/];
                      }
                      return [4 /*yield*/, send$1({ url: url, data: data, timeout: timeout }, callback)];
                  case 1:
                      result = _b.sent();
                      return [2 /*return*/, result.error ? undefined : result.response];
              }
          });
      });
  }

  var getReportUrl = function (viewHost, reportHost, sessionId) {
      if (viewHost === void 0) { viewHost = dataTrackHost; }
      var loggerUrl = "".concat(viewHost, "/#/logger/index?sessionId=").concat(sessionId);
      log("%c\u57CB\u70B9\u6293\u5305\u6821\u9A8C: %c".concat(loggerUrl), 'color:#1abf89;font-size:1.2em;line-height:2.4em;', 'font-size:1.2em;');
      return "".concat(reportHost, "/").concat(sessionId, "/");
  };

  /**
   * 异步模块加载
   */
  var ModuleStates;
  (function (ModuleStates) {
      ModuleStates["loading"] = "loading";
      ModuleStates["loaded"] = "loaded";
  })(ModuleStates || (ModuleStates = {}));
  var LoadedModules = Object.create(null);
  /**
   * 加载 js 脚本
   * @param script
   * @param async
   */
  var loadScript = function (script, async, callback) {
      if (async === void 0) { async = true; }
      if (LoadedModules[script]) {
          return callback && callback("".concat(script, " load repeat"));
      }
      var mod = LoadedModules[script] = {
          state: ModuleStates.loading,
      };
      var scriptEl = document.createElement('script');
      scriptEl.crossOrigin = 'anonymous';
      scriptEl.src = script;
      if (async) {
          scriptEl.async = true;
      }
      var referEl = document.getElementsByTagName('script')[0];
      if (referEl && referEl.parentNode) {
          referEl.parentNode.insertBefore(scriptEl, referEl);
      }
      else {
          document.head.appendChild(scriptEl);
      }
      scriptEl.onload = function () {
          mod.state = ModuleStates.loaded;
          callback && callback();
      };
      scriptEl.onerror = function (e) {
          mod.state = ModuleStates.loaded;
          callback && callback("".concat(script, " loaded failed, ").concat(e));
      };
  };

  var SWICTH = 'weblogger_switch';
  /**
   * 端内环境根据cookie值切换发送地址
   */
  var getCookieReportUrl = function () {
      try {
          var webloggerSwitch = getCookie(SWICTH) ||
              typeof sessionStorage !== 'undefined' && sessionStorage.getItem(SWICTH);
          if (!webloggerSwitch)
              return;
          var _a = JSON.parse(webloggerSwitch), loggerSessionId = _a.loggerSessionId, reportHost = _a.reportHost, loggerHost = _a.loggerHost, handshakeApi = _a.handshakeApi;
          // 若cookie内存在loggerSessionId，则会自动切换发送路径到测试地址，否则返回空，代表不切换地址
          if (!loggerSessionId) {
              return '';
          }
          get(handshakeApi || "".concat(reportHost, "/").concat(loggerSessionId));
          return getReportUrl(loggerHost, reportHost, loggerSessionId);
      }
      catch (err) {
          return '';
      }
  };
  /**
   * env 为 logger 时上报的 url
   */
  var getLoggerReportUrl = function (did, isOversea) {
      if (did === void 0) { did = generateDID(); }
      if (isOversea === void 0) { isOversea = false; }
      var url = isOversea ? overseaDataTrackHost : dataTrackHost;
      get("".concat(url, "/rest/").concat(did));
      return getReportUrl(url, "".concat(url, "/rest"), did);
  };
  /**
   * 端外H5 or pc页面根据当前的url参数切换发送地址
   */
  var getWebPageReportUrl = function (url) {
      if (url === void 0) { url = location.href; }
      // const { storage, io } = Global.adapter;
      var queryIndex = url.lastIndexOf('?');
      if (queryIndex === -1) {
          return '';
      }
      var queryString = url.slice(queryIndex + 1);
      var webloggerSwitch = parseQueryString(queryString).webloggerSwitch;
      if (!webloggerSwitch) {
          return '';
      }
      try {
          var data = decodeURIComponent(webloggerSwitch);
          var _a = JSON.parse(data), loggerSessionId = _a.loggerSessionId, reportHost = _a.reportHost, loggerHost = _a.loggerHost, handshakeApi = _a.handshakeApi;
          if (!loggerSessionId) {
              return '';
          }
          // 存到 sessionStorage 中使同域名页面都可以调试
          // storage.setSession(SWICTH, data);
          // io.get({url: handshakeApi || `${reportHost}/${loggerSessionId}`});
          if (typeof sessionStorage !== 'undefined') {
              sessionStorage.setItem(SWICTH, data);
          }
          get(handshakeApi || "".concat(reportHost, "/").concat(loggerSessionId));
          return getReportUrl(loggerHost, reportHost, loggerSessionId);
      }
      catch (err) {
          return '';
      }
  };
  var getTemporaryLoggerUrl = function (proto) {
      var url = getCookieReportUrl() || getWebPageReportUrl();
      if (url) {
          return buildUrl(url, false, proto);
      }
  };
  var Logger = /** @class */ (function (_super) {
      __extends(Logger, _super);
      // 采样存储 key，作为实例化的一个键值，避免多实例互相干扰
      function Logger(config, commonPackage) {
          var _this = _super.call(this, config, commonPackage) || this;
          _this.baseSendData = _this.sendLog;
          _this.getResponseSamplingStorage();
          return _this;
      }
      // 获取 storage 判断是否有过期时间
      Logger.prototype.getResponseSamplingStorage = function () {
          return __awaiter(this, void 0, void 0, function () {
              var storageEffectiveTime, e_1;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0:
                          _a.trys.push([0, 2, , 3]);
                          // 直接异步获取 localstorage 信息。保证初始化 weblogger 性能。
                          // 因为 sendImmediately 也是微任务发送，所以获取本地存储信息，是可以保证在发送 pv 之前,获取到采样信息
                          return [4 /*yield*/, Promise.resolve()];
                      case 1:
                          // 直接异步获取 localstorage 信息。保证初始化 weblogger 性能。
                          // 因为 sendImmediately 也是微任务发送，所以获取本地存储信息，是可以保证在发送 pv 之前,获取到采样信息
                          _a.sent();
                          storageEffectiveTime = Number(localStorage.getItem(this.responseSamplingStorageKey));
                          if (storageEffectiveTime && (Date.now() < storageEffectiveTime)) {
                              this.sendEffectiveTime = storageEffectiveTime;
                          }
                          else if (storageEffectiveTime) {
                              // 如果采样已经过期，清除 storage
                              localStorage.removeItem(this.responseSamplingStorageKey);
                          }
                          return [3 /*break*/, 3];
                      case 2:
                          e_1 = _a.sent();
                          console.error(e_1);
                          return [3 /*break*/, 3];
                      case 3: return [2 /*return*/];
                  }
              });
          });
      };
      /**
       * 返回 true 代表不发送埋点
       * @param log
       * @param immediate
       * @param callback
       */
      Logger.prototype.isResponseSampling = function () {
          return !!(this.sendEffectiveTime && (Date.now() < this.sendEffectiveTime));
      };
      // 埋点返回结果处理
      Logger.prototype.setResponseSamplingConfig = function (responsePromise) {
          var _this = this;
          if (this.isSetSamplingResult) {
              return;
          }
          this.isSetSamplingResult = true;
          responsePromise === null || responsePromise === void 0 ? void 0 : responsePromise.then(function (res) {
              var response;
              try {
                  response = res && JSON.parse(res);
              }
              catch (e) {
                  response = {
                      result: 1,
                      hostName: '',
                  };
              }
              var expireSeconds = response === null || response === void 0 ? void 0 : response.expireSeconds;
              if (expireSeconds) {
                  var effectiveTime = Date.now() + expireSeconds * 1000;
                  _this.sendEffectiveTime = effectiveTime;
                  localStorage.setItem(_this.responseSamplingStorageKey, String(effectiveTime));
              }
          });
      };
      /**
       * 根据配置生成上报的 url 地址
       */
      Logger.prototype.updateUrls = function () {
          var _a = this.config, _b = _a.env, env = _b === void 0 ? PROD : _b, logger = _a.logger, proto = _a.proto, isBridge = _a.isBridge, disableCompress = _a.disableCompress;
          var url = getTemporaryLoggerUrl(proto);
          if (url) {
              this.url = url;
              this.isDebug = true;
          }
          else if (logger || env === LOGGER || env === LOGGER_SGP) {
              var loggerEnv = getLoggerReportUrl(this.commonPackage.identity_package.device_id, env === LOGGER_SGP);
              this.url = buildUrl(loggerEnv, false, proto);
              this.isDebug = true;
          }
          else if (env && /^(https?:)?\/\//.test(env)) {
              this.url = env;
          }
          else {
              this.isDebug = env !== PROD;
              this.url = buildUrl(env, false, proto);
              this.radarUrl = buildUrl(env, true, proto);
          }
          this.enableAsyncGzip = !disableCompress // 用户没有配置禁止压缩
              && proto === 'v3' // 必须是 v3 上报, v2 虽然压缩上报接口虽然没报错，但是服务端不做解析。
              && !isBridge // 非桥接上报
              && enableAsyncGzip() // 平台兼容性
              && env === PROD // 必须在 prod 环境
              && !url // 非埋点抓包查找
              && !logger; // 非埋点抓包查找
          this.enableAsyncGzip && loadScript('https://static.yximgs.com/udata/pkg/ks-track-platform-new/weblogger/3.10.23/async/gzipper.min.js');
          this.formatUrl();
      };
      Logger.prototype.sendLog = function (data, callback) {
          var forceSendBeacon = this.config.forceSendBeacon;
          if (!this.isV2) {
              //  根据埋点接口判断是否需要采样
              if (this.isResponseSampling()) {
                  return;
              }
          }
          if (this.drained || !this.enableAsyncGzip || !this.sendGzip(data, callback)) {
              this.setResponseSamplingConfig(sendData(_assign(_assign({}, data), { forceSendBeacon: forceSendBeacon }), callback));
          }
      };
      /**
       *
       * @param data
       * @param callback weblogger 系统级错误回调，会清除缓存的发送错误的日志。
       */
      Logger.prototype.sendGzip = function (data, callback) {
          var _this = this;
          var _a;
          if (!((_a = Logger.Gzipper) === null || _a === void 0 ? void 0 : _a.sendData))
              return false;
          var workerCallback = function (e) {
              if (e) {
                  _this.setResponseSamplingConfig(sendData(data, callback));
              }
          };
          // 如果发送压缩代码成功，会返回一个 promise
          var promise = Logger.Gzipper.sendData(data, workerCallback);
          this.setResponseSamplingConfig(promise);
          return !!promise;
      };
      /**
       * 埋点发送前获取 common_package 信息
       * @param data
       * @returns
       */
      Logger.prototype.getCommonPackageJSON = function () {
          return this.commonPackage.toJSON();
      };
      Logger.prototype.send = function (data, immediate, callback) {
          if (immediate === void 0) { immediate = false; }
          // v2 是每个 log 都有 common_package
          if (this.isV2) {
              // v2 log 的自增 id 是存在 common 信息中
              this.commonPackage.setAdditionalSeqIdPackage(data.getEventType());
              data.common_package = this.getCommonPackageJSON();
          }
          _super.prototype.send.call(this, data, immediate, callback);
      };
      return Logger;
  }(BatchLog));

  /**
   * v2、v3 PB 相同部分
   */
  var Base;
  (function (Base) {
      (function (ElementStatus) {
          ElementStatus[ElementStatus["UNKNOWN_STATUS"] = 0] = "UNKNOWN_STATUS";
          ElementStatus[ElementStatus["CHECKED"] = 1] = "CHECKED";
          ElementStatus[ElementStatus["UNCHECKED"] = 2] = "UNCHECKED";
      })(Base.ElementStatus || (Base.ElementStatus = {}));
      (function (PageShowAction) {
          PageShowAction[PageShowAction["UNKNOWN_ACTION"] = 0] = "UNKNOWN_ACTION";
          PageShowAction[PageShowAction["ENTER"] = 1] = "ENTER";
          PageShowAction[PageShowAction["LEAVE"] = 2] = "LEAVE";
          PageShowAction[PageShowAction["RESUME"] = 3] = "RESUME";
      })(Base.PageShowAction || (Base.PageShowAction = {}));
      (function (ActionStatus) {
          ActionStatus[ActionStatus["UNKNOWN_STATUS"] = 0] = "UNKNOWN_STATUS";
          ActionStatus[ActionStatus["SUCCESS"] = 1] = "SUCCESS";
          ActionStatus[ActionStatus["FAIL"] = 2] = "FAIL";
      })(Base.ActionStatus || (Base.ActionStatus = {}));
      (function (ActionType) {
          ActionType[ActionType["UNKNOWN_ACTION_TYPE"] = 0] = "UNKNOWN_ACTION_TYPE";
          ActionType[ActionType["CLICK"] = 1] = "CLICK";
          ActionType[ActionType["LEFT_PULL"] = 2] = "LEFT_PULL";
          ActionType[ActionType["RIGHT_PULL"] = 3] = "RIGHT_PULL";
          ActionType[ActionType["UP_PULL"] = 4] = "UP_PULL";
          ActionType[ActionType["DOWN_PULL"] = 5] = "DOWN_PULL";
      })(Base.ActionType || (Base.ActionType = {}));
      (function (SubAction) {
          SubAction[SubAction["UNKNOWN_SUB_ACTION"] = 0] = "UNKNOWN_SUB_ACTION";
          SubAction[SubAction["PAGE_ENTER"] = 1] = "PAGE_ENTER";
          SubAction[SubAction["PAGE_LEAVE"] = 2] = "PAGE_LEAVE";
          SubAction[SubAction["PAGE_RESUME"] = 3] = "PAGE_RESUME";
          SubAction[SubAction["PAGE_PAUSE"] = 4] = "PAGE_PAUSE";
      })(Base.SubAction || (Base.SubAction = {}));
      (function (Direction) {
          Direction[Direction["UNKNOWN2"] = 0] = "UNKNOWN2";
          Direction[Direction["UP"] = 1] = "UP";
          Direction[Direction["DOWN"] = 2] = "DOWN";
          Direction[Direction["LEFT"] = 3] = "LEFT";
          Direction[Direction["RIGHT"] = 4] = "RIGHT";
      })(Base.Direction || (Base.Direction = {}));
      (function (TaskStatus) {
          TaskStatus[TaskStatus["UNKNOWN_STATUS"] = 0] = "UNKNOWN_STATUS";
          TaskStatus[TaskStatus["START"] = 1] = "START";
          TaskStatus[TaskStatus["RETRY"] = 2] = "RETRY";
          TaskStatus[TaskStatus["PAUSE"] = 3] = "PAUSE";
          TaskStatus[TaskStatus["RESUME"] = 4] = "RESUME";
          TaskStatus[TaskStatus["PENDING"] = 5] = "PENDING";
          TaskStatus[TaskStatus["PROCESSING"] = 6] = "PROCESSING";
          TaskStatus[TaskStatus["SUCCESS"] = 7] = "SUCCESS";
          TaskStatus[TaskStatus["FAIL"] = 8] = "FAIL";
          TaskStatus[TaskStatus["CANCEL"] = 9] = "CANCEL";
          TaskStatus[TaskStatus["FINISH"] = 10] = "FINISH";
      })(Base.TaskStatus || (Base.TaskStatus = {}));
      (function (OperationType) {
          OperationType[OperationType["UNKNOWN_OPERATION"] = 0] = "UNKNOWN_OPERATION";
          OperationType[OperationType["CLICK"] = 1] = "CLICK";
          OperationType[OperationType["DOUBLE_CLICK"] = 2] = "DOUBLE_CLICK";
          OperationType[OperationType["TRIPLE_CLICK"] = 3] = "TRIPLE_CLICK";
          OperationType[OperationType["LONG_PRESS"] = 4] = "LONG_PRESS";
          OperationType[OperationType["PULL"] = 5] = "PULL";
          OperationType[OperationType["DRAG"] = 6] = "DRAG";
          OperationType[OperationType["SCALE"] = 7] = "SCALE";
          OperationType[OperationType["PULL_DOWN"] = 8] = "PULL_DOWN";
          OperationType[OperationType["PULL_UP"] = 9] = "PULL_UP";
          OperationType[OperationType["RIGHT_CLICK"] = 10] = "RIGHT_CLICK";
          OperationType[OperationType["AUTO"] = 11] = "AUTO";
      })(Base.OperationType || (Base.OperationType = {}));
  })(Base || (Base = {}));

  var ClientEvent$1;
  (function (ClientEvent) {
      (function (ShowType) {
          ShowType[ShowType["UNKNOWN_TYPE"] = 0] = "UNKNOWN_TYPE";
          ShowType[ShowType["PAGE_AUTO"] = 10] = "PAGE_AUTO";
          ShowType[ShowType["PAGE_CUSTOM"] = 11] = "PAGE_CUSTOM";
          ShowType[ShowType["ELEMENT"] = 12] = "ELEMENT";
      })(ClientEvent.ShowType || (ClientEvent.ShowType = {}));
      (function (TaskEventType) {
          TaskEventType[TaskEventType["UNKNOWN_TYPE"] = 0] = "UNKNOWN_TYPE";
          TaskEventType[TaskEventType["USER_OPERATION"] = 1] = "USER_OPERATION";
          TaskEventType[TaskEventType["STAY_LENGTH_STAT_EVENT"] = 2] = "STAY_LENGTH_STAT_EVENT";
          TaskEventType[TaskEventType["BACKGROUND_TASK_EVENT"] = 3] = "BACKGROUND_TASK_EVENT";
      })(ClientEvent.TaskEventType || (ClientEvent.TaskEventType = {}));
  })(ClientEvent$1 || (ClientEvent$1 = {}));

  var ClientEvent;
  (function (ClientEvent) {
      (function (ShowType) {
          ShowType[ShowType["UNKNOWN2"] = 0] = "UNKNOWN2";
          ShowType[ShowType["PAGE"] = 1] = "PAGE";
      })(ClientEvent.ShowType || (ClientEvent.ShowType = {}));
  })(ClientEvent || (ClientEvent = {}));

  // TODO: 这两个变量有副作用，待优化
  var firstLoad = true;
  var enterTime = new Date().valueOf();
  var ShowEvent = (function (options, isV2) {
      var _a, _b;
      if (isV2 === void 0) { isV2 = false; }
      var type = options.type, currentUrlPackage = options.currentUrlPackage, referUrlPackage = options.referUrlPackage, _c = options.name, name = _c === void 0 ? '' : _c, action = options.action, beginTime = options.beginTime, params = options.params, contentPackage = options.contentPackage, status = options.status, actionType = options.actionType, // 这值目前似乎没传进来
      auto = options.auto;
      var commonInfo = (_a = {
              status: status ? (Base.ActionStatus[status] || Base.ActionStatus.UNKNOWN_STATUS) : Base.ActionStatus.SUCCESS
          },
          _a[isV2 ? 'show_type' : 'action_type'] = actionType ? (Base.ActionType[actionType] || Base.ActionType.UNKNOWN_ACTION_TYPE) : Base.ActionType.CLICK,
          _a.url_package = currentUrlPackage,
          _a.refer_url_package = referUrlPackage,
          _a[isV2 ? 'content_wrapper' : 'content_package'] = contentPackage,
          _a);
      if (type === 'PV') {
          var sub_action = Base.SubAction.PAGE_ENTER;
          var actionPB = Base.PageShowAction.ENTER;
          var first_load = firstLoad;
          var stay_length = 0;
          firstLoad = false;
          switch (action) {
              case 'leave':
                  actionPB = Base.PageShowAction.LEAVE;
                  sub_action = Base.SubAction.PAGE_LEAVE;
                  stay_length = getPositiveInteger(new Date().valueOf() - (beginTime || enterTime));
                  break;
              case 'enter':
                  actionPB = Base.PageShowAction.ENTER;
                  sub_action = Base.SubAction.PAGE_ENTER;
                  enterTime = new Date().valueOf();
                  break;
              case 'visible':
                  actionPB = Base.PageShowAction.RESUME;
                  sub_action = Base.SubAction.PAGE_RESUME;
                  enterTime = new Date().valueOf();
                  break;
              case 'hidden':
                  actionPB = Base.PageShowAction.LEAVE;
                  sub_action = Base.SubAction.PAGE_PAUSE;
                  stay_length = getPositiveInteger(new Date().valueOf() - (beginTime || enterTime));
                  break;
          }
          var showType = auto ? ClientEvent$1.ShowType.PAGE_AUTO : ClientEvent$1.ShowType.PAGE_CUSTOM;
          if (isV2) {
              first_load = undefined;
              showType = ClientEvent.ShowType.PAGE;
          }
          return {
              show_event: _assign({ action: actionPB, sub_action: sub_action, type: showType, first_load: first_load, time_cost: 0, stay_length: stay_length }, commonInfo)
          };
      }
      return {
          show_event: _assign({ action: isV2 ? 0 : Base.PageShowAction.ENTER, type: isV2 ? 0 : ClientEvent$1.ShowType.ELEMENT, sub_action: isV2 ? 0 : Base.SubAction.PAGE_ENTER, element_package: (_b = {},
                  _b[isV2 ? 'action2' : 'action'] = name,
                  _b.params = JSON.stringify(params),
                  _b) }, commonInfo)
      };
  });

  var TaskEvent = (function (options, isV2) {
      var _a, _b;
      if (isV2 === void 0) { isV2 = false; }
      var sessionId = options.sessionId, currentUrlPackage = options.currentUrlPackage, referUrlPackage = options.referUrlPackage, name = options.name, params = options.params, type = options.type, contentPackage = options.contentPackage, status = options.status, taskType = options.taskType, operationDirection = options.operationDirection;
      var commonInfo = (_a = {
              url_package: currentUrlPackage,
              refer_url_package: referUrlPackage,
              element_package: (_b = {},
                  _b[isV2 ? 'action2' : 'action'] = name,
                  _b.params = JSON.stringify(params),
                  _b)
          },
          _a[isV2 ? 'content_wrapper' : 'content_package'] = contentPackage,
          _a);
      if (isV2) {
          // v2 click_event 是一个单独的事件类型，v3 则属于 task_event
          var isV2Click = taskType === 'USER_OPERATION' || type === 'CLICK' && !taskType;
          var operationType = type && Base.OperationType[type] || Base.OperationType.CLICK;
          if (isV2Click) {
              return {
                  click_event: _assign({ type: operationType, direction: operationDirection && Base.Direction[operationDirection] || Base.Direction.UNKNOWN2 }, commonInfo)
              };
          }
          return {
              task_event: _assign({ action2: name, status: status && Base.TaskStatus[status] || Base.TaskStatus.UNKNOWN_STATUS }, commonInfo)
          };
      }
      return {
          task_event: _assign({ type: taskType && ClientEvent$1.TaskEventType[taskType] || ClientEvent$1.TaskEventType.USER_OPERATION, status: status && Base.TaskStatus[status] || Base.TaskStatus.UNKNOWN_STATUS, operation_type: Base.OperationType[type] || Base.OperationType.CLICK, operation_direction: operationDirection && Base.Direction[operationDirection] || Base.Direction.UNKNOWN2, session_id: sessionId }, commonInfo)
      };
  });

  /**
   * 自定义事件上报
   */
  var CustomStatEvent = (function (options) {
      var name = options.name, params = options.params, currentUrlPackage = options.currentUrlPackage, referUrlPackage = options.referUrlPackage, extra = __rest(options, ["name", "params", "currentUrlPackage", "referUrlPackage"]);
      return {
          key: name,
          value: JSON.stringify(_assign(_assign({ url_package: currentUrlPackage, refer_url_package: referUrlPackage }, params), extra))
      };
  });

  var VideoStatEvent = (function (params) {
      var currentUrlPackage = params.currentUrlPackage, referUrlPackage = params.referUrlPackage, options = params.options;
      return {
          video_stat_event: _assign(_assign({}, options), { url_package: currentUrlPackage, refer_url_package: referUrlPackage }),
      };
  });

  // 常规业务事件自增 id key
  var LOCAL_INCREAMENT_ID_KEY = 'WEBLOGGER_INCREAMENT_ID_KEY';
  // 自定义事件自增 id key
  var LOCAL_CUSTOM_INCREAMENT_ID_KEY = 'WEBLOGGER_CUSTOM_INCREAMENT_ID_KEY';
  // Bridge 常规事件自增 id 本地缓存 key
  var H5_SEQ_ID_KEY = 'WEBLOGGER_H5_SEQ_ID';
  // Bridge 自定义事件自增 id 本地缓存 key
  var H5_CUSTOM_SEQ_ID_KEY = 'WEBLOGGER_H5_CUSTOM_SEQ_ID';
  // v2 自增 id 本地缓存 key
  var V2_INCREMENT_ID_KEY = 'WEBLOGGER_V2_SEQ_ID';
  var CHANNEL_INCREMENT_ID_KEY = 'WEBLOGGER_CHANNEL_SEQ_ID';
  // 自增 id 最大值
  var maxId = 1e8;
  // 如果没有 localStorage 则使用运行时自增 id，用于非浏览器场景，比如 React Native
  var runtimeIdMap = {};
  var genId = function (key) {
      try {
          if (window && window.localStorage && typeof Storage !== 'undefined' && window.localStorage instanceof Storage) {
              var id = Number(getLocalStorageItem(key)) || 0;
              if (id + 1 > maxId) {
                  id = 0;
              }
              setLocalStorageItem(key, id + 1);
              return id;
          }
      }
      catch (err) { }
      if (!runtimeIdMap[key]) {
          runtimeIdMap[key] = 0;
      }
      return runtimeIdMap[key]++;
  };
  /**
   * 常规事件自增 id
   */
  var getNomalIncrementId = function () {
      return genId(LOCAL_INCREAMENT_ID_KEY);
  };
  /**
   * 自定义事件自增 id
   */
  var getCustomIncrementId = function () {
      return genId(LOCAL_CUSTOM_INCREAMENT_ID_KEY);
  };
  /**
   * 桥接常规事件自增 id
   */
  var getBridgeNormalIncrementId = function () {
      return genId(H5_SEQ_ID_KEY);
  };
  /**
   * 桥接自定义事件自增 id
   */
  var getBridgeCustomIncrementId = function () {
      return genId(H5_CUSTOM_SEQ_ID_KEY);
  };
  /**
   * v2 channel 自增 id
   */
  var getChannelIncrementId = function (channel) {
      if (channel === void 0) { channel = ''; }
      return genId("".concat(CHANNEL_INCREMENT_ID_KEY, "_").concat(channel));
  };
  /**
   * v2 事件自增 id
   */
  var getV2EventIncrementId = function (event) {
      return genId("".concat(V2_INCREMENT_ID_KEY, "_").concat(event));
  };

  var GMT = (function () {
      var timeZoneGMTOffset = (new Date()).getTimezoneOffset() / 60;
      return timeZoneGMTOffset <= 0
          ? "GMT+".concat(leftPad(-timeZoneGMTOffset + '', 2, '0'), ":00")
          : "GMT-".concat(leftPad(timeZoneGMTOffset + '', 2, '0'), ":00");
  })();
  // 为防止每个传出都带common_package，所以用base保留大多数信息
  // 部分信息放到每个消息体内维护，比如client_timestamp
  var ReportEvent = /** @class */ (function () {
      function ReportEvent(options, isV2) {
          if (isV2 === void 0) { isV2 = false; }
          // uint64 客户端时间, Event或Stat发生时的时间, 而不是上传时的时间
          this.client_timestamp = getPositiveInteger(new Date().valueOf());
          // uint64 客户端自增Id, 每新增一条日志+1, 必须是连续的, 用于校检数据完整性
          this.client_increment_id = 0;
          // string 会话id，设备冷启动或者切到后台超过5分钟再切回前台时，重新生成一个id
          // 端内页面不可缺省
          // Tip: 小程序的global字段不一致
          this.session_id = GlobalConfig.sessionId;
          // 埋点唯一主键， PB 中已不推荐使用
          this.event_id = '';
          // v2 没有 time_zone 字段
          if (!isV2) {
              this.time_zone = GMT;
          }
          Object.assign(this, options);
          this.genIncrementId();
      }
      // 设置自增 id，自定义事件和常规事件使用不同的 localStorage key
      ReportEvent.prototype.genIncrementId = function () {
          this.client_increment_id = this.isCustomStatEvent() ? getCustomIncrementId() : getNomalIncrementId();
      };
      // 是否是自定义事件
      ReportEvent.prototype.isCustomStatEvent = function () {
          return !!(this.stat_package && 'custom_stat_event' in this.stat_package);
      };
      // 获取埋点事件类型
      ReportEvent.prototype.getEventType = function () {
          if (this.event_package) {
              var _a = this.event_package, task_event = _a.task_event, show_event = _a.show_event, click_event = _a.click_event, custom_event = _a.custom_event;
              if (show_event)
                  return 'showEvent';
              if (click_event)
                  return 'clickEvent';
              if (task_event)
                  return 'taskEvent';
              if (custom_event)
                  return 'customEvent';
          }
          return 'customEvent';
      };
      return ReportEvent;
  }());
  // 微信小程序事件处理
  var StatEvent = function (eventOptions) {
      eventOptions.currentUrlPackage; eventOptions.referUrlPackage; eventOptions.taskType; var event = __rest(eventOptions, ["currentUrlPackage", "referUrlPackage", "taskType"]);
      return event;
  };
  function logFactory$1(type, data, isV2) {
      var _a;
      if (isV2 === void 0) { isV2 = false; }
      var event_id = data.eventId, currentUrlPackage = data.currentUrlPackage, referUrlPackage = data.referUrlPackage, contentPackage = data.contentPackage, name = data.name, params = data.params;
      if (isV2 && type !== 'RADAR' && type !== 'CUSTOM') {
          // v2 需要特殊处理，先保留 ts-ignore
          if (currentUrlPackage) {
              // @ts-ignore
              currentUrlPackage.page2 = currentUrlPackage.page;
              // @ts-ignore
              delete currentUrlPackage.page;
          }
          if (referUrlPackage) {
              // @ts-ignore
              referUrlPackage.page2 = referUrlPackage.page;
              // @ts-ignore
              delete referUrlPackage.page;
          }
      }
      switch (type) {
          case 'PV':
          case 'SHOW':
              return new ReportEvent({
                  event_package: ShowEvent({
                      type: type,
                      status: data.status,
                      currentUrlPackage: currentUrlPackage,
                      referUrlPackage: referUrlPackage,
                      action: data.type,
                      beginTime: data.beginTime,
                      actionType: data.actionType,
                      name: name,
                      params: params,
                      contentPackage: contentPackage,
                      operationDirection: data.operationDirection,
                      auto: data.auto,
                  }, isV2),
                  event_id: event_id,
              }, isV2);
          case 'CUSTOM':
          case 'CUSTOM_STAT_EVENT':
              var customData = CustomStatEvent({
                  name: name,
                  params: params,
                  currentUrlPackage: currentUrlPackage,
                  referUrlPackage: referUrlPackage,
              });
              return new ReportEvent(isV2 ?
                  {
                      event_package: {
                          custom_event: customData,
                      },
                      event_id: event_id,
                  }
                  :
                      {
                          stat_package: {
                              custom_stat_event: customData,
                          },
                          event_id: event_id,
                      }, isV2);
          case 'RADAR':
              return new ReportEvent({
                  stat_package: {
                      custom_stat_event: CustomStatEvent({
                          name: name,
                          params: params,
                          currentUrlPackage: currentUrlPackage,
                          referUrlPackage: referUrlPackage,
                      }),
                  },
                  event_id: event_id,
              }, isV2);
          // 小程序自定义的事件名称
          case 'HEART_BEAT_EVENT':
          case 'LAUNCH_EVENT':
          case 'APP_USAGE_STAT_EVENT':
          case 'EXCEPTION_EVENT':
          case 'DEVICE_STAT_EVENT':
              return new ReportEvent({
                  stat_package: (_a = {},
                      _a[type.toLowerCase()] = StatEvent(data),
                      _a),
              }, isV2);
          case 'VIDEO':
              if (isV2) {
                  return new ReportEvent({
                      stat_package: VideoStatEvent({
                          currentUrlPackage: currentUrlPackage,
                          referUrlPackage: referUrlPackage,
                          options: params.params,
                      }),
                      event_id: event_id,
                  }, isV2);
              }
              return new ReportEvent({
                  event_package: TaskEvent({
                      type: type,
                      status: data.status,
                      taskType: data.taskType,
                      sessionId: GlobalConfig.sessionId,
                      currentUrlPackage: currentUrlPackage,
                      referUrlPackage: referUrlPackage,
                      name: name,
                      params: params.params,
                      contentPackage: contentPackage,
                  }, isV2),
                  event_id: event_id,
              }, isV2);
          default:
              return new ReportEvent({
                  event_package: TaskEvent({
                      type: type,
                      status: data.status,
                      taskType: data.taskType,
                      sessionId: GlobalConfig.sessionId,
                      currentUrlPackage: currentUrlPackage,
                      referUrlPackage: referUrlPackage,
                      name: name,
                      params: params,
                      contentPackage: contentPackage,
                  }, isV2),
                  event_id: event_id,
              }, isV2);
      }
  }

  var _a$1;
  var uaInfo;
  var lastUA = ((_a$1 = window === null || window === void 0 ? void 0 : window.navigator) === null || _a$1 === void 0 ? void 0 : _a$1.userAgent) || '';
  var getUAInfo = function (ua) {
      var _a, _b, _c, _d;
      if (ua === void 0) { ua = (_a = window === null || window === void 0 ? void 0 : window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent; }
      if (uaInfo && ua === lastUA) {
          return uaInfo;
      }
      var UNKNOWN = 'unknow';
      var androidReg = /android/i;
      var MacOS = 'Mac OS';
      var Windows = 'Windows';
      var Android = 'Android';
      var iPhone = 'iPhone';
      var iPad = 'iPhone';
      var WinPhone = 'Windows Phone';
      var Linux = 'Linux';
      uaInfo = {
          os: {
              name: UNKNOWN,
              version: UNKNOWN
          },
          model: UNKNOWN
      };
      try {
          var uaMatches = ua.match(/\((.*?)\)/);
          if (!uaMatches) {
              var isAndroid = androidReg.test(ua);
              if (isAndroid) {
                  uaInfo.os.name = Android;
              }
              return uaInfo;
          }
          var uaMain = uaMatches[1] + ')';
          var uaArr = uaMain.split(';').map(function (str) { return str.trim(); });
          var osName = void 0, osVersion = void 0, model = void 0;
          if (ua.indexOf(WinPhone) > -1) {
              model = osName = WinPhone;
              var matches = uaMain.match(/Windows\sPhone\s(.*?)[;\)\s]/);
              if (matches) {
                  osVersion = matches[1];
              }
              model = (_b = uaArr[uaArr.length - 1]) === null || _b === void 0 ? void 0 : _b.replace(')', '');
          }
          else if (androidReg.test(ua)) {
              // 安卓 ua 信息解析
              osName = Android;
              var modelMatches = uaMain.match(/android.*?;(.*?)build\//i);
              if (modelMatches) {
                  model = (_c = modelMatches[1]) === null || _c === void 0 ? void 0 : _c.split(';').pop();
                  model = model && model.trim();
              }
              for (var i = 0; i < uaArr.length; i++) {
                  if (androidReg.test(uaArr[i])) {
                      osVersion = (_d = uaArr[i]) === null || _d === void 0 ? void 0 : _d.replace(androidReg, '');
                      if (!model) {
                          model = uaArr[i + 1];
                      }
                      break;
                  }
              }
          }
          else if (ua.indexOf(iPhone) > -1 || ua.indexOf(iPad) > -1) {
              // iOS 系统信息解析
              model = ua.indexOf(iPhone) > -1 ? iPhone : iPad;
              osName = 'iOS';
              var matches = uaMain.match(/OS\s(.*?)\slike/);
              if (matches) {
                  osVersion = matches[1];
              }
          }
          else if (ua.indexOf(MacOS) > -1) {
              // Mac OS 系统信息解析
              model = osName = MacOS;
              var matches = uaMain.match(/OS\sX\s(.*?)[;\)\s]/);
              if (matches) {
                  osVersion = matches[1];
              }
          }
          else if (ua.indexOf(Windows) > -1) {
              model = osName = Windows;
              var matches = uaMain.match(/Windows\s(.*?)[;\)]/);
              if (matches) {
                  osVersion = matches[1];
              }
          }
          else if (ua.indexOf('Nokia') > -1) {
              osName = 'Symbian';
              var vMatches = ua.match(/Symbian.*?\/(.*?);/);
              if (vMatches) {
                  osVersion = vMatches[1];
              }
              var mMatches = ua.match(/Nokia(.*?)\//);
              if (mMatches) {
                  model = mMatches[1];
              }
          }
          else if (uaMain.indexOf(Linux) > -1) {
              osName = model = Linux;
          }
          uaInfo = {
              os: {
                  name: osName || UNKNOWN,
                  version: osVersion && osVersion.replace(/_/g, '.').trim() || UNKNOWN
              },
              model: model || UNKNOWN
          };
      }
      catch (err) {
          console.error('[109]', 'UA 信息解析错误', err.message);
      }
      return uaInfo;
  };
  /**
   * http://git.corp.kuaishou.com/ks-frontend/modules/web-util/blob/master/src/device.js
   */
  var kpnFromUA = function () {
      if (typeof window === 'undefined')
          return '';
      var ua = window.navigator.userAgent;
      // 注意顺序很重要
      var rules = [
          [/ Kwai\//, 'KUAISHOU'],
          [/ ksthanos\//, 'THANOS'],
          [/ ksNebula\//i, 'NEBULA'],
          // iOS 审核移除敏感信息
          // [/ wxwork\//, 'workWechat'],
          // [/ MicroMessenger\//, 'wechat'],
          // [/ QQ\//, 'qq'],
          // [/__weibo__([^_]+)/, 'weibo'],
          // [/ livemate\//, 'livemate'],
          // [/ baiduboxapp\//, 'baidu'],
          // [/ MQQBrowser\//, 'qqBrowser'],
          // [/\(MSIE ([^;]+);/, 'ie'],
      ];
      for (var i = 0; i < rules.length; i++) {
          var tmp = rules[i];
          var rule = tmp[0];
          var name_1 = tmp[1];
          var rRes = rule.exec(ua);
          if (rRes) {
              return name_1;
          }
      }
      return '';
  };
  /**
   * 获取默认的 KPN,TODO: 副作用函数
   */
  var defaultKpn;
  function getDefaultKpn() {
      if (defaultKpn === undefined) {
          defaultKpn = isInApp() && getCookie('kpn') || kpnFromUA() || '';
      }
      return defaultKpn;
  }
  /**
   * 判断是否是 kds 环境
   */
  var isKDSNative = (function () {
      var res;
      return function () {
          return res;
      };
  })();
  var uaUtils = {
      supportsPushState: supportsPushState,
      getUAInfo: getUAInfo,
      getDefaultKpn: getDefaultKpn
  };

  /**
   * hybrid 以及 browser 包使用此文件，将 invoke 定义和 bridge 包隔离，避免 browser 以及 hybrid 包必须引用 yoda 包 ts 定义问题。
   */
  var invoke;
  var isInYoda = function () {
      var _a;
      // @ts-ignore
      return typeof ((_a = window === null || window === void 0 ? void 0 : window.__yodaBridge__) === null || _a === void 0 ? void 0 : _a.invoke) === 'function';
  };
  /**
   * 是否支持桥接 canIUse
   */
  var isSupportBridge = function (name, namespace) {
      if (namespace === void 0) { namespace = 'tool'; }
      return __awaiter(void 0, void 0, void 0, function () {
          var res;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      if (typeof invoke === 'undefined')
                          return [2 /*return*/, false];
                      return [4 /*yield*/, invoke('tool.canIUse', {
                              namespace: namespace,
                              name: name
                          })];
                  case 1:
                      res = _a.sent();
                      return [2 /*return*/, (res === null || res === void 0 ? void 0 : res.canUse) || false];
              }
          });
      });
  };
  /**
   * 是否支持桥接上报埋点接口
   */
  var isSupportBridgeLog = function () {
      return isSupportBridge('setClientLog');
  };
  /**
   * 传入 invoke 方法
   */
  var postInvoke = function (invokeOrYoda) {
      if (typeof invokeOrYoda === 'function') {
          invoke = invokeOrYoda;
      }
      else {
          invoke = invokeOrYoda.invoke;
      }
  };
  /**
   * 发送业务事件
   */
  var setClientLog = function (type, data) { return __awaiter(void 0, void 0, void 0, function () {
      var err_1;
      return __generator(this, function (_a) {
          switch (_a.label) {
              case 0:
                  _a.trys.push([0, 2, , 3]);
                  return [4 /*yield*/, invoke('tool.setClientLog', { type: type, data: data })];
              case 1: return [2 /*return*/, _a.sent()];
              case 2:
                  err_1 = _a.sent();
                  error('[error 206]', "yoda.tool.setClientLog() \u62A5\u9519: ".concat(err_1.message));
                  return [3 /*break*/, 3];
              case 3: return [2 /*return*/];
          }
      });
  }); };
  /**
   * 发送雷达事件
   */
  var sendRadarLog = function (params) { return __awaiter(void 0, void 0, void 0, function () {
      var err_2;
      return __generator(this, function (_a) {
          switch (_a.label) {
              case 0:
                  _a.trys.push([0, 2, , 3]);
                  return [4 /*yield*/, invoke('tool.sendRadarLog', params)];
              case 1: return [2 /*return*/, _a.sent()];
              case 2:
                  err_2 = _a.sent();
                  error('[error 207]', "yoda.tool.sendRadarLog() \u62A5\u9519: ".concat(err_2.message));
                  return [3 /*break*/, 3];
              case 3: return [2 /*return*/];
          }
      });
  }); };
  /**
   * 发送web日志，支持日志回捞
   */
  var sendWebLog = function (params) { return __awaiter(void 0, void 0, void 0, function () {
      return __generator(this, function (_a) {
          try {
              return [2 /*return*/, invoke('tool.sendWebLog', params)];
          }
          catch (err) {
              error('[error 214]', "yoda.tool.sendWebLog() \u62A5\u9519: ".concat(err.message));
          }
          return [2 /*return*/];
      });
  }); };
  /**
   * 发送汇总数据
   */
  var sendSummarizedLog = function (params) { return __awaiter(void 0, void 0, void 0, function () {
      var err_3;
      return __generator(this, function (_a) {
          switch (_a.label) {
              case 0:
                  _a.trys.push([0, 2, , 3]);
                  return [4 /*yield*/, invoke('tool.sendSummarizedLog', params)];
              case 1: return [2 /*return*/, _a.sent()];
              case 2:
                  err_3 = _a.sent();
                  error('[error 208]', "yoda.tool.sendSummarizedLog() \u62A5\u9519: ".concat(err_3.message));
                  return [3 /*break*/, 3];
              case 3: return [2 /*return*/];
          }
      });
  }); };
  /**
   * 获取应用信息
   * @returns
   */
  var getAppInfo = function () { return __awaiter(void 0, void 0, void 0, function () {
      var err_4;
      return __generator(this, function (_a) {
          switch (_a.label) {
              case 0:
                  _a.trys.push([0, 2, , 3]);
                  return [4 /*yield*/, invoke('system.getAppInfo')];
              case 1: return [2 /*return*/, _a.sent()];
              case 2:
                  err_4 = _a.sent();
                  error('[error 209]', "yoda.system.getAppInfo() \u62A5\u9519: ".concat(err_4.message));
                  return [3 /*break*/, 3];
              case 3: return [2 /*return*/];
          }
      });
  }); };
  /**
   * 获取 webview 信息
   */
  var getWebviewLoadPerf = function (params, options) {
      if (params === void 0) { params = {}; }
      return __awaiter(void 0, void 0, void 0, function () {
          var err_5;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      _a.trys.push([0, 2, , 3]);
                      return [4 /*yield*/, invoke('webview.getPageLoadData', params, options)];
                  case 1: return [2 /*return*/, _a.sent()];
                  case 2:
                      err_5 = _a.sent();
                      error('[error 209]', "yoda.webview.getPageLoadData() \u62A5\u9519: ".concat(err_5.message));
                      return [3 /*break*/, 3];
                  case 3: return [2 /*return*/];
              }
          });
      });
  };
  /**
   * 获取 ksd相关webview 信息
   */
  var getKDSWebviewLoadPerf = function (params) {
      if (params === void 0) { params = {}; }
      return __awaiter(void 0, void 0, void 0, function () {
          var err_7;
          return __generator(this, function (_a) {
              switch (_a.label) {
                  case 0:
                      _a.trys.push([0, 2, , 3]);
                      return [4 /*yield*/, invoke('system.getPageLoadData', params)];
                  case 1: return [2 /*return*/, _a.sent()];
                  case 2:
                      err_7 = _a.sent();
                      error('[error 209]', "yoda.system.getPageLoadData() \u62A5\u9519: ".concat(err_7.message));
                      return [3 /*break*/, 3];
                  case 3: return [2 /*return*/];
              }
          });
      });
  };
  /**
   * 获取设备信息
   * @returns
   */
  var getDeviceInfo = function () { return __awaiter(void 0, void 0, void 0, function () {
      var err_8;
      return __generator(this, function (_a) {
          switch (_a.label) {
              case 0:
                  _a.trys.push([0, 2, , 3]);
                  return [4 /*yield*/, invoke('system.getDeviceInfo')];
              case 1: return [2 /*return*/, _a.sent()];
              case 2:
                  err_8 = _a.sent();
                  error('[error 209]', "yoda.system.getDeviceInfo() \u62A5\u9519: ".concat(err_8.message));
                  return [3 /*break*/, 3];
              case 3: return [2 /*return*/];
          }
      });
  }); };
  var yodaUtils = {
      setClientLog: setClientLog,
      sendRadarLog: sendRadarLog,
      sendWebLog: sendWebLog,
      sendSummarizedLog: sendSummarizedLog,
      getWebviewLoadPerf: getWebviewLoadPerf,
      getKDSWebviewLoadPerf: getKDSWebviewLoadPerf,
      isSupportBridgeLog: isSupportBridgeLog,
      isSupportBridge: isSupportBridge,
      invoke: invoke
  };

  /**
   * 事件
   */
  // 网络类型
  var networkType = {
      unknown: 0,
      none: 1,
      wifi: 2,
      '4g': 3,
      '3g': 4,
      '2g': 5,
      '5g': 7,
      'slow-2g': 5,
  };
  // 任务事件类型
  var TaskOperations;
  (function (TaskOperations) {
      TaskOperations["CLICK"] = "CLICK";
      TaskOperations["DOUBLE_CLICK"] = "DOUBLE_CLICK";
      TaskOperations["TRIPLE_CLICK"] = "TRIPLE_CLICK";
      TaskOperations["LONG_PRESS"] = "LONG_PRESS";
      TaskOperations["PULL"] = "PULL";
      TaskOperations["DRAG"] = "DRAG";
      TaskOperations["SCALE"] = "SCALE";
      TaskOperations["PULL_DOWN"] = "PULL_DOWN";
      TaskOperations["PULL_UP"] = "PULL_UP";
      TaskOperations["AUTO"] = "AUTO";
  })(TaskOperations || (TaskOperations = {}));
  // 事件类型
  var EventTypes;
  (function (EventTypes) {
      EventTypes["PV"] = "PV";
      EventTypes["SHOW"] = "SHOW";
      EventTypes["VIDEO"] = "VIDEO";
      // Costume
      EventTypes["CUSTOM"] = "CUSTOM";
      EventTypes["CUSTOM_EVENT"] = "CUSTOM_EVENT";
      EventTypes["RADAR"] = "RADAR";
  })(EventTypes || (EventTypes = {}));

  var CommonPackage$1 = /** @class */ (function () {
      function CommonPackage(options) {
          // 默认值为 undefined 减小上报时字段
          // 标识信息
          this.identity_package = {
              device_id: undefined,
              global_id: undefined,
              user_id: undefined,
              union_id: undefined,
              open_id: undefined,
              iu_id: undefined
          };
          // 应用信息
          this.app_package = {
              product: undefined,
              language: undefined,
              platform: undefined,
              container: 'H5',
              package_name: undefined,
              product_name: undefined,
              version_name: undefined,
              channel: undefined,
              version_code: undefined,
          };
          this.experiment = undefined;
          this.service_name = undefined;
          this.safety_id = undefined;
          this.sub_biz = undefined;
          // 设备信息
          this.device_package = {
              os_version: undefined,
              model: undefined,
              ua: undefined,
          };
          this.need_encrypt = false;
          this.network_package = {
              type: networkType.unknown,
          };
          // H5 附加参数
          this.h5_extra_attr = {
              // SDK 版本信息
              sdk_name: 'webLogger',
              sdk_version: '3.10.23',
              sdk_bundle: 'log.hybrid-full.js',
          };
          this.global_attr = {
              // 染色参数
              entry_tag: [],
          };
          this.location_package = {
              country: undefined,
              province: undefined,
              city: undefined,
              county: undefined,
              street: undefined,
              latitude: undefined,
              longitude: undefined, // 经度
          };
          this.update(options);
          if (this.app_package.version_name) {
              var lastDotIndex = this.app_package.version_name.lastIndexOf('.');
              this.app_package.version_code = +this.app_package.version_name.slice(lastDotIndex + 1) || 0;
          }
          if (!this.app_package.version_name) {
              this.app_package.version_name = undefined;
          }
          if (!this.app_package.version_code) {
              this.app_package.version_code = undefined;
          }
      }
      CommonPackage.prototype.getH5ExtraAttr = function (extraInfo) {
          return Object.assign({}, this.h5_extra_attr, extraInfo);
      };
      /**
       * 更新 commonPackage 信息
       * @param options
       * @returns
       */
      CommonPackage.prototype.update = function (options) {
          if (typeof options !== 'object')
              return;
          flattenAssign(this, options);
          // network type 特殊处理
          var network = options.network_type;
          if (network && networkType[network]) {
              this.network_package.type = networkType[network];
          }
      };
      /**
       * 更新 global_attr 信息
       * @param options
       */
      CommonPackage.prototype.updateGlobalAttr = function (options) {
          Object.assign(this.global_attr || {}, options);
      };
      /**
       * 将 commonPackage 转换为 json 输出
       * @returns
       */
      CommonPackage.prototype.toJSON = function () {
          // 处理 v2 空字符串接口会报错问题
          if (!this.identity_package.user_id) {
              this.identity_package.user_id = undefined;
          }
          var json = _assign(_assign({}, this), { toJSON: function () {
                  return _assign(_assign({}, json), { h5_extra_attr: JSON.stringify(json.h5_extra_attr), global_attr: JSON.stringify(json.global_attr) });
              } });
          json.global_attr = _assign({}, this.global_attr);
          if (this.global_attr.entry_tag && this.global_attr.entry_tag.length) {
              json.global_attr.entry_tag = this.global_attr.entry_tag.slice();
          }
          else {
              // 节省上报字段
              delete json.global_attr.entry_tag;
          }
          if (!Object.keys(this.global_attr).length) {
              // 节省上报字段
              delete json.global_attr;
          }
          var location = this.location_package;
          if (location) {
              Object.keys(location).forEach(function (key) {
                  if (typeof location[key] === 'undefined') {
                      delete location[key];
                  }
              });
          }
          return json;
      };
      return CommonPackage;
  }());

  var devices = [
      ['a7', '640x1136', ['iPhone 5', 'iPhone 5s']],
      ['a7', '1536x2048', ['iPad Air', 'iPad Mini 2', 'iPad Mini 3']],
      ['a8', '640x1136', ['iPod touch (6th gen)']],
      ['a8', '750x1334', ['iPhone 6']],
      ['a8', '1242x2208', ['iPhone 6 Plus']],
      ['a8', '1536x2048', ['iPad Air 2', 'iPad Mini 4']],
      ['a9', '640x1136', ['iPhone SE']],
      ['a9', '750x1334', ['iPhone 6s']],
      ['a9', '1242x2208', ['iPhone 6s Plus']],
      ['a9x', '1536x2048', ['iPad Pro (1st gen 9.7-inch)']],
      ['a9x', '2048x2732', ['iPad Pro (1st gen 12.9-inch)']],
      ['a10', '750x1334', ['iPhone 7']],
      ['a10', '1242x2208', ['iPhone 7 Plus']],
      ['a10x', '1668x2224', ['iPad Pro (2th gen 10.5-inch)']],
      ['a10x', '2048x2732', ['iPad Pro (2th gen 12.9-inch)']],
      ['a11', '750x1334', ['iPhone 8']],
      ['a11', '1242x2208', ['iPhone 8 Plus']],
      ['a11', '1125x2436', ['iPhone X']],
      ['a12', '828x1792', ['iPhone Xr']],
      ['a12', '1125x2436', ['iPhone Xs']],
      ['a12', '1242x2688', ['iPhone Xs Max']],
      ['a12x', '1668x2388', ['iPad Pro (3rd gen 11-inch)']],
      ['a12x', '2048x2732', ['iPad Pro (3rd gen 12.9-inch)']],
  ];
  var pickDeviceByResolution = function () {
      var resolution = getResolution();
      var perhaps = [];
      for (var _i = 0, devices_1 = devices; _i < devices_1.length; _i++) {
          var device = devices_1[_i];
          if (resolution === device[1]) {
              perhaps = perhaps.concat(device[2]);
          }
      }
      return perhaps.length && perhaps;
  };
  var getModel = (function () {
      return function () {
          try {
              var uaInfo = getUAInfo();
              var inApp = isInApp();
              var model_1 = uaInfo.model || uaInfo.os.name || 'unknown';
              if (uaInfo.os.name !== 'iOS' || inApp) {
                  return model_1;
              }
              var device = pickDeviceByResolution();
              if (device) {
                  return device.join(' or ');
              }
              return model_1;
          }
          catch (err) {
              return 'unknown';
          }
      };
  })();

  var platformPB = 0;
  function platform() {
      try {
          var osName = getUAInfo().os.name;
          if (!osName) {
              return platformPB = 0;
          }
          if (osName === 'Android') {
              return platformPB = isInApp() ? 6 : 8;
          }
          if (osName === 'iOS') {
              return platformPB = isInApp() ? 7 : 9;
          }
          return platformPB = 10;
      }
      catch (err) {
          return 0;
      }
  }
  function network() {
      var networkType = 'unknown';
      var navigator = window === null || window === void 0 ? void 0 : window.navigator;
      var connection = (navigator === null || navigator === void 0 ? void 0 : navigator.connection) || (navigator === null || navigator === void 0 ? void 0 : navigator.mozConnection) || (navigator === null || navigator === void 0 ? void 0 : navigator.webkitConnection);
      if (connection) {
          networkType = connection.type || connection.effectiveType;
      }
      return networkType;
  }
  var CommonPackage = /** @class */ (function (_super) {
      __extends(CommonPackage, _super);
      function CommonPackage(options) {
          var _this = _super.call(this, _assign({ platform: platform(), container: platformPB === 10 ? 'WEB' : 'H5', version_name: isInApp() && getCookie('appver', undefined, true) || '', network_type: network(), device_id: generateDID(), user_id: getCookie('userId'), global_id: isInApp() && getCookie('egid') || '', app_package: {
                  language: navigator.language,
              }, device_package: {
                  os_version: getUAInfo().os.version,
                  model: getModel(),
                  ua: navigator.userAgent,
              } }, options)) || this;
          Object.assign(_this.h5_extra_attr, {
              host_product: getDefaultKpn(),
              resolution: getResolution(),
              screen_width: getPositiveInteger(screen.width),
              screen_height: getPositiveInteger(screen.height),
              device_pixel_ratio: window.devicePixelRatio || 1,
              domain: window.location.origin,
              fromIframe: (window === null || window === void 0 ? void 0 : window.self) !== (window === null || window === void 0 ? void 0 : window.top),
          }, options.h5_extra_attr);
          delete _this.location_package;
          return _this;
      }
      CommonPackage.prototype.getVersionName = function () {
          return this.app_package.version_name;
      };
      /**
      * 更新 commonPackage 信息
      * @param options
      * @returns
      */
      CommonPackage.prototype.update = function (options) {
          _super.prototype.update.call(this, options);
          // 主站版本号较为严格，直接通过版本名读取
          var version_name = this.app_package.version_name;
          if (typeof version_name === 'string') {
              var lastDotIndex = version_name.lastIndexOf('.');
              this.app_package.version_code = +version_name.slice(lastDotIndex + 1) || 0;
              this.h5_extra_attr.app_version_name = version_name;
          }
      };
      // v2 丢失统计
      CommonPackage.prototype.setAdditionalSeqIdPackage = function (eventType) {
          this.additional_seq_id_package = {
              channel: 3,
              channel_seq_id: getChannelIncrementId('NORMAL'),
              custom_type: eventType,
              custom_seq_id: getV2EventIncrementId(eventType)
          };
      };
      // 用于统计桥接丢失率
      CommonPackage.prototype.increaseH5SeqId = function (isCustom) {
          this.h5_extra_attr.client_timestamp = getPositiveInteger(new Date().valueOf());
          this.h5_extra_attr.seq_id = isCustom ? getBridgeCustomIncrementId() : getBridgeNormalIncrementId();
      };
      return CommonPackage;
  }(CommonPackage$1));

  var oldApiTransformer = function (type, name, params, contentPackage) {
      if (name === void 0) { name = {}; }
      var realType;
      if (typeof type !== 'string') {
          realType = type.type;
      }
      realType = type.toUpperCase();
      var options = {};
      if (typeof name === 'string') {
          console.warn('[warn 105]', '接口参数为旧式，后续版本将不再兼容，推荐使用新的参数形式');
          options.contentPackage = contentPackage;
          if (type === 'CUSTOM') {
              options.key = name;
              options.value = params;
          }
          else {
              options.params = params;
              if (type === 'PV') {
                  options.page = name;
              }
              else {
                  options.action = name;
              }
          }
      }
      else {
          options = name;
          if (['CUSTOM', 'CUSTOM_EVENT'].includes(realType)) {
              var customParams = name;
              if (customParams.action && !customParams.key) {
                  options.key = customParams.action;
              }
              if (customParams.params && !customParams.value) {
                  options.value = customParams.params;
              }
          }
      }
      return [
          realType,
          options
      ];
  };

  var WeblogNamespace;
  var WEBLOGGER_SILENCE_KEY = 'WEBLOGGER_SILENCED';
  // 在浏览器环境下统一一个命名空间，用来统计
  if (typeof window !== 'undefined') {
      if (typeof window._WEBLOGGER !== 'object') {
          window._WEBLOGGER = {
              _silenced: false,
              constructors: [],
              instances: [],
              // 全局静默
              silence: function (state) {
                  try {
                      if (state) {
                          sessionStorage.setItem(WEBLOGGER_SILENCE_KEY, '1');
                      }
                      else {
                          sessionStorage.removeItem(WEBLOGGER_SILENCE_KEY);
                      }
                      window._WEBLOGGER.instances.forEach(function (i) {
                          i === null || i === void 0 ? void 0 : i.silence(state);
                      });
                  }
                  catch (err) { }
              }
          };
      }
      WeblogNamespace = window._WEBLOGGER;
  }
  var initSilence = function () {
      if (WeblogNamespace === null || WeblogNamespace === void 0 ? void 0 : WeblogNamespace.silence) {
          try {
              WeblogNamespace._silenced = !!sessionStorage.getItem(WEBLOGGER_SILENCE_KEY);
          }
          catch (err) { }
      }
  };
  /**
   * 记录一个 Weblog 类
   */
  var addClass = function (C) {
      // bootstrap 分级加载命名空间，后续废弃
      if (typeof window._GLOBAL_KS_WEBLOGGER_ !== 'undefined') {
          window._GLOBAL_KS_WEBLOGGER_.Factory = C;
      }
      else {
          window.Weblog = C;
      }
      if ((WeblogNamespace === null || WeblogNamespace === void 0 ? void 0 : WeblogNamespace.constructors) && C && WeblogNamespace.constructors.indexOf(C) === -1) {
          // 加个 id 区分
          C._classId = WeblogNamespace.constructors.length;
          WeblogNamespace.constructors.push(C);
      }
  };
  /**
   * 记录一个 Weblog 实例
   */
  var addInstance = function (i) {
      if ((WeblogNamespace === null || WeblogNamespace === void 0 ? void 0 : WeblogNamespace.instances) && i && WeblogNamespace.instances.indexOf(i) === -1) {
          WeblogNamespace.instances.push(i);
          if (WeblogNamespace._silenced) {
              i === null || i === void 0 ? void 0 : i.silence(true);
          }
      }
  };
  /**
   * 移除一个 Weblog 实例
   */
  var removeInstance = function (i) {
      if (WeblogNamespace === null || WeblogNamespace === void 0 ? void 0 : WeblogNamespace.instances) {
          var index = WeblogNamespace.instances.indexOf(i);
          if (index !== -1) {
              WeblogNamespace.instances.splice(index, 1);
          }
      }
  };

  var getDefaultUserId = function () { return getCookie('userId') || getCookie('userName') || undefined; };
  var isWillClosed = false;
  var randomValue = Math.random();
  var Weblog$1 = /** @class */ (function (_super) {
      __extends(Weblog, _super);
      function Weblog(logConfig, base) {
          if (logConfig === void 0) { logConfig = {}; }
          var _this = _super.call(this, logConfig, base) || this;
          _this.beforeUnload = function (event) {
              if (isWillClosed)
                  return;
              _this.logger.drain();
              for (var key in _this.plugins) {
                  var plugin = _this.plugins[key];
                  if (typeof plugin.beforeUnload === 'function') {
                      plugin.beforeUnload(event);
                  }
              }
              isWillClosed = true;
              setTimeout(function () {
                  isWillClosed = false;
              }, 2000);
          };
          _this.isBridge = logConfig.bridgeMode && logConfig.yoda && isInYoda();
          _this.logConfig.isBridge = _this.isBridge;
          console.warn('[webLogger] 您正在使用的是', logConfig.bridgeMode ?
              "\u3010\u6865\u63A5\u4E0A\u62A5\u3011\u7684 js \u5305\u3002".concat(_this.isBridge ? '' : '当前是端外打开，会自动改为 http 上报！上报链路为 ' + (logConfig.proto === 'v2' ? 'v2' : 'v3'))
              :
                  "\u3010http \u4E0A\u62A5\u3011\u7684 js \u5305\u3002\u4E0A\u62A5\u94FE\u8DEF\u4E3A ".concat(logConfig.proto === 'v2' ? 'v2' : 'v3'));
          updateConfig('sessionId', base && base.session_id || getCookie('sid') || getSessionId());
          _this.isV2 = _this.logConfig.proto === 'v2';
          _this.getSampled(_this.logConfig);
          // 参数默认值处理
          _this.presetBaseOption(_this.baseOption);
          _this.commonPackage = new CommonPackage(_this.baseOption);
          _this.logger = new Logger(_this.logConfig, _this.commonPackage);
          _this.initYoda();
          _this.addPlugins();
          addMonitor(window, 'pagehide', _this.beforeUnload);
          addMonitor(window, 'beforeunload', _this.beforeUnload);
          addInstance(_this);
          return _this;
      }
      Weblog.prototype.getSampled = function (logConfig) {
          var _a = logConfig || {}, sampleRateFn = _a.sampleRateFn, sampleRate = _a.sampleRate;
          if (typeof sampleRateFn === 'function') {
              this.sampled = !!sampleRateFn();
          }
          else if (typeof sampleRate !== 'undefined') {
              this.sampled = randomValue < Number(sampleRate);
          }
      };
      /**
       * 参数预处理
       * @param base
       */
      Weblog.prototype.presetBaseOption = function (base) {
          if (!this.isBridge) {
              if (this.isV2) {
                  if (typeof base.product !== 'number')
                      error("[error 101]", "\u8BF7\u8BBE\u7F6E\u6709\u6548\u7684 product \u503C\uFF0C\u503C\u7C7B\u578B\u4E3A number!");
                  delete base.product_name;
              }
              else {
                  if (!base.product_name || typeof base.product_name !== 'string')
                      error("[error 100]", "\u8BF7\u8BBE\u7F6E\u6709\u6548\u7684 product_name \u503C\uFF0C\u503C\u7C7B\u578B\u4E3A string!");
                  delete base.product;
              }
              if (!base.user_id) {
                  base.user_id = getDefaultUserId();
                  if (!base.user_id)
                      warn("[warn 102]", "user_id \u4E3A\u7A7A\uFF0C\u8BF7\u786E\u5B9A\u662F\u5426\u4F20\u5165\uFF0C\u5982\u679C\u662F\u5F02\u6B65\u901A\u8FC7 updateCommonPackage \u63A5\u53E3\u4F20\u5165\uFF0C\u53EF\u4EE5\u5FFD\u7565\u8BE5\u63D0\u793A!");
              }
              if (!base.device_id) {
                  base.device_id = generateDID();
                  if (!base.device_id)
                      error("[error 103]", "device_id \u4E3A\u7A7A\uFF0C\u8BF7\u8BBE\u7F6E\u6709\u6548\u7684\u8BBE\u5907 id!");
              }
              if (!base.global_id && isInApp()) {
                  base.global_id = getCookie('egid') || '';
              }
          }
      };
      Object.defineProperty(Weblog.prototype, "yoda", {
          get: function () {
              return this.logConfig.yoda || (window === null || window === void 0 ? void 0 : window.KSYoda) || (window === null || window === void 0 ? void 0 : window.yoda);
          },
          enumerable: false,
          configurable: true
      });
      Object.defineProperty(Weblog.prototype, "Utils", {
          // TIP:
          get: function () {
              return {
                  yoda: isInYoda() && this.yoda ? yodaUtils : null,
                  cookie: cookieUtils,
                  ua: uaUtils,
                  io: {
                      sendData: sendData,
                  },
              };
          },
          enumerable: false,
          configurable: true
      });
      Weblog.prototype.initYoda = function () {
          var _this = this;
          if (!isInYoda() || !this.yoda)
              return;
          postInvoke(this.yoda);
          // 更新设备信息
          getDeviceInfo().then(function (info) {
              if (info === null || info === void 0 ? void 0 : info.mod) {
                  _this.commonPackage.device_package.model = info.mod;
              }
          });
          // 更新应用信息
          getAppInfo().then(function (info) {
              if (typeof info === 'object') {
                  var did = info.did, userId = info.userId, appver = info.appver;
                  did && (_this.commonPackage.identity_package.device_id = did);
                  userId && !_this.commonPackage.identity_package.user_id && (_this.commonPackage.identity_package.user_id = userId);
                  appver && (_this.commonPackage.app_package.version_name = appver);
              }
          });
      };
      Weblog.prototype.initUrlPackage = function () {
          _super.prototype.initUrlPackage.call(this);
          var referer = this.logConfig.referer;
          var referUrl;
          var referType = 'web';
          if (referer) {
              referUrl = referer.value;
              referType = referer.type && referer.type || referType;
          }
          else if (typeof document !== 'undefined' && document.referrer) {
              referUrl = document.referrer;
          }
          if (referUrl) {
              this.updateReferUrlPackage(referUrl, referType);
          }
      };
      Weblog.prototype.updateCurrentUrlPackage = function (url, type) {
          if (url === void 0) { url = (location === null || location === void 0 ? void 0 : location.href) || ''; }
          if (type === void 0) { type = 'web'; }
          if (typeof url === 'object' && !url.force && this.currentUrlPackage) {
              var _a = url.page, page = _a === void 0 ? this.currentUrlPackage.page : _a, _b = url.params, params = _b === void 0 ? {} : _b;
              if (page === this.currentUrlPackage.page) {
                  return this.currentUrlPackage.update(page, params);
              }
          }
          this.currentUrlPackage = new UrlPackage(url, type, this.logConfig.urlMap);
          if (this.logConfig.attachUrl)
              this.currentUrlPackage.attachUrl();
      };
      /**
       * 更新 refer url 信息
       * @param url
       * @param type
       */
      Weblog.prototype.updateReferUrlPackage = function (url, type) {
          if (url === void 0) { url = this.currentUrlPackage; }
          if (type === void 0) { type = 'web'; }
          if (url instanceof UrlPackage) {
              this.referUrlPackage = url;
          }
          else {
              this.referUrlPackage = new UrlPackage(url, type, this.logConfig.urlMap);
          }
      };
      Object.defineProperty(Weblog.prototype, "isSendSampled", {
          get: function () {
              return (typeof this.sampled === 'undefined' ? true : this.sampled) || this.logger.isDebug;
          },
          enumerable: false,
          configurable: true
      });
      Weblog.prototype.generateLog = function (eventType, eventOptions, factory) {
          if (factory === void 0) { factory = logFactory$1; }
          var _a = eventOptions, action = _a.action, params = _a.params, status = _a.status, type = _a.type, eventId = _a.eventId, contentPackage = _a.contentPackage, urlPage = _a.urlPage;
          var currentUrlPackage;
          if (contentPackage) {
              contentPackage = typeof contentPackage === 'string' ? contentPackage : JSON.stringify(contentPackage);
          }
          var isPVEvent = eventType === 'PV';
          // 若是 pv 先更新currentUrlPackage
          if (isPVEvent) {
              var _b = eventOptions, page = _b.page, type_1 = _b.type;
              if (!type_1)
                  eventOptions.type = type_1 = 'enter';
              // enter 则重新生成新的 currentUrlPackage，否则局部更新
              if (type_1 === 'enter' && page) {
                  this.updateCurrentUrlPackage({ page: page, params: params });
              }
              else {
                  this.currentUrlPackage.update(page, params);
              }
          }
          else if (urlPage && urlPage.page) { // 如果参数中带有 urlPage，用来解决页面飘移问题，只影响该埋点
              currentUrlPackage = {
                  page: urlPage.page,
                  identity: urlPage.identity || uuid(),
                  params: JSON.stringify(urlPage.params),
                  page_type: this.currentUrlPackage.page_type
              };
          }
          var commonInfo = {
              currentUrlPackage: currentUrlPackage || this.currentUrlPackage.toJSON(),
              referUrlPackage: this.referUrlPackage ? this.referUrlPackage.toJSON() : undefined,
              contentPackage: contentPackage
          };
          // 除了雷达之外的事件都希望能按照规范上报埋点，使 page 不为url
          if (eventType !== 'RADAR' && (currentUrlPackage === null || currentUrlPackage === void 0 ? void 0 : currentUrlPackage.page.indexOf('http')) === 0) {
              console.warn('[warn 104]', "\u57CB\u70B9\u9875\u9762\u4FE1\u606F ".concat(currentUrlPackage === null || currentUrlPackage === void 0 ? void 0 : currentUrlPackage.page, " \u4E0D\u7B26\u5408\u89C4\u8303\uFF0C\u63A8\u8350\u4F7F\u7528\u5927\u5199\u82F1\u6587 + \u4E0B\u5212\u7EBF\u683C\u5F0F"));
          }
          if (isPVEvent) {
              var type_2 = eventOptions.type;
              // PV 类型
              return factory(eventType, _assign(_assign(_assign({}, eventOptions), { type: type_2 }), commonInfo), this.isV2);
          }
          if (eventType === 'SHOW') {
              // SHOW 类型
              return factory(eventType, _assign(_assign(_assign({}, eventOptions), { name: action }), commonInfo), this.isV2);
          }
          if (eventType === 'VIDEO') {
              return factory(eventType, _assign({ params: eventOptions, name: 'VIDEO' }, commonInfo), this.isV2);
          }
          // Radar 日志特殊处理
          if (eventType === 'RADAR') {
              return factory(eventType, eventOptions, this.isV2);
          }
          if (['CUSTOM', 'RADAR', 'CUSTOM_EVENT'].indexOf(eventType) !== -1) {
              // CUSTOM 类型
              var _c = eventOptions, key = _c.key, value = _c.value;
              return factory('CUSTOM', _assign(_assign(_assign({}, eventOptions), { params: value, name: key }), commonInfo), this.isV2);
          }
          // TASK 类型
          return factory(eventType, _assign(_assign(_assign({}, eventOptions), { params: params, status: status, taskType: type, eventId: eventId, name: action }), commonInfo), this.isV2);
      };
      Weblog.prototype.collect = function (type, name, params, contentPackage) {
          var _a = oldApiTransformer(type, name, params, contentPackage), logType = _a[0], logParams = _a[1];
          return this.send(logType, logParams, false);
      };
      Weblog.prototype.sendImmediately = function (type, name, params, contentPackage) {
          var _a = oldApiTransformer(type, name, params, contentPackage), logType = _a[0], logParams = _a[1];
          return this.send(logType, logParams, true);
      };
      Weblog.prototype.send = function (type, params, immediately) {
          if (this._silenced)
              return;
          var log = this.generateLog(type, params);
          this.emit('event', { type: type, action: params === null || params === void 0 ? void 0 : params.action, log: log });
          // this.beforeSend(type, params, log);
          // 雷达日志单独处理
          if (type === 'RADAR') {
              return this.logger.sendRadar(log, params === null || params === void 0 ? void 0 : params.serviceName);
          }
          if (this.isV2 && this.logConfig.forbidV2HttpUrlPage && !pageUrlValidate(this.currentUrlPackage.page))
              return;
          // 如果该用户不被采样，则所有日志都不会上报
          if (!this.isSendSampled) {
              return;
          }
          var callback = typeof params === 'object' && params.callback || undefined;
          this.logger.send(log, !!immediately, callback);
      };
      Weblog.prototype.destroy = function () {
          _super.prototype.destroy.call(this);
          removeMonitor(window, 'pagehide', this.beforeUnload);
          removeMonitor(window, 'beforeunload', this.beforeUnload);
          removeInstance(this);
      };
      /**
       * 是否不发送日志，true 暂停请求，false 则会继续请求
       */
      Weblog.prototype.silence = function (state) {
          this._silenced = state;
      };
      Weblog.Logger = Logger;
      return Weblog;
  }(Weblog$2));

  function logFactory(type, data) {
      var _a = data, action = _a.action, params = _a.params, eventId = _a.eventId, contentPackage = _a.contentPackage, currentUrlPackage = _a.currentUrlPackage, _b = _a.status, status = _b === void 0 ? 'SUCCESS' : _b; _a.name; var feedLogCtx = _a.feedLogCtx;
      if (type === 'PV') {
          var _c = data, actionType = _c.type, beginTime = _c.beginTime;
          return _assign(_assign({}, currentUrlPackage), { actionType: actionType, contentPackage: contentPackage, status: status, beginTime: beginTime, eventId: eventId, pageType: isKDSNative() ? 'NATIVE' : 'H5' });
      }
      var urlPage;
      if (currentUrlPackage) {
          var page = currentUrlPackage.page, params_1 = currentUrlPackage.params, identity = currentUrlPackage.identity, coPage = currentUrlPackage.coPage;
          urlPage = {
              page: page,
              params: params_1,
              identity: identity,
              coPage: coPage,
          };
      }
      if (['RADAR', 'CUSTOM', 'CUSTOM_EVENT'].includes(type)) {
          var _d = data, key = _d.key, value = _d.value, biz = _d.biz;
          return {
              key: key,
              value: JSON.stringify(_assign(_assign({}, value), { url_package: currentUrlPackage })),
              biz: biz,
              eventId: eventId,
              urlPage: urlPage
          };
      }
      var elementLogParams = {
          action: action,
          params: JSON.stringify(params),
          contentPackage: contentPackage,
          feedLogCtx: feedLogCtx,
          eventId: eventId,
          urlPage: urlPage
      };
      if (type !== 'SHOW') {
          var taskType = data.type;
          Object.assign(elementLogParams, {
              type: taskType || 'USER_OPERATION',
              status: status || 'UNKNOWN_STATUS',
              operationType: type,
              operationDirection: 'UNKNOWN2',
          });
      }
      return elementLogParams;
  }

  /**
   * 判断当前yoda的状态
   * INIT: 初始状态
   * CHECKING：检查是否可用中，此时上报的埋点都会推入等待队列
   * READY：可用，此时上报的埋点会以桥接方式上报
   * DISABLED：不可用，此时上报的埋点会以 http 方式上报
   */
  var YodaStatus;
  (function (YodaStatus) {
      YodaStatus[YodaStatus["INIT"] = -1] = "INIT";
      YodaStatus[YodaStatus["CHECKING"] = 0] = "CHECKING";
      YodaStatus[YodaStatus["READY"] = 1] = "READY";
      YodaStatus[YodaStatus["DISABLED"] = 2] = "DISABLED";
  })(YodaStatus || (YodaStatus = {}));
  var getMockYoda = function () {
      try {
          if (isInYoda()) {
              return {
                  invoke: bridge.invoke,
                  version: bridge.version
              };
          }
      }
      catch (err) { }
      console.warn('Not in yoda webview!');
      return;
  };
  var BridgeWeblogger = /** @class */ (function (_super) {
      __extends(BridgeWeblogger, _super);
      function BridgeWeblogger(logConfig, base) {
          var _this = _super.call(this, _assign(_assign({}, logConfig), { yoda: getMockYoda(), bridgeMode: !(logConfig === null || logConfig === void 0 ? void 0 : logConfig.disableBridge) }), base) || this;
          _this.yodaStatus = YodaStatus.INIT;
          // 记录页面是否已发送过 enter pv;
          _this.entered = '';
          if ((logConfig === null || logConfig === void 0 ? void 0 : logConfig.disableBridge) || !isInYoda()) {
              _this.yodaStatus = YodaStatus.DISABLED;
          }
          else {
              _this.checkSupportBridge();
          }
          // @ts-ignore
          if (!_this.waitYodaQueue) {
              _this.waitYodaQueue = [];
          }
          return _this;
      }
      BridgeWeblogger.prototype.checkSupportBridge = function () {
          return __awaiter(this, void 0, void 0, function () {
              var isSupport;
              var _this = this;
              return __generator(this, function (_a) {
                  switch (_a.label) {
                      case 0: return [4 /*yield*/, isSupportBridgeLog()];
                      case 1:
                          isSupport = _a.sent();
                          this.yodaStatus = isSupport ? YodaStatus.READY : YodaStatus.DISABLED;
                          this.waitYodaQueue.forEach(function (item) {
                              var type = item.type, options = item.options, immediately = item.immediately;
                              if (isSupport) {
                                  _this.sendByBridge(type, options, immediately);
                              }
                              else {
                                  _this.sendByHttp(type, options, immediately);
                              }
                          });
                          this.waitYodaQueue = [];
                          return [2 /*return*/];
                  }
              });
          });
      };
      /**
       * 桥接上报
       */
      BridgeWeblogger.prototype.sendByBridge = function (eventType, eventOptions, immediately) {
          var _a, _b;
          var _c = this.logConfig, configDisablePV = _c.disablePV, biz = _c.biz;
          var _d = eventOptions, contentPackage = _d.contentPackage, eventDisablePV = _d.disablePV, _e = _d.bridgeFields, bridgeFields = _e === void 0 ? {} : _e, urlPage = _d.urlPage;
          var disablePV = configDisablePV || eventDisablePV;
          if (contentPackage) {
              contentPackage = typeof contentPackage === 'string' ? contentPackage : JSON.stringify(contentPackage);
          }
          var setClientLogType = 'addTaskEvent';
          var isPVEvent = eventType === 'PV';
          if (isPVEvent) {
              if (disablePV)
                  return;
              // bridge PV 仅支持 enter 和 visible
              var supportPVTypes = ['enter', 'visible'];
              var _f = eventOptions, page = _f.page, type = _f.type, params = _f.params, coPage_1 = _f.coPage, category = _f.category;
              if (!type)
                  eventOptions.type = type = 'enter';
              if (type === 'leave' && this.currentUrlPackage.coPage && checkSupportCloseCoPage()) {
                  setClientLog('closeCoPage', _assign(_assign({}, eventOptions), this.currentUrlPackage));
                  return;
              }
              if (supportPVTypes.indexOf(type) === -1) {
                  return;
              }
              // enter 则强行重新生成新的 currentUrlPackage，否则局部更新
              if (type === 'enter') {
                  var realPage = page || this.currentUrlPackage.page;
                  this.updateCurrentUrlPackage({ page: realPage, params: !page ? this.currentUrlPackage.params : params, force: true });
                  if (coPage_1) {
                      this.currentUrlPackage.coPage = coPage_1;
                  }
                  if (category) {
                      this.currentUrlPackage.category = category;
                  }
                  this.entered = realPage;
              }
              else if (page === this.entered) {
                  this.currentUrlPackage.update(page, params);
              }
              // 对于上报到v2，page为url的埋点，给予提示
              if (!pageUrlValidate(this.currentUrlPackage.page))
                  return;
              setClientLogType = 'setCurrentPage';
          }
          var coPage = !!this.currentUrlPackage.coPage;
          var urlPackage = (urlPage === null || urlPage === void 0 ? void 0 : urlPage.page) && !isPVEvent ? {
              page: urlPage.page,
              identity: urlPage.identity,
              params: stringifyParams(urlPage.params),
              page_type: this.currentUrlPackage.page_type
          } : _assign(_assign({}, this.currentUrlPackage.toJSON()), { coPage: coPage });
          var log = logFactory(eventType, _assign(_assign({ biz: biz }, eventOptions), { contentPackage: contentPackage, currentUrlPackage: disablePV ? undefined : urlPackage })); // TODO: 待优化 logFactory 参数
          var isCustomType = ['CUSTOM', 'RADAR', 'CUSTOM_EVENT'].indexOf(eventType) !== -1;
          // 保持 h5ExtraAttr 来源统一
          this.commonPackage.increaseH5SeqId(isCustomType);
          // 设置 log 公共属性
          var _g = this.baseOption || {}, service_name = _g.service_name, sub_biz = _g.sub_biz, need_encrypt = _g.need_encrypt;
          // TODO: 桥接上报不需要 common_package 信息，可以优化
          log.h5ExtraAttr = JSON.stringify(this.commonPackage.getH5ExtraAttr({ bridge_info: ((_b = (_a = this.logConfig) === null || _a === void 0 ? void 0 : _a.yoda) === null || _b === void 0 ? void 0 : _b.version) || bridge.version || true, coPage: coPage }));
          log.realtime = !!immediately;
          log.serviceName = service_name || '';
          log.subBiz = sub_biz || '';
          log.needEncrypt = need_encrypt || false;
          log.container = isKDSNative() ? 'REACT_NATIVE' : 'H5';
          if (eventType === 'SHOW') {
              setClientLogType = 'addElementShowEvent';
          }
          else if (isCustomType) {
              // 兼容业务一些迁移行为，自动把 custom_stat_event 转为 custom_event
              setClientLogType = (eventType === 'CUSTOM_EVENT' || this.logConfig.customStatToCustom) ? 'addCustomEvent' : 'addCustomStatEvent';
          }
          setClientLog(setClientLogType, _assign(_assign({}, bridgeFields), log));
      };
      BridgeWeblogger.prototype.updateCurrentUrlPackage = function (url, type) {
          if (url === void 0) { url = (location === null || location === void 0 ? void 0 : location.href) || ''; }
          if (type === void 0) { type = 'web'; }
          if (typeof url === 'object' && !url.force && this.currentUrlPackage) {
              var _a = url.page, page = _a === void 0 ? this.currentUrlPackage.page : _a, _b = url.params, params = _b === void 0 ? {} : _b;
              if (!page || page === this.currentUrlPackage.page) {
                  // 兼容降级为 http 上报情况
                  this.currentUrlPackage.update(page, params);
                  var isPageEntered = this.entered === page;
                  if (this.yodaStatus !== YodaStatus.DISABLED && isPageEntered) {
                      // 客户端内直接使用 updateCurrentUrlPackage 更改页面参数是无法成功的
                      // 客户端只认 pv 上报时候带上去的参数，因此此处发送一个visible类型的pv，改变客户端维护的页面参数
                      this.send('PV', {
                          type: 'visible',
                          page: page,
                          params: params,
                      }, true);
                  }
                  return;
              }
          }
          this.currentUrlPackage = new UrlPackage(url, type, this.logConfig.urlMap);
          if (this.logConfig.attachUrl)
              this.currentUrlPackage.attachUrl();
      };
      /**
       * Http 上报
       * @param type
       * @param name
       * @param params
       * @param contentPackage
       * @param immediately
       */
      BridgeWeblogger.prototype.sendByHttp = function (type, options, immediately) {
          return _super.prototype.send.call(this, type, options, immediately);
      };
      /**
       * 复写父类 send 方法
       * @param type
       * @param name
       * @param params
       * @param contentPackage
       * @param immediately
       */
      BridgeWeblogger.prototype.send = function (type, options, immediately) {
          var _a = this.logConfig, enableV3CustomEvent = _a.enableV3CustomEvent, openHttpSender = _a.openHttpSender;
          // 目前只有enableV3CustomEvent打开时强制自定义事件上报到v3，注意此时应限制用户设置proto为v2
          var CustomToV3 = type === 'CUSTOM' && enableV3CustomEvent;
          /**
           * 强制 http 上报或yoda不可用，降级使用 http 上报
           *
           * 其中的 disabled 逻辑与 isInYoda 逻辑判断并不冲突。
           * 增加 isInYoda 判断是为了兼容 autopv 发送，autopv 发送时父BaseLogger类会调用子(也就是本类）的send 方法，
           * 这个时候 yoda 状态，waitYodaQueue 等参数还未初始化)
           *
           * 逻辑说明：
           * 如果是端外情况（不在 yoda 环境），可不用判断，直接使用 http 发送即可。
           * 如果是端内情况（拥有yoda 环境）这个 if 条件不会进入，会走下面将埋点存入 waitYodaQueue 列表逻辑，判断 yoda 使用状态后，再决定如何发送。
            */
          if (CustomToV3 || this.yodaStatus === YodaStatus.DISABLED || !isInYoda()) {
              return this.sendByHttp(type, options, immediately);
          }
          // 双报模式
          if (openHttpSender) {
              this.sendByHttp(type, options, immediately);
          }
          if (this.yodaStatus === YodaStatus.INIT) {
              this.yodaStatus = YodaStatus.CHECKING;
          }
          // yodaStatus 为 undefined 是 autopv 插件最开始发送，hybrid 内部还没有来得及初始化的情况
          if (this.yodaStatus === YodaStatus.CHECKING || typeof this.yodaStatus === 'undefined') {
              log('[weblogger]: waiting yoda ready');
              if (!this.waitYodaQueue) {
                  this.waitYodaQueue = [];
              }
              this.waitYodaQueue.push({
                  type: type,
                  options: options,
                  immediately: immediately,
              });
              return;
          }
          return this.sendByBridge(type, options, immediately);
      };
      return BridgeWeblogger;
  }(Weblog$1));

  var BasePlugin = /** @class */ (function () {
      function BasePlugin() {
      }
      BasePlugin.prototype.apply = function (weblog) {
          this.weblog = weblog;
      };
      return BasePlugin;
  }());
  /**
   * 在 bootstrap 环境下自动注册插件
   * @param Plugin
   * @param optionKey
   */
  var autoRegister = function (Plugin, optionKey) {
      var _a;
      if (typeof window === 'undefined' ||
          typeof window._GLOBAL_KS_WEBLOGGER_ === 'undefined' ||
          typeof Plugin !== 'function')
          return;
      var _b = window._GLOBAL_KS_WEBLOGGER_, weblog = _b.weblog, config = _b.config;
      var option = optionKey ? (_a = config.plugins[optionKey]) === null || _a === void 0 ? void 0 : _a.options : undefined;
      weblog.addPluginInstance(new Plugin(option));
  };

  /**
   * @file crash-monitor.js
   * @author kevin (lanlazy@163.com)
   * beforeunload触发条件:正常关闭标签,刷新,关闭浏览器
   * @created 2018-08-08
   */
  var defaultOptions$1 = {
      updateInterval: 20 * 1000,
      crashThreshold: 10 * 1000,
  };
  var monitorPrefix = '@ks.monitor.crash_';
  var CrashMonitor = /** @class */ (function (_super) {
      __extends(CrashMonitor, _super);
      /**
       * 兼容写法，如果在 Weblog 初始化设置 plugins 时，不需要设置 weblog
       * @param weblog
       */
      function CrashMonitor(weblog) {
          var _this = _super.call(this) || this;
          _this.eventName = 'onpagehide' in window ? 'pagehide' : 'beforeunload';
          _this.options = _assign({}, defaultOptions$1);
          _this.historyMoniorInfo = null;
          /**
           * 停止监控过程
           * 1.在页面正常卸载时自动调用
           * 2.需要手动卸载时手动调用
           */
          _this.stop = function () {
              clearInterval(_this.updateIntervalId);
              try {
                  localStorage.removeItem(_this.monitorId);
              }
              catch (e) {
                  // nothing
              }
          };
          if (weblog === null || weblog === void 0 ? void 0 : weblog.collect) {
              _this.apply(weblog);
          }
          addMonitor(window, _this.eventName, _this.stop);
          return _this;
      }
      CrashMonitor.prototype.apply = function (weblog) {
          if (!weblog)
              return;
          this.weblog = weblog;
          this.monitorId = monitorPrefix + this.weblog.sessionId;
          this.start();
      };
      CrashMonitor.prototype.destroy = function () {
          this.stop();
          removeMonitor(window, this.eventName, this.stop);
      };
      CrashMonitor.prototype.pickHistoryInfo = function () {
          for (var key in localStorage) {
              if (key.indexOf(monitorPrefix) === 0) {
                  try {
                      var historyMoniorString = localStorage.getItem(key);
                      var data = JSON.parse(historyMoniorString);
                      this.checkHistoryCrash(data);
                  }
                  catch (e) {
                      // nothing
                  }
              }
          }
      };
      CrashMonitor.prototype.checkHistoryCrash = function (data) {
          var now = new Date().valueOf();
          if (data && data.time && now - data.time > this.options.crashThreshold) {
              this.weblog.collect('CUSTOM', {
                  key: 'crash',
                  value: data
              });
          }
      };
      /**
       * 开始定时更新快照
       */
      CrashMonitor.prototype.start = function () {
          var _this = this;
          this.pickHistoryInfo();
          this.updateIntervalId = window.setInterval(function () {
              _this.update();
          }, this.options.updateInterval);
          this.update();
      };
      /**
       * 更新监控快照
       * @param {*} data 外部追加额外的快照信息
       */
      CrashMonitor.prototype.update = function () {
          var _a, _b;
          // TODO，非标准api后续可能会需要更新
          if (!window.performance || !window.performance.memory) {
              return;
          }
          // TODO后面看看需要补其他什么信息
          var monitorInfo = {
              time: new Date().valueOf(),
              memory: {
                  limit: Math.floor(window.performance.memory.jsHeapSizeLimit / 1024),
                  total: Math.floor(window.performance.memory.totalJSHeapSize / 1024),
                  used: Math.floor(window.performance.memory.usedJSHeapSize / 1024),
              },
              href: (_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.href,
              sessionId: (_b = this.weblog) === null || _b === void 0 ? void 0 : _b.sessionId
          };
          try {
              localStorage.setItem(this.monitorId, JSON.stringify(monitorInfo));
          }
          catch (e) {
              // nothing
          }
      };
      CrashMonitor.key = 'crachMonitor';
      return CrashMonitor;
  }(BasePlugin));

  var defaultOptions = {
      // 更新间隔
      interval: 10 * 1000,
      // 浮点精度 0 取整
      decimals: 2,
  };
  function fakeRaf(callback) {
      return setTimeout(callback, 1000 / 16);
  }
  var fakeCaf = clearTimeout;
  var raf = function (callback) {
      var fn = window.requestAnimationFrame
          || window.mozRequestAnimationFrame
          // @ts-ignore
          || window.webkitRequestAnimationFrame
          || fakeRaf;
      return fn.call(this, callback);
  };
  var caf = function (handle) {
      var fn = window.cancelAnimationFrame
          || window.mozCancelAnimationFrame
          // @ts-ignore
          || window.webkitCancelAnimationFrame
          || fakeCaf;
      return fn.call(this, handle);
  };
  var FPSMonitor = /** @class */ (function (_super) {
      __extends(FPSMonitor, _super);
      function FPSMonitor(weblog, options) {
          var _this = _super.call(this) || this;
          _this.options = _assign({}, defaultOptions);
          _this.count = 0;
          _this.visibilityChange = function () {
              var state = document.visibilityState;
              if (state === 'visible') {
                  _this.start();
              }
              else if (state === 'hidden') {
                  // hidden 之后 fps 会变成 0，属于无效数据
                  _this.stop();
              }
          };
          if (options) ;
          else if (weblog) {
              if (weblog === null || weblog === void 0 ? void 0 : weblog.collect) {
                  _this.apply(weblog);
              }
          }
          Object.assign(_this.options, options);
          addMonitor(window, 'visibilitychange', _this.visibilityChange);
          _this.start();
          return _this;
      }
      FPSMonitor.prototype.destroy = function () {
          this.stop();
          removeMonitor(window, 'visibilitychange', this.visibilityChange);
      };
      FPSMonitor.prototype.start = function () {
          if (this.loopId || this.fpsTickId)
              return;
          this.loop();
          this.fpsTick();
      };
      FPSMonitor.prototype.fpsTick = function () {
          var _this = this;
          this.fpsTickId = raf(function () {
              _this.count++;
              _this.fpsTick();
          });
      };
      FPSMonitor.prototype.loop = function () {
          var _this = this;
          this.loopBeginTime = new Date().valueOf();
          this.loopId = window.setTimeout(function () {
              _this.loopEndTime = new Date().valueOf();
              var fps = _this.calculate();
              _this.weblog.collect('CUSTOM', {
                  key: 'fps',
                  value: { key: 'fps', value: fps }
              });
              _this.count = 0;
              _this.loop();
          }, this.options.interval);
      };
      FPSMonitor.prototype.stop = function () {
          caf(this.fpsTickId);
          window.clearTimeout(this.loopId);
          this.loopId = 0;
          this.fpsTickId = 0;
      };
      FPSMonitor.prototype.calculate = function () {
          var during = this.loopEndTime - this.loopBeginTime;
          // raf执行次数
          var runCount = during / this.count;
          return +(1000 / runCount).toFixed(this.options.decimals);
      };
      FPSMonitor.key = 'fpsMonitor';
      return FPSMonitor;
  }(BasePlugin));

  var perf = typeof window !== 'undefined'
      ? window.performance
      : null;
  var performanceTiming = perf && perf.timing || null;
  perf
      && perf.getEntriesByType
      && perf.getEntriesByType('navigation')[0]
      || null;

  // TODO页面停留时间先依赖一个全局副作用来搞，毕竟要侵入SPA模式下比较蛋疼……
  var perfMap = {
      // DNS查找时间
      dnsLookup: {
          end: 'domainLookupEnd',
          start: 'domainLookupStart',
      },
      // TCP建连时间
      tcpConnection: {
          end: 'connectEnd',
          start: 'connectStart',
      },
      // 静态资源加载时间
      resourceLoad: {
          end: 'responseEnd',
          start: 'requestStart',
      },
      // 首屏JS耗时……暂时先这么对付了，具体JS的耗时后面再提供吧
      // 计算的时候以第一个script开始时间点为起始，一直到DOM Complete完成
      // 这样看起来应该是可被定义为JS耗时了……
      jsCost: {
          custom: function () {
              if (typeof performance.getEntries !== 'function') {
                  return 0;
              }
              var entries = performance.getEntries();
              var pageTimeInfo = entries[0];
              var firstJSTimeInfo = entries
                  .filter(function (item) { return item.initiatorType === 'script'; })[0];
              if (firstJSTimeInfo && pageTimeInfo) {
                  return pageTimeInfo.domComplete - firstJSTimeInfo.fetchStart;
              }
              return 0;
          },
      },
      // DOM加载完毕时间
      documentContentLoaded: {
          end: 'domComplete',
          start: 'fetchStart',
      },
      // 页面加载完毕时间
      load: {
          end: 'loadEventEnd',
          start: 'fetchStart',
      },
      timeToFirstByte: {
          end: 'loadEventEnd',
          start: 'fetchStart',
      },
      // 首屏时间，依靠主动打点
      firstScreen: {
          custom: function (key, options) {
              var endPoint = (options || {}).endPoint;
              var end = typeof endPoint !== 'undefined' ? endPoint : new Date().valueOf();
              return performanceTiming && (end - performanceTiming.fetchStart) || 0;
          },
      },
      // 白屏时间，依靠主动打点
      whiteScreen: {
          custom: function (key, options) {
              var endPoint = (options || {}).endPoint;
              var end = typeof endPoint !== 'undefined' ? endPoint : new Date().valueOf();
              return performanceTiming && (end - performanceTiming.fetchStart) || 0;
          },
      },
  };
  var TimingMonitor = /** @class */ (function (_super) {
      __extends(TimingMonitor, _super);
      /**
       * 兼容写法，如果在 Weblog 初始化设置 plugins 时，不需要设置 weblog
       * @param weblog
       */
      function TimingMonitor(weblog) {
          var _this = _super.call(this) || this;
          _this.load = function () {
              // 严格意义上来说类似的时间对于onload计算，都是等到window.onload执行完毕才开始计算
              // 所以页面加载完毕时间使用的是loadEventEnd事件，所以手动进入下一个event loop
              // 确保获取loadEventEnd事件
              setTimeout(function () {
                  var perfInfo = _this.collect();
                  if (!perfInfo) {
                      return;
                  }
                  [
                      'load',
                      'documentContentLoaded',
                      'dnsLookup',
                      'tcpConnection',
                      'jsCost',
                      'timeToFirstByte',
                  ].forEach(function (key) {
                      var _a;
                      // TODO后面做一个支持度list来维护，现在先手动过滤一下
                      if (key === 'jsCost' && perfInfo[key] === 0) {
                          return;
                      }
                      _this.weblog.collect('CUSTOM', {
                          key: costMap[key],
                          value: (_a = {},
                              _a[costMap[key]] = perfInfo[key],
                              _a)
                      });
                  });
              });
          };
          if (!performanceTiming) {
              error('The Timing Monitor need performance APIs to Support!');
              return _this;
          }
          if (weblog) {
              _this.apply(weblog);
          }
          return _this;
      }
      TimingMonitor.prototype.apply = function (weblog) {
          this.weblog = weblog;
          addMonitor(window, 'load', this.load);
      };
      TimingMonitor.prototype.destroy = function () {
          removeMonitor(window, 'load', this.load);
      };
      TimingMonitor.prototype.calculate = function (key, options) {
          var perf = perfMap[key];
          if (!perf) {
              throw new Error('The perf key is not correct!');
          }
          if (typeof perf.custom === 'function') {
              return perf.custom(key, options);
          }
          var endPoint = performanceTiming[perfMap[key].end];
          var startPoint = performanceTiming[perfMap[key].start];
          return endPoint - startPoint;
      };
      // 目前只针对这两个需要手动打点;
      TimingMonitor.prototype.mark = function (key, options) {
          var _a;
          var data = this.collect(key, options);
          if (!data)
              return;
          this.weblog.collect('CUSTOM', {
              key: costMap[key],
              value: (_a = {},
                  _a[costMap[key]] = data[key],
                  _a)
          });
      };
      TimingMonitor.prototype.collect = function (key, options) {
          var _a;
          var _this = this;
          // 如果不支持timing api的话，就直接不上报了，免得数据污染
          if (!performanceTiming) {
              return;
          }
          if (key) {
              return _a = {},
                  _a[key] = this.calculate(key, options),
                  _a;
          }
          var allPerf = {};
          return Object.keys(perfMap).reduce(function (map, key) {
              map[key] = _this.calculate(key, options);
              return map;
          }, allPerf);
      };
      TimingMonitor.key = 'timingMonitor';
      return TimingMonitor;
  }(BasePlugin));
  // 优先使用pagehide 其次使用beforeunload;
  var costMap = {
      load: 'total_download_cost',
      documentContentLoaded: 'operational_cost',
      dnsLookup: 'dns_query_cost',
      tcpConnection: 'tcp_cost',
      jsCost: 'js_cost',
      whiteScreen: 'white_screen_cost',
      firstScreen: 'first_screen_cost',
      timeToFirstByte: 'ttfb_cost',
  };
  /**
   * 如果使用了 bootstrap 则自动注册插件
   */
  autoRegister(TimingMonitor);

  var _e2 = function e() {
    return (_e2 = Object.assign || function (t) {
      for (var e, n = 1, r = arguments.length; n < r; n++) {
        for (var o in e = arguments[n]) {
          Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
        }
      }

      return t;
    }).apply(this, arguments);
  };

  function t(t, a, s, c) {
    return new (s = s || Promise)(function (n, e) {
      function r(t) {
        try {
          i(c.next(t));
        } catch (t) {
          e(t);
        }
      }

      function o(t) {
        try {
          i(c["throw"](t));
        } catch (t) {
          e(t);
        }
      }

      function i(t) {
        var e;
        t.done ? n(t.value) : ((e = t.value) instanceof s ? e : new s(function (t) {
          t(e);
        })).then(r, o);
      }

      i((c = c.apply(t, a || [])).next());
    });
  }

  function n(r, o) {
    var i,
        a,
        s,
        c = {
      label: 0,
      sent: function sent() {
        if (1 & s[0]) throw s[1];
        return s[1];
      },
      trys: [],
      ops: []
    },
        t = {
      next: e(0),
      "throw": e(1),
      "return": e(2)
    };
    return "function" == typeof Symbol && (t[Symbol.iterator] = function () {
      return this;
    }), t;

    function e(n) {
      return function (t) {
        var e = [n, t];
        if (i) throw new TypeError("Generator is already executing.");

        for (; c;) {
          try {
            if (i = 1, a && (s = 2 & e[0] ? a["return"] : e[0] ? a["throw"] || ((s = a["return"]) && s.call(a), 0) : a.next) && !(s = s.call(a, e[1])).done) return s;

            switch (a = 0, (e = s ? [2 & e[0], s.value] : e)[0]) {
              case 0:
              case 1:
                s = e;
                break;

              case 4:
                return c.label++, {
                  value: e[1],
                  done: !1
                };

              case 5:
                c.label++, a = e[1], e = [0];
                continue;

              case 7:
                e = c.ops.pop(), c.trys.pop();
                continue;

              default:
                if (!(s = 0 < (s = c.trys).length && s[s.length - 1]) && (6 === e[0] || 2 === e[0])) {
                  c = 0;
                  continue;
                }

                if (3 === e[0] && (!s || e[1] > s[0] && e[1] < s[3])) {
                  c.label = e[1];
                  break;
                }

                if (6 === e[0] && c.label < s[1]) {
                  c.label = s[1], s = e;
                  break;
                }

                if (s && c.label < s[2]) {
                  c.label = s[2], c.ops.push(e);
                  break;
                }

                s[2] && c.ops.pop(), c.trys.pop();
                continue;
            }

            e = o.call(r, c);
          } catch (t) {
            e = [6, t], a = 0;
          } finally {
            i = s = 0;
          }
        }

        if (5 & e[0]) throw e[1];
        return {
          value: e[0] ? e[1] : void 0,
          done: !0
        };
      };
    }
  }

  function r$1(t, e) {
    var n = "function" == typeof Symbol && t[Symbol.iterator];
    if (!n) return t;
    var r,
        o,
        i = n.call(t),
        a = [];

    try {
      for (; (void 0 === e || 0 < e--) && !(r = i.next()).done;) {
        a.push(r.value);
      }
    } catch (t) {
      o = {
        error: t
      };
    } finally {
      try {
        r && !r.done && (n = i["return"]) && n.call(i);
      } finally {
        if (o) throw o.error;
      }
    }

    return a;
  }

  function o$1(t, e, n) {
    if (n || 2 === arguments.length) for (var r, o = 0, i = e.length; o < i; o++) {
      !r && o in e || ((r = r || Array.prototype.slice.call(e, 0, o))[o] = e[o]);
    }
    return t.concat(r || Array.prototype.slice.call(e));
  }

  var l$3,
      f$4,
      i = "ksurl.cn/csHfgepO",
      a$2 = console,
      c$1 = a$2.log.bind(a$2, i + ", radar:"),
      s$2 = a$2.warn.bind(a$2, i + ", radar:"),
      u$4 = a$2.error.bind(a$2, i + ", radar:"),
      p$3 = function () {
    function t() {
      for (var t, e = [], n = 0; n < arguments.length; n++) {
        e[n] = arguments[n];
      }

      this.middlewares = [], (t = this.middlewares).push.apply(t, o$1([], r$1(e), !1));
    }

    return t.prototype.use = function () {
      for (var t, e = [], n = 0; n < arguments.length; n++) {
        e[n] = arguments[n];
      }

      var r = this.middlewares.pop();
      (t = this.middlewares).push.apply(t, o$1([], r$1(e), !1)), this.middlewares.push(r);
    }, t.prototype.invoke = function (t) {
      return a = this.middlewares, r = t, i = -1, function t(e) {
        if (e <= i) return new Error("`next` 被重复调用");
        var n = a[i = e];
        if (n = e === a.length ? o : n) try {
          return n(r, t.bind(null, e + 1));
        } catch (e) {
          return e;
        }
      }(0);
      var r, o, i, a;
    }, t;
  }(),
      d$3 = ((f$4 = l$3 = l$3 || {}).LOAD = "load", f$4.RES = "resource", f$4.API = "api", f$4.ERROR = "error", f$4.SDK_ERROR = "sdk_error", f$4.CUSTOM = "custom", f$4.BATCH = "batch", f$4.EVENT = "event", f$4.BLOOD = "blood", function () {
    function t(t) {
      void 0 === t && (t = {});
      var e = this;
      this.broadcastSampleFb = function () {
        var t = e.getSample(e.baseOptions.sampling);
        t !== e.sampling && (e.sampling = t, e.sampling && (e.isHit = e.samplingControl(e.sampling)));
      }, void 0 === t && De("100"), t.key || De("101"), !t.core || "object" == _typeof(t.core.sampleData) && "function" == typeof t.core.collect || De("121"), this.baseOptions = t, this.key = t.key, this.version = t.version, this.name = t.name, this.isHit = !1, t.core && this.updateCore(t.core);
    }

    return t.prototype.updateCore = function (t) {
      var e;
      "object" == _typeof(t.sampleData) && "function" == typeof t.collect || De("121"), null != (e = this.core) && e.broadcastSample.off(this.broadcastSampleFb), this.core = t, this.sampling = this.getSample(this.baseOptions.sampling), this.sampling && (this.isHit = this.samplingControl(this.sampling)), null != (t = null == (e = this.core) ? void 0 : e.broadcastSample) && t.on(this.broadcastSampleFb);
    }, t.prototype.getSample = function (t) {
      var e = null != (e = null == (e = this.core) ? void 0 : e.sampleData.core) ? e : 1;
      if (this.key === l$3.LOAD) return e;
      if ("number" != typeof (t = void 0 === t ? 1 : t) || t < 0 || 1 < t) return s$2("102", "".concat(this.key, "，采用Core的采样率").concat(null == (n = this.core) ? void 0 : n.sampleData.core)), e;
      var n = null != (n = this.core) && n.isInYoda ? void 0 === (null == (n = this.core) ? void 0 : n.sampleData[this.key]) ? 1 : this.core.sampleData[this.key] : t;
      return e && e < n ? (s$2("115", "".concat(this.key)), e) : n;
    }, t.prototype.samplingControl = function (t) {
      var e;
      return !(null == (e = this.core) || !e.sampleData.isHit) && (null == (e = this.core) ? void 0 : e.samplingControl(t / this.core.sampleData.core));
    }, t.prototype.baseCollect = function (t) {
      if (this.core) {
        if (this.isHit) {
          var r = t.value || {},
              r = Object.keys(r).filter(function (t) {
            return null !== r[t] && void 0 !== r[t];
          }).reduce(function (t, n) {
            return _e2(_e2({}, t), ((t = {})[n] = r[n], t));
          }, {});

          try {
            this.core.collect(t.key || this.key, _e2(_e2({
              collect_version: this.version,
              collect_name: this.name
            }, t.dimension), {
              sample_rate: this.sampling
            }), r);
          } catch (t) {
            s$2("126");
          }
        }
      } else s$2("110", "".concat(this.key));
    }, t;
  }());

  function h$3() {
    var t,
        e = "undefined" != typeof window ? window.performance : null;
    return e && e.timing ? "function" == typeof e.timing.toJSON ? ((t = e.timing.toJSON()) && !t.redirectStart && (t.redirectStart = t.navigationStart), t) : e.timing : null;
  }

  var v$4 = ["//wlog.kuaishou.com/rest/n/log/web/collect", "/rest/wd/common/log/collect/misc2", "/rest/wd/common/log/collect/radar", "/rest/kd/log/collect"],
      m$2 = window,
      _$3 = "__radarSeedStore__",
      b$3 = "isCoreReady",
      x = "isRuning",
      S$2 = "radarSessionId",
      R = "resource",
      O$1 = "error",
      E = "event",
      k$1 = "Queue",
      T = O$1 + k$1,
      j = R + k$1,
      A$1 = E + k$1,
      M = {
    start_time: {
      custom: function custom(t, e) {
        return Math.round(e.startTime);
      }
    },
    fetch_start: {
      custom: function custom(t, e) {
        return Math.round(e.fetchStart);
      }
    },
    dns: {
      end: "domainLookupEnd",
      start: "domainLookupStart",
      cachedSkip: !0,
      crossOriginSkip: !0
    },
    tcp: {
      end: "connectEnd",
      start: "connectStart",
      cachedSkip: !0,
      crossOriginSkip: !0
    },
    ssl: {
      custom: function custom(t, e) {
        return e.connectEnd && e.secureConnectionStart ? e.connectEnd - e.secureConnectionStart : null;
      }
    },
    ttfb: {
      end: "responseStart",
      start: "requestStart",
      cachedSkip: !0,
      crossOriginSkip: !0
    },
    trans: {
      end: "responseEnd",
      start: "responseStart",
      cachedSkip: !0,
      crossOriginSkip: !0
    },
    fb: {
      end: "responseStart",
      start: "fetchStart",
      cachedSkip: !0,
      crossOriginSkip: !0
    },
    total: {
      end: "responseEnd",
      start: "fetchStart"
    },
    size: {
      custom: function custom(t, e) {
        return e.encodedBodySize;
      },
      cachedSkip: !0,
      crossOriginSkip: !0
    },
    protocol: {
      custom: function custom(t, e) {
        return e.nextHopProtocol;
      }
    },
    file: {
      custom: function custom(t, e) {
        return e.name;
      }
    },
    res_type: {
      custom: function custom(t, e) {
        return e.initiatorType;
      }
    },
    cached: {
      custom: function custom(t, e) {
        return 0 === e.transferSize || 0 === e.duration || null == e.transferSize && (0 === e.domainLookupStart || e.responseStart === e.fetchStart);
      },
      crossOriginSkip: !0
    },
    has_timing_allow: {
      custom: function custom(t, e) {
        return G(e);
      }
    }
  },
      N = /^(https?:)?\/\//;

  function D(t, e) {
    if (!t) return !1;
    var n = t.replace(N, "");
    return e.some(function (t) {
      return 0 <= n.indexOf(t.replace(N, ""));
    });
  }

  function H(t) {
    if ("string" != typeof t) return "";

    try {
      var e = t.lastIndexOf(".");
      return t.substr(e + 1);
    } catch (t) {
      return "";
    }
  }

  function W(e) {
    return "object" == _typeof(e) && Object.keys(e).every(function (t) {
      return "number" == typeof e[t];
    });
  }

  function X(t) {
    return "function" == typeof t;
  }

  function U(t) {
    return t && X(t.then) && X(t["catch"]);
  }

  function G(t) {
    return void 0 === t.nextHopProtocol ? null : "" !== t.nextHopProtocol;
  }

  function J(t) {
    return "resource" === t.entryType ? "fetch" !== (null == t ? void 0 : t.initiatorType) && "xmlhttprequest" !== (null == t ? void 0 : t.initiatorType) || "js" === H(t.name) || "css" === H(t.name) ? "resource" : "api" : "other";
  }

  function K(n, r) {
    var o = {};
    return Object.keys(n).forEach(function (t) {
      var e = Y(t, n, r);
      null != e && (o[t] = e);
    }), o;
  }

  function Y(t, e, n) {
    var r = e[t];
    if (r || De("129，".concat(t)), (!r.crossOriginSkip || G(n)) && (!r.cachedSkip || !Y("cached", e, n))) return "function" == typeof r.custom ? r.custom(t, n) : (e = r.end, t = r.start, !r.notCatchIfUndefined || void 0 !== n[e] && void 0 !== n[t] ? (+n[e] || 0) - (+n[t] || 0) : void 0);
  }

  function B(t, e, n, r) {
    return t.addEventListener(e, n, r);
  }

  function $(t, e, n, r) {
    return t.removeEventListener(e, n, r);
  }

  function Q(t) {
    return t.message || null != t.lineno;
  }

  var Z = ["ktrace-str"];

  function ee(t) {
    return "__radar_".concat(t = void 0 === t ? "" : t).concat(Math.random().toString(36).substring(2, 8));
  }

  function te(o, l) {
    var i = window.XMLHttpRequest;
    return i ? (window.XMLHttpRequest = function () {
      var n,
          s,
          r,
          c = new i(),
          t = (c._radarRequest = {}, c._radarResponse = {}, ee()),
          u = (c._radarRequest.id = t, {});
      return c.addEventListener("readystatechange", function () {
        if (4 === c.readyState && "function" == typeof l) {
          c._radarResponse.status = c.status, c._radarResponse.statusText = c.statusText;

          var t,
              e,
              n,
              r,
              o,
              i = function (t, e) {
            switch (null == e && (e = {}), _typeof(t)) {
              case "object":
                var n,
                    r = [];

                for (n in t) {
                  var o = t[n],
                      i = n.toLowerCase();
                  r.push("".concat(i, ":\t").concat(o));
                }

                return r.join("\n") + "\n";

              case "string":
                for (var a = 0, s = (r = t.split("\n")).length; a < s; a++) {
                  var c = r[a];
                  /([^:]+):\s*(.+)/.test(c) && (c = null != (c = RegExp.$1) ? c.toLowerCase() : void 0, o = RegExp.$2, c && null == e[c] && (e[c] = o));
                }

                return e;
            }
          }(c.getAllResponseHeaders());

          for (t in i) {
            n = i[t], c._radarResponse && c._radarResponse.headers && !c._radarResponse.headers[t] && (e = t.toLowerCase(), c._radarResponse.headers[e] = n);
          }

          if (c.responseType && "text" !== c.responseType) "document" === c.responseType ? (c._radarResponse.xml = c.responseXML, c._radarResponse.data = c.responseXML) : c._radarResponse.data = c.response;else {
            c._radarResponse.text = c.responseText, c._radarResponse.data = c.responseText;

            try {
              c._radarResponse.xml = c.responseXML;
            } catch (t) {}
          }
          "responseURL" in c && (c._radarResponse.finalUrl = c.responseURL);

          try {
            var a = null != (r = u["ktrace-str"]) ? r : "";
            a && window.parseWedTraceId && (c._radarRequest.trace_id = window.parseWedTraceId(null != (o = a.split("|")[1]) ? o : ""));
          } catch (t) {
            s$2("traceId 解析异常");
          }

          l(c._radarRequest, c._radarResponse);
        }
      }), "function" == typeof c.setRequestHeader && (n = c.setRequestHeader, c.setRequestHeader = function () {
        for (var t = [], e = 0; e < arguments.length; e++) {
          t[e] = arguments[e];
        }

        return Z.includes(t[0]) && (u[t[0]] = t[1]), n.apply(this, t);
      }), "function" == typeof c.open && (s = c.open, c.open = function (t, n, r, o, i) {
        var a = [].slice.call(arguments);
        return this._radarRequest = _e2({
          method: t,
          url: n,
          async: r,
          user: o,
          pass: i
        }, this._radarRequest), this._radarResponse.headers = {}, s.apply(this, a);
      }), "function" == typeof c.send && (r = c.send, c.send = function () {
        var t = [].slice.call(arguments);
        return "function" == typeof o && (this._radarRequest._config = t[0], o(this._radarRequest)), r.apply(this, t);
      }), c;
    }, ["DONE", "HEADERS_RECEIVED", "LOADING", "OPENED", "UNSENT"].forEach(function (t) {
      window.XMLHttpRequest[t] = i[t];
    }), window.XMLHttpRequest.prototype = i.prototype, function () {
      i && (window.XMLHttpRequest = i);
    }) : (u$4("118"), !1);
  }

  function ne(n, r) {
    var t = function (t) {
      if ("function" != typeof t.fetch) return null;
      var n,
          e = t.fetch;
      return t.fetch = (n = t.fetch, function () {
        for (var t = [], e = 0; e < arguments.length; e++) {
          t[e] = arguments[e];
        }

        return ie.apply(void 0, o$1([n], r$1(t), !1));
      }), {
        register: function register(e) {
          return re.push(e), function () {
            var t = re.indexOf(e);
            0 <= t && re.splice(t, 1);
          };
        },
        clear: function clear() {
          re = [];
        },
        unRegister: function unRegister() {
          e && (t.fetch = e);
        }
      };
    }("function" == typeof importScripts ? self : window);

    return t && t.register({
      request: function request(t, e) {
        "function" == typeof n && n(t);
      },
      response: function response(t, e) {
        "function" == typeof r && r(e, t);
      },
      responseError: function responseError(t, e) {
        "function" == typeof r && r(e, {
          status: 0,
          statusText: t
        });
      }
    }), null == t ? void 0 : t.unRegister;
  }

  var re = [],
      oe = ["application/json", "text/html", "text/plain"];

  function ie(e) {
    for (var r = this, o = [], i = 1; i < arguments.length; i++) {
      o[i - 1] = arguments[i];
    }

    var a = re.reduce(function (t, e) {
      return [e].concat(t);
    }, []),
        s = "string" == typeof o[0] ? new Request(o[0], o[1]) : o[0],
        c = (s.id = ee(), a.forEach(function (t) {
      t = t.request, s = t(s) || s;
    }), s.clone()),
        u = e.apply(void 0, o$1([], r$1(o), !1)),
        l = null,
        p = null,
        d = !1;
    return u.then(function (t) {
      var e,
          n = null == (e = t.headers) ? void 0 : e.get("content-type");
      return n && oe.some(function (t) {
        return -1 < n.indexOf(t);
      }) ? (d = !0, e = t.clone(), l = e.clone(), e.clone().text()) : (l = t, "[object Object]");
    }).then(function (e) {
      return t(r, void 0, void 0, function () {
        return n(this, function (t) {
          switch (t.label) {
            case 0:
              p = e, t.label = 1;

            case 1:
              return t.trys.push([1, 3,, 4]), [4, c.text()];

            case 2:
              return [2, t.sent()];

            case 3:
              return t.sent(), [2, "Radar: Request.text()失败"];

            case 4:
              return [2];
          }
        });
      });
    }).then(function (t) {
      s._config = t;
      var e = null;
      return d ? (e = l.clone()).data = p : e = l, a.forEach(function (t) {
        (t = t.response) && (e = t(e, s) || e);
      }), l;
    }, function (e) {
      throw a.forEach(function (t) {
        (t = t.responseError) && (e = t(e, s) || e);
      }), e;
    });
  }

  function ae() {
    var n = [];

    function e(t) {
      -1 !== (t = n.indexOf(t)) && n.splice(t, 1);
    }

    function t(t) {
      return n.push(t), e.bind(void 0, t);
    }

    return {
      on: t,
      off: e,
      once: function once(e) {
        var n = t(function (t) {
          e(t), n();
        });
        return n;
      },
      emit: function emit(e) {
        n.forEach(function (t) {
          return t(e);
        });
      }
    };
  }

  function se(t) {
    return (t = new RegExp("(?:^|; ?)".concat(t, "=(1|0)(;|$)")).exec(document.cookie)) && t[1];
  }

  var ue = ["radar_init", "h5_load", "fmp", "main_api", "h5_custom_metric"];

  function le(t) {
    var e = t.dimension,
        n = t.value;
    if (t = e.event_name, ue.indexOf(t) < 0) return !1;
    if (!W(n)) return !1;

    switch (t) {
      case "fmp":
        var r = n.fmp_time;
        return !(!n.fmp || !r);

      case "h5_load":
        return r = n.total, !(!n.load_event_time || !r);

      case "h5_custom_metric":
        return r = n.custom_metric_timestamp, !(!e.custom_metric_name || !r);
    }

    return !0;
  }

  function fe(t) {
    var e = t.dimension,
        n = (t = t.value, e.custom_failed),
        r = e.api,
        o = e.status,
        i = e.res_type,
        a = e.protocol,
        s = (e = e.cached, t.duration),
        c = t.size;
    return "boolean" == typeof (void 0 !== n && n) && "string" == typeof (void 0 === r ? "" : r) && "number" == typeof (void 0 === o ? 0 : o) && "string" == typeof (void 0 === i ? "" : i) && "string" == typeof (void 0 === a ? "" : a) && "boolean" == typeof (void 0 !== e && e) && "number" == typeof (void 0 === s ? 0 : s) && "number" == typeof (void 0 === c ? 0 : c) && W(t);
  }

  function pe(t) {
    var e = (t = t.dimension).error_type;
    if ([t.error_cons_type, e, t.msg].some(function (t) {
      return null == t;
    })) return !1;
    var n,
        e = t.col,
        r = t.line;
    return t.sample_rate, t.event_client_timestamp, t = function (t, e) {
      var n = {};

      for (o in t) {
        Object.prototype.hasOwnProperty.call(t, o) && e.indexOf(o) < 0 && (n[o] = t[o]);
      }

      if (null != t && "function" == typeof Object.getOwnPropertySymbols) for (var r = 0, o = Object.getOwnPropertySymbols(t); r < o.length; r++) {
        e.indexOf(o[r]) < 0 && Object.prototype.propertyIsEnumerable.call(t, o[r]) && (n[o[r]] = t[o[r]]);
      }
      return n;
    }(t, ["col", "line", "sample_rate", "event_client_timestamp"]), !(e && "number" != typeof e || r && "number" != typeof r) && "object" == _typeof(n = t) && Object.keys(n).every(function (t) {
      return void 0 === n[t] || "string" == typeof n[t];
    });
  }

  function de(t) {
    var e = t.dimension,
        n = (t = t.value, e.failed);
    if ("boolean" != typeof n) return !1;

    if (n) {
      var r = e.res_path;
      if ("string" != typeof e.file || "string" != typeof r) return !1;
    }

    return !!n || "string" == typeof e.file && W(t);
  }

  function he(t) {
    var e = t.value;
    return t = t.dimension.name, !(void 0 !== e && !W(e) || !t);
  }

  function ve(t) {
    var e = !0;

    if ((t = t.dimension.data) instanceof Array) {
      if (0 === t.length) return !1;
      t.forEach(function (t) {
        "string" != typeof t.com && (e = !1);
      });
    }

    return e;
  }

  var me = {
    load: le,
    api: fe,
    resource: de,
    error: pe,
    event: he,
    blood: ve
  };

  function ge(t) {
    return t ? Object.keys(l$3).map(function (t) {
      return l$3[t];
    }).indexOf(t.key) < 0 ? (u$4("117"), !1) : me[t.key](t) : (u$4("116"), !1);
  }

  function we(n) {
    function r() {
      n = n.replace(/^\s*/, "");
    }

    function t(t) {
      return r(), n[0] === t && (n = n.slice(1), 1);
    }

    function o() {
      r();
      var t = /^([^\s,;=\\]+)(.*)/.exec(n);
      if (t) return n = t[2], t[1];
    }

    if (n && "string" == typeof n) {
      for (var e, i = []; e = o();) {
        for (var a = {
          name: e
        }, s = {}; t(";");) {
          var c,
              u,
              l = void 0;
          (l = o()) && (c = void 0, t("=") && (c = function () {
            if (r(), '"' !== n[0]) return o();
            n = n.slice(1);

            for (var t = ""; n.length;) {
              var e = /^([^"\\]*)(.*)/.exec(n);

              if (e) {
                if (t += e[1], '"' === e[2][0]) return n = e[2].slice(1), t;
                t += e[2][1], n = e[2].slice(2);
              }
            }
          }(), u = void 0, (u = /([,;].*)/.exec(n)) && (n = u[1])), s[u = l.toLowerCase()] || (s[u] = 1, "dur" === u ? a.duration = parseFloat(c) || 0 : "desc" === u ? a.description = c || "" : a[l] = c));
        }

        if ("sec" === a.unit && a.duration && (a.duration *= 1e3), delete a.unit, i.push(a), !t(",")) break;
      }

      return i.length ? i : void 0;
    }
  }

  function _e() {
    m$2[_$3] && (m$2[_$3][b$3] = !0);
  }

  function be() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (t) {
      var e = 16 * Math.random() | 0;
      return ("x" === t ? e : 3 & e | 8).toString(16);
    });
  }

  function Re(t, e) {
    var n;
    return null != (n = null == m$2 ? void 0 : m$2[_$3]) && n[t], null != (n = null == m$2 ? void 0 : m$2[_$3]) && n[x] ? m$2[_$3][t] : void 0 === e ? null : e;
  }

  function Oe(t, e) {
    try {
      m$2[_$3][t] = e;
    } catch (t) {
      u$4("1000");
    }
  }

  function Te(t) {
    return JSON.parse(JSON.stringify(t));
  }

  function je(t) {
    try {
      if (window && window.localStorage) {
        var e = window.localStorage.getItem(t);
        if (e) try {
          return JSON.parse(e);
        } catch (t) {
          return e;
        }
      }
    } catch (t) {
      return null;
    }

    return null;
  }

  function Ae(t, e) {
    try {
      if (window && window.localStorage) return window.localStorage.setItem(t, JSON.stringify(e)), !0;
    } catch (t) {
      return !1;
    }

    return !1;
  }

  function Ie(t) {
    try {
      var e;
      if (window && window.localStorage && "undefined" != typeof Storage && window.localStorage instanceof Storage) return Ae(t, (e = 1e8 < (e = Number(je(t)) || 0) + 1 ? 0 : e) + 1), e;
    } catch (t) {}
  }

  function Le(t) {
    for (var e = [], n = 1; n < arguments.length; n++) {
      e[n - 1] = arguments[n];
    }

    1 == +Ce(location.search.slice(1)).debug && s$2.apply(void 0, o$1(["[radar] ".concat(t, ": ")], r$1(e), !1));
  }

  function Ce(t) {
    var e,
        n,
        r = {};
    t = t.split("&");

    try {
      for (var o = function (t) {
        var e = "function" == typeof Symbol && Symbol.iterator,
            n = e && t[e],
            r = 0;
        if (n) return n.call(t);
        if (t && "number" == typeof t.length) return {
          next: function next() {
            return {
              value: (t = t && r >= t.length ? void 0 : t) && t[r++],
              done: !t
            };
          }
        };
        throw new TypeError(e ? "Object is not iterable." : "Symbol.iterator is not defined.");
      }(t), i = o.next(); !i.done; i = o.next()) {
        var a = r$1(i.value.split("="), 2),
            s = a[0],
            c = a[1];
        s in r ? r[s] instanceof Array ? r[s].push(c) : r[s] = [r[s], c] : r[s] = c;
      }
    } catch (t) {
      e = {
        error: t
      };
    } finally {
      try {
        i && !i.done && (n = o["return"]) && n.call(o);
      } finally {
        if (e) throw e.error;
      }
    }

    return r;
  }

  function qe(t, e) {
    null !== window && void 0 !== window && window.__RADAR_PERFORMANCE_TIMING_ || (window.__RADAR_PERFORMANCE_TIMING_ = {}), window.__RADAR_PERFORMANCE_TIMING_[t] = e;
  }

  function Ne(t) {
    if (-1 === (n = (t = void 0 === t ? location.href : t).lastIndexOf("?"))) return {
      page: t
    };
    var e = t.slice(0, n),
        n = t.slice(n + 1);
    return {
      url: t,
      page: e,
      params: Ce(n)
    };
  }

  function De(t) {
    throw new Error("radar error " + t);
  }

  var _v$ = function v$3() {
    return (_v$ = Object.assign || function (t) {
      for (var e, n = 1, r = arguments.length; n < r; n++) {
        for (var o in e = arguments[n]) {
          Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
        }
      }

      return t;
    }).apply(this, arguments);
  };

  function _$2(t, e) {
    var n = "function" == typeof Symbol && t[Symbol.iterator];
    if (!n) return t;
    var r,
        o,
        i = n.call(t),
        a = [];

    try {
      for (; (void 0 === e || 0 < e--) && !(r = i.next()).done;) {
        a.push(r.value);
      }
    } catch (t) {
      o = {
        error: t
      };
    } finally {
      try {
        r && !r.done && (n = i["return"]) && n.call(i);
      } finally {
        if (o) throw o.error;
      }
    }

    return a;
  }

  function y$4(t, e, n) {
    if (n || 2 === arguments.length) for (var r, o = 0, i = e.length; o < i; o++) {
      !r && o in e || ((r = r || Array.prototype.slice.call(e, 0, o))[o] = e[o]);
    }
    return t.concat(r || Array.prototype.slice.call(e));
  }

  var b$2 = ["c_dimension1", "c_dimension2", "c_dimension3", "release_tag", "product_version", "sub_app"],
      w = function () {
    function t(t) {
      var e,
          a = this,
          n = (this.queueConfig = {
        wait: 1e3,
        maxBatchLength: 200
      }, this.logQueue = [], this.preStoredLogQueue = [], this.batchTimer = 0, this.eventName = "onpagehide" in window ? "pagehide" : "beforeunload", this.customDimension = {}, this.runtimeIdMap = {}, this.randomSampling = Math.random(), this.commonDimension = {}, this.isInYoda = !1, this.sampleData = {
        isHit: !0,
        core: 1
      }, this.ignoreList = ["https://web-trace.ksapisrv.com/ktrace/collect"], this.broadcastSample = ae(), this.didRate = void 0, this.collect = function (t, e, n) {
        var r = Te({
          key: t,
          dimension: e = void 0 === e ? {} : e,
          value: n = void 0 === n ? {} : n
        });

        if (!a.sampleData || !1 !== a.sampleData.isHit) {
          if (!ge(r)) return u$4("107", "key: ".concat(r.key)), void a.collect(l$3.EVENT, {
            sample_rate: e.sample_rate,
            message: "radar上报日志类型错误",
            name: "radar_log_error",
            extra_info: JSON.stringify(r)
          }, {});
          Object.keys(r.value).forEach(function (t) {
            r.value[t] = r.value[t].toString();
          }), a.decorateLog(r);
          var o = a.getCommonData(),
              i = o.app_version_name;
          if (delete o.app_version_name, (t = new p$3(function (t, e) {
            t.dimension.app_version_name = i, t.dimension.did_rate = a.didRate;
            var n = (null == (n = null == t ? void 0 : t.dimension) ? void 0 : n.event_client_timestamp) || Date.now(),
                r = (null == (r = null == t ? void 0 : t.dimension) ? void 0 : r.radar_session_id) || a.radarSessionId;
            return _v$(_v$(_v$({}, t), o), {
              event_client_timestamp: n,
              event_trigger_source: "H5",
              radar_session_id: r
            });
          })).use(function (t, e) {
            return t.key && "load" === t.key && (t.dimension = _v$(_v$({}, t.dimension), {
              load_device_increase_id: Ie("LOAD_DEVICE_INCREASE_ID"),
              load_session_increase_id: a.genSessionIncreaseId("LOAD_SESSION_INCREASE_ID")
            })), t.key && "load" !== t.key && (t.dimension = _v$(_v$({}, t.dimension), {
              other_device_increase_id: Ie("OTHER_DEVICE_INCREASE_ID"),
              other_session_increase_id: a.genSessionIncreaseId("OTHER_SESSION_INCREASE_ID")
            })), e();
          }), (r = t.invoke(r)) instanceof Error) throw r;

          try {
            window.dispatchEvent(new CustomEvent("get-radar-next-data", {
              detail: {
                kv: Te(r)
              }
            }));
          } catch (t) {}

          if (delete r.dimension.broadcast_info, a.weblog ? a.logQueue.push(r) : (r.base_href = location.href, a.preStoredLogQueue.push(r)), Le("radarLogNext", JSON.parse(JSON.stringify(r))), a.logQueue.length > a.queueConfig.maxBatchLength - 1) return a.flush(), clearTimeout(a.batchTimer), void (a.batchTimer = 0);
          a.batchTimer || (a.batchTimer = window.setTimeout(function () {
            a.flush(), clearTimeout(a.batchTimer), a.batchTimer = 0;
          }, a.queueConfig.wait));
        }
      }, this.flush = function () {
        var t;
        a.logQueue.length <= 0 || (t = null, (t = a.config.httpReportFirst ? t : a.reportByBridge()) && !a.config.httpReportFirst || a.reportByHttp(), a.logQueue = []);
      }, "object" == _typeof(t) && null !== t || De("108"), "string" != typeof t.projectId && De("109"), Re(S$2));
      this.radarSessionId = null != n ? n : be(), this.config = t, this.sampling = "number" == typeof (e = null != (n = this.config.sampling) ? n : 1) && 0 <= e && e <= 1 ? e : (u$4("110"), 1), this.bindWeblogger(t.weblogger), null != (n = this.config) && n.ignoreList && Array.isArray(null == (t = this.config) ? void 0 : t.ignoreList) && (this.ignoreList = this.ignoreList.concat(this.config.ignoreList.map(function (t) {
        return t.replace(/^(https?:)?\/\//, "");
      }))), this.queueConfig = _v$(_v$({}, this.queueConfig), null != (n = this.config) && n.queueConfig ? this.config.queueConfig : {}), null != (t = this.config) && t.customDimensions && this.setDimensions(null == (n = this.config) ? void 0 : n.customDimensions), B(window, this.eventName, this.flush), "undefined" != typeof window && window.yodaCollectErrorDataDestroy && window.yodaCollectErrorDataDestroy();
    }

    return t.prototype.genSessionIncreaseId = function (t) {
      return this.runtimeIdMap[t] || (this.runtimeIdMap[t] = 0), this.runtimeIdMap[t]++;
    }, t.prototype.bindWeblogger = function (t) {
      var e,
          s = this;
      if (null != t && "object" != _typeof(t)) De("106");else {
        if (this.weblog) return void s$2("122");
        this.weblog = t, this.updateUrlPackage(), void 0 !== (null == (e = null == t ? void 0 : t.logger) ? void 0 : e.radarUrl) && this.ignoreList.push(null == (e = null == t ? void 0 : t.logger) ? void 0 : e.radarUrl), void 0 !== (null == (e = null == t ? void 0 : t.logger) ? void 0 : e.url) && this.ignoreList.push(null == (e = null == t ? void 0 : t.logger) ? void 0 : e.url), this.isInYoda = !(null == (e = null == (t = this.weblog) ? void 0 : t.Utils) || !e.yoda), this.getSampleData();
      }
      0 < this.preStoredLogQueue.length && (this.preStoredLogQueue.forEach(function (t) {
        if (void 0 !== (e = s.sampleData["load" === t.key ? "core" : t.key]) && (t.dimension.sample_rate = e), "load" === t.key ? s.sampleData.core : t.dimension.sample_rate * s.sampleData.core >= s.randomSampling) {
          var e = s.getCommonData(),
              n = (t.dimension.app_version_name = e.app_version_name, t.h5_extra_attr = JSON.stringify(_v$(_v$({}, null == (e = s.weblog.commonPackage) ? void 0 : e.getH5ExtraAttr()), JSON.parse(t.h5_extra_attr))), Ne(t.base_href)),
              r = null == (e = s.weblog.logConfig) ? void 0 : e.urlMap,
              e = {};
          if ("function" == typeof r) try {
            var o = r(n);
            "string" == typeof o ? e = {
              page: o
            } : "object" == _typeof(o) && (e = {
              page: o.page,
              params: o.params
            });
          } catch (t) {} else if ("object" == _typeof(r)) {
            var i,
                a = "";

            for (i in r) {
              if (-1 < (n.page || n.url || "").indexOf(i)) {
                a = r[i];
                break;
              }
            }

            a && (e = {
              page: a
            });
          }
          t.url_package = {
            page: e && e.page || n.page
          }, o = s.referUrlPackage && s.referUrlPackage.toJSON(), t.refer_url_package = o, delete t.base_href, s.logQueue.push(t);
        }
      }), this.preStoredLogQueue = [], this.flush());
    }, t.prototype.getSampleData = function () {
      var t,
          e,
          n = this;
      this.isInYoda ? (this.sampleData = {
        isHit: !0,
        core: this.sampling,
        api: 1,
        resource: .1,
        error: 1,
        event: 1
      }, e = window.updateYodaSampleRateWithParams, window.updateYodaSampleRateWithParams = function (t) {
        c$1("104", t), n.updateYodaSampleRate(t), n.broadcastSample.emit(n.sampleData), e && e(t);
      }, window.__yodaCommonDataObject__ && window.__yodaCommonDataObject__.sampleData ? (this.updateYodaSampleRate(window.__yodaCommonDataObject__.sampleData), this.collect(l$3.EVENT, {
        name: "客户端采样率注入成功",
        event_type: "radar_sample_inject_success"
      }, {})) : "function" == typeof (null == (t = null == (t = null == (t = this.weblog) ? void 0 : t.Utils) ? void 0 : t.yoda) ? void 0 : t.getWebviewLoadPerf) && null != (t = this.weblog) && t.Utils.yoda.getWebviewLoadPerf().then(function (t) {
        null != t && t.sampleData && n.updateYodaSampleRate(t.sampleData);
      })) : this.sampleData = {
        isHit: this.samplingControl(this.sampling),
        core: this.sampling
      };
    }, t.prototype.updateYodaSampleRate = function (t) {
      var e = this,
          n = null;

      try {
        var r = t,
            n = "string" == typeof r ? JSON.parse(r) : r;
      } catch (t) {
        return void c$1("error: ", t);
      }

      n && Object.keys(n).forEach(function (t) {
        "load" === t ? e.sampleData.core = n[t] : "did_rate" === t ? e.didRate = n[t] : e.sampleData[t] = n[t];
      });
    }, t.prototype.updateUrlPackage = function () {
      var t;
      null != (t = this.weblog) && t.currentUrlPackage && (this.currentUrlPackage = this.weblog.currentUrlPackage, this.referUrlPackage = this.weblog.referUrlPackage);
    }, t.prototype.setDimensions = function (e) {
      var n = this,
          t = Object.keys(e);
      t.some(function (t) {
        return -1 === b$2.indexOf(t);
      }) && u$4("113", "".concat(t.join("、"))), t.forEach(function (t) {
        null == e[t] ? delete n.customDimension[t] : n.customDimension[t] = e[t];
      });
    }, t.prototype.setCommonDimension = function (t, e, n) {
      this.commonDimension[t] = (n = void 0 === n || n) || null == (n = this.commonDimension[t]) ? e : n;
    }, t.prototype.decorateLog = function (t) {
      this.currentUrlPackage || this.updateUrlPackage(), 0 < Object.keys(this.customDimension).length && Object.assign(t.dimension, this.customDimension), 0 < Object.keys(this.commonDimension).length && Object.assign(t.dimension, this.commonDimension), this.currentUrlPackage && this.currentUrlPackage.page !== (null == (t = null == (t = this.weblog) ? void 0 : t.currentUrlPackage) ? void 0 : t.page) && (this.flush(), this.updateUrlPackage());
    }, t.prototype.samplingControl = function (t) {
      return null !== t && "number" == typeof t && this.randomSampling < t;
    }, t.prototype.getCommonData = function () {
      var t,
          e = null == (e = null == (e = null == (e = this.weblog) ? void 0 : e.commonPackage) ? void 0 : e.app_package) ? void 0 : e.version_name,
          e = {
        h5_extra_attr: JSON.stringify(_v$(_v$({}, null == (t = null == (t = this.weblog) ? void 0 : t.commonPackage) ? void 0 : t.getH5ExtraAttr()), {
          app_version_name: e,
          url: location.href,
          hash: location.hash,
          online: null === navigator || void 0 === navigator ? void 0 : navigator.onLine,
          downlink: null == (t = null === navigator || void 0 === navigator ? void 0 : navigator.connection) ? void 0 : t.downlink,
          rtt: null == (t = null === navigator || void 0 === navigator ? void 0 : navigator.connection) ? void 0 : t.rtt
        })),
        url_package: this.currentUrlPackage && this.currentUrlPackage.toJSON(),
        refer_url_package: this.referUrlPackage && this.referUrlPackage.toJSON(),
        app_version_name: e,
        project_id: null == (t = this.config) ? void 0 : t.projectId
      };
      return "1" === se("radar_report_test") && (e.is_report_test = !0), e;
    }, t.prototype.reportByHttp = function () {
      var t = this.getCommonData(),
          e = (t = {
        project_id: this.config.projectId,
        radar_session_id: this.radarSessionId,
        h5_extra_attr: t.h5_extra_attr
      }, this.logQueue.filter(function (t) {
        return "load" === t.key;
      })),
          n = this.logQueue.filter(function (t) {
        return "load" !== t.key;
      });
      Array.isArray(e) && e.length && this.collectLog(t, e, "radarSDK"), Array.isArray(n) && n.length && this.collectLog(t, n, "radarSDKSupplement");
    }, t.prototype.collectLog = function (t, e, n) {
      var r;
      "function" != typeof (null == (r = this.weblog) ? void 0 : r.collect) && "function" != typeof (null == (r = this.weblog) ? void 0 : r.sendByHttp) ? u$4("114") : (this.weblog.sendByHttp || this.weblog.collect).call(this.weblog, "RADAR", {
        name: "radar_log",
        params: _v$(_v$({}, t), {
          data: y$4([], _$2(e), !1)
        }),
        serviceName: n
      });
    }, t.prototype.reportByBridge = function () {
      var e = null == (n = null == (n = this.weblog) ? void 0 : n.Utils) ? void 0 : n.yoda;
      if (!e) return !1;
      var t,
          n = this.logQueue.filter(function (t) {
        return "load" === t.key;
      }),
          r = this.logQueue.filter(function (t) {
        return "load" !== t.key;
      });

      try {
        return n.forEach(function (t) {
          "function" == typeof (null == (t = e.sendSummarizedLog({
            key: "h5_load",
            data: t
          })) ? void 0 : t["catch"]) && t["catch"](function (t) {
            u$4("123", t);
          });
        }), r.length && "function" == typeof (null == (t = e.sendRadarLog({
          data: r
        })) ? void 0 : t["catch"]) && t["catch"](function (t) {
          u$4("124", t);
        }), !0;
      } catch (t) {
        return !1;
      }
    }, t;
  }(),
      _d$ = function d$2(t, e) {
    return (_d$ = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (t, e) {
      t.__proto__ = e;
    } || function (t, e) {
      for (var n in e) {
        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
      }
    })(t, e);
  },
      _p$ = function p$2() {
    return (_p$ = Object.assign || function (t) {
      for (var e, n = 1, r = arguments.length; n < r; n++) {
        for (var o in e = arguments[n]) {
          Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
        }
      }

      return t;
    }).apply(this, arguments);
  };

  function l$2(t, e) {
    var n = {};

    for (o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && e.indexOf(o) < 0 && (n[o] = t[o]);
    }

    if (null != t && "function" == typeof Object.getOwnPropertySymbols) for (var r = 0, o = Object.getOwnPropertySymbols(t); r < o.length; r++) {
      e.indexOf(o[r]) < 0 && Object.prototype.propertyIsEnumerable.call(t, o[r]) && (n[o[r]] = t[o[r]]);
    }
    return n;
  }

  var u$3 = {
    redirect: {
      end: "redirectEnd",
      start: "redirectStart"
    },
    dns: {
      end: "domainLookupEnd",
      start: "domainLookupStart"
    },
    dns_start: {
      end: "domainLookupEnd",
      start: "navigationStart"
    },
    tcp: {
      end: "connectEnd",
      start: "connectStart"
    },
    tcp_start: {
      end: "connectEnd",
      start: "navigationStart"
    },
    redirect_count: {
      custom: function custom(t, e) {
        return e.redirectCount;
      }
    },
    ssl: {
      custom: function custom(t, e) {
        return e.connectEnd && e.secureConnectionStart ? e.connectEnd - e.secureConnectionStart : null;
      }
    },
    ssl_start: {
      custom: function custom(t, e) {
        return e.secureConnectionStart && e.navigationStart ? e.secureConnectionStart - e.navigationStart : null;
      }
    },
    ttfb: {
      end: "responseStart",
      start: "requestStart"
    },
    request_start: {
      end: "requestStart",
      start: "navigationStart"
    },
    trans: {
      end: "responseEnd",
      start: "responseStart"
    },
    dom_parse: {
      end: "domInteractive",
      start: "responseEnd"
    },
    dom_parse_start: {
      end: "domInteractive",
      start: "navigationStart"
    },
    blank: {
      end: "domLoading",
      start: "navigationStart"
    },
    fb: {
      end: "responseStart",
      start: "navigationStart"
    },
    dom_ready: {
      end: "domContentLoadedEventEnd",
      start: "navigationStart"
    },
    total: {
      end: "loadEventStart",
      start: "navigationStart"
    },
    resource: {
      end: "loadEventStart",
      start: "domInteractive"
    },
    fp: {
      custom: function custom() {
        if ("function" != typeof performance.getEntries) return null;
        var t = performance.getEntries().filter(function (t) {
          return "first-paint" === t.name;
        })[0];
        return t ? Math.ceil(t.startTime + t.duration) : null;
      }
    },
    js_cost: {
      custom: function custom() {
        if ("function" != typeof performance.getEntries) return null;
        var t = h$3(),
            e = performance.getEntries(),
            n = performance.getEntries().filter(function (t) {
          return "navigation" === t.initiatorType;
        })[0],
            e = e.filter(function (t) {
          return "script" === t.initiatorType;
        })[0],
            n = n ? n.domComplete : t.domComplete - t.navigationStart;
        return e && n ? n - e.fetchStart : null;
      }
    },
    tti: {
      end: "domInteractive",
      start: "navigationStart"
    },
    protocol: {
      custom: function custom(t, e) {
        return e.nextHopProtocol;
      }
    },
    dom_num: {
      custom: function custom() {
        return "undefined" != typeof document && void 0 !== document.all ? document.all.length : null;
      }
    }
  },
      f$3 = {
    main_api: {
      end: "apiEnd",
      start: "apiStart",
      notCatchIfUndefined: !0
    },
    main_api_offset: {
      end: "apiStart",
      start: "responseEnd",
      notCatchIfUndefined: !0
    },
    fmp: {
      end: "fmp_time",
      start: "navigationStart",
      notCatchIfUndefined: !0
    }
  },
      _$1 = {
    navigation_start_time: "navigationStart",
    fetch_start_time: "fetchStart",
    dns_start_time: "domainLookupStart",
    dns_end_time: "domainLookupEnd",
    connect_start_time: "connectStart",
    ssl_start_time: "secureConnectionStart",
    request_start_time: "requestStart",
    response_start_time: "responseStart",
    response_end_time: "responseEnd",
    dom_interactive_time: "domInteractive",
    dom_loading_time: "domLoading",
    dom_ready_time: "domContentLoadedEventEnd",
    load_event_time: "loadEventStart",
    connect_end_time: "connectEnd",
    load_event_end: "loadEventEnd",
    dom_complete: "domComplete",
    dom_content_loaded_event_start: "domContentLoadedEventStart",
    redirect_start: "redirectStart",
    redirect_end: "redirectEnd",
    radar_init_time: "radar_init_time",
    fmp_time: "fmp_time"
  };

  function h$2(n, t) {
    if (!Array.isArray(t)) return -1;
    var r = -1;
    return t.forEach(function (t, e) {
      new RegExp(t).test(n) && (r = e);
    }), r;
  }

  var v$2 = function (e) {
    function t(t) {
      var g = this;
      return (g = e.call(this, {
        core: null == t ? void 0 : t.core,
        key: l$3.LOAD,
        version: "1.2.5",
        name: "RadarNavigationCollect"
      }) || this).hasFMP = !1, g.syncMetricNum = 0, g.customKeys = [], g.custom_metric = {}, g.optionsMainAPI = [], g.mainAPIList = [], g.radarMainApiList = [], g.mainJSList = [], g.radarMainJSList = [], g.radarTiming = {
        radar_init_time: void 0,
        fmp_time: void 0,
        fmp: void 0,
        apiStart: void 0,
        apiEnd: void 0
      }, g.h5Load = function () {
        var t = g.getPerformanceData();
        g.collect(_p$({
          event_name: "h5_load"
        }, t));
      }, g.dealAPI = function (t) {
        return g.cacheAndCalculateMainAPI(t), g.addMainApiResult(t), g.mainAPIList.filter(function (t) {
          return !!t.url;
        }).length !== g.mainAPIList.length || void 0 === g.radarTiming.fmp;
      }, g.addMainJSResult = function (t) {
        if (!g.mainJSList || 0 === g.mainJSList.length) return !1;
        var e,
            n,
            r,
            o,
            i,
            a,
            s,
            c,
            u,
            l,
            p,
            d,
            f,
            m,
            h,
            v = h$2((t.file || "").replace(/\?.+$/, ""), g.mainJSList);
        return -1 < v && !g.radarMainJSList[v].file && (e = t.file, n = t.cached, r = t.size, o = t.failed, i = t.res_type, a = t.protocol, s = t.fb, c = t.dns, u = t.tcp, l = t.ssl, p = t.ttfb, d = t.trans, f = t.total, m = t.fetch_start, h = t.duration, t = t.start_time, g.radarMainJSList[v] = {
          file: e,
          cached: n,
          size: r,
          failed: o,
          res_type: i,
          protocol: a,
          fb: s,
          dns: c,
          tcp: u,
          ssl: l,
          ttfb: p,
          trans: d,
          total: f,
          fetch_start: m,
          duration: h,
          start_time: t,
          reg: g.mainJSList[v]
        }), g.radarMainJSList.filter(function (t) {
          return !!t.file;
        }).length !== g.mainJSList.length;
      }, t.core || De("212"), "string" == typeof t.mainApi ? (g.optionsMainAPI.push(t.mainApi), g.mainAPIList.push({}), g.radarMainApiList.push({})) : Array.isArray(t.mainApi) && (3 < t.mainApi.length && s$2("207"), g.optionsMainAPI = t.mainApi.slice(0, 3), g.optionsMainAPI.forEach(function () {
        g.mainAPIList.push({}), g.radarMainApiList.push({});
      })), "string" == typeof t.mainJs ? (g.mainJSList.push(t.mainJs), g.radarMainJSList.push({})) : Array.isArray(t.mainJs) && (3 < t.mainJs.length && s$2("211"), g.mainJSList = t.mainJs.slice(0, 3), g.mainJSList.forEach(function () {
        return g.radarMainJSList.push({});
      })), performance.timing ? g.init() : (null != (t = g.core) && t.collect("event", {
        name: "radar_error",
        message: "performance.timing 不存在无法收集数据",
        category: l$3.LOAD
      }), u$4("208")), g;
    }

    var n = t,
        r = e;
    if ("function" != typeof r && null !== r) throw new TypeError("Class extends value " + String(r) + " is not a constructor or null");

    function o() {
      this.constructor = n;
    }

    return _d$(n, r), n.prototype = null === r ? Object.create(r) : (o.prototype = r.prototype, new o()), t.prototype.init = function () {
      this.radarTiming.radar_init_time = Date.now();
      var t,
          e = this.getPerformanceData();
      this.collect(_p$({
        event_name: "radar_init"
      }, e)), null != (t = null == (e = this.core) ? void 0 : e.setCommonDimension) && t.call(e, "happen_stage", "during_fmp"), 0 < performance.timing.loadEventStart ? this.h5Load() : B(window, "load", this.h5Load);
    }, t.prototype.customStage = function (t, e) {
      var n, r;
      void 0 === e && (e = {
        sendTimeline: !0
      }), this.isHit ? (void 0 !== t && "string" == typeof t && "" !== t || De("206"), this.isValidTimestamp(e.timestamp, "custom_stage " + t) && (n = e.timestamp || Date.now(), r = this.customKeys.length - this.syncMetricNum, this.customKeys.includes(t) ? u$4("204", t) : e.sendTimeline && 2 < this.syncMetricNum || !e.sendTimeline && 5 < r ? u$4("205", t) : n && (this.custom_metric[t + "_time"] = n, this.customKeys.push(t), !e || !0 !== e.sendTimeline && null != e.sendTimeline || (r = this.getPerformanceData(), this.collect(_p$(_p$({}, r), {
        stack: new Error().stack,
        event_name: "h5_custom_metric",
        custom_metric_name: t,
        custom_metric_timestamp: n
      })), this.syncMetricNum++)))) : u$4("200");
    }, t.prototype.isValidTimestamp = function (t, e) {
      var n;
      if (void 0 === e && (e = "fmp"), void 0 !== t && "number" != typeof t) De("201");else if (void 0 !== t && t < performance.timing.navigationStart) return s$2("210", "".concat(e)), null != (n = this.core) && n.collect("event", {
        name: "radar_error",
        message: "【210】".concat(e),
        extra_info: {
          timestamp: t,
          navigationStart: performance.timing.navigationStart
        }
      }), !1;
      return !0;
    }, t.prototype.fmp = function (t) {
      var e, n;
      this.isHit ? this.isValidTimestamp(t) && (t = t || Date.now(), this.hasFMP ? s$2("202") : t && performance.timing && (null != (n = null == (e = this.core) ? void 0 : e.setCommonDimension) && n.call(e, "happen_stage", "after_fmp"), this.hasFMP = !0, this.radarTiming.fmp_time = t, performance.timing.radarFmp = t, n = this.getPerformanceData(), performance.timing.fmp = this.radarTiming.fmp = n.fmp, this.collect(_p$({
        event_name: "fmp",
        stack: new Error().stack
      }, n)))) : s$2("200");
    }, t.prototype.getPerformanceData = function () {
      var e = _p$(_p$({}, Te(performance.timing)), this.radarTiming),
          n = K(_p$(_p$({}, u$3), f$3), e);

      return Object.keys(_$1).forEach(function (t) {
        0 <= e[_$1[t]] && (n[t] = e[_$1[t]]);
      }), ["radar_main_js_start", "lcp", "cls", "fid", "fcp"].forEach(function (t) {
        var e = window.__RADAR_PERFORMANCE_TIMING_ && window.__RADAR_PERFORMANCE_TIMING_[t];
        !e && 0 !== e || (n[t] = e);
      }), n;
    }, t.prototype.cacheAndCalculateMainAPI = function (t) {
      var e;
      void 0 === this.radarTiming.fmp && (t.before_hook_time && (e = this.radarTiming.apiStart, this.radarTiming.apiStart = e ? Math.min(e, t.before_hook_time) : t.before_hook_time), t.after_hook_time && (e = this.radarTiming.apiEnd, this.radarTiming.apiEnd = e ? Math.max(e, t.after_hook_time) : t.after_hook_time));
    }, t.prototype.addMainApiResult = function (t) {
      var e,
          n,
          r,
          o,
          i,
          a,
          s,
          c,
          u,
          l,
          p,
          d,
          f,
          m,
          h,
          v,
          g,
          _,
          y = h$2((t.api || "").replace(/\?.+$/, ""), this.optionsMainAPI);

      -1 < y && (null == (_ = this.mainAPIList[y]) || !_.url) && (_ = t.api, e = t.status, n = t.size, r = t.cached, o = t.method, c = t.perfTime, i = t.protocol, a = t.custom_failed, s = t.res_type, g = l$2(t, ["api", "status", "size", "cached", "method", "perfTime", "protocol", "custom_failed", "res_type"]), this.mainAPIList[y] = _p$({
        url: _,
        status: e,
        size_radar: n,
        cached: r,
        method: o,
        perfTime: c,
        protocol: i,
        res_type: s,
        custom_failed: a
      }, g), c = g.fb, u = g.dns, l = g.tcp, p = g.ssl, d = g.ttfb, f = g.trans, m = g.total, h = g.fetch_start, v = g.duration, g = g.start_time, this.radarMainApiList[y] = {
        api: _,
        status: e,
        size: n,
        cached: r,
        method: o,
        protocol: i,
        fb: c,
        dns: u,
        tcp: l,
        ssl: p,
        ttfb: d,
        trans: f,
        total: m,
        fetch_start: h,
        duration: v,
        custom_failed: a,
        res_type: s,
        reg: this.optionsMainAPI[y],
        start_time: g
      }, this.radarTiming.fmp_time && t.after_hook_time && t.after_hook_time < this.radarTiming.fmp_time && (_ = this.getPerformanceData(), this.collect(_p$({
        event_name: "main_api"
      }, _))));
    }, t.prototype.destroy = function () {
      $(window, "load", this.h5Load), this.customStage = this.fmp = function () {
        s$2("213");
      };
    }, t.prototype.collect = function (t) {
      var e = t.protocol,
          n = t.event_name,
          r = (t.custom_metric, t.custom_metric_name),
          o = t.stack;
      t.main_api_list, t = l$2(t, ["protocol", "event_name", "custom_metric", "custom_metric_name", "stack", "main_api_list"]), this.baseCollect({
        value: t,
        dimension: {
          protocol: e,
          event_name: n,
          custom_metric_name: r,
          custom_metric: JSON.stringify(this.custom_metric),
          main_api_list: this.mainAPIList,
          radar_main_api_list: this.radarMainApiList,
          radar_main_js_list: this.radarMainJSList,
          is_official: 1,
          stack: o
        }
      }), null != (t = this.core) && t.flush();
    }, t;
  }(d$3),
      _g$ = function g$3(t, e) {
    return (_g$ = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (t, e) {
      t.__proto__ = e;
    } || function (t, e) {
      for (var n in e) {
        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
      }
    })(t, e);
  },
      _y$ = function y$3() {
    return (_y$ = Object.assign || function (t) {
      for (var e, n = 1, r = arguments.length; n < r; n++) {
        for (var o in e = arguments[n]) {
          Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
        }
      }

      return t;
    }).apply(this, arguments);
  };

  function b$1(t, e) {
    var n = {};

    for (o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && e.indexOf(o) < 0 && (n[o] = t[o]);
    }

    if (null != t && "function" == typeof Object.getOwnPropertySymbols) for (var r = 0, o = Object.getOwnPropertySymbols(t); r < o.length; r++) {
      e.indexOf(o[r]) < 0 && Object.prototype.propertyIsEnumerable.call(t, o[r]) && (n[o[r]] = t[o[r]]);
    }
    return n;
  }

  var k = M,
      L = {
    navigation_start: "startTime",
    redirect_start: "redirectStart",
    redirect_end: "redirectEnd",
    dns_start: "domainLookupStart",
    dns_end: "domainLookupEnd",
    connect_start: "connectStart",
    connect_end: "connectEnd",
    ssl_start: "secureConnectionStart",
    request_start: "requestStart",
    response_start: "responseStart",
    response_end: "responseEnd"
  };

  function O(t, e) {
    if (t) return "function" == typeof t.get ? t.get(e) : t[e.toLowerCase()];
  }

  function I(t) {
    var e = "";
    if ("string" == typeof t) e = t;else try {
      e = JSON.stringify(t);
    } catch (n) {
      e = String(t);
    }

    for (var n = 0, r = 0; r < e.length; r++) {
      var o = e.charCodeAt(r);
      n += o < 128 ? 1 : o < 2048 ? 2 : o < 65536 ? 3 : o < 1 << 21 ? 4 : o < 1 << 26 ? 5 : o < 1 << 31 ? 6 : Number.NaN;
    }

    return n;
  }

  function P(t) {
    var e = (n = document.location).protocol,
        n = n.host;
    return 0 === t.indexOf("//") ? e + t : 0 === t.indexOf("/") ? "".concat(e, "//").concat(n).concat(t) : t;
  }

  function S$1(t) {
    return t ? "function" == typeof t.get ? t.get("Content-Type") : t["content-type"] : null;
  }

  var A = function (e) {
    function t(t) {
      var l = e.call(this, {
        core: null == (t = void 0 === t ? {} : t) ? void 0 : t.core,
        sampling: null == t ? void 0 : t.sampling,
        key: l$3.API,
        version: "1.2.5",
        name: "RadarAPICollect"
      }) || this;
      return l.ignoreList = v$4, l.queue = [], l.logList = [], l.perfList = [], l.broadcastApi = ae(), l.initiatorTypeList = [], l.beforeHook = function (t) {
        var e;
        0 === (null == (e = t.url) ? void 0 : e.indexOf("data:")) || D(t.url, l.ignoreList) || D(t.url, (null == (e = l.core) ? void 0 : e.ignoreList) || []) || "js" === H(t.url) || "css" === H(t.url) || (e = {
          api: P(t.url),
          method: t.method,
          request: t,
          startTime: Date.now()
        }, l.queue.push(e));
      }, l.afterHook = function (e, t) {
        var n = l.queue.find(function (t) {
          return t.request === e;
        });

        if (n) {
          delete n.request;
          var r = n.startTime,
              o = (n = b$1(n, ["startTime"]), Date.now()),
              i = o - r,
              a = t.status;
          if ("function" == typeof l.customizeRadarStatus) try {
            a = l.customizeRadarStatus(t);
          } catch (t) {
            console.error(t);
          }

          var s = l.customHook({
            request: e,
            response: t,
            duration: i
          }),
              c = +O(t.headers, "Content-Length") || 0,
              u = we(O(t.headers, "Server-Timing")),
              i = _y$(_y$(_y$({
            duration: i,
            logTime: Date.now(),
            status: a,
            size: +c,
            content_type: S$1(t.headers),
            custom_failed: !(200 <= a && a < 300)
          }, n), s), {
            before_hook_time: r,
            after_hook_time: o,
            trace_id: e.trace_id,
            server_timing: u
          });

          2 === (null == (a = null == (c = O(t.headers, "Intercept-Result")) ? void 0 : c.split(";")) ? void 0 : a.length) && null != (n = l.core) && n.setCommonDimension && (l.core.setCommonDimension("intercept_result", a[0], !1), l.core.setCommonDimension("intercept_result_code", a[1], !1), i.api_intercept_result = a[0], i.api_intercept_result_code = a[1]), t.finalUrl && (i.api = t.finalUrl), "string" == typeof t.text && (i.responseData = t.text), 0 !== _y$(_y$({}, t), {
            status: i.status
          }).status || s.intercept_report ? l.mergeAPIPerf(void 0, i) || l.logList.push(i) : (i.size && 0 != i.size || !i.responseData || (i.size = I(i.responseData)), delete i.responseData, delete i.server_timing, l.collect(i)), l.queue = l.queue.filter(function (t) {
            return t.request && t.request !== e;
          });
        }
      }, void 0 !== (l.option = t) && null != t && t.core || De("310"), void 0 !== t.ignoreList && (Array.isArray(t.ignoreList) || De("309"), t.ignoreList.forEach(function (t) {
        "string" != typeof t && De("309");
      }), l.ignoreList = l.ignoreList.concat(t.ignoreList)), l.APIHook = t.APIHook, l.customizeRadarStatus = t.customizeRadarStatus, l.init(), l;
    }

    var n = t,
        r = e;
    if ("function" != typeof r && null !== r) throw new TypeError("Class extends value " + String(r) + " is not a constructor or null");

    function o() {
      this.constructor = n;
    }

    return _g$(n, r), n.prototype = null === r ? Object.create(r) : (o.prototype = r.prototype, new o()), t.prototype.init = function () {
      var e,
          n = this;

      try {
        this.observer = new PerformanceObserver(function (t) {
          return n.observeAPI(t);
        }), this.observer.observe({
          entryTypes: ["resource"]
        }), this.initiatorTypeList = [], !0 !== this.option.ignoreXHR && (this.initiatorTypeList.push("xmlhttprequest"), this.unhookXML = te(function (t) {
          return n.beforeHook(t);
        }, function (t, e) {
          return n.afterHook(t, e);
        })), !0 !== this.option.ignoreFetch && (this.initiatorTypeList.push("fetch"), this.unhookFetch = ne(function (t) {
          return n.beforeHook(t);
        }, function (t, e) {
          return n.afterHook(t, e);
        }));
      } catch (t) {
        u$4("308"), null != (e = this.core) && e.collect("event", {
          name: "radar_error",
          message: "PerformanceObserver 不存在无法收集数据",
          category: l$3.API
        });
      }
    }, t.prototype.customHook = function (t) {
      var e = {};
      if (void 0 === this.APIHook) return e;
      if ("function" != typeof this.APIHook) return s$2("300"), e;
      var n = {};

      try {
        n = this.APIHook(t);
      } catch (t) {
        return s$2("301", t), {};
      }

      if (!n) return s$2("302"), e;
      t = n.response_msg;
      var r = n.response_code,
          o = n.status,
          i = n.custom_failed,
          a = n.intercept_report,
          n = n.broadcast_info;
      if (!0 === Boolean(a) && (e.intercept_report = !0), void 0 !== t) try {
        var s = JSON.stringify(t);
        100 < s.length && s$2("307"), e.response_msg = s.slice(0, 100);
      } catch (t) {
        e.response_msg = "response_msg返回结果异常", s$2("303");
      }
      return void 0 !== r && (a = Number(r), isNaN(a) ? s$2("304") : e.response_code = a), void 0 !== o && (t = Number(o), isNaN(t) ? s$2("305") : e.status = t), void 0 !== i && (!0 === i || !1 === i ? e.custom_failed = i : s$2("306")), e.broadcast_info = n, e;
    }, t.prototype.observeAPI = function (t) {
      var o = this;
      t.getEntriesByType("resource").forEach(function (e) {
        var t, n, r;
        if (0 === (null == (r = e.name) ? void 0 : r.indexOf("data:")) || D(e.name, o.ignoreList) || D(e.name, (null == (r = o.core) ? void 0 : r.ignoreList) || [])) return !1;
        "api" === J(e) && ((r = K(k, e)).perfTime = Date.now(), null != (t = null == (t = e.serverTiming) ? void 0 : t.map(function (t) {
          return {
            name: t.name,
            duration: t.duration,
            description: t.description || void 0
          };
        })) && t.length || (t = void 0), n = {
          encoded_body_size: e.encodedBodySize,
          decoded_body_size: e.decodedBodySize
        }, Object.keys(L).forEach(function (t) {
          n[t] = Number(e[L[t]] + performance.timing.navigationStart);
        }), r = _y$(_y$(_y$(_y$({}, r), {
          api: r.file
        }), n), {
          server_timing: t
        }), o.mergeAPIPerf(r) || o.perfList.push(r));
      });
    }, t.prototype.destroy = function () {
      this.unhookXML && this.unhookXML(), this.unhookFetch && this.unhookFetch(), this.observer && this.observer.disconnect();
    }, t.prototype.mergeAPIPerf = function (t, e) {
      if (t ? e = this.takeItem(t, this.logList) : e && (t = this.takeItem(e, this.perfList)), !t || !e) return !1;
      if (!0 === e.intercept_report) return !0;
      var n,
          r = Object.assign({}, e, t, {
        size: t.size || e.size
      });
      return delete r.file, r.size && 0 != r.size || !r.responseData || (r.size = I(r.responseData)), delete r.responseData, (e = e.server_timing || t.server_timing) && (n = null, e.map(function (t) {
        "total-timing" === t.name && (n = null != (t = t.duration) ? t : null);
      }), r.total_server_timing = n, r.server_data_list = JSON.stringify(e)), delete r.server_timing, this.collect(r), !0;
    }, t.prototype.takeItem = function (t, e) {
      var n,
          r = (t.api || "").replace(/\?.+$/, "");
      if (-1 !== (t = e.findIndex(function (t) {
        return t = (t.api || "").replace(/\?.+$/, ""), r === t;
      }))) return n = e[t], e.splice(t, 1), n;
    }, t.prototype.collect = function (o) {
      var i = this,
          t = o.res_type,
          e = o.protocol,
          n = o.api,
          r = o.custom_failed,
          a = o.status,
          s = o.cached,
          c = o.method,
          u = o.response_code,
          l = o.response_msg,
          p = (o.has_fmp, o.server_data_list),
          d = o.content_type,
          f = o.broadcast_info,
          m = o.before_hook_time,
          h = o.after_hook_time,
          v = o.api_intercept_result,
          g = o.api_intercept_result_code,
          _ = {
        dimension: {
          before_hook_time: m,
          after_hook_time: h,
          res_type: t,
          protocol: e,
          api: n,
          custom_failed: r,
          status: a,
          cached: s,
          method: c,
          response_code: u,
          response_msg: l,
          content_type: d,
          broadcast_info: f,
          is_official: 1,
          server_data_list: p,
          trace_id: o.trace_id,
          api_intercept_result: v,
          api_intercept_result_code: g,
          has_timing_allow: o.has_timing_allow
        },
        value: b$1(o, ["res_type", "protocol", "api", "custom_failed", "status", "cached", "method", "response_code", "response_msg", "has_fmp", "server_data_list", "content_type", "broadcast_info", "before_hook_time", "after_hook_time", "api_intercept_result", "api_intercept_result_code", "trace_id", "has_timing_allow"])
      };
      this.broadcastApi.emit(Te(o)), 0 === a && X(this.option.isIgnoreInvalidStatusCode) ? new Promise(function (e, t) {
        var n, r;
        i.option.isIgnoreInvalidStatusCode && (U(n = i.option.isIgnoreInvalidStatusCode(o)) ? (r = setTimeout(function () {
          return e(!1);
        }, 2e3), n.then(function (t) {
          clearTimeout(r), e(!0 === t);
        }, t)) : e(!0 === n));
      }).then(function (t) {
        t ? s$2("异步拦截日志") : i.baseCollect(_);
      }, function (t) {
        i.baseCollect(_), u$4(t);
      }) : this.baseCollect(_);
    }, t;
  }(d$3),
      _g$2 = function g$2(t, e) {
    return (_g$2 = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (t, e) {
      t.__proto__ = e;
    } || function (t, e) {
      for (var n in e) {
        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
      }
    })(t, e);
  },
      _2 = function _() {
    return (_2 = Object.assign || function (t) {
      for (var e, n = 1, r = arguments.length; n < r; n++) {
        for (var o in e = arguments[n]) {
          Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
        }
      }

      return t;
    }).apply(this, arguments);
  },
      y$2 = Object.assign({}, M, {
    duration: {
      end: "responseEnd",
      start: "fetchStart"
    },
    cached_type: {
      custom: function custom(t, e) {
        var n = "hit_browser";
        if (0 === e.transferSize || 0 === e.duration) return n;
        if (null == e.transferSize && (0 === e.domainLookupStart || e.responseStart === e.fetchStart)) return n;

        if (e.serverTiming && e.serverTiming.some(function (t) {
          return "cdn" === t.name;
        })) {
          if (e.serverTiming.some(function (t) {
            return "miss" === t.name;
          })) return "miss_cdn";
          if (e.serverTiming.some(function (t) {
            return "hit" === t.name;
          })) return "hit_cdn";
        }

        return "miss_browser";
      },
      crossOriginSkip: !0
    },
    cdn_duration: {
      custom: function custom(t, e) {
        return e.serverTiming && e.serverTiming.some(function (t) {
          return "cdn" === t.name;
        }) ? null == (e = null == (e = e.serverTiming) ? void 0 : e.find(function (t) {
          return "total-timing" === t.name;
        })) ? void 0 : e.duration : null;
      },
      crossOriginSkip: !0,
      cachedSkip: !0
    },
    cdn_ip: {
      custom: function custom(t, e) {
        if (e.serverTiming && e.serverTiming.some(function (t) {
          return "cdn" === t.name;
        })) return null == (e = e.serverTiming.find(function (t) {
          return "miss" === t.name || "hit" === t.name;
        })) ? void 0 : e.description;
      },
      crossOriginSkip: !0,
      cachedSkip: !0
    }
  }),
      v$1 = {
    fetch_start_time: "fetchStart",
    redirect_start: "redirectStart",
    redirect_end: "redirectEnd",
    dns_start: "domainLookupStart",
    dns_end: "domainLookupEnd",
    connect_start: "connectStart",
    connect_end: "connectEnd",
    ssl_start: "secureConnectionStart",
    request_start: "requestStart",
    response_start: "responseStart",
    response_end: "responseEnd"
  };

  function b(t) {
    return Array.isArray(t) ? t.map(function (t) {
      var e = void 0 === (e = t.tagName) ? "" : e,
          n = t.id;
      return t = t.getAttribute ? t.getAttribute("class") : t.className || "", e = e.toLowerCase(), n && (e += "#".concat(n)), t && (e += t.split(/\s+/g).map(function (t) {
        return ".".concat(t);
      }).join("")), e;
    }).filter(function (t) {
      return t;
    }).join(",") : "";
  }

  var r,
      o,
      l,
      u,
      S = function (n) {
    function t(t) {
      var e,
          o = this;
      return (o = n.call(this, {
        core: null == t ? void 0 : t.core,
        sampling: null != (e = null == t ? void 0 : t.sampling) ? e : .1,
        version: "1.2.5",
        key: l$3.RES,
        name: "RadarResourceCollect"
      }) || this).ignoreList = v$4, o.broadcastJs = ae(), o.onResError = function (t, e) {
        var n;
        Q(t) || (n = (t.target.src || t.target.href || "").toString(), n = {
          failed: !0,
          file: n = "function" != typeof t.target.getAttribute || "" !== t.target.getAttribute("src") && "" !== t.target.getAttribute("href") ? n : "",
          res_path: b(t && t.path || t && t.composedPath && t.composedPath())
        }, o.collect(n, e), o.broadcastJs.emit(n));
      }, o.observeResource = function (t) {
        t.getEntriesByType("resource").forEach(function (e) {
          var t, n, r;
          if (0 === e.name.indexOf("data:") || D(e.name, o.ignoreList) || D(e.name, (null == (t = o.core) ? void 0 : t.ignoreList) || [])) return !1;
          "resource" === J(e) && (t = K(y$2, e), n = {
            encoded_body_size: e.encodedBodySize,
            decoded_body_size: e.decodedBodySize
          }, Object.keys(v$1).forEach(function (t) {
            n[t] = Number(e[v$1[t]] + performance.timing.navigationStart);
          }), r = _2(_2({
            failed: !1
          }, t), n), o.collect(r), setTimeout(function () {
            o.broadcastJs.emit(r);
          }));
        });
      }, o.resourceHook = t.resourceHook, void 0 !== t.ignoreList && (Array.isArray(t.ignoreList) || De("802"), t.ignoreList.forEach(function (t) {
        "string" != typeof t && De("802");
      }), o.ignoreList = o.ignoreList.concat(t.ignoreList)), o.init(), o;
    }

    var e = t,
        r = n;
    if ("function" != typeof r && null !== r) throw new TypeError("Class extends value " + String(r) + " is not a constructor or null");

    function o() {
      this.constructor = e;
    }

    return _g$2(e, r), e.prototype = null === r ? Object.create(r) : (o.prototype = r.prototype, new o()), t.prototype.init = function () {
      var e,
          n = this;

      try {
        this.observeResource(performance), this.observer = new PerformanceObserver(function (t) {
          return n.observeResource(t);
        }), this.observer.observe({
          entryTypes: ["resource"]
        });
      } catch (t) {
        u$4("801"), null != (e = this.core) && e.collect("event", {
          name: "radar_error",
          message: "PerformanceObserver 不存在无法收集数据",
          category: l$3.RES
        });
      }

      B(window, "error", function (t) {
        return n.onResError(t);
      }, !0), this.parseSeedLog();
    }, t.prototype.parseSeedLog = function () {
      var n = this,
          t = Re(j, []);
      t.length && (t.map(function (t) {
        var e = t.data;
        t = t.dimension || {}, n.onResError(e, t);
      }), Oe(j, []));
    }, t.prototype.collect = function (t, e) {
      var n = t.cached,
          r = t.failed,
          o = t.file,
          i = t.protocol,
          a = t.res_type,
          s = t.res_path,
          c = t.cached_type,
          u = t.cdn_ip,
          l = t.has_timing_allow;

      t = function (t, e) {
        var n = {};

        for (o in t) {
          Object.prototype.hasOwnProperty.call(t, o) && e.indexOf(o) < 0 && (n[o] = t[o]);
        }

        if (null != t && "function" == typeof Object.getOwnPropertySymbols) for (var r = 0, o = Object.getOwnPropertySymbols(t); r < o.length; r++) {
          e.indexOf(o[r]) < 0 && Object.prototype.propertyIsEnumerable.call(t, o[r]) && (n[o[r]] = t[o[r]]);
        }
        return n;
      }(t, ["cached", "failed", "file", "protocol", "res_type", "res_path", "cached_type", "cdn_ip", "has_timing_allow"]);

      try {
        var p = this.resourceHook && this.resourceHook({
          file: o,
          cached: n,
          protocol: i,
          res_type: a,
          failed: r
        });
        if (null != p && p.intercept_report) return;
      } catch (t) {
        u$4("803", t);
      }

      this.baseCollect({
        value: t,
        dimension: _2({
          cached: n,
          failed: r,
          file: o,
          protocol: i,
          res_type: a,
          res_path: s,
          sample_rate: this.sampling,
          is_official: 1,
          cached_type: c,
          cdn_ip: u,
          has_timing_allow: l
        }, e)
      });
    }, t.prototype.destroy = function () {
      this.isHit && ($(window, "error", this.onResError, !0), this.observer && this.observer.disconnect());
    }, t;
  }(d$3),
      _a$ = function a$1(t, e) {
    return (_a$ = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (t, e) {
      t.__proto__ = e;
    } || function (t, e) {
      for (var n in e) {
        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
      }
    })(t, e);
  },
      c = function c() {
    return "".concat(Date.now(), "-").concat(Math.floor(8999999999999 * Math.random()) + 1e12);
  },
      s$1 = function s$1(t) {
    return {
      name: t,
      value: 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : -1,
      delta: 0,
      entries: [],
      id: c(),
      isFinal: !1
    };
  },
      u$2 = function u$2(t, e) {
    try {
      var n;
      if (PerformanceObserver.supportedEntryTypes.includes(t)) return (n = new PerformanceObserver(function (t) {
        return t.getEntries().map(e);
      })).observe({
        type: t,
        buffered: !0
      }), n;
    } catch (t) {}
  },
      l$1 = !1,
      p$1 = !1,
      f$2 = function f$2(t) {
    l$1 = !t.persisted;
  },
      m$1 = function m$1() {
    addEventListener("pagehide", f$2), addEventListener("beforeunload", function () {});
  },
      d$1 = function d$1(e) {
    var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1];
    p$1 || (m$1(), p$1 = !0), addEventListener("visibilitychange", function (t) {
      t = t.timeStamp, "hidden" === document.visibilityState && e({
        timeStamp: t,
        isUnloading: l$1
      });
    }, {
      capture: !0,
      once: t
    });
  },
      v = function v(t, e, n, r) {
    var o;
    return function () {
      n && e.isFinal && n.disconnect(), 0 <= e.value && (r || e.isFinal || "hidden" === document.visibilityState) && (e.delta = e.value - (o || 0), (e.delta || e.isFinal || void 0 === o) && (t(e), o = e.value));
    };
  },
      h$1 = function h$1() {
    return void 0 === r && (r = "hidden" === document.visibilityState ? 0 : 1 / 0, d$1(function (t) {
      return t = t.timeStamp, r = t;
    }, !0)), {
      get timeStamp() {
        return r;
      }

    };
  },
      y$1 = function y$1() {
    return o = o || new Promise(function (e) {
      return ["scroll", "keydown", "pointerdown"].map(function (t) {
        addEventListener(t, e, {
          once: !0,
          passive: !0,
          capture: !0
        });
      });
    });
  },
      F = [{
    name: "fid",
    collectFn: function collectFn(t) {
      function e(t) {
        t.startTime < r.timeStamp && (n.value = t.processingStart - t.startTime, n.entries.push(t), n.isFinal = !0, i());
      }

      var n = s$1("FID"),
          r = h$1(),
          o = u$2("first-input", e),
          i = v(t, n, o);
      o ? d$1(function () {
        o.takeRecords().map(e), o.disconnect();
      }, !0) : window.perfMetrics && window.perfMetrics.onFirstInputDelay && window.perfMetrics.onFirstInputDelay(function (t, e) {
        e.timeStamp < r.timeStamp && (n.value = t, n.isFinal = !0, n.entries = [{
          entryType: "first-input",
          name: e.type,
          target: e.target,
          cancelable: e.cancelable,
          startTime: e.timeStamp,
          processingStart: e.timeStamp + t
        }], i());
      });
    }
  }, {
    name: "lcp",
    collectFn: function collectFn(t) {
      function e(t) {
        var e = t.startTime;
        e < i.timeStamp ? (o.value = e, o.entries.push(t)) : o.isFinal = !0, n();
      }

      var n,
          r = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],
          o = s$1("LCP"),
          i = h$1(),
          a = u$2("largest-contentful-paint", e);
      a && (n = v(t, o, a, r), r = function r() {
        o.isFinal || (a.takeRecords().map(e), o.isFinal = !0, n());
      }, y$1().then(r), d$1(r, !0));
    }
  }, {
    name: "cls",
    collectFn: function collectFn(t) {
      function e(t) {
        t.hadRecentInput || (o.value += t.value, o.entries.push(t), n());
      }

      var n,
          r = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],
          o = s$1("CLS", 0),
          i = u$2("layout-shift", e);
      i && (n = v(t, o, i, r), d$1(function (t) {
        t = t.isUnloading, i.takeRecords().map(e), t && (o.isFinal = !0), n();
      }));
    }
  }, {
    name: "fcp",
    collectFn: function collectFn(t) {
      var e,
          n = s$1("FCP"),
          r = h$1(),
          o = u$2("paint", function (t) {
        "first-contentful-paint" === t.name && t.startTime < r.timeStamp && (n.value = t.startTime, n.isFinal = !0, n.entries.push(t), e());
      });
      o && (e = v(t, n, o));
    }
  }],
      g$1 = function (e) {
    function t(t) {
      var r = e.call(this, {
        core: t.core,
        sampling: t.sampling,
        version: "1.2.5",
        key: l$3.EVENT,
        name: "RadarChromeMetricsCollect"
      }) || this;
      return r.options = {
        lcp: !1,
        cls: !1,
        fid: !1,
        fcp: !1
      }, r.init = function () {
        var n = r.options;
        F.forEach(function (t) {
          var e = t.name;
          n && !n[e] || t.collectFn(function (t) {
            var e = t.name;
            t = t.value, qe(e.toLocaleLowerCase(), Number(t)), r.baseCollect({
              dimension: {
                name: e.toLocaleLowerCase(),
                is_official: 1
              },
              value: {
                duration: Number(t)
              }
            });
          });
        });
      }, Object.assign(r.options, t.options), F.forEach(function (t) {
        var e = se("radar_" + t.name);
        e && (r.options[t.name] = "1" === e);
      }), r.init(), r;
    }

    var n = t,
        r = e;
    if ("function" != typeof r && null !== r) throw new TypeError("Class extends value " + String(r) + " is not a constructor or null");

    function o() {
      this.constructor = n;
    }

    return _a$(n, r), n.prototype = null === r ? Object.create(r) : (o.prototype = r.prototype, new o()), t;
  }(d$3),
      _f$ = function f$1(t, e) {
    return (_f$ = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (t, e) {
      t.__proto__ = e;
    } || function (t, e) {
      for (var n in e) {
        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
      }
    })(t, e);
  },
      _s = function s() {
    return (_s = Object.assign || function (t) {
      for (var e, n = 1, r = arguments.length; n < r; n++) {
        for (var o in e = arguments[n]) {
          Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
        }
      }

      return t;
    }).apply(this, arguments);
  },
      u$1 = function (n) {
    function t(t) {
      var e = n.call(this, {
        core: t.core,
        sampling: t.sampling,
        key: l$3.EVENT,
        version: "1.2.5",
        name: "RadarEventCollect"
      }) || this;
      return e.action = {
        start: function start(t) {
          e._checkActionDimension(t), e.event({
            name: t.name,
            extra_info: t.extra_info,
            event_type: "radar_action_start"
          });
        },
        end: function end(t) {
          e._checkActionDimension(t), e.event({
            name: t.name,
            extra_info: t.extra_info,
            result_type: t.result_type,
            event_type: "radar_action_end"
          });
        }
      }, e.parseSeedLog(), e;
    }

    var e = t,
        r = n;
    if ("function" != typeof r && null !== r) throw new TypeError("Class extends value " + String(r) + " is not a constructor or null");

    function o() {
      this.constructor = e;
    }

    return _f$(e, r), e.prototype = null === r ? Object.create(r) : (o.prototype = r.prototype, new o()), t.prototype.parseSeedLog = function () {
      var n = this,
          t = Re(A$1, []);
      t.length && (t.map(function (t) {
        var e = t.dimension;
        t = t.value, n.event(e, t);
      }), Oe(A$1, []));
    }, t.prototype.event = function (t, e) {
      var n;
      this.isHit ? (t || De("402"), void 0 !== t.name && "string" == typeof t.name || De("402"), 127 < t.name.length && (u$4("403"), t.name = t.name.slice(0, 127)), t.is_official = 1, e && void 0 !== e.duration && ("number" != typeof e.duration || e.duration < 0) && De("404"), e && void 0 !== e.event_count && ("number" != typeof e.event_count || e.event_count < 0) && De("405，".concat(e.event_count)), n = {
        dimension: t,
        value: e
      }, t && t.extra_info && "object" == _typeof(t.extra_info) && (n = {
        dimension: _s(_s({}, t), {
          extra_info: JSON.stringify(t.extra_info)
        }),
        value: e
      }), this.baseCollect(n)) : s$2("401");
    }, t.prototype.destroy = function () {
      this.event = function () {
        s$2("407");
      }, this.action = {
        start: function start() {
          s$2("407");
        },
        end: function end() {
          s$2("407");
        }
      };
    }, t.prototype._checkActionDimension = function (t) {
      if (!t) throw Error("408");
      void 0 === t.extra_info || t.extra_info instanceof Object || De("406");
    }, t;
  }(d$3),
      _a = function a(t, e) {
    return (_a = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (t, e) {
      t.__proto__ = e;
    } || function (t, e) {
      for (var n in e) {
        Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
      }
    })(t, e);
  },
      _p = function p() {
    return (_p = Object.assign || function (t) {
      for (var e, n = 1, r = arguments.length; n < r; n++) {
        for (var o in e = arguments[n]) {
          Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
        }
      }

      return t;
    }).apply(this, arguments);
  };

  function f(t, e) {
    var n = {};

    for (o in t) {
      Object.prototype.hasOwnProperty.call(t, o) && e.indexOf(o) < 0 && (n[o] = t[o]);
    }

    if (null != t && "function" == typeof Object.getOwnPropertySymbols) for (var r = 0, o = Object.getOwnPropertySymbols(t); r < o.length; r++) {
      e.indexOf(o[r]) < 0 && Object.prototype.propertyIsEnumerable.call(t, o[r]) && (n[o[r]] = t[o[r]]);
    }
    return n;
  }

  (u = l = l || {}).SCRIPT = "script", u.RES = "res", u.API = "api", u.VIDEO = "video";
  var y = [];

  function m(t, e, n) {
    var r, o;

    if (e && (e instanceof Error || "object" == _typeof(e) && "string" == typeof e.message)) {
      if ("BridgeError" === (r = e.name || "ErrorLikeObject") && "function" == typeof e.toJSON) try {
        var i = e.toJSON();
        delete i.name, delete i.message, o = "".concat(e.message, " (").concat(JSON.stringify(i), ")");
      } catch (t) {
        o = e.message || "";
      } else o = e.message || "";
      i = e.stack || void 0;
    } else o = null == e && "Script error." === (null == n ? void 0 : n.message) ? (r = "CrossOriginError", "".concat(t, " - message: ").concat((null == n ? void 0 : n.message) || "<UNKNOWN>")) : null === e && null != n && n.message && "Uncaught null" !== n.message ? (r = "Error", "".concat(t, " - message: ").concat(n.message)) : (r = null == e ? "".concat(e) : _typeof(e), n = function (t) {
      var e;

      try {
        e = t.toString(), t && "object" == _typeof(t) && (e = JSON.stringify(t));
      } catch (t) {}

      return "string" != typeof e || "" === e ? e = null === t ? "<NULL>" : void 0 === t ? "<UNDEFINED>" : "" === e ? "<EMPTY>" : "<UNKNOWN>" : 2e3 < e.length && (e = e.substring(0, 2e3) + "<<< ……"), e;
    }(e), "".concat(t, " - value: ").concat(n));

    return {
      error_type: l.SCRIPT,
      error_cons_type: r,
      msg: o,
      stack: i
    };
  }

  function g(t) {
    for (var e = 0; e < y.length; e++) {
      if (d(y[e], t)) return e;
    }

    return -1;
  }

  function d(t, e) {
    return t.msg === e.msg && t.stack === e.stack && t.file === e.file && t.line === e.line && t.col === e.col;
  }

  var h = function (e) {
    function t(t) {
      var r = e.call(this, {
        core: t.core,
        sampling: t.sampling,
        key: l$3.ERROR,
        version: "1.2.5",
        name: "RadarErrorCollect"
      }) || this;
      return r.onError = function (t, e) {
        var n;
        !(n = t).message && null == n.lineno || (t = _p(_p({}, m("Global Uncaught Exception", t.error, t)), {
          file: t.filename,
          line: t.lineno,
          col: t.colno
        }), r.isSameErrorAndReport(t, e));
      }, r.onPromiseError = function (t, e) {
        t = m("Unhandled Promise Rejection", t.reason), r.isSameErrorAndReport(t, e);
      }, r.core = t.core, r.init(), r;
    }

    var n = t,
        r = e;
    if ("function" != typeof r && null !== r) throw new TypeError("Class extends value " + String(r) + " is not a constructor or null");

    function o() {
      this.constructor = n;
    }

    return _a(n, r), n.prototype = null === r ? Object.create(r) : (o.prototype = r.prototype, new o()), t.prototype.init = function () {
      y.splice(0), B(window, "error", this.onError, !0), B(window, "unhandledrejection", this.onPromiseError), this.parseSeedLog();
    }, t.prototype.destroy = function () {
      $(window, "error", this.onError, !0), $(window, "unhandledrejection", this.onPromiseError), this.captureException = function () {
        s$2("600");
      };
    }, t.prototype.parseSeedLog = function () {
      var n = this,
          t = Re(T, []);
      t.length && (t.map(function (t) {
        var e = t.data;
        t = t.dimension || {}, "unhandledrejection" === (null == e ? void 0 : e.type) ? n.onPromiseError(e, t) : n.onError(e, t);
      }), Oe(T, []));
    }, t.prototype.isSameErrorAndReport = function (t, e) {
      0 <= g(t) || (y.push(t), setTimeout(function () {
        y.splice(g(t), 1);
      }, 2e3), this.collect(t, e));
    }, t.prototype.collect = function (t, e) {
      var n, r, o, i, a, s, c, u;
      r = (n = t).error_cons_type, o = n.file, i = n.error_type, a = n.msg, s = n.col, c = n.line, u = n.stack, t = {
        key: "error",
        value: f(n, ["error_cons_type", "file", "error_type", "msg", "col", "line", "stack"]),
        dimension: {
          error_cons_type: r,
          file: o,
          error_type: i,
          msg: a,
          col: s,
          line: c,
          stack: u
        }
      }, e = _p(_p({}, t.dimension), e || {}), this.baseCollect({
        dimension: e,
        value: t.value
      });
    }, t.prototype.captureException = function (t) {
      this.isSameErrorAndReport(m("Captured Exception", t));
    }, t;
  }(d$3),
      Radar$1 = function () {
    function t(t) {
      var e,
          n = this;
      this.core = new w({
        weblogger: t.weblog,
        projectId: t.projectId,
        sampling: null != (e = t.sampling) ? e : 1,
        httpReportFirst: t.httpReportFirst,
        customDimensions: t.customDimensions
      }), this.navigationCollect = new v$2({
        core: this.core,
        mainApi: t.mainApi,
        mainJs: t.mainJs
      }), t.unuseAPIPlugin || (this.apiCollect = new A({
        core: this.core,
        sampling: t.apiSampling,
        APIHook: t.APIHook,
        customizeRadarStatus: t.customizeRadarStatus,
        ignoreList: t.ignoreList,
        ignoreXHR: t.ignoreXHR,
        ignoreFetch: t.ignoreFetch,
        isIgnoreInvalidStatusCode: t.isIgnoreInvalidStatusCode
      }), this.apiCollect.broadcastApi.on(function (t) {
        return n.navigationCollect.dealAPI(t);
      })), t.unuseResourcePlugin || (this.resourceCollect = new S({
        sampling: t.resourceSampling,
        core: this.core,
        ignoreList: t.ignoreList,
        resourceHook: t.resourceHook
      }), this.resourceCollect.broadcastJs.on(function (t) {
        return n.navigationCollect.addMainJSResult(t);
      })), this.chromeMetricsCollect = new g$1({
        core: this.core,
        options: {
          lcp: t.lcp,
          cls: t.cls,
          fid: t.fid,
          fcp: t.fcp
        }
      }), this.eventCollect = new u$1({
        core: this.core
      }), this.action = this.eventCollect.action, t.unuseErrorPlugin || (this.errorCollect = new h({
        core: this.core
      })), _e();
    }

    return t.prototype.apply = function (t) {
      this.bindWeblogger(t);
    }, t.prototype.bindWeblogger = function (t) {
      this.weblogger = t, this.core.bindWeblogger(this.weblogger);
    }, t.prototype.event = function (t, e) {
      this.eventCollect.event(t, e);
    }, t.prototype.customStage = function (t, e) {
      this.navigationCollect.customStage(t, e);
    }, t.prototype.setDimensions = function (t) {
      this.core.setDimensions(t);
    }, t.prototype.fmp = function (t) {
      "number" == typeof t ? this.navigationCollect.fmp(t) : "object" == _typeof(t) && t.timestamp ? this.navigationCollect.fmp(t.timestamp) : this.navigationCollect.fmp();
    }, t.prototype.captureException = function (t) {
      var e;
      this.errorCollect ? null != (e = this.errorCollect) && e.captureException(t) : console.warn("902");
    }, t.prototype.destroy = function () {
      var t;
      null != (t = this.navigationCollect) && t.destroy(), null != (t = this.apiCollect) && t.destroy(), null != (t = this.resourceCollect) && t.destroy(), null != (t = this.eventCollect) && t.destroy(), null != (t = this.errorCollect) && t.destroy();
    }, t.key = "radar", t.version = "1.2.5", t;
  }();

  "undefined" != typeof window && "function" != typeof window.Radar && (window.Radar = Radar$1);

  /**
   * @file Radar SDK
   * @author guwanpo
   */
  var CUSTOM_COLLECT_KEY = [];
  var Radar = /** @class */ (function (_super) {
      __extends(Radar, _super);
      function Radar(weblog, options) {
          var _this = _super.call(this) || this;
          // 有options证明是用配置的方式初始化的，否则是new的方式初始化的，将第一个参数给this.options
          _this.options = options ? options : weblog;
          // 验证配置内容
          if (!_this.validOption()) {
              return _this;
          }
          // 配置方式初始化radar时，weblogger会把weblogger对象传进来，而且不会调用apply方法，这里我们需要手动调用一下
          // https://git.corp.kuaishou.com/ks-frontend/modules/webLogger/-/blob/master/src/entries/browser-full.ts#L49
          if (weblog === null || weblog === void 0 ? void 0 : weblog.collect) {
              _this.apply(weblog);
          }
          return _this;
      }
      Radar.prototype.apply = function (weblog) {
          var _a;
          this.weblog = weblog;
          this.radarInstance = new Radar$1(_assign(_assign({}, this.options), { weblog: weblog }));
          this.action = (_a = this.radarInstance) === null || _a === void 0 ? void 0 : _a.action;
      };
      Radar.prototype.destroy = function () {
          var _a;
          (_a = this.radarInstance) === null || _a === void 0 ? void 0 : _a.destroy();
      };
      Radar.prototype.collect = function (key, duration) {
          var _a;
          if (key.indexOf('c_') !== 0 && CUSTOM_COLLECT_KEY.indexOf(key) < 0) {
              error('[error 305]', "[Radar] \u4F20\u5165\u7684\u81EA\u5B9A\u4E49\u6307\u6807 ".concat(key, " \u5FC5\u987B\u4E3A c_ \u5F00\u5934"));
              return;
          }
          warn('[radar]:Radar+之后将不再支持collect方法，请用event方法替代。');
          (_a = this.radarInstance) === null || _a === void 0 ? void 0 : _a.event({ name: key }, { duration: duration });
      };
      Radar.prototype.fmp = function (time) {
          var _a;
          (_a = this.radarInstance) === null || _a === void 0 ? void 0 : _a.fmp(time);
      };
      Radar.prototype.event = function (dimension, value) {
          var _a;
          (_a = this.radarInstance) === null || _a === void 0 ? void 0 : _a.event(dimension, value);
      };
      Radar.prototype.customStage = function (name, options) {
          var _a;
          (_a = this.radarInstance) === null || _a === void 0 ? void 0 : _a.customStage(name, options);
      };
      // 用于无头浏览器环境手动模拟onload事件内容进行perf数据收集
      Radar.prototype.headlessTestReport = function () {
          warn('[radar]:Radar+已不支持不再支持headlessTestReport方法');
      };
      Radar.prototype.playClicked = function (time) {
          warn('[radar]:Radar+已不支持不再支持playClicked方法');
      };
      Radar.prototype.playIDR = function (time) {
          warn('[radar]:Radar+已不支持不再支持playIDR方法');
      };
      Radar.prototype.playBlock = function (time) {
          warn('[radar]:Radar+已不支持不再支持playBlock方法');
      };
      Radar.prototype.playError = function (time) {
          warn('[radar]:Radar+已不支持不再支持playError方法');
      };
      Radar.prototype.setDimensions = function (param) {
          var _a;
          (_a = this.radarInstance) === null || _a === void 0 ? void 0 : _a.setDimensions(param);
      };
      Radar.prototype.validOption = function () {
          var _this = this;
          if (!this.options) {
              // 未传入参数默认不开启
              return false;
          }
          var _a = this.options, _b = _a.sampling, sampling = _b === void 0 ? 1 : _b, projectId = _a.projectId;
          if (typeof projectId !== 'string') {
              // error('[error 303]', '[Radar] 必须配置 projectId 属性，类型为 string!');
              return false;
          }
          if (sampling > 1 || sampling < 0) {
              // error('[error 304]', '[Radar] 采样率 sampling 必须为 0~1 之间的数字');
              return false;
          }
          [
              'apiSampling', 'errorSampling', 'resourceSampling', 'eventSampling',
          ].forEach(function (optionName) {
              var sampling = _this.options[optionName];
              if (sampling === undefined) {
                  return;
              }
              if (typeof sampling === 'number' && sampling === 0) {
                  error('[error 304]', "[Radar] \u91C7\u6837\u7387 ".concat(optionName, " \u4E0D\u80FD\u88AB\u8BBE\u7F6E\u4E3A 0\uFF0C\u5C06\u6539\u7528\u9ED8\u8BA4\u503C"));
              }
          });
          return true;
      };
      /**
       * 用于主动记录某个错误，并在雷达后台中跟踪它们。
       *
       * ## 场景 一
       *
       * 对于使用 try...catch... 捕获的错误，若想要记录并跟踪它们，则可以使用该方法：
       *
       * ```javascript
       * try {
       *     doSomething();
       * } catch (error) {
       *     weblog.plugins.radar.captureException(error);
       * }
       * ```
       *
       * ## 场景 二
       *
       * 用于记录 Vue 组件中的未捕获异常：
       *
       * ```javascript
       * Vue.config.errorHandler = function (error) {
       *     weblog.plugins.radar.captureException(error);
       * }
       * ```
       *
       * @param error - 错误信息，最好是传入一个 Error 对象，因为这可以让我们记录下该错误发生的地点以及其它有用的信息。
       */
      Radar.prototype.captureException = function (error) {
          var _a;
          (_a = this.radarInstance) === null || _a === void 0 ? void 0 : _a.captureException(error);
      };
      Radar.key = 'radar';
      return Radar;
  }(BasePlugin));

  var willunload = false;
  var urlChangeEventId = 'hashchange';
  var AutoPV = /** @class */ (function (_super) {
      __extends(AutoPV, _super);
      function AutoPV(weblog, options) {
          var _this = _super.call(this) || this;
          _this.beginTime = new Date().valueOf();
          _this.oldPushState = history.pushState;
          _this.oldReplaceState = history.replaceState;
          _this.visibilityChange = function () {
              var state = document.visibilityState;
              if (state === 'visible') {
                  willunload = false;
              }
              // 页面关闭也会触发 hidden 事件，这种情况下不再上报事件
              if (!_this.weblog || willunload)
                  return;
              if (_this.autoPVFilter(location.href, null, state)) {
                  if (state === 'hidden' || state === 'visible') {
                      if (state === 'visible')
                          _this.beginTime = new Date().valueOf();
                      _this.weblog.sendImmediately('PV', {
                          type: state,
                          // @ts-ignore
                          auto: true,
                          beginTime: _this.beginTime
                      });
                  }
              }
          };
          _this.proxyPushState = function (data, title, url) {
              _this.urlChange();
              return _this.oldPushState.call(history, data, title, url);
          };
          _this.proxyReplaceState = function (data, title, url) {
              _this.urlChange();
              return _this.oldReplaceState.call(history, data, title, url);
          };
          _this.urlChange = function () {
              if (!_this.weblog)
                  return;
              setTimeout(function () {
                  var _a = getMappingPage({ url: location.href }, _this.weblog.logConfig.urlMap), page = _a.page, params = _a.params;
                  if (page && page === _this.weblog.currentUrlPackage.page) {
                      // @ts-ignore
                      _this.weblog.currentUrlPackage.update(page, params);
                      return;
                  }
                  if (_this.autoPVFilter(location.href, _this.weblog.currentUrlPackage.page, 'leave')) {
                      // 触发旧页面离开
                      _this.weblog.sendImmediately('PV', {
                          type: 'leave',
                          // @ts-ignore
                          auto: true,
                          beginTime: _this.beginTime,
                          // @ts-ignore
                          urlPage: _this.weblog.currentUrlPackage.toJSON()
                      });
                  }
                  if (_this.autoPVFilter(location.href, _this.weblog.currentUrlPackage.page, 'enter')) {
                      // 更新当前页面信息
                      _this.weblog.updateReferUrlPackage(_this.weblog.currentUrlPackage);
                      _this.weblog.updateCurrentUrlPackage(location.href);
                      if (_this.weblog.currentUrlPackage.page.indexOf('http') === 0) {
                          console.warn('[warn 302]', "autoPV \u63D2\u4EF6 - \u4E0A\u62A5 page \u4FE1\u606F\u4E0D\u7B26\u5408\u89C4\u8303\uFF0C\u53EF\u4EE5\u4F7F\u7528 urlMap \u5C06 url \u8F6C\u6362\u4E3A\u82F1\u6587\u6807\u8BC6!");
                      }
                      // 更新新页面 enter 时间
                      _this.beginTime = new Date().valueOf();
                      _this.weblog.sendImmediately('PV', {
                          type: 'enter',
                          // @ts-ignore
                          auto: true,
                      });
                  }
              }, 0);
          };
          _this.beforeUnload = function () {
              willunload = true;
              if (!_this.weblog || !_this.autoPVFilter(location.href, null, 'leave')) {
                  return;
              }
              _this.weblog.sendImmediately('PV', {
                  type: 'leave',
                  // @ts-ignore
                  auto: true,
                  beginTime: _this.beginTime
              });
          };
          _this.autoPVFilter = function () { return true; };
          // 兼容处理
          if (weblog) {
              if (typeof weblog === 'function') {
                  _this.autoPVFilter = weblog;
              }
              else if (typeof (weblog === null || weblog === void 0 ? void 0 : weblog.collect) === 'function') {
                  if (options === null || options === void 0 ? void 0 : options.autoPVFilter) {
                      _this.autoPVFilter = options.autoPVFilter;
                  }
                  _this.apply(weblog);
              }
              else if ('autoPVFilter' in weblog && typeof weblog.autoPVFilter === 'function') {
                  _this.autoPVFilter = weblog.autoPVFilter;
              }
          }
          if (options && typeof options.autoPVFilter === 'function') {
              _this.autoPVFilter = options.autoPVFilter;
          }
          history.pushState = _this.proxyPushState;
          history.replaceState = _this.proxyReplaceState;
          return _this;
      }
      AutoPV.prototype.apply = function (weblog) {
          if (!weblog || !weblog.sendImmediately)
              return;
          this.weblog = weblog;
          if (this.autoPVFilter(location.href, null, 'enter')) {
              this.weblog.sendImmediately('PV', {
                  type: 'enter',
                  // @ts-ignore
                  auto: true
              });
          }
          var supportsPushState = weblog.Utils.ua.supportsPushState;
          urlChangeEventId = supportsPushState() ? 'popstate' : 'hashchange';
          addMonitor(window, urlChangeEventId, this.urlChange);
          addMonitor(document, 'visibilitychange', this.visibilityChange);
      };
      AutoPV.prototype.destroy = function () {
          removeMonitor(window, urlChangeEventId, this.urlChange);
          removeMonitor(document, 'visibilitychange', this.visibilityChange);
          history.pushState = this.oldPushState;
          history.replaceState = this.oldReplaceState;
      };
      AutoPV.key = 'autoPV';
      return AutoPV;
  }(BasePlugin));

  var Weblog = /** @class */ (function (_super) {
      __extends(Weblog, _super);
      function Weblog(logConfig, base) {
          var _this = _super.call(this, logConfig, base) || this;
          _this.initBuildInPlugins();
          return _this;
      }
      Weblog.prototype.initBuildInPlugins = function () {
          var _a = this.logConfig, autoPV = _a.autoPV, radar = _a.radar, fps = _a.fps, timing = _a.timing, crash = _a.crash, autoPVFilter = _a.autoPVFilter;
          // 这三个插件不再默认开启
          fps && this.plug(FPSMonitor);
          timing && this.plug(TimingMonitor);
          crash && this.plug(CrashMonitor);
          radar && this.plug(Radar, radar);
          if (autoPV || typeof autoPV === 'undefined') {
              this.plug(AutoPV, { autoPVFilter: autoPVFilter });
          }
      };
      return Weblog;
  }(BridgeWeblogger));
  // 注册到全局对象
  addClass(Weblog);
  initSilence();

  exports.BasePlugin = BasePlugin;
  exports.Weblog = Weblog;
  exports["default"] = Weblog;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=log.hybrid-full.js.map
