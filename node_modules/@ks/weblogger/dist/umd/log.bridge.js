(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@yoda/bridge')) :
    typeof define === 'function' && define.amd ? define(['exports', '@yoda/bridge'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Weblog = {}, global.KSYoda));
})(this, (function (exports, bridge) { 'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    /* global Reflect, Promise */
    var _extendStatics = function extendStatics(d, b) {
      _extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (d, b) {
        d.__proto__ = b;
      } || function (d, b) {
        for (var p in b) {
          if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        }
      };

      return _extendStatics(d, b);
    };

    function __extends(d, b) {
      if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");

      _extendStatics(d, b);

      function __() {
        this.constructor = d;
      }

      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var _assign = function __assign() {
      _assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];

          for (var p in s) {
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
        }

        return t;
      };

      return _assign.apply(this, arguments);
    };
    function __awaiter(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function (resolve) {
          resolve(value);
        });
      }

      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }

        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }

        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }

        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }
    function __generator(thisArg, body) {
      var _ = {
        label: 0,
        sent: function sent() {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      },
          f,
          y,
          t,
          g;
      return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
      }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
        return this;
      }), g;

      function verb(n) {
        return function (v) {
          return step([n, v]);
        };
      }

      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");

        while (_) {
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];

            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;

              case 4:
                _.label++;
                return {
                  value: op[1],
                  done: false
                };

              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;

              case 7:
                op = _.ops.pop();

                _.trys.pop();

                continue;

              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }

                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }

                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }

                if (t && _.label < t[2]) {
                  _.label = t[2];

                  _.ops.push(op);

                  break;
                }

                if (t[2]) _.ops.pop();

                _.trys.pop();

                continue;
            }

            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        }

        if (op[0] & 5) throw op[1];
        return {
          value: op[0] ? op[1] : void 0,
          done: true
        };
      }
    }
    function __spreadArray(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    }

    /**
     * 创建一个cookie字符串，可被赋值给document.cookie.
     * @param {string} name cookie名称.
     * @param {string} value cookie值.
     * @param {boolean} encode 是否对值进行编码.
     * @param {Object} options (Optional) 配置项.
     * @return {string} 返回 cookie 字符串.
     */
    function createCookieString(name, value, encode, options) {
        if (options === void 0) { options = {}; }
        var text = "".concat(encodeURIComponent(name), "=").concat((encode ? encodeURIComponent(value) : value));
        var expires = options.expires;
        var path = options.path || '/';
        var domain = options.domain || '';
        if (expires instanceof Date) {
            text += "; expires=".concat(expires.toUTCString());
        }
        if (typeof expires === 'number') {
            text += "; max-age==".concat(expires);
        }
        if (path !== '') {
            text += "; path=".concat(path);
        }
        if (domain !== '') {
            text += "; domain=".concat(domain);
        }
        if (options.secure === true) {
            text += '; secure';
        }
        return text;
    }
    /**
     * 将cookie序列化成对象.
     * @param {string} text cookie值.
     * @param {boolean=} shouldDecode cookie是否需要被解码. 默认为true.
     * @param {object=} options 如何读取cookie的配置.
     * @return {object} 可访问cookie的序列化结果
     */
    function parseCookieString(text, shouldDecode, options) {
        var _a;
        var cookies = {};
        if (text.length > 0) {
            var decodeValue = !shouldDecode
                ? function (s) {
                    return s;
                }
                : decodeURIComponent;
            var cookieParts = text.split(/;\s/g);
            var cookieName = null;
            var cookieValue = null;
            var cookieNameValue = null;
            for (var i = 0, len = cookieParts.length; i < len; i++) {
                cookieNameValue = (_a = cookieParts[i]) === null || _a === void 0 ? void 0 : _a.match(/([^=]+)=/i);
                if (cookieNameValue && cookieNameValue !== null) {
                    try {
                        cookieName = decodeURIComponent(cookieNameValue[1]);
                        cookieValue = decodeValue(cookieParts[i].substring(cookieNameValue[1].length + 1));
                    }
                    catch (ex) {
                        // 忽略
                    }
                }
                else {
                    // cookie 中没有 "=", 当成布尔值
                    cookieName = decodeURIComponent(cookieParts[i]);
                    cookieValue = '';
                }
                if (cookieName !== null) {
                    // 默认后面的cookie覆盖前面的
                    cookies[cookieName] = cookieValue;
                }
            }
        }
        return cookies;
    }
    var cookiesMap = {};
    var prevCookie;
    /**
     * 获取cookie值.
     * @param {string} name cookie名称.
     * @param {object=} options 配置项
     *                    raw: 是否进行编码，true则是未编码
     * @return {*} 不存在返回null.
     */
    function getCookie(name, options, force) {
        if (options === void 0) { options = {}; }
        if (force === void 0) { force = false; }
        try {
            if (!force && name in cookiesMap) {
                return cookiesMap[name];
            }
            if (!(window === null || window === void 0 ? void 0 : window.document))
                return;
            // 处理 cookie 动态更新情形
            var curCookie = document.cookie || '';
            if (curCookie === prevCookie)
                return cookiesMap[name];
            prevCookie = curCookie;
            cookiesMap = parseCookieString(curCookie, !options.raw, options);
            return cookiesMap[name];
        }
        catch (err) { }
    }
    /**
     * 给定的键值设置cookie
     * @param {string} name 名称.
     * @param {*} value cookie值.
     * @param {object=} options (Optional) 配置项:
     *      path 路径
     *      domain 域名
     *      expires 过期时间，一个Date对象
     *      secure 是否安全cookie
     *      raw (true/false). Setting raw to true indicates that the cookie should not be URI encoded before being set.
     */
    function setCookie(name, value, options) {
        if (options === void 0) { options = {}; }
        try {
            document.cookie = createCookieString(name, value, !options.raw, options);
            cookiesMap[name] = value;
        }
        catch (err) { }
    }
    var cookieUtils = {
        getCookie: getCookie,
        setCookie: setCookie,
        parseCookieString: parseCookieString
    };

    var sdkName = 'webLogger';
    function error() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        try {
            var error_1 = sdkName === 'webLogger_krn' ? console === null || console === void 0 ? void 0 : console.log : console === null || console === void 0 ? void 0 : console.error;
            return error_1 && error_1.call.apply(error_1, __spreadArray([console], args, false));
        }
        catch (e) {
            return;
        }
    }

    /**
     * 获取 localStorage 缓存
     */
    function getLocalStorageItem(key) {
        try {
            if (window && window.localStorage) {
                var value = window.localStorage.getItem(key);
                if (value) {
                    try {
                        return JSON.parse(value);
                    }
                    catch (err) {
                        return value;
                    }
                }
            }
        }
        catch (err) {
            return null;
        }
        return null;
    }
    /**
     * 设置 localStorage 缓存
     */
    function setLocalStorageItem(key, value) {
        try {
            if (window && window.localStorage) {
                window.localStorage.setItem(key, JSON.stringify(value));
                return true;
            }
        }
        catch (err) {
            return false;
        }
        return false;
    }
    function parseQueryString(queryString) {
        var result = {};
        var queries = queryString.split('&');
        for (var _i = 0, queries_1 = queries; _i < queries_1.length; _i++) {
            var query = queries_1[_i];
            var _a = query.split('='), key = _a[0], value = _a[1];
            if (!(key in result)) {
                result[key] = value;
                continue;
            }
            if (result[key] instanceof Array) {
                result[key].push(value);
                continue;
            }
            result[key] = [result[key], value];
        }
        return result;
    }
    /**
     * 检查依赖版本号是否不小于推荐版本
     */
    function checkVersion(recommendVersion, version) {
        if (!version)
            return false;
        if (version.indexOf('alpha') !== -1)
            return false;
        if (version.indexOf('beta') !== -1)
            return false;
        try {
            var matches = recommendVersion.match(/\d+\.\d+\.\d+/);
            recommendVersion = (matches === null || matches === void 0 ? void 0 : matches[0]) || '';
            if (!recommendVersion)
                return true;
            matches = version.match(/\d+\.\d+\.\d+/);
            version = (matches === null || matches === void 0 ? void 0 : matches[0]) || '';
            if (!version)
                return false;
            var _a = recommendVersion.split('.').map(function (i) { return Number(i); }), rMajor = _a[0], rMinor = _a[1], rPatch = _a[2];
            var _b = version.split('.').map(function (i) { return Number(i); }), major = _b[0], minor = _b[1], patch = _b[2];
            if (major < rMajor)
                return false;
            if (major > rMajor)
                return true;
            if (minor < rMinor)
                return false;
            if (minor > rMinor)
                return true;
            if (patch < rPatch)
                return false;
            return true;
        }
        catch (err) {
            return false;
        }
    }
    function checkSupportCloseCoPage() {
        var version = getCookie('appver', undefined, true);
        return version && checkVersion('10.8.30', version);
    }
    function getUrlAndQueryFromUrl(url) {
        if (url === void 0) { url = location.href; }
        var queryIndex = url.lastIndexOf('?');
        if (queryIndex === -1) {
            return {
                page: url
            };
        }
        var page = url.slice(0, queryIndex);
        var queryString = url.slice(queryIndex + 1);
        return {
            page: page,
            params: parseQueryString(queryString),
        };
    }
    var getMappingPage = function (urlPackage, urlMap) {
        var url = urlPackage.url, page = urlPackage.page, params = urlPackage.params, pageId = urlPackage.pageId;
        if (!page && typeof url === 'string') {
            var parsed = getUrlAndQueryFromUrl(url);
            page = parsed.page;
            params = parsed.params;
        }
        if (typeof urlMap === 'function') {
            try {
                var res = urlMap({ url: url, page: page, params: params });
                if (typeof res === 'string') {
                    page = res;
                }
                else if (typeof res === 'object') {
                    if (res.page) {
                        page = res.page;
                    }
                    if (res.params) {
                        params = res.params;
                    }
                    if (res.pageId) {
                        pageId = res.pageId;
                    }
                }
            }
            catch (err) { }
        }
        else if (typeof urlMap === 'object') {
            var mappingPage = '';
            for (var key in urlMap) {
                if ((url || page || '').indexOf(key) > -1) {
                    mappingPage = urlMap[key];
                    break;
                }
            }
            if (mappingPage) {
                page = mappingPage;
            }
        }
        return {
            page: page,
            params: params,
            pageId: pageId
        };
    };
    function pageUrlValidate(page) {
        // 对于上报到v2，page为url的埋点，给予警告
        if (page && /^(https?:)?\/\//.test(page)) {
            error('[error 108]', "\u8BF7\u6CE8\u610F\u5F53\u524D\u57CB\u70B9\u9875\u9762\u4FE1\u606F\u4E3A ".concat(page, "\uFF0C\u4E0D\u7B26\u5408\u89C4\u8303\uFF0C\u4E0A\u62A5\u5931\u8D25\uFF01"));
            return false;
        }
        return true;
    }
    var getResolution = (function () {
        var resolution = '';
        return function () {
            if (resolution) {
                return resolution;
            }
            try {
                var ratio = window.devicePixelRatio || 1;
                var width = Math.floor(screen.width * ratio); // 有的devicePixelRatio为小数，在此转为整数
                var height = Math.floor(screen.height * ratio);
                resolution = "".concat(width, "x").concat(height);
                return resolution;
            }
            catch (err) {
                return '';
            }
        };
    })();
    // 从vue-router里面拿的……
    function supportsPushState() {
        var ua = window.navigator.userAgent;
        if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1)
            && ua.indexOf('Mobile Safari') !== -1
            && ua.indexOf('Chrome') === -1
            && ua.indexOf('Windows Phone') === -1) {
            return false;
        }
        return window.history && 'pushState' in window.history;
    }
    /**
     * 返回正整数数值
     * @param value
     */
    var getPositiveInteger = function (value) {
        try {
            return Math.abs(Math.floor(value));
        }
        catch (e) {
            return value;
        }
    };
    function stringifyParams(params) {
        return typeof params === 'string' ? params : typeof params === 'object' ? JSON.stringify(params) : '';
    }

    // Bridge 常规事件自增 id 本地缓存 key
    var H5_SEQ_ID_KEY = 'WEBLOGGER_H5_SEQ_ID';
    // Bridge 自定义事件自增 id 本地缓存 key
    var H5_CUSTOM_SEQ_ID_KEY = 'WEBLOGGER_H5_CUSTOM_SEQ_ID';
    // 自增 id 最大值
    var maxId = 1e8;
    // 如果没有 localStorage 则使用运行时自增 id，用于非浏览器场景，比如 React Native
    var runtimeIdMap = {};
    var genId = function (key) {
        try {
            if (window && window.localStorage && typeof Storage !== 'undefined' && window.localStorage instanceof Storage) {
                var id = Number(getLocalStorageItem(key)) || 0;
                if (id + 1 > maxId) {
                    id = 0;
                }
                setLocalStorageItem(key, id + 1);
                return id;
            }
        }
        catch (err) { }
        if (!runtimeIdMap[key]) {
            runtimeIdMap[key] = 0;
        }
        return runtimeIdMap[key]++;
    };
    /**
     * 桥接常规事件自增 id
     */
    var getBridgeNormalIncrementId = function () {
        return genId(H5_SEQ_ID_KEY);
    };
    /**
     * 桥接自定义事件自增 id
     */
    var getBridgeCustomIncrementId = function () {
        return genId(H5_CUSTOM_SEQ_ID_KEY);
    };

    var oldApiTransformer = function (type, name, params, contentPackage) {
        if (name === void 0) { name = {}; }
        var realType;
        if (typeof type !== 'string') {
            realType = type.type;
        }
        realType = type.toUpperCase();
        var options = {};
        if (typeof name === 'string') {
            console.warn('[warn 105]', '接口参数为旧式，后续版本将不再兼容，推荐使用新的参数形式');
            options.contentPackage = contentPackage;
            if (type === 'CUSTOM') {
                options.key = name;
                options.value = params;
            }
            else {
                options.params = params;
                if (type === 'PV') {
                    options.page = name;
                }
                else {
                    options.action = name;
                }
            }
        }
        else {
            options = name;
            if (['CUSTOM', 'CUSTOM_EVENT'].includes(realType)) {
                var customParams = name;
                if (customParams.action && !customParams.key) {
                    options.key = customParams.action;
                }
                if (customParams.params && !customParams.value) {
                    options.value = customParams.params;
                }
            }
        }
        return [
            realType,
            options
        ];
    };

    var _a;
    ((_a = window === null || window === void 0 ? void 0 : window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) || '';
    /**
     * 判断是否是 kds 环境
     */
    var isKDSNative = (function () {
        var res;
        return function () {
            return res;
        };
    })();

    function logFactory(type, data) {
        var _a = data, action = _a.action, params = _a.params, eventId = _a.eventId, contentPackage = _a.contentPackage, currentUrlPackage = _a.currentUrlPackage, _b = _a.status, status = _b === void 0 ? 'SUCCESS' : _b; _a.name; var feedLogCtx = _a.feedLogCtx;
        if (type === 'PV') {
            var _c = data, actionType = _c.type, beginTime = _c.beginTime;
            return _assign(_assign({}, currentUrlPackage), { actionType: actionType, contentPackage: contentPackage, status: status, beginTime: beginTime, eventId: eventId, pageType: isKDSNative() ? 'NATIVE' : 'H5' });
        }
        var urlPage;
        if (currentUrlPackage) {
            var page = currentUrlPackage.page, params_1 = currentUrlPackage.params, identity = currentUrlPackage.identity, coPage = currentUrlPackage.coPage;
            urlPage = {
                page: page,
                params: params_1,
                identity: identity,
                coPage: coPage,
            };
        }
        if (['RADAR', 'CUSTOM', 'CUSTOM_EVENT'].includes(type)) {
            var _d = data, key = _d.key, value = _d.value, biz = _d.biz;
            return {
                key: key,
                value: JSON.stringify(_assign(_assign({}, value), { url_package: currentUrlPackage })),
                biz: biz,
                eventId: eventId,
                urlPage: urlPage
            };
        }
        var elementLogParams = {
            action: action,
            params: JSON.stringify(params),
            contentPackage: contentPackage,
            feedLogCtx: feedLogCtx,
            eventId: eventId,
            urlPage: urlPage
        };
        if (type !== 'SHOW') {
            var taskType = data.type;
            Object.assign(elementLogParams, {
                type: taskType || 'USER_OPERATION',
                status: status || 'UNKNOWN_STATUS',
                operationType: type,
                operationDirection: 'UNKNOWN2',
            });
        }
        return elementLogParams;
    }

    var invoke;
    /**
     * 是否支持桥接 canIUse
     */
    var isSupportBridge = function (name, namespace) {
        if (namespace === void 0) { namespace = 'tool'; }
        return __awaiter(void 0, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof invoke === 'undefined')
                            return [2 /*return*/, false];
                        return [4 /*yield*/, invoke('tool.canIUse', {
                                namespace: namespace,
                                name: name
                            })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, (res === null || res === void 0 ? void 0 : res.canUse) || false];
                }
            });
        });
    };
    /**
     * 是否支持桥接上报埋点接口
     */
    var isSupportBridgeLog = function () {
        return isSupportBridge('setClientLog');
    };
    /**
     * 传入 invoke 方法
     */
    var postInvoke = function (invokeOrYoda) {
        if (typeof invokeOrYoda === 'function') {
            invoke = invokeOrYoda;
        }
        else {
            invoke = invokeOrYoda.invoke;
        }
    };
    /**
     * 发送业务事件
     */
    var setClientLog = function (type, data) { return __awaiter(void 0, void 0, void 0, function () {
        var err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, invoke('tool.setClientLog', { type: type, data: data })];
                case 1: return [2 /*return*/, _a.sent()];
                case 2:
                    err_1 = _a.sent();
                    error('[error 206]', "yoda.tool.setClientLog() \u62A5\u9519: ".concat(err_1.message));
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); };
    /**
     * 发送雷达事件
     */
    var sendRadarLog = function (params) { return __awaiter(void 0, void 0, void 0, function () {
        var err_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, invoke('tool.sendRadarLog', params)];
                case 1: return [2 /*return*/, _a.sent()];
                case 2:
                    err_2 = _a.sent();
                    error('[error 207]', "yoda.tool.sendRadarLog() \u62A5\u9519: ".concat(err_2.message));
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); };
    /**
     * 发送web日志，支持日志回捞
     */
    var sendWebLog = function (params) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            try {
                return [2 /*return*/, invoke('tool.sendWebLog', params)];
            }
            catch (err) {
                error('[error 214]', "yoda.tool.sendWebLog() \u62A5\u9519: ".concat(err.message));
            }
            return [2 /*return*/];
        });
    }); };
    /**
     * 发送汇总数据
     */
    var sendSummarizedLog = function (params) { return __awaiter(void 0, void 0, void 0, function () {
        var err_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, invoke('tool.sendSummarizedLog', params)];
                case 1: return [2 /*return*/, _a.sent()];
                case 2:
                    err_3 = _a.sent();
                    error('[error 208]', "yoda.tool.sendSummarizedLog() \u62A5\u9519: ".concat(err_3.message));
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); };
    /**
     * 获取 webview 信息
     */
    var getWebviewLoadPerf = function (params, options) {
        if (params === void 0) { params = {}; }
        return __awaiter(void 0, void 0, void 0, function () {
            var err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, invoke('webview.getPageLoadData', params, options)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        err_5 = _a.sent();
                        error('[error 209]', "yoda.webview.getPageLoadData() \u62A5\u9519: ".concat(err_5.message));
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 获取 ksd相关webview 信息
     */
    var getKDSWebviewLoadPerf = function (params) {
        if (params === void 0) { params = {}; }
        return __awaiter(void 0, void 0, void 0, function () {
            var err_7;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, invoke('system.getPageLoadData', params)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        err_7 = _a.sent();
                        error('[error 209]', "yoda.system.getPageLoadData() \u62A5\u9519: ".concat(err_7.message));
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    var yodaUtils = {
        setClientLog: setClientLog,
        sendRadarLog: sendRadarLog,
        sendWebLog: sendWebLog,
        sendSummarizedLog: sendSummarizedLog,
        getWebviewLoadPerf: getWebviewLoadPerf,
        getKDSWebviewLoadPerf: getKDSWebviewLoadPerf,
        isSupportBridgeLog: isSupportBridgeLog,
        isSupportBridge: isSupportBridge,
        invoke: invoke
    };

    var xhrErrorLog = function (err, url, data) { return error('[error 400]', '埋点上报接口请求报错', '\nurl:', url, '\ndata', data, '\nerror:', err || 'server decode log failed'); };
    var logXhrResponseCheck = function (status, response, url, data) {
        var err;
        if (status < 200 || (status >= 300 && status !== 304)) ;
        else {
            try {
                var _a = JSON.parse(response), exception = _a.exception, result = _a.result, error_msg = _a.error_msg;
                if (exception) {
                    err = exception;
                }
                if (result !== 1) {
                    err = error_msg || "result is ".concat(result);
                }
            }
            catch (e) {
                err = e.message;
            }
        }
        err && xhrErrorLog(err, url, data);
        return err;
    };

    function send(_a, callback) {
        var url = _a.url, data = _a.data, timeout = _a.timeout;
        return new Promise(function (resolve) {
            var xhr = new XMLHttpRequest();
            // async 同步情况会报错，而且影响性能，取消使用同步
            xhr.open('POST', url);
            xhr.setRequestHeader('Content-Type', 'text/plain;charset=UTF-8');
            if (typeof data === 'object' && !(data instanceof Uint8Array)) {
                data = JSON.stringify(data);
            }
            if (timeout) {
                xhr.timeout = timeout;
            }
            xhr.onload = function () {
                var err = logXhrResponseCheck(xhr.status, xhr.response, url, data);
                callback && callback(err);
                resolve({
                    error: err,
                    response: err ? undefined : xhr.response,
                });
            };
            xhr.ontimeout = xhr.onerror = function (err) {
                if (err)
                    xhrErrorLog(err, url, data);
                // err 不能直接传入 postMessage，会导致 postMessage 直接报错，误认为 worker 内部直接逻辑报错，以后发送埋点直接无法压缩
                callback && callback(err ? 'networkTimeout' : '');
                resolve({
                    error: 'networkTimeout',
                });
            };
            xhr.send(data);
            return xhr;
        });
    }

    var UrlPackage$1 = /** @class */ (function () {
        function UrlPackage(url, pageType) {
            // 一级页面。参考埋点需求填写即可
            this.page = '';
            // 实例的全局唯一标识，使用UUID即可
            this.identity = '';
            switch (pageType) {
                case 'web':
                    this.page_type = 2;
                    break;
                case 'native':
                    this.page_type = 1;
                    break;
                case 'mina':
                    this.page_type = 3;
                    break;
                default:
                    this.page_type = 0; // unknown
            }
            this.update(url.page, url.params);
        }
        // 更新urlPackage
        UrlPackage.prototype.update = function (page, params) {
            if (page === void 0) { page = ''; }
            if (page && page !== this.page) {
                this.page = page;
                this.identity = this.generatePageId(page);
            }
            if (params) {
                this.params = Object.assign(this.params || {}, params);
            }
        };
        UrlPackage.prototype.toJSON = function () {
            return {
                page: this.page,
                identity: this.identity,
                page_type: this.page_type,
                params: JSON.stringify(this.params),
                category: this.category,
            };
        };
        /**
         * 生成页面唯一id
         * 未自定义页面唯一ID生成方法，请自行添加后重新尝试
         * @param page
         */
        UrlPackage.prototype.generatePageId = function (page) {
            return page + new Date().getTime();
        };
        return UrlPackage;
    }());

    function uuid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    var UrlPackage = /** @class */ (function (_super) {
        __extends(UrlPackage, _super);
        function UrlPackage(url, pageType, urlMap) {
            var _this = _super.call(this, {}, pageType) || this;
            if (typeof url === 'string') {
                // TODO: 避免兼容问题，暂不处理
                // try {
                //     url = window.decodeURIComponent(url);
                // } catch (err) {}
                var obj = getUrlAndQueryFromUrl(url);
                _this.page = obj.page;
                _this.params = obj.params;
            }
            else {
                _this.page = (url || {}).page || '';
                _this.params = (url || {}).params || undefined;
            }
            _this.identity = _this.generatePageId();
            if (urlMap && typeof url === 'string') {
                _this.init(url, urlMap);
            }
            return _this;
        }
        UrlPackage.prototype.init = function (url, urlMap) {
            if (urlMap === void 0) { urlMap = {}; }
            var _a = getMappingPage({ url: url, page: this.page, params: this.params }, urlMap), page = _a.page, params = _a.params;
            this.update(page, params);
        };
        UrlPackage.prototype.attachUrl = function () {
            if (!this.params) {
                this.params = {};
            }
            if (location === null || location === void 0 ? void 0 : location.href) {
                // 电商需求，页面信息携带原始 url 和 pathname
                this.params.origin_url = this.params.origin_url || (location === null || location === void 0 ? void 0 : location.href);
                var _a = getUrlAndQueryFromUrl(location.href).page, page = _a === void 0 ? '' : _a;
                this.params.origin_pathname = page;
            }
        };
        UrlPackage.prototype.getRealUrlPackage = function () {
            var _a = getUrlAndQueryFromUrl(location.href), page = _a.page, params = _a.params;
            return {
                page: page,
                params: JSON.stringify(_assign({ page_code: this.page, url: location.href, query: params }, params)),
                page_type: this.page_type,
                identity: this.identity
            };
        };
        UrlPackage.prototype.generatePageId = function () {
            return uuid();
        };
        return UrlPackage;
    }(UrlPackage$1));

    postInvoke(bridge.invoke);
    /**
     * 判断当前yoda的状态
     * INIT: 初始状态
     * READY：可用，此时上报的埋点会以桥接方式上报
     * DISABLED：不可用，此时上报的埋点会以 http 方式上报
     * CHECKING：检查是否可用中，此时上报的埋点都会推入等待队列
     */
    var YodaStatus;
    (function (YodaStatus) {
        YodaStatus[YodaStatus["INIT"] = -1] = "INIT";
        YodaStatus[YodaStatus["CHECKING"] = 0] = "CHECKING";
        YodaStatus[YodaStatus["READY"] = 1] = "READY";
        YodaStatus[YodaStatus["DISABLED"] = 2] = "DISABLED";
    })(YodaStatus || (YodaStatus = {}));
    var pluginIndex = 0;
    var Weblogger = /** @class */ (function () {
        function Weblogger(configOption, baseOption) {
            this.version = '3.10.23';
            // 插件
            this.plugins = {};
            // 记录页面是否已发送过 enter pv;
            this.entered = '';
            this.logConfig = configOption;
            this.baseOption = baseOption;
            this.commonPackage = new CommonPackage(baseOption);
            this.updateCurrentUrlPackage();
            this.addPlugins();
            if (!Weblogger.__instance) {
                Weblogger.__instance = this;
            }
            console.warn('[webLogger] 您正在使用的是', '【纯桥接上报】的 js 包，端外打开不会上报埋点。');
        }
        Object.defineProperty(Weblogger.prototype, "Utils", {
            get: function () {
                return {
                    yoda: yodaUtils,
                    cookie: cookieUtils,
                    ua: {
                        getDefaultKpn: function () { return getCookie('kpn'); },
                        supportsPushState: supportsPushState,
                    },
                    io: {
                        sendData: send,
                    },
                };
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Weblogger.prototype, "sessionId", {
            get: function () {
                return getCookie('session_id') || getCookie('sid');
            },
            enumerable: false,
            configurable: true
        });
        /**
         * 初始化插件
         * @param plugins
         */
        Weblogger.prototype.addPlugins = function () {
            var _this = this;
            if (!this.logConfig.plugins || !this.logConfig.plugins.length)
                return;
            // 类似 webpack plugins 的实例数组
            this.logConfig.plugins.forEach(function (plugin) {
                if (typeof plugin === 'object' && typeof plugin.apply === 'function') {
                    _this.addPluginInstance(plugin);
                }
            });
        };
        /**
         * 加载插件实例
         */
        Weblogger.prototype.addPluginInstance = function (pluginInstance) {
            if (pluginInstance) {
                var key = pluginInstance.key || pluginInstance.constructor && pluginInstance.constructor.key || "plugin_auto_key_".concat(pluginIndex++);
                if (typeof pluginInstance.apply === 'function'
                    && (!pluginInstance.weblog || pluginInstance.weblog !== this)) {
                    pluginInstance.apply(this);
                }
                this.plugins[key] = pluginInstance;
            }
        };
        /**
         * 加载插件构造函数
         * @param plugin
         * @param pluginOptions
         */
        Weblogger.prototype.plug = function (plugin, pluginOptions) {
            if (this.plugins[plugin.key]) {
                return error('[code 301]', "".concat(plugin.key, " \u63D2\u4EF6\u91CD\u590D\u52A0\u8F7D\uFF01"));
            }
            this.addPluginInstance(new plugin(this, pluginOptions));
        };
        Weblogger.prototype.collect = function (type, name, params, contentPackage) {
            var _a = oldApiTransformer(type, name, params, contentPackage), logType = _a[0], logParams = _a[1];
            return this.send(logType, logParams, false);
        };
        Weblogger.prototype.sendImmediately = function (type, name, params, contentPackage) {
            var _a = oldApiTransformer(type, name, params, contentPackage), logType = _a[0], logParams = _a[1];
            return this.send(logType, logParams, true);
        };
        Weblogger.prototype.sendByBridge = function (eventType, eventOptions, immediately) {
            var _a = this.logConfig, configDisablePV = _a.disablePV, biz = _a.biz;
            var _b = eventOptions, contentPackage = _b.contentPackage, eventDisablePV = _b.disablePV, _c = _b.bridgeFields, bridgeFields = _c === void 0 ? {} : _c, urlPage = _b.urlPage;
            var disablePV = configDisablePV || eventDisablePV;
            if (contentPackage) {
                contentPackage = typeof contentPackage === 'string' ? contentPackage : JSON.stringify(contentPackage);
            }
            var setClientLogType = 'addTaskEvent';
            var isPVEvent = eventType === 'PV';
            if (isPVEvent) {
                if (disablePV)
                    return;
                // bridge PV 仅支持 enter 和 visible
                var supportPVTypes = ['enter', 'visible'];
                var _d = eventOptions, page = _d.page, type = _d.type, params = _d.params, coPage_1 = _d.coPage, category = _d.category;
                // 半屏离开事件，直接调用新的方法
                if (type === 'leave' && this.currentUrlPackage.coPage && checkSupportCloseCoPage()) {
                    setClientLog('closeCoPage', _assign(_assign({}, eventOptions), this.currentUrlPackage));
                    return;
                }
                if (!type)
                    eventOptions.type = type = 'enter';
                if (supportPVTypes.indexOf(type) === -1) {
                    return;
                }
                // enter 则强行重新生成新的 currentUrlPackage，否则局部更新
                if (type === 'enter') {
                    // params 和 page 的处理和 hybrid 保持一致，兼容 autopv 插件发送 pv 时在插件内部已经修改 currentUrlPackage 内容
                    params = !page ? this.currentUrlPackage.params : params;
                    page = page || this.currentUrlPackage.page;
                    this.updateCurrentUrlPackage({ page: page, params: params, force: true });
                    if (coPage_1) {
                        this.currentUrlPackage.coPage = coPage_1;
                    }
                    if (category) {
                        this.currentUrlPackage.category = category;
                    }
                    this.entered = page;
                }
                else if (page === this.entered) {
                    this.currentUrlPackage.update(page, params);
                }
                // 对于上报到v2，page为url的埋点，给予提示
                if (!pageUrlValidate(this.currentUrlPackage.page))
                    return;
                setClientLogType = 'setCurrentPage';
            }
            var coPage = !!this.currentUrlPackage.coPage;
            var urlPackage = (urlPage === null || urlPage === void 0 ? void 0 : urlPage.page) && !isPVEvent ? {
                page: urlPage.page,
                identity: urlPage.identity,
                params: stringifyParams(urlPage.params),
                page_type: this.currentUrlPackage.page_type
            } : this.currentUrlPackage.toJSON();
            var log = logFactory(eventType, _assign(_assign({ biz: biz }, eventOptions), { contentPackage: contentPackage, currentUrlPackage: disablePV ? undefined : urlPackage })); // TODO: 暂时 any
            var isCustomType = ['CUSTOM', 'RADAR', 'CUSTOM_EVENT'].indexOf(eventType) !== -1;
            // 保持 h5ExtraAttr 来源统一
            this.commonPackage.increaseH5SeqId(isCustomType);
            // 设置 log 公共属性
            var _e = this.baseOption || {}, service_name = _e.service_name, sub_biz = _e.sub_biz, need_encrypt = _e.need_encrypt;
            // TODO: 桥接上报不需要 common_package 信息，可以优化
            log.h5ExtraAttr = JSON.stringify(this.commonPackage.getH5ExtraAttr({ coPage: coPage }));
            log.realtime = !!immediately;
            log.serviceName = service_name || '';
            log.subBiz = sub_biz || '';
            log.needEncrypt = need_encrypt || false;
            log.container = isKDSNative() ? 'REACT_NATIVE' : 'H5';
            if (eventType === 'SHOW') {
                setClientLogType = 'addElementShowEvent';
            }
            else if (isCustomType) {
                // 兼容业务一些迁移行为，自动把 custom_stat_event 转为 custom_event
                setClientLogType = (eventType === 'CUSTOM_EVENT' || this.logConfig.customStatToCustom) ? 'addCustomEvent' : 'addCustomStatEvent';
            }
            setClientLog(setClientLogType, _assign(_assign({}, bridgeFields), log));
        };
        Weblogger.prototype.send = function (eventType, eventOptions, immediately) {
            if (eventOptions === void 0) { eventOptions = {}; }
            eventType = eventType.toUpperCase();
            this.sendByBridge(eventType, eventOptions, immediately);
        };
        Weblogger.prototype.updateCurrentUrlPackage = function (url, type) {
            if (url === void 0) { url = (location === null || location === void 0 ? void 0 : location.href) || ''; }
            if (type === void 0) { type = 'web'; }
            if (typeof url === 'object' && !url.force && this.currentUrlPackage) {
                var _a = url.page, page = _a === void 0 ? this.currentUrlPackage.page : _a, _b = url.params, params = _b === void 0 ? {} : _b;
                if (!page || page === this.currentUrlPackage.page) {
                    var isPageEntered = this.entered === page;
                    if (!isPageEntered) {
                        this.currentUrlPackage.update(page, params);
                        return;
                    }
                    // 客户端内直接使用 updateCurrentUrlPackage 更改页面参数是无法成功的
                    // 客户端只认 pv 上报时候带上去的参数，因此此处发送一个visible类型的pv，改变客户端维护的页面参数
                    this.send('PV', {
                        type: 'visible',
                        page: page,
                        params: params,
                    }, true);
                    return;
                }
            }
            this.currentUrlPackage = new UrlPackage(url, type, this.logConfig.urlMap);
            if (this.logConfig.attachUrl)
                this.currentUrlPackage.attachUrl();
        };
        /**
         * 更新 refer url 信息
         * @param url
         * @param type
         */
        Weblogger.prototype.updateReferUrlPackage = function (url, type) {
            if (url === void 0) { url = this.currentUrlPackage; }
            if (type === void 0) { type = 'web'; }
            if (url instanceof UrlPackage) {
                this.referUrlPackage = url;
            }
            else {
                this.referUrlPackage = new UrlPackage(url, type, this.logConfig.urlMap);
            }
        };
        Weblogger.prototype.updateCommonPackage = function (options) {
            this.commonPackage.update(options);
        };
        Weblogger.prototype.flush = function () { };
        Weblogger.prototype.on = function () { };
        Weblogger.prototype.emit = function () { };
        return Weblogger;
    }());
    var CommonPackage = /** @class */ (function () {
        function CommonPackage(option) {
            this.h5_extra_attr = {
                // SDK 版本信息
                sdk_name: 'webLogger',
                sdk_version: '3.10.23',
                sdk_bundle: 'log.bridge.js',
                host_product: getCookie('kpn'),
                resolution: getResolution(),
                domain: window.location.origin,
                app_version_name: getCookie('appver') || '',
                bridge_info: bridge.version || true,
            };
            this.update(option);
        }
        CommonPackage.prototype.getVersionName = function () {
            var _a;
            return (_a = this.app_package) === null || _a === void 0 ? void 0 : _a.version_name;
        };
        CommonPackage.prototype.update = function (option) {
            Object.assign(this.h5_extra_attr, option === null || option === void 0 ? void 0 : option.h5_extra_attr);
            this.container = option === null || option === void 0 ? void 0 : option.container;
            this.service_name = option === null || option === void 0 ? void 0 : option.service_name;
            this.sub_biz = option === null || option === void 0 ? void 0 : option.sub_biz;
            this.need_encrypt = option === null || option === void 0 ? void 0 : option.need_encrypt;
            this.app_package = {
                version_name: this.h5_extra_attr.app_version_name,
                container: isKDSNative() ? 'REACT_NATIVE' : 'H5'
            };
        };
        // 用于统计桥接丢失率
        CommonPackage.prototype.increaseH5SeqId = function (isCustom) {
            this.h5_extra_attr.client_timestamp = getPositiveInteger(Date.now());
            this.h5_extra_attr.seq_id = isCustom ? getBridgeCustomIncrementId() : getBridgeNormalIncrementId();
        };
        CommonPackage.prototype.getH5ExtraAttr = function (extraInfo) {
            return Object.assign({}, this.h5_extra_attr, extraInfo);
        };
        return CommonPackage;
    }());

    var BasePlugin = /** @class */ (function () {
        function BasePlugin() {
        }
        BasePlugin.prototype.apply = function (weblog) {
            this.weblog = weblog;
        };
        return BasePlugin;
    }());

    // 注册到全局对象
    if (typeof window !== 'undefined') {
        if (typeof window._GLOBAL_KS_WEBLOGGER_ !== 'undefined') {
            window._GLOBAL_KS_WEBLOGGER_.Factory = Weblogger;
        }
        else {
            window.Weblog = Weblogger;
        }
    }

    exports.BasePlugin = BasePlugin;
    exports.Weblog = Weblogger;
    exports["default"] = Weblogger;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=log.bridge.js.map
