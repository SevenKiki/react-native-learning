/**
 * @file Radar SDK
 * @author guwanpo
 */
import RadarSDK, { RadarOptions as RadarSDKOptions } from '@ks-radar/radar';
import type { HybridWeblogInstance } from "../../types/index";
import { BasePlugin } from '../base';
export interface TimelineOption {
    sendTimeline?: boolean;
    timestamp?: number;
}
export interface EventDimension {
    name: string;
    category?: string | string[];
    event_type?: string | string[];
    src?: string;
    result_type?: string;
    message?: string;
    extra_info?: object | string;
    yoda_version?: string;
    webview_type?: string;
}
export interface ActionStartDimension {
    name: string;
    extra_info?: object;
}
export interface ActionEndDimension {
    name: string;
    extra_info?: object;
    result_type?: string;
}
export interface SetDimensionParam {
    c_dimension1?: any;
    c_dimension2?: any;
    c_dimension3?: any;
}
export interface APIHooKData {
    request: any;
    response: any;
    duration: number;
}
export interface APIHooKResData {
    intercept_report?: boolean;
    response_code?: string | number;
    response_msg?: any;
    status?: string | number;
    custom_failed?: boolean;
}
export interface ResourceHookData {
    file: string;
    cached: boolean;
    protocol: string;
    res_type: string;
    failed: boolean;
}
export interface ResourceHookResData {
    intercept_report: boolean;
}
export interface RadarOptions extends RadarSDKOptions {
    eventSampling?: number;
}
export default class Radar extends BasePlugin {
    static key: string;
    options: RadarOptions;
    radarInstance?: RadarSDK;
    action?: {
        start: (dimension: ActionStartDimension) => void;
        end: (dimension: ActionEndDimension) => void;
    };
    /**
     * 兼容写法，如果在 Weblog 初始化设置 plugins 时，不需要设置 weblog
     * @param weblog
     * @param options
     */
    constructor(options: RadarOptions);
    constructor(weblog: HybridWeblogInstance, options: RadarOptions);
    apply(weblog: HybridWeblogInstance): void;
    destroy(): void;
    collect(key: string, duration?: number): void;
    fmp(time?: number | {
        timestamp?: number;
    }): void;
    event(dimension: EventDimension, value?: object): void;
    customStage(name: string, options?: TimelineOption): void;
    headlessTestReport(): void;
    playClicked(time?: number): void;
    playIDR(time?: number): void;
    playBlock(time?: string): void;
    playError(time?: string): void;
    setDimensions(param: SetDimensionParam): void;
    validOption(): boolean;
    /**
     * 用于主动记录某个错误，并在雷达后台中跟踪它们。
     *
     * ## 场景 一
     *
     * 对于使用 try...catch... 捕获的错误，若想要记录并跟踪它们，则可以使用该方法：
     *
     * ```javascript
     * try {
     *     doSomething();
     * } catch (error) {
     *     weblog.plugins.radar.captureException(error);
     * }
     * ```
     *
     * ## 场景 二
     *
     * 用于记录 Vue 组件中的未捕获异常：
     *
     * ```javascript
     * Vue.config.errorHandler = function (error) {
     *     weblog.plugins.radar.captureException(error);
     * }
     * ```
     *
     * @param error - 错误信息，最好是传入一个 Error 对象，因为这可以让我们记录下该错误发生的地点以及其它有用的信息。
     */
    captureException(error: Error): void;
}
