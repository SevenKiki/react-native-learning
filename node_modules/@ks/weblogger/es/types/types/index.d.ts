import type { HttpWeblogInitParams, HybridWeblogInitParams, BridgeWeblogInitParams, FullHttpWeblogInitParams, FullHybridWeblogInitParams, HttpWeblogInitParamsMina, CommonConfig, HttpCommonPackage, UrlPackage } from './configuration';
import type { Base } from '../proto/base';
import type { EventType, EventOptions, BizEventTypes, TaskOperations, CustomEventTypes, ImmediatelyEventOptions } from './event';
import type { SetClientLogTypes } from "./bridge";
/**
 * 标准 api 接口
 */
export declare type StandardCollectParameters<T extends EventType> = [
    eventType: T,
    eventOptions: EventOptions<T>
];
/**
 * 旧 api 接口，即将废弃
 */
export declare type OldCollectParameters<T extends BizEventTypes & TaskOperations> = [
    eventType: T,
    eventPageOrAction: string,
    params?: EventOptions<T>['params'],
    contentPackage?: EventOptions<T>['contentPackage']
];
export declare type OldCollectCustomParameters<T extends CustomEventTypes> = [
    eventType: T,
    key: string,
    value: any
];
export interface BaseWeblogInstance {
    readonly version: string;
    readonly sessionId?: string;
    currentUrlPackage: UrlPackage;
    referUrlPackage?: UrlPackage;
    plugins: {
        [key: string]: any;
    };
    collect<T extends EventType>(...args: [eventType: T, eventOptions: EventOptions<T>]): void;
    sendImmediately<T extends EventType>(...args: [eventType: T, eventOptions: ImmediatelyEventOptions<T>]): void;
    flush(): void;
    updateCurrentUrlPackage(urlPage: {
        page?: string;
        params?: Record<string, unknown>;
    } | string, pageType?: 'web' | 'mina' | 'native'): void;
    updateReferUrlPackage(urlPage: {
        page?: string;
        params?: Record<string, unknown>;
    } | string, pageType?: 'web' | 'mina' | 'native'): void;
}
interface CookieOptions {
    expires?: Date;
    path?: string;
    domain?: string;
    secure?: boolean;
    raw?: boolean;
}
export interface HttpWeblogInstance extends BaseWeblogInstance {
    logConfig: HttpWeblogInitParams[0];
    commonPackage: Base.CommonPackage;
    currentUrlPackage: UrlPackage;
    Utils: {
        yoda: {
            setClientLog: (type: SetClientLogTypes, data: any) => Promise<any>;
            sendRadarLog: (params: any) => Promise<any>;
            sendWebLog: (params: any) => Promise<any>;
            sendSummarizedLog: (params: any) => Promise<any>;
            getWebviewLoadPerf: (params?: any) => Promise<any>;
            getKDSWebviewLoadPerf: (params?: any) => Promise<any>;
            isSupportBridgeLog: () => Promise<boolean>;
            isSupportBridge: (name: string, namespace?: string) => Promise<boolean>;
            invoke: any;
        } | null;
        cookie: {
            getCookie: (name: string, options?: CookieOptions) => string | undefined;
            setCookie: (name: string, value: string, options?: CookieOptions) => void;
            parseCookieString: (text: string, shouldDecode: boolean) => {
                [key: string]: string;
            };
        };
        ua: {
            supportsPushState: () => boolean;
            getUAInfo: () => {
                os: {
                    name: string;
                    version: string;
                };
                model: string;
            };
            getDefaultKpn: () => string;
        };
        io: {
            sendData: (params: {
                url: string;
                data: any;
                timeout?: number;
            }, callback?: (error: any) => void) => void;
        };
    };
    updateCommonPackage(params: HttpWeblogInitParams[1]): void;
}
export interface MinaWeblogInstance extends BaseWeblogInstance {
    logConfig: HttpWeblogInitParamsMina[0];
    commonPackage: Base.CommonPackage;
    updateCommonPackage(params: HttpWeblogInitParamsMina[1]): void;
    updateSessionId(did?: string): void;
    setPage(params: {
        page: string;
        pageParam?: {
            [key: string]: any;
        };
    }): void;
    /**
     * 兼容旧版 mina sdk 接口，同 updateCommonPackage
     * @param oldMinaPublicParams
     */
    setPublicParam(oldMinaPublicParams: {
        did?: string;
        uid: string;
        unionid: string;
        openid: string;
        version_code: string | number;
        version_name: string;
        iu_id?: string;
        safety_id?: string;
    }): void;
}
export interface FullHttpWeblogInstance extends HttpWeblogInstance {
    logConfig: FullHttpWeblogInitParams[0];
    commonPackage: Base.CommonPackage;
    updateCommonPackage(params: FullHttpWeblogInitParams[1]): void;
}
export interface HybridWeblogInstance extends HttpWeblogInstance {
    logConfig: HybridWeblogInitParams[0];
    commonPackage: Base.CommonPackage;
    updateCommonPackage(params: HybridWeblogInitParams[1]): void;
}
export interface FullHybridWeblogInstance extends FullHttpWeblogInstance {
    logConfig: FullHybridWeblogInitParams[0];
    commonPackage: Base.CommonPackage;
    updateCommonPackage(params: FullHybridWeblogInitParams[1]): void;
}
export interface BridgeWeblogInstance extends BaseWeblogInstance {
    logConfig: BridgeWeblogInitParams[0];
    commonPackage: {
        h5_extra_attr: {
            [key: string]: any;
        };
    };
    updateCommonPackage(params: BridgeWeblogInitParams[1]): void;
}
export interface Weblog {
    new (logConfig: CommonConfig, base?: HttpCommonPackage): BaseWeblogInstance;
}
/**
 * http 上报版本
 */
export interface HttpWeblog {
    new (...args: HttpWeblogInitParams): HttpWeblogInstance;
}
/**
 * 混合上报版本，yoda 容器桥接上报，否则 http 上报
 */
export interface HybridWeblog {
    new (...args: HybridWeblogInitParams): HybridWeblogInstance;
}
/**
 * 桥接上报版本，仅在 yoda 容器中桥接上报
 */
export interface BridgeWeblog {
    new (...args: BridgeWeblogInitParams): BridgeWeblogInstance;
}
/**
 * http 上报版本
 */
export interface FullHttpWeblog {
    new (...args: FullHttpWeblogInitParams): FullHttpWeblogInstance;
}
/**
 * 混合上报版本，yoda 容器桥接上报，否则 http 上报
 */
export interface FullHybridWeblog {
    new (...args: FullHybridWeblogInitParams): FullHybridWeblogInstance;
}
/**
 * 小程序版本
 */
export interface MinaWeblog {
    new (...args: HttpWeblogInitParamsMina): MinaWeblogInstance;
}
export {};
