interface CookieOptions {
    expires?: Date;
    path?: string;
    domain?: string;
    secure?: boolean;
    raw?: boolean;
}
/**
 * 将cookie序列化成对象.
 * @param {string} text cookie值.
 * @param {boolean=} shouldDecode cookie是否需要被解码. 默认为true.
 * @param {object=} options 如何读取cookie的配置.
 * @return {object} 可访问cookie的序列化结果
 */
export declare function parseCookieString(text: string, shouldDecode: boolean, options?: any): {
    [key: string]: any;
};
/**
 * 获取cookie值.
 * @param {string} name cookie名称.
 * @param {object=} options 配置项
 *                    raw: 是否进行编码，true则是未编码
 * @return {*} 不存在返回null.
 */
export declare function getCookie(name: string, options?: CookieOptions, force?: boolean): any;
/**
 * 给定的键值设置cookie
 * @param {string} name 名称.
 * @param {*} value cookie值.
 * @param {object=} options (Optional) 配置项:
 *      path 路径
 *      domain 域名
 *      expires 过期时间，一个Date对象
 *      secure 是否安全cookie
 *      raw (true/false). Setting raw to true indicates that the cookie should not be URI encoded before being set.
 */
export declare function setCookie(name: string, value: string, options?: CookieOptions): void;
export declare function clearCacheCookies(): void;
declare const _default: {
    getCookie: typeof getCookie;
    setCookie: typeof setCookie;
    parseCookieString: typeof parseCookieString;
};
export default _default;
