import type { EventType as IEventType, EventOptions as IEventOptions, ImmediatelyEventOptions } from "../../types/event";
import type { PageTypeKey, UrlObj, HttpWeblogInitParams } from "../../types/configuration";
import BaseWeblog from "../../core";
import UrlPackage from './url-package';
import Logger from './logger';
import sendData from "../../io";
import { getCookie } from "../../util/cookie";
import { CommonPackage } from './common';
export declare let isWillClosed: boolean;
export default class Weblog extends BaseWeblog {
    static Logger: typeof Logger;
    currentUrlPackage: UrlPackage;
    referUrlPackage: UrlPackage;
    logger: Logger;
    commonPackage: CommonPackage;
    sampled?: boolean;
    isV2: boolean;
    isBridge?: boolean;
    _silenced?: boolean;
    constructor(logConfig?: HttpWeblogInitParams[0], base?: HttpWeblogInitParams[1]);
    getSampled(logConfig: HttpWeblogInitParams[0]): void;
    /**
     * 参数预处理
     * @param base
     */
    private presetBaseOption;
    get yoda(): any;
    get Utils(): {
        yoda: {
            setClientLog: (type: import("../../types/bridge").SetClientLogTypes, data: unknown) => Promise<any>;
            sendRadarLog: (params: any) => Promise<any>;
            sendWebLog: (params: any) => Promise<any>;
            sendSummarizedLog: (params: any) => Promise<any>;
            getWebviewLoadPerf: (params: any, options: any) => Promise<any>;
            getKDSWebviewLoadPerf: (params?: any) => Promise<any>;
            isSupportBridgeLog: () => Promise<boolean>;
            isSupportBridge: (name: string, namespace?: string) => Promise<boolean>;
            invoke: any;
        } | null;
        cookie: {
            getCookie: typeof getCookie;
            setCookie: typeof import("../../util/cookie").setCookie;
            parseCookieString: typeof import("../../util/cookie").parseCookieString;
        };
        ua: {
            supportsPushState: typeof import("../../util").supportsPushState;
            getUAInfo: (ua?: string) => {
                os: {
                    name?: string | undefined;
                    version?: string | undefined;
                };
                model?: string | undefined;
            };
            getDefaultKpn: typeof import("../../util/ua").getDefaultKpn;
        };
        io: {
            sendData: typeof sendData;
        };
    };
    initYoda(): void;
    initUrlPackage(): void;
    updateCurrentUrlPackage(url?: string | UrlObj, type?: PageTypeKey): void;
    /**
     * 更新 refer url 信息
     * @param url
     * @param type
     */
    updateReferUrlPackage(url?: string | UrlObj | UrlPackage, type?: PageTypeKey): void;
    get isSendSampled(): boolean;
    generateLog<T extends IEventType>(eventType: T, eventOptions: IEventOptions<T>, factory?: (type: string, data: any, isV2?: boolean) => any): any;
    collect<T extends IEventType>(type: T, options: IEventOptions<T>): void;
    collect<T extends IEventType>(type: T, name: string, params?: any, contentPackage?: {
        [keys: string]: any;
    } | string): void;
    sendImmediately<T extends IEventType>(type: T, options: IEventOptions<T>): void;
    sendImmediately<T extends IEventType>(type: T, name: string, params?: any, contentPackage?: {
        [keys: string]: any;
    } | string): void;
    send<T extends IEventType>(type: T, params: ImmediatelyEventOptions<T>, immediately?: boolean): void;
    beforeUnload: (event: Event) => void;
    destroy(): void;
    /**
     * 是否不发送日志，true 暂停请求，false 则会继续请求
     */
    silence(state: boolean): void;
}
