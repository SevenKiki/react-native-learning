import type { HttpWeblogInitParams, PageTypeKey, UrlObj } from "../../types/configuration";
import type { EventType as IEventType, EventOptions as IEventOptions } from "../../types/event";
import BaseWeblog from "../../core";
import { UrlPackage } from './url-package';
export default class KRNWeblog extends BaseWeblog {
    logConfig: HttpWeblogInitParams[0];
    constructor(logConfig: HttpWeblogInitParams[0], base?: HttpWeblogInitParams[1]);
    /**
     * 初始化页面信息
     */
    initUrlPackage(): Promise<void>;
    /**
     * 监听 app 状态
     * @param nextState
     */
    appStateChange: (nextState: string) => void;
    /**
     * 更新当前 url 信息
     * @param url
     * @param type
     */
    updateCurrentUrlPackage(url?: string | UrlObj, type?: PageTypeKey): void;
    /**
     * 更新 refer url 信息
     * @param url
     * @param type
     */
    updateReferUrlPackage(url?: string | UrlObj | UrlPackage, type?: PageTypeKey): void;
    generateLog<T extends IEventType>(eventType: T, eventOptions: IEventOptions<T>, factory?: (type: string, data: any) => any): any;
    collect<T extends IEventType>(type: T, options: IEventOptions<T>): void;
    collect<T extends IEventType>(type: T, name: string, params?: any, contentPackage?: {
        [keys: string]: any;
    } | string): void;
    sendImmediately<T extends IEventType>(type: T, options: IEventOptions<T>): void;
    sendImmediately<T extends IEventType>(type: T, name: string, params?: any, contentPackage?: {
        [keys: string]: any;
    } | string): void;
}
