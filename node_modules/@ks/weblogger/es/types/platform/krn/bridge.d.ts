/**
 * KRN 纯桥接版本
 */
import type { BasePlugin, BasePluginConstructor } from "../../plugins/base";
import type { EventType as IEventType, EventOptions as IEventOptions } from "../../types/event";
import type { UrlObj, PageTypeKey } from "../../types/configuration";
declare type KrnEventOptions<T extends IEventType> = IEventOptions<T> & {
    /**
     * 位置信息
     */
    areaPackage?: any;
    /**
     * 染色信息，CLICK 事件时可以按需设置
     */
    entryTag?: any;
};
interface KrnConfig {
    plugins?: BasePlugin[];
    /**
     * 是否作为元素，不需要上报 PV
     */
    disablePV?: boolean;
    /**
     * 业务线标识
     */
    biz?: string;
}
export interface UrlPage {
    page: string;
    identity?: string;
    params?: any;
    coPage?: boolean;
}
declare type BaseOptions = {
    h5_extra_attr: any;
};
export default class Weblogger {
    static kdsUtils: {
        appVersion: string;
    };
    h5ExtraAttr: {
        sdk_name: string;
        sdk_version: string;
        sdk_bundle: string;
        coPage: boolean;
    };
    version: string;
    currentUrlPackage: {
        page: string;
        params?: {
            [key: string]: any;
        };
        identity: string;
        coPage?: boolean;
        category?: string;
    };
    logConfig: KrnConfig;
    plugins: {
        [key: string]: BasePlugin | any;
    };
    entered: String;
    constructor(logConfig: KrnConfig, base?: BaseOptions);
    get commonPackage(): {
        h5_extra_attr: {
            sdk_name: string;
            sdk_version: string;
            sdk_bundle: string;
            coPage: boolean;
        };
    };
    /**
     * 初始化插件
     * @param plugins
     */
    addPlugins(): void;
    /**
     * 加载插件实例
     */
    addPluginInstance(pluginInstance: any): void;
    /**
     * 加载插件构造函数
     * @param plugin
     * @param pluginOptions
     */
    plug(plugin: BasePluginConstructor, pluginOptions?: any): void;
    send<T extends IEventType>(eventType: T, options: KrnEventOptions<T>, immediately?: boolean): void;
    collect<T extends IEventType>(type: T, options: KrnEventOptions<T>): void;
    collect<T extends IEventType>(type: T, name: string, params?: any, contentPackage?: {
        [keys: string]: any;
    } | string): void;
    sendImmediately<T extends IEventType>(type: T, options: KrnEventOptions<T>): void;
    sendImmediately<T extends IEventType>(type: T, name: string, params?: any, contentPackage?: {
        [keys: string]: any;
    } | string): void;
    flush(): void;
    updateCommonPackage(options: any): void;
    updateCurrentUrlPackage(url?: string | UrlObj, type?: PageTypeKey): void;
    updateReferUrlPackage(url?: string | UrlObj, type?: PageTypeKey): void;
}
export {};
