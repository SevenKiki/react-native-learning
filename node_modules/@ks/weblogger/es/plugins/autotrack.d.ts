/**
 * @author sunhaonan (sunhaonan@kuaishou.com)
 * @created 2020-10-26
 * weblog-click=""
 */
import type { HttpWeblogInstance } from "../types/types/index";
import { BasePlugin } from '../types/plugins/base';
import { autoTrackOption, elementData, MonitorShow } from '../types/plugins/autoTrack/interface';
import 'intersection-observer';
export default class AutoTrack extends BasePlugin {
    weblog: HttpWeblogInstance;
    static key: string;
    mode: 'all' | 'symbol';
    maxScrollX: number;
    maxScrollY: number;
    scrollStayTime: number;
    symbol: string;
    tags: string[];
    attributes: string[];
    hiddenContent: boolean;
    intersectionObserver?: IntersectionObserver;
    mutationObserver?: MutationObserver;
    monitorShow?: MonitorShow;
    exactMatchElement?: (target: HTMLElement) => boolean;
    beforeSend?: (type: string, action: string, params: any) => boolean;
    followCurPage?: boolean;
    constructor(trackOption?: autoTrackOption);
    private isInsertToolbar;
    private timeId;
    private touchStartObject;
    private touchMoveObject;
    apply(weblog: HttpWeblogInstance): void;
    init(): void;
    resetObserver: (event: any) => void;
    initIntersecionObserver(auto?: boolean): void;
    autoObserve(): void;
    observe(element: Element): void;
    initMutationObserver(): void;
    collectElementShow(element: HTMLElement, subtree?: boolean, trackMethod?: string): void;
    private touchStartEvent;
    private touchMoveEvent;
    private touchEndEvent;
    private clickEvent;
    private scrollEvent;
    private messageEvent;
    private collect;
    private isMobile;
    elementFilter(target: HTMLElement, type: string): boolean | undefined;
    pickElementAttrs(target: HTMLElement): {
        [key: string]: string;
    };
    trackCodeEvent(type: string, target: HTMLElement, extraParams?: {
        [key: string]: any;
    }): void;
    dataFormat(event: (MouseEvent | TouchEvent)): elementData | undefined;
    private startRegisterAutoTrackPlugin;
    private applyPluginMessageToParent;
    beforeUnload: () => void;
    destroy(): void;
}
