/**
 * 混淆模式，端内走桥接，端外走 http 上报
 */
import type { HybridWeblogInitParams, PageTypeKey, UrlObj } from "../../types/configuration";
import type { EventType as IEventType, EventOptions as IEventOptions, BizEventTypes, CustomEventTypes, TaskActions } from "../../types/event";
import BaseLogger from '../browser';
/**
 * 判断当前yoda的状态
 * INIT: 初始状态
 * CHECKING：检查是否可用中，此时上报的埋点都会推入等待队列
 * READY：可用，此时上报的埋点会以桥接方式上报
 * DISABLED：不可用，此时上报的埋点会以 http 方式上报
 */
declare enum YodaStatus {
    INIT = -1,
    CHECKING = 0,
    READY = 1,
    DISABLED = 2
}
declare type SendParams<T extends IEventType> = {
    type: T;
    options: IEventOptions<T>;
    immediately?: boolean;
};
export default class BridgeWeblogger extends BaseLogger {
    yodaStatus: YodaStatus;
    waitYodaQueue: SendParams<BizEventTypes | TaskActions | CustomEventTypes>[];
    entered: String;
    constructor(logConfig: HybridWeblogInitParams[0], base?: HybridWeblogInitParams[1]);
    private checkSupportBridge;
    /**
     * 桥接上报
     */
    sendByBridge<T extends IEventType>(eventType: T, eventOptions: IEventOptions<T>, immediately?: boolean): void;
    updateCurrentUrlPackage(url?: string | UrlObj, type?: PageTypeKey): void;
    /**
     * Http 上报
     * @param type
     * @param name
     * @param params
     * @param contentPackage
     * @param immediately
     */
    sendByHttp<T extends IEventType>(type: T, options: IEventOptions<T>, immediately?: boolean): void;
    /**
     * 复写父类 send 方法
     * @param type
     * @param name
     * @param params
     * @param contentPackage
     * @param immediately
     */
    send<T extends IEventType>(type: T, options: IEventOptions<T>, immediately?: boolean): void;
}
export {};
