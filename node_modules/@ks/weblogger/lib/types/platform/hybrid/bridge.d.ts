/**
 * 纯端内桥接版本，最小化包体积
 */
import type { BasePlugin, BasePluginConstructor } from "../../plugins/base";
import type { BridgeWeblogInitParams, UrlObj, PageTypeKey } from "../../types/configuration";
import type { EventType as IEventType, EventOptions as IEventOptions } from "../../types/event";
import { getCookie } from "../../util/cookie";
import type { SetClientLogTypes } from "../../util/yodav2";
import sendData from "../../io/xhr";
import UrlPackage from '../browser/url-package';
import { supportsPushState } from "../../util";
export default class Weblogger {
    static __instance: Weblogger;
    version: string;
    currentUrlPackage: UrlPackage & {
        category?: string;
    };
    referUrlPackage?: UrlPackage;
    commonPackage: CommonPackage;
    logConfig: BridgeWeblogInitParams[0];
    baseOption?: BridgeWeblogInitParams[1];
    plugins: {
        [key: string]: BasePlugin | any;
    };
    entered: String;
    constructor(configOption: BridgeWeblogInitParams[0], baseOption?: BridgeWeblogInitParams[1]);
    get Utils(): {
        yoda: {
            setClientLog: (type: SetClientLogTypes, data: unknown) => Promise<import("@yoda/bridge-types").ToolSetClientLogResponseData | undefined>;
            sendRadarLog: (params: any) => Promise<import("@yoda/bridge-types").SendRadarLogResponseData | undefined>;
            sendWebLog: (params: any) => Promise<import("@yoda/bridge-types").SendWebLogResponseData | undefined>;
            sendSummarizedLog: (params: any) => Promise<import("@yoda/bridge-types").SendSummarizedLogResponseData | undefined>;
            getWebviewLoadPerf: (params: any, options: any) => Promise<import("@yoda/bridge-types").WebviewGetPageLoadDataResponseData | undefined>;
            getKDSWebviewLoadPerf: (params?: any) => Promise<import("@yoda/bridge-types").SystemGetPageLoadDataResponseData | undefined>;
            isSupportBridgeLog: () => Promise<boolean>;
            isSupportBridge: (name: string, namespace?: string) => Promise<boolean>; /**
             * 收集上报
             * @param type
             * @param options
             * @returns
             */
            invoke: import("../../util/yodav2").Invoke;
        };
        cookie: {
            getCookie: typeof getCookie;
            setCookie: typeof import("../../util/cookie").setCookie;
            parseCookieString: typeof import("../../util/cookie").parseCookieString;
        };
        ua: {
            getDefaultKpn: () => any;
            supportsPushState: typeof supportsPushState;
        };
        io: {
            sendData: typeof sendData;
        };
    };
    get sessionId(): any;
    /**
     * 初始化插件
     * @param plugins
     */
    addPlugins(): void;
    /**
     * 加载插件实例
     */
    addPluginInstance(pluginInstance: any): void;
    /**
     * 加载插件构造函数
     * @param plugin
     * @param pluginOptions
     */
    plug(plugin: BasePluginConstructor, pluginOptions?: any): void;
    /**
     * 收集上报
     * @param type
     * @param options
     * @returns
     */
    collect<T extends IEventType>(type: T, options: IEventOptions<T>): void;
    collect<T extends IEventType>(type: T, name: string, params?: any, contentPackage?: {
        [keys: string]: any;
    } | string): void;
    /**
     * 立即上报
     * @param type
     * @param options
     * @returns
     */
    sendImmediately<T extends IEventType>(type: T, options: IEventOptions<T>): void;
    sendImmediately<T extends IEventType>(type: T, name: string, params?: any, contentPackage?: {
        [keys: string]: any;
    } | string): void;
    sendByBridge<T extends IEventType>(eventType: T, eventOptions: IEventOptions<T>, immediately?: boolean): void;
    send<T extends IEventType>(eventType: T, eventOptions?: IEventOptions<T>, immediately?: boolean): void;
    updateCurrentUrlPackage(url?: string | UrlObj, type?: PageTypeKey): void;
    /**
     * 更新 refer url 信息
     * @param url
     * @param type
     */
    updateReferUrlPackage(url?: string | UrlObj | UrlPackage, type?: PageTypeKey): void;
    updateCommonPackage(options: BridgeWeblogInitParams[1]): void;
    flush(): void;
    on(): void;
    emit(): void;
}
declare class CommonPackage {
    /**
     * 容器类型
     */
    container?: 'REACT_NATIVE' | 'H5';
    /**
     * 中台服务名称，比如积木、im sdk等，如果业务log未使用中台服务，该字段置空
     */
    service_name?: string;
    /**
     * 子业务场景
     */
    sub_biz?: string;
    /**
     * 是否需要加密
     */
    need_encrypt?: boolean;
    h5_extra_attr: {
        [key: string]: any;
    };
    app_package?: {
        version_name: string;
        container?: 'REACT_NATIVE' | 'H5';
    };
    constructor(option?: BridgeWeblogInitParams[1]);
    getVersionName(): string | undefined;
    update(option?: BridgeWeblogInitParams[1]): void;
    increaseH5SeqId(isCustom?: Boolean): void;
    getH5ExtraAttr(extraInfo?: {
        [key: string]: any;
    }): {
        [key: string]: any;
    } & {
        [key: string]: any;
    };
}
export {};
