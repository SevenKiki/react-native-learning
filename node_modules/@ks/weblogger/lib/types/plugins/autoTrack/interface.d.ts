export declare type autoTrackOption = {
    /**
     * 全埋点上报模式，默认为 all
     * - all: 所有埋点自动采集上报
     * - symbol: 仅有标记的元素上报
     */
    mode?: 'all' | 'symbol';
    /**
     * 代码埋点属性绑定，默认为 'weblog-'
     * 如
     * ```
     * <button weblog-action="SOME_ACTION" weblog-name="submit"></button>
     * // 会被解析成事件：
     * weblog.collect('CLICK', {
     *    action: 'SOME_ACTION',
     *    params: {
     *          name: 'submit'
     *    }
     * })
     * ```
     */
    symbol?: string;
    /**
     * 是否监听元素曝光
     * - root: Element，监听根元素，默认为 body
     * - rootMargin: 根节点偏移量，默认 0px，参考：https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver
     * - threshold: 交叉阈值，默认 0.3
     * - mutationDelay: PV 之后多少毫秒算作元素插入，默认为 300
     */
    monitorShow?: MonitorShow | boolean;
    /**
     * 有效滚动停驻事件，单位为 ms，默认为 4000
     */
    scrollStayTime?: number;
    /**
     * 自动采集的 HTML 标签，默认采集所有标签
     */
    tags?: Array<string>;
    /**
     * 自动采集的 DOM 属性，默认采集 ['class', 'alt', 'src', 'href', 'data-']
     */
    attributes?: Array<string>;
    /**
     * 元素事件触发回调，返回 false 表示不上报埋点，默认都上报
     */
    exactMatchElement?: (target: HTMLElement) => boolean;
    /**
     * 事件发送前参数处理
     * - action 事件元素标识
     * - params 自动采集的元素补充参数，如需修改可以直接更新 params 对象
     */
    beforeSend?: (action: string, params: {
        [key: string]: any;
    }) => any;
    /**
     * 是否跟随当前页面page上报
     */
    followCurPage?: Boolean;
};
export declare type MonitorShow = {
    root?: Element;
    rootMargin?: string;
    threshold?: number | number[];
    mutationDelay?: number;
};
export declare enum visualMessageStatus {
    START = 0,
    RECEIVED = 1
}
export interface visualMessage {
    status: visualMessageStatus;
    visualData: visualDataType;
}
export interface visualDataType {
    id: string;
    userName: string;
    appName: string;
}
export interface elementData {
    elementAction?: string;
    elementParams?: {
        [key: string]: string;
    };
    xpath: string;
    innerText?: string;
    nodeName?: string;
    attributesSerialize?: {
        [key: string]: string;
    };
    clientX: number;
    clientY: number;
    [key: string]: any;
}
export interface collectParam {
    xpath?: string;
    innerText?: string;
    nodeName?: string;
    attributesSerialize?: {
        [key: string]: string;
    };
    touchesInfo?: any;
    clientX?: number;
    clientY?: number;
    maxScrollX?: number;
    maxScrollY?: number;
    action?: string;
    [key: string]: any;
}
