export declare type PerformanceTimingProperty = 'navigationStart' | 'connectEnd' | 'connectStart' | 'domLoading' | 'domComplete' | 'domContentLoadedEventEnd' | 'domContentLoadedEventStart' | 'domInteractive' | 'domainLookupEnd' | 'domainLookupStart' | 'fetchStart' | 'loadEventEnd' | 'loadEventStart' | 'redirectEnd' | 'redirectStart' | 'requestStart' | 'responseEnd' | 'responseStart' | 'secureConnectionStart' | 'unloadEventEnd' | 'unloadEventStart';
export declare type radarWebviewTimingProperty = 'userStart' | 'pageStart' | 'pageShow' | 'webviewStart' | 'preCreate' | 'created' | 'startLoad' | 'didStartLoad' | 'didEndLoad' | 'radarFmp';
export interface TimingCustomOptions {
    endPoint: number;
}
export declare type TimingPerfMap = {
    [key in TimingPerfName]: {
        start?: PerformanceTimingProperty;
        end?: PerformanceTimingProperty;
        custom?(key: TimingPerfName, options?: TimingCustomOptions): number;
    };
};
export declare type TimingPerfName = 'dnsLookup' | 'tcpConnection' | 'resourceLoad' | 'documentContentLoaded' | 'load' | 'jsCost' | 'firstScreen' | 'whiteScreen' | 'timeToFirstByte';
export interface TimingPerf {
    dnsLookup?: number;
    tcpConnection?: number;
    resourceLoad?: number;
    documentInteractive?: number;
    documentContentLoaded?: number;
    load?: number;
    jsCost?: number;
    firstScreen?: number;
    whiteScreen?: number;
    timeToFirstByte?: number;
}
export interface FPSMonitorOptions {
    interval?: number;
    decimals?: number;
}
export interface CrashMonitorOptions {
    updateInterval?: number;
    crashThreshold?: number;
}
export interface loadPerformanceReport {
    [key: string]: string | number;
}
