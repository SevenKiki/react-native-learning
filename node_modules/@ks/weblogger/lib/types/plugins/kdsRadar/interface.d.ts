import type { PerformanceTimingProperty } from '../types';
import type { HttpWeblogInstance } from "../../types/index";
import type { RADAR_KEY, LEGACY_RADAR_KEY, ERROR_KEY } from './const';
export interface RadarPerf {
    dns?: number;
    tcp?: number;
    ssl?: number;
    ttfb?: number;
    trans?: number;
    total?: number;
    fb?: number;
    protocol?: string;
}
export interface DOMPerf extends RadarPerf {
    redirect?: number;
    redirect_count?: number;
    dns_start?: number;
    tcp_start?: number;
    ssl_start?: number;
    dom_parse_start?: number;
    fp?: number | null;
    dom_ready?: number;
    dom_parse?: number;
    blank?: number;
    resource?: number;
    tti?: number;
    js_cost?: number;
    dom_num?: number;
}
export interface ResPerf extends RadarPerf {
    fetch_start?: number;
    cached?: boolean;
    file?: string;
    size?: number;
    res_type?: string;
}
export interface APILog {
    size?: number;
    duration?: number;
    status?: number;
    api?: string;
    method?: string;
    protocol?: string;
    responseData?: string;
}
export declare type APIPerf = APILog & ResPerf;
export interface ErrorLog {
    error_type: ERROR_KEY;
    error_cons_type: string;
    msg?: string;
    stack?: string;
    file?: string;
    line?: number;
    col?: number;
    path?: string;
}
export declare type PerfMapType = DOMPerf & ResPerf & APIPerf;
export declare type PerfKey = keyof DOMPerf & keyof ResPerf;
export declare type PerfName<T> = keyof T;
export declare type PerfTime = PerformanceNavigationTiming & PerformanceResourceTiming;
export interface PerfItem {
    start?: PerformanceTimingProperty;
    end?: PerformanceTimingProperty;
    cachedSkip?: boolean;
    noThrottle?: boolean;
    custom?(key: string, timing: PerfTime): number | string | boolean | null;
}
export declare type PerfMap<T> = {
    [key in keyof T]: PerfItem;
};
export declare type EntryTypes = 'navigation' | 'resource' | 'mark' | 'measure' | 'paint' | 'frame';
export declare type InitiatorTypes = 'img' | 'css' | 'script' | 'xmlhttprequest' | 'fetch';
export interface RadarOptionsQueueConfig {
    maxBatchLength?: number;
    wait?: number;
}
export declare type RadarOptions = {
    projectId: string;
    sampling: number;
    ignoreList?: string[];
    unuseAPIPlugin?: boolean;
    unuseErrorPlugin?: boolean;
    unuseNavigationPlugin?: boolean;
    queue?: RadarOptionsQueueConfig;
} | undefined;
export interface KVPair {
    key: RADAR_KEY | LEGACY_RADAR_KEY;
    value: any;
    dimension?: any;
    data?: any;
}
export interface CustomReport {
    fmp?: number;
    play_clicked?: number;
    play_idr?: number;
    play_first_screen?: number;
    play_block?: string;
    play_error?: string;
}
export declare type CustomKey = keyof Omit<CustomReport, 'custom'>;
export interface CustomEntry {
    custom?: true;
    entry: {
        key: CustomKey;
        value: number | string;
    };
    renderTime?: number;
}
export interface LogParamId {
    logId: string;
    result: number;
}
export declare abstract class RadarMonitor {
    abstract options: RadarOptions;
    abstract weblog: HttpWeblogInstance;
    abstract ignoreList: string[];
    abstract isUsingLegacy: boolean | null;
    abstract isUsingDetachedReport: boolean | null;
    abstract logCollect(kv: KVPair): void;
    abstract flush(): void;
}
export declare type NavigationLogData = PerfMapType & CustomReport;
