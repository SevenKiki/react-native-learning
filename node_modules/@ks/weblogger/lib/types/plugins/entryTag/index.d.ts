/**
 * @author sunhaonan (sunhaonan@kuaishou.com)
 * @created 2021-04-01
 */
import type { Weblogger, EntryTagType } from '../../config/types';
import { BasePlugin } from '../base';
declare type LogEvent = {
    type: string;
    action: string;
};
declare type HandleEntryTagFn = (type: string, params?: any) => Promise<any[] | void>;
/**
 * 染色参数插件，依赖 new Weblog 时传入 yoda
 * @class EntryTagPlugin
 * @param options Object
 * - autoUpdate {boolean} 是否开启自动更新染色参数
 */
export default class EntryTag extends BasePlugin {
    static key: string;
    autoUpdate: boolean;
    handleEntryTag: HandleEntryTagFn;
    defaultStack: any[];
    constructor(options?: {
        autoUpdate?: boolean;
    });
    apply(weblog: Weblogger): void;
    /**
     * 获取 entryTags 信息
     */
    getEntryTags(): Promise<any[]>;
    /**
     * 设置 entryTag 信息 Pending
     * @param entryTag
     */
    setPendingEntryTag(entryTag: EntryTagType): Promise<void | any[]>;
    /**
     * 消费 entryTags 信息
     * @param subPage string
     */
    consumeEntryTag(subPage: string): Promise<any[]>;
    /**
     * 清空 entryTags 信息
     * @param subPage
     * @param containSelf
     */
    clearEntryTag(subPage: string, containSelf?: boolean): Promise<void>;
    /**
     * 获取当前页面的唯一标识，用于消费和清除染色参数
     * @returns string
     */
    getPageIdentity(): string;
    /**
     * 消费染色参数，会在当前页面新增染色参数
     */
    consumeByCurrentPage(): Promise<any[]>;
    /**
     * 清除染色参数，会以当前页面为界限进行清除
     * @param containSelf boolean 是否清楚当前页面的染色参数
     */
    clearByCurrentPage(containSelf?: boolean): Promise<void>;
    /**
     * 自动更新染色参数
     */
    setupCurrentPageEntryTag(): Promise<void>;
    listenPVChange: () => Promise<void>;
    onLogEvent: (e: LogEvent) => Promise<void>;
    destroy(): void;
}
export {};
