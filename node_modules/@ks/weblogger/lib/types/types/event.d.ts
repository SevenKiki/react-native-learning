/**
 * 事件公共参数类型
 */
interface EventCommonOptions {
    contentPackage?: {
        [keys: string]: any;
    } | string;
    eventId?: string;
    feedLogCtx?: {
        stidContainer?: string;
        [key: string]: any;
    };
    bridgeFields?: {
        [key: string]: any;
    };
}
declare type ShowStatus = 'SUCCESS' | 'FAIL' | 'UNKNOWN';
interface ElementEventOptions extends EventCommonOptions {
    action: string;
    params?: {
        [key: string]: any;
    };
    /**
     * 埋点飘移页面信息处理，仅当前埋点上报成指定 page
     */
    urlPage?: {
        page: string;
        params?: {
            [key: string]: any;
        };
        identity?: string;
    };
    /**
     * 仅当前埋点不携带 page 信息
     */
    disablePV?: boolean;
}
declare type PVTypes = 'enter' | 'leave' | 'visible' | 'hidden';
declare type PVLeaveType = 'leave' | 'hidden';
/**
 * PV 事件参数类型
 * @params coPage 是否是半屏页面
 */
interface PVEventOptions extends EventCommonOptions {
    type?: PVTypes;
    page?: string;
    params?: {
        [key: string]: any;
    };
    coPage?: boolean;
    status?: ShowStatus;
    timeCost?: number;
    category?: string;
}
interface LeavePVEventOptions extends PVEventOptions {
    type: PVLeaveType;
    beginTime?: number;
}
interface ShowEventOptions extends ElementEventOptions {
    status?: ShowStatus;
}
export declare enum TaskOperations {
    CLICK = "CLICK",
    DOUBLE_CLICK = "DOUBLE_CLICK",
    TRIPLE_CLICK = "TRIPLE_CLICK",
    LONG_PRESS = "LONG_PRESS",
    PULL = "PULL",
    DRAG = "DRAG",
    SCALE = "SCALE",
    PULL_DOWN = "PULL_DOWN",
    PULL_UP = "PULL_UP",
    AUTO = "AUTO"
}
export declare type TaskActions = 'CLICK' | 'DOUBLE_CLICK' | 'TRIPLE_CLICK' | 'LONG_PRESS' | 'PULL' | 'DRAG' | 'SCALE' | 'PULL_DOWN' | 'PULL_UP' | 'AUTO';
export declare type BizEventTypes = 'PV' | 'SHOW' | 'VIDEO';
export declare type CustomEventTypes = 'CUSTOM' | 'CUSTOM_EVENT' | 'RADAR';
export declare type SendEventTypes = BizEventTypes | CustomEventTypes | TaskActions;
declare type TaskTypes = 'USER_OPERATION' | 'BACKGROUND_TASK_EVENT' | 'STAY_LENGTH_STAT_EVENT';
declare type Directions = 'UP' | 'DOWN' | 'LEFT' | 'RIGHT';
declare type TaskStatus = 'SUCCESS' | 'FAIL' | 'START' | 'RETRY' | 'PAUSE' | 'RESUME' | 'PENDING' | 'PROCESSING' | 'CANCEL' | 'FINISH';
interface TaskEventOption extends ElementEventOptions {
    type?: TaskTypes;
    status?: TaskStatus;
    operationDirection?: Directions;
}
export interface ClickEventOption extends TaskEventOption {
    type?: 'USER_OPERATION';
    /**
     * 染色参数，当前仅小程序环境使用
     */
    entryTag?: {
        page_name?: string;
        element_action?: string;
        stid?: string;
        pos?: number;
        params?: {
            [key: string]: any;
        };
    };
}
export declare type CustomEventOption = {
    key: string;
    value: any;
    biz?: string;
};
export declare type DangerCunstomEventOption = {
    action: string;
    params: any;
    biz?: string;
};
interface RadarEventOption {
    name: 'radar_log';
    params: any;
    serviceName?: string;
}
interface VideoEventOption {
    params: {
        [key: string]: any;
    };
}
/**
 * 事件类型及参数
 */
export declare type EventParams = {
    'PV': {
        eventOptions: PVEventOptions | LeavePVEventOptions;
    };
    'SHOW': {
        eventOptions: ShowEventOptions;
    };
    'VIDEO': {
        eventOptions: VideoEventOption;
    };
    'CUSTOM': {
        eventOptions: CustomEventOption;
    };
    'CUSTOM_EVENT': {
        eventOptions: CustomEventOption;
    };
    'RADAR': {
        eventOptions: RadarEventOption;
    };
    'CLICK': {
        eventOptions: ClickEventOption | TaskEventOption;
    };
} & {
    [TaskOperation in TaskActions]: {
        eventOptions: TaskEventOption;
    };
};
/**
 * 支持的事件
 */
export declare type EventType = keyof EventParams;
/**
 * 事件对应的参数
 */
export declare type EventOptions<T extends EventType> = EventParams[T]['eventOptions'];
export declare type ImmediatelyEventOptions<T extends EventType> = EventParams[T]['eventOptions'] & {
    callback?: (error: Error) => void;
};
export {};
