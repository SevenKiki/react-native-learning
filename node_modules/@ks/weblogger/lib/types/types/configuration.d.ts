import type { BasePlugin } from "../plugins/base";
import type { RadarOptions } from "../plugins/radar";
declare enum NetworkTypes {
    'unknown' = 0,
    'none' = 1,
    'wifi' = 2,
    '4g' = 3,
    '3g' = 4,
    '2g' = 5,
    '5g' = 6,
    'slow-2g' = 7
}
export declare type NetworkType = keyof typeof NetworkTypes;
export declare type PageTypeKey = 'web' | 'native' | 'mina';
export declare enum Platform {
    UNKNOWN_PLATFORM = 0,
    ANDROID_PHONE = 1,
    ANDROID_PAD = 2,
    IPHONE = 3,
    IPAD = 4,
    WINDOWS_PC = 5,
    ANDROID_PHONE_H5 = 6,
    IPHONE_H5 = 7,
    OUTSIDE_ANDROID_H5 = 8,
    OUTSIDE_IOS_H5 = 9,
    PC_WEB = 10,
    MAC_PC = 11
}
export declare type Container = 'NATIVE' | 'REACT_NATIVE' | 'H5' | 'MP_WECHAT' | 'MP_ALIPAY' | 'MP_BAIDU' | 'MP_KUAISHOU' | 'WEB';
export interface H5ExtraAttr {
    product_name?: string;
    host_product?: string;
    app_version_name?: string;
    domain?: string;
    [key: string]: any;
}
declare type EnvType = 'development' | 'test' | 'logger' | 'production' | 'oversea' | 'logger-oversea';
export interface UrlObj {
    page?: string;
    params?: any;
    force?: boolean;
}
export interface UrlPackage {
    page: string;
    params?: {
        [key: string]: any;
    };
    identity: string;
    page_type?: 1 | 2 | 3 | 0;
    getRealUrlPackage: () => {};
}
export interface UrlMapFnParam {
    url?: string;
    page?: string;
    params?: any;
}
export declare type UrlMapFn = (param: UrlMapFnParam) => UrlObj | string;
export interface CommonConfig {
    /**
     * 日志采样配置，值为 0~1 的 float number。日志发送按照 sampleRate * 100% 的比例采样
     */
    sampleRate?: number;
    /**
     * 自定义采样函数
     */
    sampleRateFn?: () => boolean;
    urlMap?: UrlMapFn | {
        [key: string]: string;
    };
    /**
     * 插件实例数组
     */
    plugins?: BasePlugin[];
    /**
    * 是否在 url_package 信息中自动携带原始 url，为 true 则自动携带 origin_url
    */
    attachUrl?: boolean;
    [key: string]: any;
}
export interface HttpConfig extends CommonConfig {
    /**
     * 埋点上报环境，默认为 'production'
     */
    env?: EnvType;
    /**
     * http 请求超时时间，默认30秒超时
     */
    timeout?: number;
    /**
     * 同时发送消息的最大条数
     */
    maxBatchLength?: number;
    /**
     * 页面来源信息，默认为 document.referrer
     */
    referer?: {
        value: string;
        type?: 'web' | 'native' | 'mina';
    };
    /**
     * 禁止使用压缩
     */
    disableCompress?: boolean;
    /**
     * 传入 yoda sdk，当在端内使用非桥接上报时，可以通过传入的 yoda 来使雷达桥接上报、获取 KSwitch 采样配置等功能
     */
    yoda?: any;
    /**
     * 自定义上报途径
     */
    sender?: (data: {
        url: string;
        data: any;
        [key: string]: any;
    }, callback?: (error?: any) => void) => void;
    /**
     * 在页面离开状态时，强迫使用 sendBeacon 方式发送埋点。
     */
    forceSendBeacon?: boolean;
}
export interface BridgeConfig extends CommonConfig {
    /**
     * 当走桥接上报到v2时，强制将 key 为 custom_stat_event 方法转换为 custom_event
     */
    customStatToCustom?: boolean;
    /**
     * 是否禁止 PV，用于将 H5 作为端内元素上报，不会上报 PV 事件
     */
    disablePV?: boolean;
    /**
     * 自定义事件所属的业务线，如 LIVE、ESHOP 等
     */
    biz?: string;
}
export interface HybridConfig {
    /**
     * 是否将自定义事件通过 http 方式上报
     */
    enableV3CustomEvent?: boolean;
    /**
     * 禁止桥接，用来处理多个项目共用一个封装逻辑，但有的走桥接，有的是半屏页不走桥接的特殊场景
     */
    disableBridge?: boolean;
    /**
     * 是否在 bridge 模式下同时开启 HTTP 上报
     */
    openHttpSender?: boolean;
}
export interface HttpCommonPackage {
    /**
     * 用户Id, 唯一标识一个用户
     */
    user_id?: string;
    /**
     * 设备Id, 唯一标识一台设备
     */
    device_id?: string;
    /**
     * 内部 SDK 生成的全局唯一id，识别多个 app 之间的相同设备
     */
    global_id?: string;
    /**
     * 来源
     */
    channel?: string;
    /**
     * 版本名
     */
    version_name?: string;
    /**
     * 应用包名
     */
    package_name?: string;
    /**
     * 各端设备识的备用参数，例如微信小程序端上报微信内部用户的唯一标识
     */
    union_id?: string;
    /**
     * 网络类型
     */
    network_type?: NetworkType;
    /**
     * 区分平台
     */
    container?: Container;
    /**
     * 中台服务名称，比如积木、im sdk等，如果业务log未使用中台服务，该字段置空
     */
    service_name?: string;
    /**
     * 子业务场景
     */
    sub_biz?: string;
    /**
     * 是否需要加密
     */
    need_encrypt?: boolean;
    /**
     * 防盗链id
     */
    safety_id?: string;
    /**
     * AB实验
     */
    experiment?: {
        name: string;
        value: string;
    }[];
    /**
     * H5 附加参数
     */
    h5_extra_attr?: H5ExtraAttr;
    /**
     * 表示宿主平台环境，默认是 PC 端 web 页面
     */
    platform?: Platform;
    /**
     * 表示页面会话 id
     */
    session_id?: string;
    /**
     * 全局参数，可用来设置染色参数
     */
    global_attr?: {
        [key: string]: any;
    };
}
export interface BridgeCommonPackage {
    /**
      * H5 附加参数
      */
    h5_extra_attr?: H5ExtraAttr;
    /**
     * 区分平台
     */
    container?: 'REACT_NATIVE' | 'H5';
    /**
     * 中台服务名称，比如积木、im sdk等，如果业务log未使用中台服务，该字段置空
     */
    service_name?: string;
    /**
     * 子业务场景
     */
    sub_biz?: string;
    /**
     * 是否需要加密
     */
    need_encrypt?: boolean;
}
export interface KRNBridgeConfig {
}
export interface MinaHttpConfig {
}
interface FullWeblogConfig {
    crash?: boolean;
    fps?: boolean;
    timing?: boolean;
    radar?: RadarOptions;
    autoPV?: boolean;
    autoPVFilter?: (newUrl: string, oldUrl: string | null, type: 'enter' | 'leave' | 'hidden' | 'visible') => boolean;
}
export declare type HttpProto = 'v3' | 'v2';
declare type ProtoHttpConfig = {
    v3: HttpConfig & {
        proto?: 'v3';
    };
    v2: HttpConfig & {
        proto: 'v2';
    };
};
declare type ProtoCommonPackageProduct = {
    v3: HttpCommonPackage & {
        /**
         * 产品 kpn，产品唯一标识
         */
        product_name: string;
    };
    v2: HttpCommonPackage & {
        /**
         * 产品 kpn 枚举值，产品唯一标识
         */
        product: number;
    };
};
export declare type HttpWeblogInitParamsV2 = [
    config: ProtoHttpConfig['v2'],
    commonPackage: ProtoCommonPackageProduct['v2']
];
export declare type HttpWeblogInitParamsV3 = [
    config: ProtoHttpConfig['v3'],
    commonPackage: ProtoCommonPackageProduct['v3']
];
export declare type HttpWeblogInitParamsMina = [
    config: ProtoHttpConfig['v3'] & {
        /**
         * 是否等待identityPackage配置完成后再发送日志。
         */
        sendUtilIdentityDone?: boolean;
        /**
         * 同 wait，兼容旧版小程序 sdk
         */
        batchReportInterval?: number;
        /**
         * 是否开启小程序版本的 autoPV 插件
         */
        minaAutoPV?: boolean;
    },
    commonPackage: ProtoCommonPackageProduct['v3']
];
export declare type HttpWeblogInitParams = HttpWeblogInitParamsV3 | HttpWeblogInitParamsV2;
export declare type HybridWeblogInitParamsV2 = [
    config: ProtoHttpConfig['v2'] & HybridConfig,
    commonPackage: ProtoCommonPackageProduct['v2']
];
export declare type HybridWeblogInitParamsV3 = [
    config: ProtoHttpConfig['v3'] & HybridConfig,
    commonPackage: ProtoCommonPackageProduct['v3']
];
export declare type HybridWeblogInitParams = HybridWeblogInitParamsV3 | HybridWeblogInitParamsV2;
export declare type FullHttpWeblogInitParamsV2 = [
    config: ProtoHttpConfig['v2'] & FullWeblogConfig,
    commonPackage: ProtoCommonPackageProduct['v2']
];
export declare type FullHttpWeblogInitParamsV3 = [
    config: ProtoHttpConfig['v3'] & FullWeblogConfig,
    commonPackage: ProtoCommonPackageProduct['v3']
];
export declare type FullHttpWeblogInitParams = FullHttpWeblogInitParamsV3 | FullHttpWeblogInitParamsV2;
export declare type FullHybridWeblogInitParamsV2 = [
    config: ProtoHttpConfig['v2'] & HybridConfig & FullWeblogConfig,
    commonPackage: ProtoCommonPackageProduct['v2']
];
export declare type FullHybridWeblogInitParamsV3 = [
    config: ProtoHttpConfig['v3'] & HybridConfig & FullWeblogConfig,
    commonPackage: ProtoCommonPackageProduct['v3']
];
export declare type FullHybridWeblogInitParams = FullHybridWeblogInitParamsV3 | FullHybridWeblogInitParamsV2;
export declare type BridgeWeblogInitParams = [
    config: BridgeConfig,
    commonPackage: BridgeCommonPackage
];
export declare type FullBridgeWeblogInitParams = [
    config: BridgeConfig & FullWeblogConfig,
    commonPackage: BridgeCommonPackage
];
export {};
