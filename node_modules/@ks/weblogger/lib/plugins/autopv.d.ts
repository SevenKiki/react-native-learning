/**
 * beforeunload触发条件:正常关闭标签,刷新,关闭浏览器
 */
import type { HttpWeblogInstance } from "../types/types/index";
import { BasePlugin } from '../types/plugins/base';
export declare type AutoPVFilter = (newUrl: string, oldUrl: string | null, type: 'enter' | 'leave' | 'hidden' | 'visible') => boolean;
interface Options {
    autoPVFilter: AutoPVFilter;
}
export default class AutoPV extends BasePlugin {
    weblog: HttpWeblogInstance;
    static key: string;
    private beginTime;
    private autoPVFilter;
    private oldPushState;
    private oldReplaceState;
    /**
     * 兼容写法，如果在 Weblog 初始化设置 plugins 时，不需要设置 weblog
     * 为兼容历史写法，这里有点乱
     * @param weblog
     * @param autoPVFilter
     */
    constructor(autoPVFilter?: AutoPVFilter);
    constructor(options?: Options);
    constructor(weblog?: HttpWeblogInstance, options?: {
        autoPVFilter?: AutoPVFilter;
    });
    apply(weblog: HttpWeblogInstance): void;
    private visibilityChange;
    private proxyPushState;
    private proxyReplaceState;
    private urlChange;
    beforeUnload: () => void;
    destroy(): void;
}
export {};
