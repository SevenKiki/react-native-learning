
// @ts-nocheck
/* eslint-disable */
import React from 'react'
import classnames from 'classnames'

type IKey = "live_fictitious_aishapeface" | "live_fictitious_bag" | "live_fictitious_bag1" | "live_fictitious_dressup" | "live_fictitious_greentick" | "live_fictitious_shapeface" | "live_fictitious_switch" | "live_host_function_autoplay" | "live_host_function_crosspk" | "live_host_function_hostcenter" | "live_host_function_ninechat" | "live_host_function_pk" | "live_host_function_sing" | "live_host_function_turn_24" | "live_host_function_videoparty" | "live_host_function_voicecomment_24" | "live_host_function_voiceparty2" | "live_host_function_watch" | "live_lite_feedback_interest_24" | "live_live_kszy_close" | "live_livesquare_guide" | "live_livesquare_recharge" | "live_livesquare_servicecenter" | "live_more_voice_delete" | "live_more_voice_finish" | "live_recruitment_list_members" | "live_recruitment_list_message" | "live_recruitment_list_revise" | "live_recruitment_list_upgrade" | "live_recruitment_tab_mine_nor" | "live_recruitment_tab_mine_sel" | "live_recruitment_tab_position_nor" | "live_recruitment_tab_position_sel" | "live_universal_live"

export interface IProps extends Omit<React.HTMLProps<HTMLSpanElement>, 'size'> {
    icon: IKey
    darkMode?: Boolean
    size?: string | number
    color?: string
}

const iconStyle = (size?: string | number, color?: string, style?: any): any => {
    if (!size && !color) {
      return style
    }

    const res = {} as any

    if (size) {
      const s = typeof size === 'number' ? `${size}px` : size
      res.fontSize = s
    }

    if (color) {
      res.color = color
    }

    return Object.assign(res, style)
  }

const IconFont = ({
    className,
    icon,
    darkMode = true,
    size,
    color,
    style,
    ...props
}: IProps) => React.createElement(
    'span',
    {
        className: classnames(
            'iconfont-live',
            `icon-${icon}`,
            darkMode ? `icon-${icon}-dual` : '',
            className
        ),
        'aria-hidden': 'true',
        style: iconStyle(size, color,  style),
        ...props
    }
)

export default IconFont