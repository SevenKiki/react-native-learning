
// @ts-nocheck
/* eslint-disable */
import React from 'react'
import classnames from 'classnames'

type IKey = "customerservice_csc_" | "customerservice_csc_bad1" | "customerservice_csc_chufa" | "customerservice_csc_chulizhong" | "customerservice_csc_close" | "customerservice_csc_dianpu" | "customerservice_csc_fankui" | "customerservice_csc_fuwu" | "customerservice_csc_fuwujindu" | "customerservice_csc_good1" | "customerservice_csc_jiankong" | "customerservice_csc_lianxikefu" | "customerservice_csc_lingdang" | "customerservice_csc_more" | "customerservice_csc_right" | "customerservice_csc_search" | "customerservice_csc_search1" | "customerservice_csc_shanchu" | "customerservice_csc_shensuzhong" | "customerservice_csc_star" | "customerservice_csc_tall" | "customerservice_csc_tuikuanguanbi" | "customerservice_csc_wancheng" | "customerservice_csc_weigui" | "customerservice_csc_weitongguo" | "customerservice_csc_wrong" | "customerservice_csc_zhankai" | "customerservice_csc_zhengchang"

export interface IProps extends Omit<React.HTMLProps<HTMLSpanElement>, 'size'> {
    icon: IKey
    darkMode?: Boolean
    size?: string | number
    color?: string
}

const iconStyle = (size?: string | number, color?: string, style?: any): any => {
    if (!size && !color) {
      return style
    }

    const res = {} as any

    if (size) {
      const s = typeof size === 'number' ? `${size}px` : size
      res.fontSize = s
    }

    if (color) {
      res.color = color
    }

    return Object.assign(res, style)
  }

const IconFont = ({
    className,
    icon,
    darkMode = true,
    size,
    color,
    style,
    ...props
}: IProps) => React.createElement(
    'span',
    {
        className: classnames(
            'iconfont-customerservice',
            `icon-${icon}`,
            darkMode ? `icon-${icon}-dual` : '',
            className
        ),
        'aria-hidden': 'true',
        style: iconStyle(size, color,  style),
        ...props
    }
)

export default IconFont