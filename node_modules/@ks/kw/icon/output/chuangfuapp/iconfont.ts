
// @ts-nocheck
/* eslint-disable */
import React from 'react'
import classnames from 'classnames'

type IKey = "chuangfuapp_analysis_broadcast" | "chuangfuapp_analysis_deceleration" | "chuangfuapp_analysis_deceleration2" | "chuangfuapp_analysis_fans" | "chuangfuapp_analysis_plus" | "chuangfuapp_analysis_profit" | "chuangfuapp_analysis_sort" | "chuangfuapp_analysis_works" | "chuangfuapp_collection_" | "chuangfuapp_first_even" | "chuangfuapp_first_photosynthetic" | "chuangfuapp_first_task" | "chuangfuapp_me_author_24" | "chuangfuapp_me_certification_24" | "chuangfuapp_me_continue" | "chuangfuapp_me_distribution_24" | "chuangfuapp_me_drafts_24" | "chuangfuapp_me_effect_24" | "chuangfuapp_me_encyclopedias_24" | "chuangfuapp_me_fansteam_24" | "chuangfuapp_me_history_24" | "chuangfuapp_me_label" | "chuangfuapp_me_list_24" | "chuangfuapp_me_normal_24" | "chuangfuapp_me_order_24" | "chuangfuapp_me_paid_24" | "chuangfuapp_me_spring_24" | "chuangfuapp_me_upload_24" | "chuangfuapp_me_weekly_24"

export interface IProps extends Omit<React.HTMLProps<HTMLSpanElement>, 'size'> {
    icon: IKey
    darkMode?: Boolean
    size?: string | number
    color?: string
}

const iconStyle = (size?: string | number, color?: string, style?: any): any => {
    if (!size && !color) {
      return style
    }

    const res = {} as any

    if (size) {
      const s = typeof size === 'number' ? `${size}px` : size
      res.fontSize = s
    }

    if (color) {
      res.color = color
    }

    return Object.assign(res, style)
  }

const IconFont = ({
    className,
    icon,
    darkMode = true,
    size,
    color,
    style,
    ...props
}: IProps) => React.createElement(
    'span',
    {
        className: classnames(
            'iconfont-chuangfuapp',
            `icon-${icon}`,
            darkMode ? `icon-${icon}-dual` : '',
            className
        ),
        'aria-hidden': 'true',
        style: iconStyle(size, color,  style),
        ...props
    }
)

export default IconFont