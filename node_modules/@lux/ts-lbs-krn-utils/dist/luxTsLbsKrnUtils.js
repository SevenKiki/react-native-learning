/**
 * @lux/ts-lbs-krn-utils v0.14.0
 * (c) 2023 xingyifei <xingyifei@kuaishou.com>
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react-native'), require('react'), require('@kds/bridge-lite')) :
    typeof define === 'function' && define.amd ? define(['exports', 'react-native', 'react', '@kds/bridge-lite'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.luxTsLbsKrnUtils = {}, global.reactNative, global.react, global.bridgeLite));
})(this, (function (exports, reactNative, react, bridgeLite) { 'use strict';

    var compareVersion = function compareVersion(currentVersion, targetVersion) {
      try {
        var arr1 = currentVersion.split(".").splice(0, 3);
        var arr2 = targetVersion.split(".").splice(0, 3);

        while (arr1.length && arr2.length) {
          var n1 = Number(arr1.shift());
          var n2 = Number(arr2.shift());

          if (n1 > n2) {
            return 1;
          }

          if (n1 < n2) {
            return -1;
          }
        }

        if (arr1.length) {
          return arr1.every(function (item) {
            return Number(item) === 0;
          }) ? 0 : 1;
        }

        if (arr2.length) {
          return arr2.every(function (item) {
            return Number(item) === 0;
          }) ? 0 : -1;
        }

        return 0;
      } catch (e) {
        return -1;
      }
    };
    var appVersion;
    function getAppVersion() {
      var _NativeModules$KRNBas, _NativeModules$KRNBas2, _version$match;

      if (appVersion) {
        return appVersion;
      }

      var _ref = ((_NativeModules$KRNBas = reactNative.NativeModules.KRNBasic) === null || _NativeModules$KRNBas === void 0 ? void 0 : (_NativeModules$KRNBas2 = _NativeModules$KRNBas.getDeviceInfoSync) === null || _NativeModules$KRNBas2 === void 0 ? void 0 : _NativeModules$KRNBas2.call(_NativeModules$KRNBas)) || {
        data: {
          appVersion: ""
        }
      },
          version = _ref.data.appVersion;

      appVersion = (version === null || version === void 0 ? void 0 : (_version$match = version.match(/\d+\.\d+\.\d+/)) === null || _version$match === void 0 ? void 0 : _version$match[0]) || "";
      return appVersion;
    }

    var appVersion$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        compareVersion: compareVersion,
        getAppVersion: getAppVersion
    });

    var env = reactNative.NativeModules.KSRCTBridge.getEnvSync();

    var env$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        env: env
    });

    function newLineFormat(str) {
      if (!str) {
        return [];
      }

      var arr = str.split(/\n/);
      var result = arr.filter(function (item) {
        return item;
      });
      return result;
    }

    var transformTimeYear = function transformTimeYear(timestamp) {
      if (timestamp) {
        var time = new Date(timestamp);
        var y = time.getFullYear();
        var M = time.getMonth() + 1;
        var d = time.getDate();
        return y + "\u5E74" + M + "\u6708" + d + "\u65E5";
      }

      return "";
    };

    var transformTimeMonth = function transformTimeMonth(timestamp) {
      if (timestamp) {
        var time = new Date(timestamp);
        var M = time.getMonth() + 1;
        var d = time.getDate();
        return M + "\u6708" + d + "\u65E5";
      }

      return "";
    };

    var formatTimeToDays = function formatTimeToDays(time) {
      if (!time) {
        return "";
      }

      var nowTime = new Date();
      var formatTime = new Date(time);
      var nY = nowTime.getFullYear();
      var fY = formatTime.getFullYear();

      if (nY !== fY) {
        return transformTimeYear(time);
      }

      var nM = nowTime.getMonth() + 1;
      var fM = formatTime.getMonth() + 1;
      var nd = nowTime.getUTCDate();
      var fd = formatTime.getUTCDate();

      if (nM !== fM) {
        if (nM - fM > 1) {
          return transformTimeMonth(time);
        }

        if (nM - fM === 1) {
          var lastDay = formatTime.setDate(0);
          var difference = lastDay - fd + nd;

          if (difference > 7) {
            return transformTimeMonth(time);
          }
        }
      }

      if (nd - fd > 7) {
        return transformTimeMonth(time);
      }

      if (nd === fd) {
        return "\u4ECA\u5929";
      }

      return nd - fd + "\u5929\u524D";
    };

    var format = /*#__PURE__*/Object.freeze({
        __proto__: null,
        newLineFormat: newLineFormat,
        formatTimeToDays: formatTimeToDays
    });

    var DeviceWidth = reactNative.Dimensions.get("window").width;
    var DeviceHeight = reactNative.Dimensions.get("window").height;
    var FontScale = reactNative.PixelRatio.getFontScale();
    var pixelRatio = reactNative.PixelRatio.get();
    function screenSize(size) {
      var ceil = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var designW = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 414;
      var isMinus = size < 0;

      if (size === 0) {
        return 0;
      }

      var physicalPixels = size * reactNative.PixelRatio.getPixelSizeForLayoutSize(DeviceWidth) / designW;
      var roundPhysicalPixels = Math.max(1, (ceil ? Math.ceil : Math.floor)(isMinus ? -physicalPixels : physicalPixels));
      var pixels = (roundPhysicalPixels / pixelRatio).toFixed(1);
      return isMinus ? -pixels : +pixels;
    }
    function screenSize375(size) {
      var ceil = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return screenSize(size, ceil, 375);
    }
    function screenSize414(size) {
      var ceil = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return screenSize(size, ceil, 414);
    }

    var screenUnit = /*#__PURE__*/Object.freeze({
        __proto__: null,
        DeviceWidth: DeviceWidth,
        DeviceHeight: DeviceHeight,
        FontScale: FontScale,
        pixelRatio: pixelRatio,
        screenSize: screenSize,
        screenSize375: screenSize375,
        screenSize414: screenSize414
    });

    var useFmpLog = function useFmpLog(rootTag, onCreateTimestamp, extra) {
      react.useEffect(function () {
        var _NativeModules$RootVi;

        console.log("=== reprot T1");
        reactNative.NativeModules === null || reactNative.NativeModules === void 0 ? void 0 : (_NativeModules$RootVi = reactNative.NativeModules.RootViewPageBridge) === null || _NativeModules$RootVi === void 0 ? void 0 : _NativeModules$RootVi.rootViewDidMountWith(rootTag, {});
      }, [rootTag]);
      var t2 = react.useRef(0);
      var t3 = react.useRef(0);
      var handleT2 = react.useCallback(function () {
        if (t2.current) {
          return;
        }

        console.log("=== reprot T2");
        t2.current = Date.now() - onCreateTimestamp;
      }, [onCreateTimestamp]);
      var handleT3 = react.useCallback(function () {
        if (t3.current) {
          return;
        }

        console.log("=== reprot T3");
        t3.current = Date.now() - onCreateTimestamp;

        if (t2.current > 0 && t3.current > 0 && t3.current >= t2.current) {
          var _NativeModules$RootVi2;

          reactNative.NativeModules === null || reactNative.NativeModules === void 0 ? void 0 : (_NativeModules$RootVi2 = reactNative.NativeModules.RootViewPageBridge) === null || _NativeModules$RootVi2 === void 0 ? void 0 : _NativeModules$RootVi2.reportPageRenderTime(rootTag, t2.current, t3.current, extra);
        }
      }, [rootTag, onCreateTimestamp, extra]);
      return {
        handleT2: handleT2,
        handleT3: handleT3
      };
    };

    var hooks = /*#__PURE__*/Object.freeze({
        __proto__: null,
        useFmpLog: useFmpLog
    });

    var makePhoneCall = (function (phoneArr) {
      if (!phoneArr || !phoneArr.length) {
        return;
      }

      var phoneOptions = phoneArr.map(function (item) {
        return {
          text: "\u547C\u53EB ".concat(item),
          value: "tel:" + item,
          type: 0
        };
      });
      return bridgeLite.invoke("ui.showBottomSheet", {
        options: phoneOptions,
        title: ""
      }).then(function (res) {
        var tel = res.value;
        reactNative.Linking.canOpenURL(tel).then(function (supported) {
          if (!supported) {
            console.log("Can not handle tel:" + tel);
          } else {
            return reactNative.Linking.openURL(tel);
          }
        });
      }, function (err) {
        console.log("\u8C03\u7528\u5931\u8D25:");
        console.log(err);
      })["catch"](function (e) {
        console.log("\u8C03\u7528\u51FA\u9519:");
        console.log(e);
      });
    });

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }

      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }

    function _asyncToGenerator(fn) {
      return function () {
        var self = this,
            args = arguments;
        return new Promise(function (resolve, reject) {
          var gen = fn.apply(self, args);

          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }

          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }

          _next(undefined);
        });
      };
    }

    function _typeof$1(obj) {
      "@babel/helpers - typeof";

      return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, _typeof$1(obj);
    }

    var regeneratorRuntime$1 = {exports: {}};

    var _typeof = {exports: {}};

    (function (module) {
      function _typeof(obj) {
        "@babel/helpers - typeof";

        return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
          return typeof obj;
        } : function (obj) {
          return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
      }

      module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
    })(_typeof);

    (function (module) {
      var _typeof$1 = _typeof.exports["default"];

      function _regeneratorRuntime() {
        /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

        module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
          return exports;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
        var exports = {},
            Op = Object.prototype,
            hasOwn = Op.hasOwnProperty,
            $Symbol = "function" == typeof Symbol ? Symbol : {},
            iteratorSymbol = $Symbol.iterator || "@@iterator",
            asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
            toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

        function define(obj, key, value) {
          return Object.defineProperty(obj, key, {
            value: value,
            enumerable: !0,
            configurable: !0,
            writable: !0
          }), obj[key];
        }

        try {
          define({}, "");
        } catch (err) {
          define = function define(obj, key, value) {
            return obj[key] = value;
          };
        }

        function wrap(innerFn, outerFn, self, tryLocsList) {
          var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
              generator = Object.create(protoGenerator.prototype),
              context = new Context(tryLocsList || []);
          return generator._invoke = function (innerFn, self, context) {
            var state = "suspendedStart";
            return function (method, arg) {
              if ("executing" === state) throw new Error("Generator is already running");

              if ("completed" === state) {
                if ("throw" === method) throw arg;
                return doneResult();
              }

              for (context.method = method, context.arg = arg;;) {
                var delegate = context.delegate;

                if (delegate) {
                  var delegateResult = maybeInvokeDelegate(delegate, context);

                  if (delegateResult) {
                    if (delegateResult === ContinueSentinel) continue;
                    return delegateResult;
                  }
                }

                if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                  if ("suspendedStart" === state) throw state = "completed", context.arg;
                  context.dispatchException(context.arg);
                } else "return" === context.method && context.abrupt("return", context.arg);
                state = "executing";
                var record = tryCatch(innerFn, self, context);

                if ("normal" === record.type) {
                  if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                  return {
                    value: record.arg,
                    done: context.done
                  };
                }

                "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
              }
            };
          }(innerFn, self, context), generator;
        }

        function tryCatch(fn, obj, arg) {
          try {
            return {
              type: "normal",
              arg: fn.call(obj, arg)
            };
          } catch (err) {
            return {
              type: "throw",
              arg: err
            };
          }
        }

        exports.wrap = wrap;
        var ContinueSentinel = {};

        function Generator() {}

        function GeneratorFunction() {}

        function GeneratorFunctionPrototype() {}

        var IteratorPrototype = {};
        define(IteratorPrototype, iteratorSymbol, function () {
          return this;
        });
        var getProto = Object.getPrototypeOf,
            NativeIteratorPrototype = getProto && getProto(getProto(values([])));
        NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
        var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

        function defineIteratorMethods(prototype) {
          ["next", "throw", "return"].forEach(function (method) {
            define(prototype, method, function (arg) {
              return this._invoke(method, arg);
            });
          });
        }

        function AsyncIterator(generator, PromiseImpl) {
          function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);

            if ("throw" !== record.type) {
              var result = record.arg,
                  value = result.value;
              return value && "object" == _typeof$1(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
                invoke("next", value, resolve, reject);
              }, function (err) {
                invoke("throw", err, resolve, reject);
              }) : PromiseImpl.resolve(value).then(function (unwrapped) {
                result.value = unwrapped, resolve(result);
              }, function (error) {
                return invoke("throw", error, resolve, reject);
              });
            }

            reject(record.arg);
          }

          var previousPromise;

          this._invoke = function (method, arg) {
            function callInvokeWithMethodAndArg() {
              return new PromiseImpl(function (resolve, reject) {
                invoke(method, arg, resolve, reject);
              });
            }

            return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          };
        }

        function maybeInvokeDelegate(delegate, context) {
          var method = delegate.iterator[context.method];

          if (undefined === method) {
            if (context.delegate = null, "throw" === context.method) {
              if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
              context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }

            return ContinueSentinel;
          }

          var record = tryCatch(method, delegate.iterator, context.arg);
          if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
          var info = record.arg;
          return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
        }

        function pushTryEntry(locs) {
          var entry = {
            tryLoc: locs[0]
          };
          1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
        }

        function resetTryEntry(entry) {
          var record = entry.completion || {};
          record.type = "normal", delete record.arg, entry.completion = record;
        }

        function Context(tryLocsList) {
          this.tryEntries = [{
            tryLoc: "root"
          }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
        }

        function values(iterable) {
          if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) return iteratorMethod.call(iterable);
            if ("function" == typeof iterable.next) return iterable;

            if (!isNaN(iterable.length)) {
              var i = -1,
                  next = function next() {
                for (; ++i < iterable.length;) {
                  if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
                }

                return next.value = undefined, next.done = !0, next;
              };

              return next.next = next;
            }
          }

          return {
            next: doneResult
          };
        }

        function doneResult() {
          return {
            value: undefined,
            done: !0
          };
        }

        return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
          var ctor = "function" == typeof genFun && genFun.constructor;
          return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
        }, exports.mark = function (genFun) {
          return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
        }, exports.awrap = function (arg) {
          return {
            __await: arg
          };
        }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
          return this;
        }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
          void 0 === PromiseImpl && (PromiseImpl = Promise);
          var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
          return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
            return result.done ? result.value : iter.next();
          });
        }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
          return this;
        }), define(Gp, "toString", function () {
          return "[object Generator]";
        }), exports.keys = function (object) {
          var keys = [];

          for (var key in object) {
            keys.push(key);
          }

          return keys.reverse(), function next() {
            for (; keys.length;) {
              var key = keys.pop();
              if (key in object) return next.value = key, next.done = !1, next;
            }

            return next.done = !0, next;
          };
        }, exports.values = values, Context.prototype = {
          constructor: Context,
          reset: function reset(skipTempReset) {
            if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
              "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
            }
          },
          stop: function stop() {
            this.done = !0;
            var rootRecord = this.tryEntries[0].completion;
            if ("throw" === rootRecord.type) throw rootRecord.arg;
            return this.rval;
          },
          dispatchException: function dispatchException(exception) {
            if (this.done) throw exception;
            var context = this;

            function handle(loc, caught) {
              return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
            }

            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i],
                  record = entry.completion;
              if ("root" === entry.tryLoc) return handle("end");

              if (entry.tryLoc <= this.prev) {
                var hasCatch = hasOwn.call(entry, "catchLoc"),
                    hasFinally = hasOwn.call(entry, "finallyLoc");

                if (hasCatch && hasFinally) {
                  if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                  if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                } else if (hasCatch) {
                  if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                } else {
                  if (!hasFinally) throw new Error("try statement without catch or finally");
                  if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                }
              }
            }
          },
          abrupt: function abrupt(type, arg) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];

              if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                var finallyEntry = entry;
                break;
              }
            }

            finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
            var record = finallyEntry ? finallyEntry.completion : {};
            return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
          },
          complete: function complete(record, afterLoc) {
            if ("throw" === record.type) throw record.arg;
            return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
          },
          finish: function finish(finallyLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
            }
          },
          "catch": function _catch(tryLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];

              if (entry.tryLoc === tryLoc) {
                var record = entry.completion;

                if ("throw" === record.type) {
                  var thrown = record.arg;
                  resetTryEntry(entry);
                }

                return thrown;
              }
            }

            throw new Error("illegal catch attempt");
          },
          delegateYield: function delegateYield(iterable, resultName, nextLoc) {
            return this.delegate = {
              iterator: values(iterable),
              resultName: resultName,
              nextLoc: nextLoc
            }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
          }
        }, exports;
      }

      module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
    })(regeneratorRuntime$1);

    var runtime = regeneratorRuntime$1.exports();
    var regenerator = runtime; // Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=

    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if ((typeof globalThis === "undefined" ? "undefined" : _typeof$1(globalThis)) === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }

    var requestLocation = /*#__PURE__*/(function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(biz, statKey) {
        var _yield$invoke, latitude, longitude;

        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return bridgeLite.invoke("system.requestLocation", {
                  biz: biz,
                  statKey: statKey
                });

              case 3:
                _yield$invoke = _context.sent;
                latitude = _yield$invoke.latitude;
                longitude = _yield$invoke.longitude;
                return _context.abrupt("return", {
                  latitude: latitude,
                  longitude: longitude
                });

              case 9:
                _context.prev = 9;
                _context.t0 = _context["catch"](0);
                console.warn(_context.t0);
                return _context.abrupt("return", {
                  latitude: 0,
                  longitude: 0
                });

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 9]]);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    })();

    var getAppInfo = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
      var result;
      return regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return bridgeLite.invoke("system.getAppInfo", {});

            case 3:
              result = _context.sent;
              return _context.abrupt("return", result);

            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](0);
              console.log(_context.t0);
              return _context.abrupt("return", {
                kpn: "",
                did: "",
                kpf: ""
              });

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 7]]);
    }));

    var bridge = /*#__PURE__*/Object.freeze({
        __proto__: null,
        makePhoneCall: makePhoneCall,
        getAppInfo: getAppInfo,
        requestLocation: requestLocation
    });

    var checkDemension = function checkDemension(size) {
      var window = reactNative.Dimensions.get("window");
      var windowRes = window.width === size || window.height === size;
      var screen = reactNative.Dimensions.get("screen");
      var screenRes = screen.width === size || screen.height === size;
      return windowRes || screenRes;
    };

    function isIphoneX() {
      return reactNative.Platform.OS === "ios" && !reactNative.Platform.isPad && !reactNative.Platform.isTV && (checkDemension(780) || checkDemension(812) || checkDemension(844) || checkDemension(896) || checkDemension(926) || checkDemension(852) || checkDemension(932));
    }

    var checkDimensions = function checkDimensions(portraitWidth, portraitHeight) {
      var window = reactNative.Dimensions.get("window");
      var windowRes = window.height === portraitHeight && window.width === portraitWidth || window.width === portraitHeight && window.height === portraitWidth;
      var screen = reactNative.Dimensions.get("screen");
      var screenRes = screen.height === portraitHeight && screen.width === portraitWidth || screen.width === portraitHeight && screen.height === portraitWidth;
      return windowRes || screenRes;
    };

    var _isStatusBarHeight59 = function _isStatusBarHeight59() {
      return checkDimensions(393, 852) || checkDimensions(430, 932);
    };

    var _getIphoneStatusBarHeight = function _getIphoneStatusBarHeight() {
      if (isIphoneX()) {
        if (_isStatusBarHeight59()) {
          return 59;
        }

        return 44;
      }

      return 20;
    };

    var safeAreaTop = reactNative.Platform.select({
      ios: _getIphoneStatusBarHeight(),
      android: reactNative.StatusBar.currentHeight,
      "default": 0
    });
    var safeAreaBottom = isIphoneX() ? 34 : 0;

    var iphone = /*#__PURE__*/Object.freeze({
        __proto__: null,
        isIphoneX: isIphoneX,
        safeAreaTop: safeAreaTop,
        safeAreaBottom: safeAreaBottom
    });

    var formatHotPeople = (function (peopleNum) {
      try {
        if (peopleNum < 50) {
          return "";
        }

        if (peopleNum >= 1e4) {
          var fixNum = (peopleNum / 1e4).toFixed(1);
          return "".concat(Number(fixNum) / 1, "\u4E07");
        }

        return peopleNum;
      } catch (err) {
        return peopleNum;
      }
    });

    var urlSplicing = (function (krnUrl, rootProps, source) {
      var _URL$, _URL$$split;

      var preParams = ["bundledId", "componentName"];
      var addParams = Object.entries({
        businessHalfScreen: rootProps === null || rootProps === void 0 ? void 0 : rootProps.businessHalfScreen,
        heightratio: rootProps === null || rootProps === void 0 ? void 0 : rootProps.heightratio
      });
      var URL = krnUrl.split(/\?(.+)/);
      var params = (URL === null || URL === void 0 ? void 0 : (_URL$ = URL[1]) === null || _URL$ === void 0 ? void 0 : (_URL$$split = _URL$.split("&")) === null || _URL$$split === void 0 ? void 0 : _URL$$split.reduce(function (prev, next) {
        if (preParams.length === 0 && addParams.length > 0) {
          var param = addParams.shift();
          prev.push("".concat(param[0], "=").concat(param[1]));
        } else {
          var index = preParams.indexOf(next.split("=")[0]);

          if (index > -1) {
            preParams.splice(index, 1);
          }

          prev.push(next);
        }

        return prev;
      }, []).join("&")) || "";
      return "".concat(URL === null || URL === void 0 ? void 0 : URL[0], "?").concat(params);
    });

    var index = {
      appVersion: appVersion$1,
      env: env$1,
      formatHotPeople: formatHotPeople,
      format: format,
      screenUnit: screenUnit,
      hooks: hooks,
      bridge: bridge,
      iphone: iphone,
      urlSplicing: urlSplicing
    };

    exports.appVersion = appVersion$1;
    exports.bridge = bridge;
    exports["default"] = index;
    exports.env = env$1;
    exports.format = format;
    exports.formatHotPeople = formatHotPeople;
    exports.hooks = hooks;
    exports.iphone = iphone;
    exports.screenUnit = screenUnit;
    exports.urlSplicing = urlSplicing;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=luxTsLbsKrnUtils.js.map
