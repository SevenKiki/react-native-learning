import { NativeModules } from 'react-native';

/**
 * 版本比较方法，只比较前3位数
 * 返回 1  当前版本 大于 目标版本
 * 返回 -1 当前版本 小于 目标版本
 * 返回 0  当前版本 等于 目标版本
 * @param currentVersion 当前版本号
 * @param targetVersion 目标版本号
 * @return 0 -1
 */
export const compareVersion = function (
    currentVersion: string,
    targetVersion: string,
) {
    try {
        const arr1 = currentVersion.split('.').splice(0, 3);
        const arr2 = targetVersion.split('.').splice(0, 3);
        while (arr1.length && arr2.length) {
            const n1 = Number(arr1.shift());
            const n2 = Number(arr2.shift());
            if (n1 > n2) {
                return 1;
            }
            if (n1 < n2) {
                return -1;
            }
        }
        if (arr1.length) {
            // arr2 数组已经为空
            return arr1.every((item) => Number(item) === 0) ? 0 : 1;
        }
        if (arr2.length) {
            // arr1 数组已经为空
            return arr2.every((item) => Number(item) === 0) ? 0 : -1;
        }
        return 0;
    } catch (e) {
        return -1;
    }
};

/**
 * 获取当前应用版本号
 * @param currentVersion 当前版本号
 * @param targetVersion 目标版本号
 * @return appversion string
 */

let appVersion: string;
export function getAppVersion() {
    if (appVersion) {
        return appVersion;
    }
    const {
        data: { appVersion: version },
    } = NativeModules.KRNBasic?.getDeviceInfoSync?.() || {
        data: {
            appVersion: '',
        },
    };
    appVersion = (version as string)?.match(/\d+\.\d+\.\d+/)?.[0] || '';
    return appVersion;
}
