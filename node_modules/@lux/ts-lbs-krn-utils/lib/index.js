/**
 * @lux/ts-lbs-krn-utils v0.14.0
 * (c) 2023 xingyifei <xingyifei@kuaishou.com>
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var reactNative = require('react-native');
var react = require('react');
var bridgeLite = require('@kds/bridge-lite');
var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var _regeneratorRuntime = require('@babel/runtime/regenerator');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var _regeneratorRuntime__default = /*#__PURE__*/_interopDefaultLegacy(_regeneratorRuntime);

var compareVersion = function compareVersion(currentVersion, targetVersion) {
  try {
    var arr1 = currentVersion.split(".").splice(0, 3);
    var arr2 = targetVersion.split(".").splice(0, 3);

    while (arr1.length && arr2.length) {
      var n1 = Number(arr1.shift());
      var n2 = Number(arr2.shift());

      if (n1 > n2) {
        return 1;
      }

      if (n1 < n2) {
        return -1;
      }
    }

    if (arr1.length) {
      return arr1.every(function (item) {
        return Number(item) === 0;
      }) ? 0 : 1;
    }

    if (arr2.length) {
      return arr2.every(function (item) {
        return Number(item) === 0;
      }) ? 0 : -1;
    }

    return 0;
  } catch (e) {
    return -1;
  }
};
var appVersion;
function getAppVersion() {
  var _NativeModules$KRNBas, _NativeModules$KRNBas2, _version$match;

  if (appVersion) {
    return appVersion;
  }

  var _ref = ((_NativeModules$KRNBas = reactNative.NativeModules.KRNBasic) === null || _NativeModules$KRNBas === void 0 ? void 0 : (_NativeModules$KRNBas2 = _NativeModules$KRNBas.getDeviceInfoSync) === null || _NativeModules$KRNBas2 === void 0 ? void 0 : _NativeModules$KRNBas2.call(_NativeModules$KRNBas)) || {
    data: {
      appVersion: ""
    }
  },
      version = _ref.data.appVersion;

  appVersion = (version === null || version === void 0 ? void 0 : (_version$match = version.match(/\d+\.\d+\.\d+/)) === null || _version$match === void 0 ? void 0 : _version$match[0]) || "";
  return appVersion;
}

var appVersion$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    compareVersion: compareVersion,
    getAppVersion: getAppVersion
});

var env = reactNative.NativeModules.KSRCTBridge.getEnvSync();

var env$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    env: env
});

function newLineFormat(str) {
  if (!str) {
    return [];
  }

  var arr = str.split(/\n/);
  var result = arr.filter(function (item) {
    return item;
  });
  return result;
}

var transformTimeYear = function transformTimeYear(timestamp) {
  if (timestamp) {
    var time = new Date(timestamp);
    var y = time.getFullYear();
    var M = time.getMonth() + 1;
    var d = time.getDate();
    return y + "\u5E74" + M + "\u6708" + d + "\u65E5";
  }

  return "";
};

var transformTimeMonth = function transformTimeMonth(timestamp) {
  if (timestamp) {
    var time = new Date(timestamp);
    var M = time.getMonth() + 1;
    var d = time.getDate();
    return M + "\u6708" + d + "\u65E5";
  }

  return "";
};

var formatTimeToDays = function formatTimeToDays(time) {
  if (!time) {
    return "";
  }

  var nowTime = new Date();
  var formatTime = new Date(time);
  var nY = nowTime.getFullYear();
  var fY = formatTime.getFullYear();

  if (nY !== fY) {
    return transformTimeYear(time);
  }

  var nM = nowTime.getMonth() + 1;
  var fM = formatTime.getMonth() + 1;
  var nd = nowTime.getUTCDate();
  var fd = formatTime.getUTCDate();

  if (nM !== fM) {
    if (nM - fM > 1) {
      return transformTimeMonth(time);
    }

    if (nM - fM === 1) {
      var lastDay = formatTime.setDate(0);
      var difference = lastDay - fd + nd;

      if (difference > 7) {
        return transformTimeMonth(time);
      }
    }
  }

  if (nd - fd > 7) {
    return transformTimeMonth(time);
  }

  if (nd === fd) {
    return "\u4ECA\u5929";
  }

  return nd - fd + "\u5929\u524D";
};

var format = /*#__PURE__*/Object.freeze({
    __proto__: null,
    newLineFormat: newLineFormat,
    formatTimeToDays: formatTimeToDays
});

var DeviceWidth = reactNative.Dimensions.get("window").width;
var DeviceHeight = reactNative.Dimensions.get("window").height;
var FontScale = reactNative.PixelRatio.getFontScale();
var pixelRatio = reactNative.PixelRatio.get();
function screenSize(size) {
  var ceil = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var designW = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 414;
  var isMinus = size < 0;

  if (size === 0) {
    return 0;
  }

  var physicalPixels = size * reactNative.PixelRatio.getPixelSizeForLayoutSize(DeviceWidth) / designW;
  var roundPhysicalPixels = Math.max(1, (ceil ? Math.ceil : Math.floor)(isMinus ? -physicalPixels : physicalPixels));
  var pixels = (roundPhysicalPixels / pixelRatio).toFixed(1);
  return isMinus ? -pixels : +pixels;
}
function screenSize375(size) {
  var ceil = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return screenSize(size, ceil, 375);
}
function screenSize414(size) {
  var ceil = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return screenSize(size, ceil, 414);
}

var screenUnit = /*#__PURE__*/Object.freeze({
    __proto__: null,
    DeviceWidth: DeviceWidth,
    DeviceHeight: DeviceHeight,
    FontScale: FontScale,
    pixelRatio: pixelRatio,
    screenSize: screenSize,
    screenSize375: screenSize375,
    screenSize414: screenSize414
});

var useFmpLog = function useFmpLog(rootTag, onCreateTimestamp, extra) {
  react.useEffect(function () {
    var _NativeModules$RootVi;

    console.log("=== reprot T1");
    reactNative.NativeModules === null || reactNative.NativeModules === void 0 ? void 0 : (_NativeModules$RootVi = reactNative.NativeModules.RootViewPageBridge) === null || _NativeModules$RootVi === void 0 ? void 0 : _NativeModules$RootVi.rootViewDidMountWith(rootTag, {});
  }, [rootTag]);
  var t2 = react.useRef(0);
  var t3 = react.useRef(0);
  var handleT2 = react.useCallback(function () {
    if (t2.current) {
      return;
    }

    console.log("=== reprot T2");
    t2.current = Date.now() - onCreateTimestamp;
  }, [onCreateTimestamp]);
  var handleT3 = react.useCallback(function () {
    if (t3.current) {
      return;
    }

    console.log("=== reprot T3");
    t3.current = Date.now() - onCreateTimestamp;

    if (t2.current > 0 && t3.current > 0 && t3.current >= t2.current) {
      var _NativeModules$RootVi2;

      reactNative.NativeModules === null || reactNative.NativeModules === void 0 ? void 0 : (_NativeModules$RootVi2 = reactNative.NativeModules.RootViewPageBridge) === null || _NativeModules$RootVi2 === void 0 ? void 0 : _NativeModules$RootVi2.reportPageRenderTime(rootTag, t2.current, t3.current, extra);
    }
  }, [rootTag, onCreateTimestamp, extra]);
  return {
    handleT2: handleT2,
    handleT3: handleT3
  };
};

var hooks = /*#__PURE__*/Object.freeze({
    __proto__: null,
    useFmpLog: useFmpLog
});

var makePhoneCall = (function (phoneArr) {
  if (!phoneArr || !phoneArr.length) {
    return;
  }

  var phoneOptions = phoneArr.map(function (item) {
    return {
      text: "\u547C\u53EB ".concat(item),
      value: "tel:" + item,
      type: 0
    };
  });
  return bridgeLite.invoke("ui.showBottomSheet", {
    options: phoneOptions,
    title: ""
  }).then(function (res) {
    var tel = res.value;
    reactNative.Linking.canOpenURL(tel).then(function (supported) {
      if (!supported) {
        console.log("Can not handle tel:" + tel);
      } else {
        return reactNative.Linking.openURL(tel);
      }
    });
  }, function (err) {
    console.log("\u8C03\u7528\u5931\u8D25:");
    console.log(err);
  })["catch"](function (e) {
    console.log("\u8C03\u7528\u51FA\u9519:");
    console.log(e);
  });
});

var requestLocation = /*#__PURE__*/(function () {
  var _ref = _asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee(biz, statKey) {
    var _yield$invoke, latitude, longitude;

    return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return bridgeLite.invoke("system.requestLocation", {
              biz: biz,
              statKey: statKey
            });

          case 3:
            _yield$invoke = _context.sent;
            latitude = _yield$invoke.latitude;
            longitude = _yield$invoke.longitude;
            return _context.abrupt("return", {
              latitude: latitude,
              longitude: longitude
            });

          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](0);
            console.warn(_context.t0);
            return _context.abrupt("return", {
              latitude: 0,
              longitude: 0
            });

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 9]]);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

var getAppInfo = /*#__PURE__*/_asyncToGenerator__default["default"]( /*#__PURE__*/_regeneratorRuntime__default["default"].mark(function _callee() {
  var result;
  return _regeneratorRuntime__default["default"].wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.prev = 0;
          _context.next = 3;
          return bridgeLite.invoke("system.getAppInfo", {});

        case 3:
          result = _context.sent;
          return _context.abrupt("return", result);

        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](0);
          console.log(_context.t0);
          return _context.abrupt("return", {
            kpn: "",
            did: "",
            kpf: ""
          });

        case 11:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, null, [[0, 7]]);
}));

var bridge = /*#__PURE__*/Object.freeze({
    __proto__: null,
    makePhoneCall: makePhoneCall,
    getAppInfo: getAppInfo,
    requestLocation: requestLocation
});

var checkDemension = function checkDemension(size) {
  var window = reactNative.Dimensions.get("window");
  var windowRes = window.width === size || window.height === size;
  var screen = reactNative.Dimensions.get("screen");
  var screenRes = screen.width === size || screen.height === size;
  return windowRes || screenRes;
};

function isIphoneX() {
  return reactNative.Platform.OS === "ios" && !reactNative.Platform.isPad && !reactNative.Platform.isTV && (checkDemension(780) || checkDemension(812) || checkDemension(844) || checkDemension(896) || checkDemension(926) || checkDemension(852) || checkDemension(932));
}

var checkDimensions = function checkDimensions(portraitWidth, portraitHeight) {
  var window = reactNative.Dimensions.get("window");
  var windowRes = window.height === portraitHeight && window.width === portraitWidth || window.width === portraitHeight && window.height === portraitWidth;
  var screen = reactNative.Dimensions.get("screen");
  var screenRes = screen.height === portraitHeight && screen.width === portraitWidth || screen.width === portraitHeight && screen.height === portraitWidth;
  return windowRes || screenRes;
};

var _isStatusBarHeight59 = function _isStatusBarHeight59() {
  return checkDimensions(393, 852) || checkDimensions(430, 932);
};

var _getIphoneStatusBarHeight = function _getIphoneStatusBarHeight() {
  if (isIphoneX()) {
    if (_isStatusBarHeight59()) {
      return 59;
    }

    return 44;
  }

  return 20;
};

var safeAreaTop = reactNative.Platform.select({
  ios: _getIphoneStatusBarHeight(),
  android: reactNative.StatusBar.currentHeight,
  "default": 0
});
var safeAreaBottom = isIphoneX() ? 34 : 0;

var iphone = /*#__PURE__*/Object.freeze({
    __proto__: null,
    isIphoneX: isIphoneX,
    safeAreaTop: safeAreaTop,
    safeAreaBottom: safeAreaBottom
});

var formatHotPeople = (function (peopleNum) {
  try {
    if (peopleNum < 50) {
      return "";
    }

    if (peopleNum >= 1e4) {
      var fixNum = (peopleNum / 1e4).toFixed(1);
      return "".concat(Number(fixNum) / 1, "\u4E07");
    }

    return peopleNum;
  } catch (err) {
    return peopleNum;
  }
});

var urlSplicing = (function (krnUrl, rootProps, source) {
  var _URL$, _URL$$split;

  var preParams = ["bundledId", "componentName"];
  var addParams = Object.entries({
    businessHalfScreen: rootProps === null || rootProps === void 0 ? void 0 : rootProps.businessHalfScreen,
    heightratio: rootProps === null || rootProps === void 0 ? void 0 : rootProps.heightratio
  });
  var URL = krnUrl.split(/\?(.+)/);
  var params = (URL === null || URL === void 0 ? void 0 : (_URL$ = URL[1]) === null || _URL$ === void 0 ? void 0 : (_URL$$split = _URL$.split("&")) === null || _URL$$split === void 0 ? void 0 : _URL$$split.reduce(function (prev, next) {
    if (preParams.length === 0 && addParams.length > 0) {
      var param = addParams.shift();
      prev.push("".concat(param[0], "=").concat(param[1]));
    } else {
      var index = preParams.indexOf(next.split("=")[0]);

      if (index > -1) {
        preParams.splice(index, 1);
      }

      prev.push(next);
    }

    return prev;
  }, []).join("&")) || "";
  return "".concat(URL === null || URL === void 0 ? void 0 : URL[0], "?").concat(params);
});

var index = {
  appVersion: appVersion$1,
  env: env$1,
  formatHotPeople: formatHotPeople,
  format: format,
  screenUnit: screenUnit,
  hooks: hooks,
  bridge: bridge,
  iphone: iphone,
  urlSplicing: urlSplicing
};

exports.appVersion = appVersion$1;
exports.bridge = bridge;
exports["default"] = index;
exports.env = env$1;
exports.format = format;
exports.formatHotPeople = formatHotPeople;
exports.hooks = hooks;
exports.iphone = iphone;
exports.screenUnit = screenUnit;
exports.urlSplicing = urlSplicing;
//# sourceMappingURL=index.js.map
