"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parsePackageJsonComponents = void 0;
const const_1 = require("./const");
/**
 * 从 package.json 中生成 lux 的组件采集信息
 * @param packageJson
 * @returns
 */
const parsePackageJsonComponents = (packageJson) => {
    // 开发依赖
    const devComponentsInfo = generateComponentsInfo(packageJson.devDependencies);
    // 生产依赖
    const componentsInfo = generateComponentsInfo(packageJson.dependencies);
    // 两种依赖不去重了（很少有一个包两个地方都依赖的情况）
    return componentsInfo
        .concat(devComponentsInfo);
};
exports.parsePackageJsonComponents = parsePackageJsonComponents;
/**
 * 从 package.json 的 dependencies 中生成本地要采集的 lux 组件信息
 * @param dependencies
 * @returns
 */
const generateComponentsInfo = (dependencies) => {
    const componentInfos = [];
    Object.keys(dependencies || {}).forEach(dependent => {
        if (!isLuxComponent(dependent))
            return;
        /**
         * 如果依赖的是当前上报的包，则忽略
         */
        if (dependent == '@lux/pkg-report')
            return;
        componentInfos.push({
            componentName: dependent,
            componentType: +isLuxLib(dependent),
            version: dependencies[dependent],
        });
    });
    return componentInfos;
};
/**
 * @pnpm/lockfile-file 目前依赖node版本>14
 * 为不影响用户使用，对pnpm先不上报
 *
 *  "@pnpm/lockfile-file": "^5.0.3",
 *  "@pnpm/logger": "^4.0.0"
*/
// import * as pnpmLockfile from '@pnpm/lockfile-file'
/**
 * 检测是否是 lux 组件
 * @lux 开头
 * @lux-lib 开头
 * @param name
 * @returns
 */
const isLuxComponent = (name) => {
    return name.startsWith(const_1.luxPrefix);
};
const isLuxLib = (name) => {
    return name.startsWith(const_1.luxLibPrefix);
};
