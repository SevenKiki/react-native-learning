"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.debug = exports.log = exports.isProd = exports.exec = exports.getCurrentUsedPkgTool = void 0;
const child_process_1 = __importDefault(require("child_process"));
const debug_1 = __importDefault(require("debug"));
/**
 * 获取当前使用的包管理工具
 *
 * process.env.npm_config_user_agent
 *
 * npm: npm/6.14.11 node/v12.22.0 darwin x64
 * yarn: yarn/1.22.17 npm/? node/v12.22.0 darwin x64
 * pnpm: pnpm/6.32.6 npm/? node/v12.22.0 darwin x64
 *
 */
const getCurrentUsedPkgTool = () => {
    var _a;
    const npmConfigUserAgent = (_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.npm_config_user_agent;
    if (!npmConfigUserAgent) {
        return;
    }
    if (npmConfigUserAgent.includes('yarn')) {
        return 'yarn';
    }
    else if (npmConfigUserAgent.includes('pnpm')) {
        return 'pnpm';
    }
    else {
        return 'npm';
    }
};
exports.getCurrentUsedPkgTool = getCurrentUsedPkgTool;
/**
 * 执行脚本
 */
const exec = (shell, options = {}) => {
    return new Promise((resolve) => {
        child_process_1.default.exec(shell, options
        //   (error: Error, sto: string) => {
        //   if (error) {
        //     return reject(error);
        //   }
        //   log(sto);
        //   resolve(null);
        // }
        );
        resolve(null);
    });
};
exports.exec = exec;
/**
 * 判断当前环境
 */
const isProd = () => {
    return process.env.NODE_ENV === 'procution';
};
exports.isProd = isProd;
/**
 * 通用输出
 */
exports.log = console.log;
/**
 * DEBUG 日志，通过环境变量中注入 DEBUG=@lux/pkg-report 开启
 */
exports.debug = (0, debug_1.default)('@lux/pkg-report');
