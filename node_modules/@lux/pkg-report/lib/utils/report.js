"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.report = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const const_1 = require("./const");
const gitInfo_1 = require("./gitInfo");
const parse_1 = require("./parse");
const util_1 = require("./util");
// export const http = axios.create()
/**
 * 构建上报参数
*/
const buildInfo = (packageJson) => {
    const { user } = (0, gitInfo_1.getGitInfo)();
    (0, util_1.debug)('buildInfo get git user: %j', user);
    // git 项目地址
    let projectGit = 'empty';
    // git 命名空间 + 仓库名称
    let projectGitRepoName = 'anonymous';
    // 当本地的远程仓库信息不存在时，项目地址上报【empty】 项目名上报【anonymous】
    const { 'remote "origin"': remoteOrigin } = (0, gitInfo_1.getLocalGitRepoInfo)();
    if (remoteOrigin && (remoteOrigin === null || remoteOrigin === void 0 ? void 0 : remoteOrigin.url)) {
        /**
         * @example git@git.corp.kuaishou.com:mfe/platform/lux-cli.git
         */
        projectGit = remoteOrigin.url;
        /**
         * @example
         */
        projectGitRepoName = (0, gitInfo_1.parseGitRepoName)(remoteOrigin.url);
    }
    return {
        /**
         * 当前 package.json name
         */
        projectName: (packageJson === null || packageJson === void 0 ? void 0 : packageJson.name) || 'anonymous',
        projectGit,
        projectGitRepoName,
        user: {
            name: user.name,
            email: user.email,
        },
        componentList: (0, parse_1.parsePackageJsonComponents)(packageJson)
    };
};
/**
 * 上报方法
 * 整个流程不等上报结束
 */
const report = async (packageJson) => {
    /**
     * 从不同的 lock 文件中找到本次需要上报的信息
     */
    const depInfo = buildInfo(packageJson);
    // 没有依赖 lux 的组件信息（或者转换 package-lock.json/yarn.lock 失败了），不用上报了
    if (!depInfo.componentList.length) {
        (0, util_1.debug)('parse report data empty, data: %j', depInfo);
        return;
    }
    let url = const_1.reportHost;
    // 环境变量注入了 LUX_REPORT_URL
    // @TODO 后面还可以从 package.json 里面配置？
    if (process.env.LUX_REPORT_URL) {
        url = process.env.LUX_REPORT_URL;
    }
    // 如果环境变量注入了 LUX_REPORT_DEBUG
    else if (process.env.LUX_REPORT_DEBUG) {
        url = const_1.reportStagingHost;
    }
    (0, util_1.debug)('now, report data to lux: %s', url);
    (0, util_1.debug)('      body: %j', depInfo);
    /**
     * 兜兜转转一圈，终于可以上报到 lux 了
     */
    try {
        const resp = await (0, node_fetch_1.default)(url, {
            method: 'POST',
            body: JSON.stringify(depInfo),
            headers: { 'Content-Type': 'application/json' },
        });
        const s = await resp.text();
        (0, util_1.debug)('report to lux success, response: %s', s);
    }
    catch (error) {
        (0, util_1.debug)('report to lux failed');
        (0, util_1.log)(error);
    }
};
exports.report = report;
