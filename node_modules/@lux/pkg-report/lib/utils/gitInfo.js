"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseGitRepoName = exports.getLocalGitRepoInfo = exports.getGitInfo = void 0;
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const ini_1 = __importDefault(require("ini"));
const const_1 = require("./const");
const util_1 = require("./util");
/**
 * 检测某个目录下是否有 git 相关配置
*/
const getGitConfigPath = (baseDir) => {
    let configPath = '';
    configPath = path_1.default.join(baseDir, '.gitconfig');
    if (!fs_1.default.existsSync(configPath)) {
        configPath = path_1.default.join(baseDir, '.config/git/config');
    }
    if (!fs_1.default.existsSync(configPath)) {
        configPath = path_1.default.join(baseDir, '.git/config');
    }
    return fs_1.default.existsSync(configPath) ? configPath : null;
};
/**
 * 获取当前用户 git 信息
 * @returns
 */
const getGitInfo = function () {
    const path = getGitConfigPath(os_1.default.homedir());
    if (path) {
        /**
         *  [user]
         *          name = linkFly
         *          email = jianglai@kuaishou.com
         *  [pull]
         *          ff = only
         */
        const file = fs_1.default.readFileSync(path, 'utf8');
        return ini_1.default.parse(file);
    }
    return { user: { name: '', email: '' } };
};
exports.getGitInfo = getGitInfo;
/**
 * 获取用户当前应用目录下的 git 信息
 * @returns
 */
const getLocalGitRepoInfo = function () {
    const path = getGitConfigPath(const_1.appRootPackageJsonPath);
    if (path) {
        const file = fs_1.default.readFileSync(path, 'utf8');
        (0, util_1.debug)('get local git repo info, path: %s, gitconfig: %s', path, file);
        return ini_1.default.parse(file);
    }
    (0, util_1.debug)('get local git repo failed');
    return { 'remote "origin"': { url: '' } };
};
exports.getLocalGitRepoInfo = getLocalGitRepoInfo;
/**
 * 解析git仓库名
 * 区分ssh & https两种格式
 * @param url - git@git.corp.kuaishou.com:mfe/platform/lux-cli.git
 * @returns mfe/platform/lux-cli
*/
const parseGitRepoName = (url) => {
    (0, util_1.debug)('parse git repo name, repo url: %s', url);
    if (url.startsWith('git')) {
        const match = url.match(const_1.SSH_URL_RE);
        if (match)
            return match[1];
    }
    else {
        const match = url.match(const_1.HTTPS_URL_RE);
        if (match)
            return match[2];
    }
    return 'anonymous';
};
exports.parseGitRepoName = parseGitRepoName;
