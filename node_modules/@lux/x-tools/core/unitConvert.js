'use strict';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

/**
 * 单位转换函数
 * @param value 数字
 * @param option 转换配置
 * @returns
 */
function unitConvert(value, option) {
    var scale = option.scale, limit = option.limit, units = option.units, _a = option.fixedDigits, fixedDigits = _a === void 0 ? 2 : _a, _b = option.keepZero, keepZero = _b === void 0 ? true : _b;
    var rest = value;
    var index = 1;
    if (typeof scale === 'number') {
        // 向前换算的阈值，如果没有传，则使用scale
        var continueLimit = limit || scale;
        while (units[index] && rest >= continueLimit) {
            rest /= scale;
            index++;
        }
    }
    else {
        while (units[index] && scale[index - 1] && rest >= (limit || scale[index - 1])) {
            rest /= scale[index - 1];
            index++;
        }
    }
    var fixedRest = toFixed(rest);
    var unit = units[index - 1];
    var lastScale = typeof scale === 'number' ? scale : scale[index - 1];
    // toFixed后再次判断是否需要进位
    if (lastScale && units[index] && parseFloat(fixedRest) >= (limit || lastScale)) {
        fixedRest = toFixed(parseFloat(fixedRest) / lastScale);
        unit = units[index];
    }
    if (!keepZero && fixedRest.includes('.')) {
        fixedRest = fixedRest.replace(/([.]?0*)$/, '');
    }
    function toFixed(val) {
        return val.toFixed(fixedDigits > 0 ? fixedDigits : 0);
    }
    return {
        format: "".concat(fixedRest).concat(unit),
        value: fixedRest,
        unit: unit,
    };
}
// 默认存储单位转换配置
unitConvert.Storage = {
    scale: 1024,
    units: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB'],
};
// 默认数字单位转换配置
unitConvert.Number = {
    scale: 10000,
    units: ['', '万', '亿'],
};
// 数字单位转换配置(ch)
unitConvert.CountCH = __assign(__assign({}, unitConvert.Number), { keepZero: false, fixedDigits: 1 });
unitConvert.CountEN = {
    scale: 1000,
    units: ['', 'k', 'm', 'b'],
    keepZero: false,
    fixedDigits: 1,
};

module.exports = unitConvert;
