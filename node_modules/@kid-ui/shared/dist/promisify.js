import { isFunction } from './validate';
const kPromisifiedSymbol = Symbol();
export const promisify = (original) => {
    if (!isFunction(original)) {
        throw new Error('original is not a Function');
    }
    const originalFn = original[kPromisifiedSymbol];
    if (originalFn && isFunction(originalFn)) {
        return Object.defineProperty(originalFn, kPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true,
        });
    }
    function fn(...args) {
        return new Promise((resolve, reject) => {
            args.push((err, data) => {
                if (err) {
                    return reject(err);
                }
                resolve(data);
            });
            Reflect.apply(original, this, args);
        });
    }
    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
    Object.defineProperty(fn, kPromisifiedSymbol, {
        value: fn,
        enumerable: false,
        writable: false,
        configurable: true,
    });
    return Object.defineProperties(fn, Object.getOwnPropertyDescriptors(original));
};
//# sourceMappingURL=promisify.js.map