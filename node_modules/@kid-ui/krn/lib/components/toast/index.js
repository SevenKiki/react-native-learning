var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Toast as toast } from './Toast';
import { KidLoading } from '../loading';
import { KidToastComponent } from './toast-component';
export const Toast = Object.assign(Object.assign({}, toast), { loading(opts = {}) {
        const defaultOpts = {
            position: toast.position.CENTER,
            data: '加载中...',
            icon: <KidLoading type={'#ffffff'} style={{ marginBottom: 13 }}/>,
            backgroundColor: 'rgba(0, 0, 0, 0.7)',
            contentStyle: { width: 110, height: 110, borderRadius: 8, padding: 0 },
            isShowShadow: false,
            duration: 0,
            showMask: true,
        };
        return toast.show(Object.assign({}, defaultOpts, opts));
    },
    kidShow(opts = {}) {
        const { toastStyle = {}, text = '', textStyle = {}, kid = 'style_toast_text', percent = 0, getPercentText } = opts, rest = __rest(opts, ["toastStyle", "text", "textStyle", "kid", "percent", "getPercentText"]);
        const defaultProps = {
            toastStyle,
            text,
            textStyle,
            kid,
            percent,
            getPercentText
        };
        const defaultOpts = {
            position: toast.position.CENTER,
            backgroundColor: 'transparent',
            isShowShadow: false,
            duration: 0,
            icon: <KidToastComponent {...defaultProps}/>,
            showMask: true,
        };
        return toast.show(Object.assign({}, defaultOpts, rest));
    } });
