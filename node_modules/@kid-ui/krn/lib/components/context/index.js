import React, { useState, useEffect } from 'react';
import { RootSiblingParent } from 'react-native-root-siblings';
import { NativeModules, NativeEventEmitter } from 'react-native';
import { LocaleContext } from '../locale';
import ThemeContext from '../../theme/context';
import { rem } from '../../utils';
export const ScaleContext = React.createContext({ rem });
const eventEmitter = new NativeEventEmitter(NativeModules.KSAppearance);
export const KidContext = (props) => {
    var _a, _b, _c, _d;
    const { customTheme, baseWidth } = props;
    const _rem = (num) => {
        return rem(num, baseWidth);
    };
    const mode = ((_b = (_a = NativeModules.KSAppearance) === null || _a === void 0 ? void 0 : _a.getColorScheme) === null || _b === void 0 ? void 0 : _b.call(_a)) || customTheme || 'light';
    const language = ((_d = (_c = NativeModules.KSLanguage) === null || _c === void 0 ? void 0 : _c.getLanguage) === null || _d === void 0 ? void 0 : _d.call(_c)) || 'zh-Hans';
    // 设置界面主题
    const [theme, setTheme] = useState(mode);
    const [lang] = useState(language);
    useEffect(() => {
        const colorListener = eventEmitter.addListener('ksAppearanceChanged', ({ colorScheme }) => {
            setTheme(colorScheme === 'normal' ? 'light' : colorScheme);
        });
        return () => {
            colorListener.remove();
        };
    }, []);
    return (<LocaleContext.Provider value={lang}>
            <ThemeContext.Provider value={props.customTheme || theme}>
                <ScaleContext.Provider value={{ rem: _rem }}>
                    <RootSiblingParent>{props.children}</RootSiblingParent>
                </ScaleContext.Provider>
            </ThemeContext.Provider>
        </LocaleContext.Provider>);
};
export const WrapContext = function (App, contextOptions = {}) {
    return (props = {}) => {
        return (<KidContext {...contextOptions}>
                <App {...props}></App>
            </KidContext>);
    };
};
