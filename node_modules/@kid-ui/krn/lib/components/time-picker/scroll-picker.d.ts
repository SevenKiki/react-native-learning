import React from 'react';
import { View, ViewStyle, TextStyle } from 'react-native';
import scrollpickerStyles from './styles';
export { scrollpickerStyles };
interface ListItem {
    label: string | number;
    [propName: string]: any;
}
export interface ScrollPickerProps {
    style?: ViewStyle;
    textStyle?: TextStyle;
    selectedTextStyle?: TextStyle;
    list?: Array<Array<ListItem>> | any;
    value?: number[];
    proportion?: number[];
    offsetCount?: number;
    onChange?: Function;
    renderItem?: Function;
    topMaskViewStyle?: ViewStyle;
    bottomMaskViewStyle?: ViewStyle;
}
interface ScrollPickerState {
    list: Array<Array<ListItem>>;
    value: number[];
    selectedValue: number[];
    proportion: number[];
    isMomentumScroll: boolean;
}
export declare class ScrollPicker extends React.Component<ScrollPickerProps, ScrollPickerState> {
    containerRef: View | null;
    scrollers: Array<any>;
    mountScrollTime: any;
    willReceivePropsScrollTime: any;
    static defaultProps: {
        style: {};
        textStyle: {};
        selectedTextStyle: {};
        list: string[][];
        value: never[];
        proportion: number[];
        offsetCount: number;
        onChange: null;
        renderItem: null;
        topMaskViewStyle: {};
        bottomMaskViewStyle: {};
    };
    constructor(props: ScrollPickerProps);
    initialize(props: ScrollPickerProps): {
        list: any;
        value: number[];
        selectedValue: number[];
        proportion: number[];
    };
    initData(props: ScrollPickerProps): {
        list: any;
        value: number[];
        selectedValue: number[];
        proportion: number[];
    };
    componentDidMount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: ScrollPickerProps): void;
    componentWillUnmount(): void;
    locateIndicator(): JSX.Element;
    scrollTo(scrollIndex: number, targetItemIndex: number, animated?: boolean): void;
    onScroll(scrollIndex: number, scrollHeight: number): void;
    scrollProper(scrollIndex: number, scrollHeight: number, animated?: boolean): number;
    render(): JSX.Element;
}
