import React, { useContext, useMemo } from 'react';
import { TouchableOpacity, View, Text } from 'react-native';
import { rem } from '../../utils';
import { CheckboxContext } from './checkbox-group';
import CheckboxIcon from './icon';
const Checkbox = (props) => {
    var _a;
    const contextState = useContext(CheckboxContext);
    const isChecked = !contextState ? !!props.checked : ((_a = contextState.value) === null || _a === void 0 ? void 0 : _a.indexOf(props.value)) !== -1;
    const isDisabled = !!props.disabled;
    const onPress = () => {
        var _a, _b;
        if (contextState) {
            const newVal = contextState.value.concat([]);
            const index = newVal.indexOf(props.value);
            if (index !== -1) {
                newVal.splice(index, 1);
            }
            else {
                newVal.push(props.value);
            }
            (_a = contextState === null || contextState === void 0 ? void 0 : contextState.onChange) === null || _a === void 0 ? void 0 : _a.call(contextState, newVal);
        }
        else {
            (_b = props.onChange) === null || _b === void 0 ? void 0 : _b.call(props, !props.checked);
        }
    };
    const { labelPosition, wrapStyle, containerStyle: propContainerStyle, labelStyle, variant: propVariant, style } = props;
    const variant = useMemo(() => {
        return propVariant || contextState ? contextState === null || contextState === void 0 ? void 0 : contextState.variant : 'facet';
    }, [propVariant, contextState]);
    const containerStyle = useMemo(() => {
        return [
            {
                flexDirection: 'row',
                justifyContent: 'flex-start',
                alignItems: 'center',
                borderRadius: 9999,
                margin: rem(4),
            },
            propContainerStyle
        ];
    }, [propContainerStyle]);
    const iconWrapperStyle = useMemo(() => ([Object.assign(Object.assign(Object.assign(Object.assign({ justifyContent: 'center', alignItems: 'center', borderWidth: rem(1.5), borderRadius: 9999, padding: rem(2.5), borderColor: '#c6c6c6' }, isChecked ? {
            padding: rem(4),
            borderWidth: 0,
            backgroundColor: '#FE3666',
        } : {}), isDisabled ? Object.assign({ backgroundColor: '#EAEAEA' }, isChecked ? {
            opacity: 0.5,
            backgroundColor: '#FE3666',
        } : {}) : {}), variant === 'linear' ? Object.assign({}, isChecked ? {
            borderColor: '#FE3666',
            borderWidth: rem(2),
            padding: rem(2),
            backgroundColor: 'transparent',
        } : {}) : {}), variant === 'facet' ? Object.assign(Object.assign({}, isChecked ? {
            borderWidth: 0,
            padding: rem(4),
            backgroundColor: '#FE3666',
        } : {}), isDisabled ? Object.assign({}, isChecked ? {
            backgroundColor: '#FE3666',
        } : {}) : {}) : {}), style]), [isChecked, isDisabled, style]);
    const iconProps = useMemo(() => {
        var _a, _b;
        return (Object.assign(Object.assign(Object.assign({ size: (_b = (_a = props.iconSize) !== null && _a !== void 0 ? _a : contextState === null || contextState === void 0 ? void 0 : contextState.iconSize) !== null && _b !== void 0 ? _b : rem(12), color: '#ffffff' }, isDisabled ? {
            backgroundColor: 'transparent',
        } : {}), variant === 'linear' ? {
            color: '#FE3666',
        } : {}), variant === 'facet' ? {
            color: '#FFFFFF',
        } : {}));
    }, [isChecked, isDisabled]);
    const iconStyle = useMemo(() => ({
        opacity: isChecked ? 1 : 0
    }), [isChecked]);
    const labelContent = useMemo(() => {
        return <Text style={[{
                    marginLeft: labelPosition === 'left' ? 0 : rem(8),
                    marginRight: labelPosition === 'right' ? 0 : rem(8),
                }, labelStyle]}>{props.children}</Text>;
    }, [props.children, labelPosition, labelStyle]);
    return (<TouchableOpacity testID='CheckboxTouchBox' disabled={isDisabled} onPress={onPress} accessibilityRole="checkbox" style={wrapStyle} activeOpacity={1}>
      <View testID='CheckboxCenter' style={containerStyle}>
        {labelPosition === 'left' ? labelContent : null}
        <View style={iconWrapperStyle}>
          <CheckboxIcon {...iconProps} testID="CheckboxCheckIcon" style={iconStyle}/>
        </View>
        {/* Label */}
        {labelPosition === 'right' ? labelContent : null}
      </View>
    </TouchableOpacity>);
};
Checkbox.defaultProps = {
    labelPosition: 'right',
};
export { Checkbox };
export default Checkbox;
