var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { memo, useState } from 'react';
import { View } from 'react-native';
export const CheckboxContext = React.createContext(null);
const CheckboxGroup = (props) => {
    const { value: propsValue, defaultValue, onChange, variant } = props, rest = __rest(props, ["value", "defaultValue", "onChange", "variant"]);
    const [value, setValue] = useState(propsValue || defaultValue || []);
    const onCheckboxGroupChange = (newVal) => {
        if (!('value' in props)) {
            setValue(newVal);
        }
        onChange === null || onChange === void 0 ? void 0 : onChange(newVal);
    };
    React.useEffect(() => {
        if ('value' in props) {
            setValue(propsValue || []);
        }
    }, [propsValue]);
    return (<CheckboxContext.Provider value={{
            onChange: onCheckboxGroupChange,
            value,
            variant,
        }}>
      <View {...rest}>
        {props.children}
      </View>
    </CheckboxContext.Provider>);
};
export default memo(CheckboxGroup);
