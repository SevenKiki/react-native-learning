var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* eslint-disable react-hooks/rules-of-hooks */
// 引入的头文件
import React, { useEffect, useState } from 'react';
import { useRef } from 'react';
import { Dimensions, StyleSheet, TouchableOpacity, View, } from 'react-native';
import useThemeValue from '../../theme/useThemeValue';
import { createKidComponent } from '../../utils';
const styles = StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center',
    },
    indicator: {
        marginTop: 5,
        marginBottom: 5,
        marginLeft: 5,
        marginRight: 5,
    },
});
const PageIndicatorElement = (props) => {
    const [selectIndex, setSelectIndex] = useState(props.selectIndex);
    useEffect(() => {
        setSelectIndex(props.selectIndex);
    });
    const touchableView = (indicator_style, index) => {
        return (<TouchableOpacity key={String(index)} onPress={() => {
                var _a;
                (_a = props.handleSelectIndicatorElement) === null || _a === void 0 ? void 0 : _a.call(props, index);
                setSelectIndex(index);
            }}>
                <View style={indicator_style}/>
            </TouchableOpacity>);
    };
    const loadIndicatorElements = () => {
        const borderRadius = props.height / 2.0;
        const currentIndicatorStyle = [
            {
                backgroundColor: props.backgroundColor,
                width: props.width,
                height: props.height,
                borderRadius: borderRadius,
            },
            styles.indicator,
        ];
        const selectIndicatorStyle = [
            {
                backgroundColor: props.selecteBackgroundColor,
                width: props.width,
                height: props.height,
                borderRadius: borderRadius,
            },
            styles.indicator,
        ];
        if (props.numberOfPages === 1 && props.hideIndicatorOnePage) {
            return [];
        }
        const element = [];
        for (let i = 0; i < props.numberOfPages; i++) {
            if (selectIndex == i) {
                element.push(touchableView(selectIndicatorStyle, i));
            }
            else {
                element.push(touchableView(currentIndicatorStyle, i));
            }
        }
        return element;
    };
    const elementStyle = [
        {
            "marginTop": -(props.height + 10)
        },
        styles.container
    ];
    return <View style={elementStyle}>{loadIndicatorElements()}</View>;
};
const PageIndicatorComponent = (props) => {
    const myScrollView = useRef();
    const [selectIndex, setSelectIndex] = useState(props.selectIndex);
    const [numberOfPages, setNumberOfPages] = useState(props.numberOfPages);
    const [scrollViewWidth, setScrollViewWidth] = useState(Dimensions.get('window').width);
    const loadSelectIndex = (nativeEvent) => {
        const index = Math.floor(nativeEvent.contentOffset.x / nativeEvent.layoutMeasurement.width);
        if (index != selectIndex) {
            setSelectIndex(index);
        }
    };
    const handleSelectIndicator = (index) => {
        if (myScrollView.current.props.pagingEnabled) {
            myScrollView.current.scrollTo({
                x: index * scrollViewWidth,
                y: 0,
                animated: true,
            });
        }
    };
    const loadScrollContent = () => {
        return React.Children.map(props.children, (child) => {
            if (React.isValidElement(child)) {
                return React.cloneElement(child, {
                    scrollEventThrottle: 1,
                    onScroll: (evt) => {
                        loadSelectIndex(evt.nativeEvent);
                        if (child.props.onScroll &&
                            typeof child.props.onScroll === 'function') {
                            child.props.onScroll(evt);
                        }
                    },
                    onMomentumScrollEnd: (evt) => {
                        loadSelectIndex(evt.nativeEvent);
                        if (child.props.onMomentumScrollEnd &&
                            typeof child.props.onMomentumScrollEnd ===
                                'function') {
                            child.props.onMomentumScrollEnd(evt);
                        }
                    },
                    onLayout: (evt) => {
                        setScrollViewWidth(evt.nativeEvent.layout.width);
                        if (child.props.onLayout &&
                            typeof child.props.onLayout ===
                                'function') {
                            child.props.onLayout(evt);
                        }
                    },
                    ref: (view) => {
                        myScrollView.current = view;
                        setNumberOfPages(child.props.children.length);
                        // @ts-expect-error
                        const { ref } = child;
                        if (typeof ref === 'function') {
                            ref(view);
                        }
                        else if (ref !== null) {
                            ref.current = view;
                        }
                    },
                });
            }
        });
    };
    return (<View>
            {loadScrollContent()}
            <PageIndicatorElement backgroundColor={props.backgroundColor} selecteBackgroundColor={props.selecteBackgroundColor} selectIndex={selectIndex} numberOfPages={numberOfPages} width={props.width} height={props.height} hideIndicatorOnePage={props.hideIndicatorOnePage} handleSelectIndicatorElement={handleSelectIndicator}/>
        </View>);
};
function PageIndicatorControl(props) {
    const { indicatorColor, selectedIndicatorColor } = props, rest = __rest(props, ["indicatorColor", "selectedIndicatorColor"]);
    const backgroundColor = useThemeValue(indicatorColor);
    const selecteBackgroundColor = useThemeValue(selectedIndicatorColor);
    if (indicatorColor && selectedIndicatorColor) {
        return (<PageIndicatorComponent backgroundColor={backgroundColor} selecteBackgroundColor={selecteBackgroundColor} {...rest}/>);
    }
    else {
        return <PageIndicatorComponent {...rest}/>;
    }
}
PageIndicatorComponent.defaultProps = {
    selectIndex: 0,
    numberOfPages: 0,
};
PageIndicatorElement.defaultProps = {
    selectIndex: 0,
    numberOfPages: 0,
    width: 6,
    height: 6,
};
export const KidPageIndicatorControl = createKidComponent(PageIndicatorControl);
