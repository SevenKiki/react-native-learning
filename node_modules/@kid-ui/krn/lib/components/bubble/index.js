import React from 'react';
import { Text } from 'react-native';
import { createKidComponent, rem } from '../../utils';
import CustomBubble from './custom-bubble';
import { useThemeValue } from '../../theme/useThemeValue';
const TextBubble = (props) => {
    const { isJustBubble = false } = props;
    let placement;
    switch (props.arrowDirection) {
        case 0: {
            placement = 'bottom';
            break;
        }
        case 1: {
            placement = 'top';
            break;
        }
        case 2: {
            placement = 'right';
            break;
        }
        case 3: {
            placement = 'left';
            break;
        }
        default: {
            placement = 'bottom';
        }
    }
    const textColor = useThemeValue(props.textColor);
    const bgColor = useThemeValue(props.bgColor);
    const shadowColor = useThemeValue(props.shadowColor);
    return (<CustomBubble isVisible={props.isVisible} fromRect={props.fromRect} placement={placement} withOverlay={props.withOverlay} overlayColor={props.overlayColor} content={props.content || <Text numberOfLines={props.numberOfLine} style={{
                fontSize: props.textFont,
                fontWeight: props.textWeight,
                color: textColor,
                textAlign: 'center',
            }}>
                    {props.text}
                </Text>} contentStyle={{ justifyContent: 'center' }} width={props.width} height={props.height} triangleSize={{
            width: props.arrowWidth,
            height: props.arrowHeight,
        }} bubbleOffsetX={props.bubbleOffsetX} bubbleOffsetY={props.bubbleOffsetY} bubbleContentOffsetX={props.bubbleContentOffsetX} bubbleCornerRadius={props.bubbleCornerRadius} bubbleStyle={props.bubbleStyle} backgroundColor={bgColor} shadowColor={shadowColor} onOpen={props.onOpen} onClick={props.onClick} onClose={props.onClose} onToggle={props.onToggle} isJustBubble={isJustBubble} isFitContentSize={props.isFitContentSize} widthToFixFit={props.widthToFixFit} bubbleShadow={props.bubbleShadow} triangleBorderWidth={props.arrowBorderWidth} triangleBorderColor={props.arroweBorderColor} isUseInnerFromRect={props.isUseInnerFromRect}>
            {props.children}
        </CustomBubble>);
};
TextBubble.defaultProps = {
    isVisible: false,
    fromRect: { x: 0, y: 0, width: 0, height: 0 },
    textFont: rem(14),
    textColor: { normal: '#ffffff' },
    numberOfLine: 1,
    width: rem(120),
    height: rem(40),
    arrowWidth: rem(13),
    arrowHeight: 6,
    // 默认气泡向下弹出，箭头在上
    arrowDirection: 0,
    arrowCornerRadius: 0,
    bubbleOffsetX: 0,
    bubbleOffsetY: rem(10),
    bubbleContentOffsetX: 0,
    bubbleCornerRadius: rem(4),
    bgColor: { normal: '#000000b2' },
    shadowColor: { normal: '#000000' },
};
export const KidTextBubble = createKidComponent(TextBubble);
