import { TouchableOpacity, View, Text } from 'react-native';
import React from 'react';
import useThemeValue from '../../theme/useThemeValue';
import { createKidComponent, rem } from '../../utils';
import debounce from 'lodash.debounce';
import throttle from 'lodash.throttle';
import { KidIcon } from '../icon';
const Button = (props) => {
    const { text, textLines = 1, textEllipsizeMode = 'tail', height, width, cornerRadius, bgColor, textColor, textFont, borderWidth, borderColor, textStyle, wrapStyle, style, onPress = () => { }, isRoundButtonMax, opacity = 1, activeOpacity = 0.5, debounceDuration, throttleDuration, disabled, iconKid, iconKidConfig, iconStyle, renderContent } = props;
    const _backgroundColor = useThemeValue(bgColor);
    const _borderColor = useThemeValue(borderColor);
    const buttonStyle = [
        {
            backgroundColor: _backgroundColor,
            height,
            width,
            borderRadius: isRoundButtonMax ? cornerRadius : 0,
            flexDirection: 'row',
            justifyContent: 'center',
            alignItems: 'center',
            borderWidth,
            borderColor: _borderColor,
            opacity: opacity
        },
        style,
    ];
    const _color = useThemeValue(textColor);
    const innerTextStyle = [
        {
            color: _color,
            fontSize: textFont,
        },
        textStyle,
    ];
    const _onPress = React.useCallback(() => {
        if (debounceDuration) {
            debouncePress();
        }
        else if (throttleDuration) {
            throttlePress.current(onPress);
        }
        else {
            onPress();
        }
    }, [onPress, debounceDuration, throttleDuration]);
    const debouncePress = debounce(onPress, debounceDuration);
    const throttlePress = React.useRef(throttle((onPress) => onPress(), throttleDuration));
    return (<TouchableOpacity style={wrapStyle} disabled={disabled} activeOpacity={activeOpacity} onPress={_onPress}>
            <View style={buttonStyle}>
                {(iconKid || iconKidConfig) && <KidIcon style={iconStyle} kid={iconKid} kidConfig={iconKidConfig}/>}
                {text && <Text style={innerTextStyle} numberOfLines={textLines} ellipsizeMode={textEllipsizeMode}>{text}</Text>}
                {renderContent && renderContent()}
            </View>
        </TouchableOpacity>);
};
Button.defaultProps = {
    height: rem(40),
    width: rem(100),
    cornerRadius: rem(10),
    bgColor: { normal: '#FF5000', dark: '#ffffff' },
    textColor: { normal: '#000000' },
    textFont: rem(16),
    borderWidth: 0,
    borderColor: { normal: '#FF5000' },
    disabled: false
};
export const KidButton = createKidComponent(Button);
