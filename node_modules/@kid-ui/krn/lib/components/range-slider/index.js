import React, { useEffect, useRef, useState } from 'react';
import { StyleSheet, View, Animated, PanResponder } from 'react-native';
import ActiveLine from './active-line';
import SliderDot from './dot';
import { clamp, getPositionForValue, getValueForPosition } from './utils';
import { useThemeValue } from '../../theme/useThemeValue';
export function RangeSlider(props) {
    const { defaultValue, onChange, step = 1, min = 0, max = 100, heightBar = 4, dotSize = 16, renderBar, wrapStyle, trackColor = '#ccc', activeTrackColor = 'gray', trackStyle, activeTrackStyle, minimumDotStyle, maximumDotStyle, renderMinimumDot, renderMaximumDot } = props;
    const beginValueStep = useRef(0);
    const endValueStep = useRef(0);
    const [screenWidth, setScreenWidth] = useState(0);
    const [beginX, setBeginX] = useState(0);
    const [endX, setEndX] = useState(0);
    const [zIndex, setZIndex] = useState(4);
    const xSlideBegin = useRef(new Animated.Value(0)).current;
    const xSlideEnd = useRef(new Animated.Value(0)).current;
    useEffect(() => {
        if (defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.length) {
            beginValueStep.current = defaultValue[0];
            endValueStep.current = defaultValue[1];
            const x1 = getPositionForValue(defaultValue[0], screenWidth - dotSize, min, max);
            const x2 = getPositionForValue(defaultValue[1], screenWidth - dotSize, min, max);
            xSlideBegin.setValue(x1);
            xSlideEnd.setValue(x2);
            setBeginX(x1);
            setEndX(x2);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [max, min, screenWidth]);
    const panResponderBegin = PanResponder.create({
        onMoveShouldSetPanResponder: () => true,
        onStartShouldSetPanResponderCapture: () => true,
        onMoveShouldSetPanResponderCapture: () => true,
        onPanResponderMove: (_evt, gestureState) => {
            const temp = beginX + gestureState.dx >= 0 ? beginX + gestureState.dx : 0;
            if (beginX === endX) {
                if (temp > beginX) {
                    setZIndex(4);
                }
                else {
                    setZIndex(2);
                }
            }
            const value = clamp(temp, 0, endX !== null && endX !== void 0 ? endX : screenWidth);
            xSlideBegin.setValue(value);
            setBeginX(value);
            beginValueStep.current = getValueForPosition(value, screenWidth - dotSize, dotSize, min, max, step);
            if (typeof onChange === 'function') {
                onChange([beginValueStep.current, endValueStep.current]);
            }
        },
        // onPanResponderEnd: (_evt) => {
        // },
    });
    const panResponderEnd = PanResponder.create({
        onMoveShouldSetPanResponder: () => true,
        onStartShouldSetPanResponderCapture: () => true,
        onMoveShouldSetPanResponderCapture: () => true,
        onPanResponderMove: (_evt, gestureState) => {
            const temp = endX + gestureState.dx >= 0 ? endX + gestureState.dx : 0;
            if (endX === beginX) {
                if (temp > endX) {
                    setZIndex(4);
                }
                else {
                    setZIndex(2);
                }
            }
            const value = clamp(temp, beginX, screenWidth - dotSize);
            xSlideEnd.setValue(value);
            setEndX(value);
            endValueStep.current = getValueForPosition(value, screenWidth - dotSize, dotSize, min, max, step);
            if (typeof onChange === 'function') {
                onChange([beginValueStep.current, endValueStep.current]);
            }
        },
        // onPanResponderEnd: (_evt) => {
        // },
    });
    const containerBgColor = useThemeValue(trackColor);
    const barBgColor = useThemeValue(activeTrackColor);
    return (<>
      <View style={wrapStyle} onLayout={(e) => setScreenWidth(e.nativeEvent.layout.width)}>
        {endX - beginX >= 0 && (<>
              <ActiveLine render={renderBar} left={beginX + dotSize / 2} screenWidth={screenWidth} width={endX - beginX} dotSize={dotSize} height={heightBar} containerBgColor={containerBgColor} barBgColor={barBgColor} containerStyle={trackStyle} barStyle={activeTrackStyle}/>

              <SliderDot size={dotSize} translateX={xSlideBegin} panResponder={panResponderBegin} style={minimumDotStyle} render={renderMinimumDot}/>
              <SliderDot size={dotSize} translateX={xSlideEnd} panResponder={panResponderEnd} style={[styles.dotAbsolute, maximumDotStyle, { zIndex: zIndex, elevation: zIndex }]} render={renderMaximumDot}/>
            </>)}
      </View>
    </>);
}
const styles = StyleSheet.create({
    dotAbsolute: {
        position: 'absolute',
        elevation: 4,
        zIndex: 4
    },
});
