import React, { useEffect } from 'react';
import { Text, View, Animated, Easing } from 'react-native';
const NUMBERS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
const usePrevious = (value) => {
    const ref = React.useRef(value || 0);
    React.useEffect(() => {
        ref.current = value;
    });
    if (typeof ref.current === 'undefined') {
        return 0;
    }
    return ref.current;
};
export const AnimatedNumber = ({ animateToNumber, fontStyle, animationDuration, easing = Easing.inOut(Easing.ease), }) => {
    const prevNumber = usePrevious(animateToNumber);
    const animateToNumberString = String(Math.abs(animateToNumber));
    const prevNumberString = String(Math.abs(prevNumber));
    const animateToNumbersArr = Array.from(animateToNumberString, Number);
    const prevNumbersArr = Array.from(prevNumberString, Number);
    const [numberHeight, setNumberHeight] = React.useState(0);
    const animations = animateToNumbersArr.map((__, index) => {
        if (typeof prevNumbersArr[index] !== 'number') {
            return new Animated.Value(0);
        }
        const animationHeight = -1 * (numberHeight * prevNumbersArr[index]);
        return new Animated.Value(animationHeight);
    });
    const setButtonLayout = (e) => {
        var _a, _b;
        setNumberHeight((_b = (_a = e.nativeEvent) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b.height);
    };
    useEffect(() => {
        animations.map((animation, index) => {
            var _a, _b;
            if (typeof animateToNumbersArr[index] !== 'number') {
                return;
            }
            (_b = (_a = Animated.timing(animation, {
                toValue: -1 * (numberHeight * animateToNumbersArr[index]),
                duration: animationDuration || 1400,
                useNativeDriver: false,
                easing: easing,
            })) === null || _a === void 0 ? void 0 : _a.start) === null || _b === void 0 ? void 0 : _b.call(_a);
        });
    }, [animateToNumber]);
    const getTranslateY = (index) => {
        return animations[index];
    };
    return (<>
      {numberHeight !== 0 && (<View style={{ flexDirection: 'row' }}>
          {animateToNumber < 0 && <Text style={[fontStyle, { height: numberHeight }]}>-</Text>}
          {animateToNumbersArr.map((n, index) => {
                if (typeof n === 'string') {
                    return (<Text key={index} style={[fontStyle, { height: numberHeight }]}>
                  {n}
                </Text>);
                }
                return (<View key={index} style={{
                        height: numberHeight,
                        overflow: 'hidden',
                    }}>
                <Animated.View style={[
                        {
                            transform: [
                                {
                                    translateY: getTranslateY(index),
                                },
                            ],
                        },
                    ]}>
                  {NUMBERS.map((number, i) => (<View style={{ flexDirection: 'row' }} key={i}>
                      <Text style={[fontStyle, { height: numberHeight }]}>{number}</Text>
                    </View>))}
                </Animated.View>
              </View>);
            })}
        </View>)}
      <Text style={[fontStyle, { position: 'absolute', top: -999999 }]} onLayout={setButtonLayout}>
        {0}
      </Text>
    </>);
};
