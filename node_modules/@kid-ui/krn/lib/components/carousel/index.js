var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { View, StyleSheet, Platform } from 'react-native';
import React from 'react';
import Swiper from 'react-native-swiper';
const styles = StyleSheet.create({
    // 指示器样式
    pagination_x_left: {
        justifyContent: 'flex-start',
        paddingLeft: 15,
        bottom: 20,
    },
    pagination_y_left: {
        justifyContent: 'flex-start',
        paddingTop: 15,
    },
    pagination_x_center: {
        bottom: 20,
    },
    pagination_y_center: {},
    pagination_x_right: {
        justifyContent: 'flex-end',
        paddingRight: 15,
        bottom: 20,
    },
    pagination_y_right: {
        justifyContent: 'flex-end',
        bottom: 20,
    },
    // dot的样式
    x_ellipse: {},
    x_active_ellipse: {
        width: 16,
    },
    y_ellipse: {},
    y_active_ellipse: {
        height: 16,
    },
    x_circle: {},
    x_active_circle: {},
    y_circle: {},
    y_active_circle: {},
    x_bar: {
        width: 10,
        height: 3,
    },
    x_active_bar: {
        width: 16,
        height: 3,
    },
    y_bar: {
        width: 3,
        height: 10,
    },
    y_active_bar: {
        width: 3,
        height: 16,
    },
});
const Carousel = React.forwardRef((props, ref) => {
    const swiperRef = React.useRef();
    React.useImperativeHandle(ref, () => ({
        scrollBy: swiperRef.current.scrollBy,
    }), [swiperRef.current]);
    const { carouselWidth, carouselHeight, borderRadius, paginationPosition, dotType, horizontal, dotStyle, activeDotStyle, paginationStyle, itemStyle, loadMinimal, onMomentumScrollEnd, onResponderRelease } = props, restProps = __rest(props, ["carouselWidth", "carouselHeight", "borderRadius", "paginationPosition", "dotType", "horizontal", "dotStyle", "activeDotStyle", "paginationStyle", "itemStyle", "loadMinimal", "onMomentumScrollEnd", "onResponderRelease"]);
    const dir = horizontal ? 'x' : 'y';
    const SwiperPrpos = Object.assign({ showsButtons: false, paginationStyle: [styles['pagination_' + dir + '_' + paginationPosition], paginationStyle], dotStyle: [{ backgroundColor: '#fff', opacity: 0.4 }, styles[dir + '_' + dotType], dotStyle], activeDotStyle: [
            { backgroundColor: '#fff' },
            styles[dir + '_active_' + dotType],
            dotStyle,
            activeDotStyle,
        ], horizontal, loadMinimal: loadMinimal === undefined ? (Platform.OS === 'ios' ? true : false) : loadMinimal }, restProps);
    return (<View style={{
            width: carouselWidth,
            height: carouselHeight,
        }}>
      <Swiper ref={swiperRef} {...SwiperPrpos} removeClippedSubviews={false} onMomentumScrollEnd={(e, state, swpier) => {
            onMomentumScrollEnd === null || onMomentumScrollEnd === void 0 ? void 0 : onMomentumScrollEnd(e, state, swpier);
            if (!(Platform.OS === 'android'))
                return;
            setTimeout(() => {
                if (swpier && swpier.autoplay) {
                    swpier.autoplay();
                }
            }, 300);
        }} onResponderRelease={(e, state, swpier) => {
            onResponderRelease === null || onResponderRelease === void 0 ? void 0 : onResponderRelease(e, state, swpier);
            if ((Platform.OS === 'android'))
                return;
            // 延迟一秒执行，滚动动画时间内swpier.internals.isScrolling 为true，会导致autoplay方法直接return， 需要等待滚动动画结束
            setTimeout(() => {
                if (swpier && swpier.autoplay) {
                    swpier.autoplay();
                }
            }, 1000);
        }}>
        {React.Children.map(props.children, (c) => {
            return (<View style={[{ flex: 1, borderRadius: borderRadius, overflow: 'hidden' }, itemStyle]}>{c}</View>);
        })}
      </Swiper>
    </View>);
});
Carousel.defaultProps = {
    carouselWidth: '100%',
    carouselHeight: 250,
    loop: false,
    autoplay: false,
    showsPagination: true,
    borderRadius: 10,
    autoplayTimeout: 2.5,
    horizontal: true,
    paginationPosition: 'right',
    dotType: 'ellipse',
    scrollEnabled: true,
};
export const KidCarousel = Carousel;
