import React, { ReactNode } from 'react';
import { TextInput } from 'react-native';
import { KidIconProps } from '../icon/index';
export interface SearchBarCustomStyleProps {
    inputHeight?: number;
    inputBackgroundColor?: string;
    inputBorderRadius?: number;
}
export declare type SearchBarRef = {
    clear: () => void;
    focus: () => void;
    blur: () => void;
    isFocused: () => boolean;
    nativeElement: TextInput | null;
};
interface SearchBarProps extends React.ComponentPropsWithRef<typeof TextInput> {
    customStyle?: SearchBarCustomStyleProps;
    backContent?: string | ReactNode;
    searchButtonContent?: string | ReactNode;
    prefixIcon?: KidIconProps | false;
    renderPrefixIcon?: () => ReactNode;
    suffixIcon?: KidIconProps | false;
    renderSuffixIcon?: () => ReactNode;
    showBack?: boolean;
    clearable?: boolean;
    onBackPress?: () => void;
    onSearchPress?: () => void;
    onClear?: () => void;
}
export declare const SearchBar: React.ForwardRefExoticComponent<Pick<SearchBarProps, "style" | "value" | "onLayout" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityStates" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityComponentType" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityTraits" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "hitSlop" | "onBlur" | "onFocus" | "hasTVPreferredFocus" | "tvParallaxProperties" | "pointerEvents" | "removeClippedSubviews" | "nativeID" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "shouldRasterizeIOS" | "isTVSelectable" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "allowFontScaling" | "numberOfLines" | "maxFontSizeMultiplier" | "selectionColor" | "textBreakStrategy" | "onScroll" | "onContentSizeChange" | "scrollEnabled" | "defaultValue" | "placeholder" | "autoFocus" | "maxLength" | "onChangeText" | "autoCapitalize" | "autoCorrect" | "blurOnSubmit" | "caretHidden" | "contextMenuHidden" | "editable" | "keyboardType" | "multiline" | "onChange" | "onEndEditing" | "onSelectionChange" | "onSubmitEditing" | "onKeyPress" | "placeholderTextColor" | "returnKeyType" | "secureTextEntry" | "selectTextOnFocus" | "selection" | "inputAccessoryViewID" | "clearButtonMode" | "clearTextOnFocus" | "dataDetectorTypes" | "enablesReturnKeyAutomatically" | "keyboardAppearance" | "passwordRules" | "rejectResponderTermination" | "selectionState" | "spellCheck" | "textContentType" | "autoCompleteType" | "importantForAutofill" | "disableFullscreenUI" | "inlineImageLeft" | "inlineImagePadding" | "returnKeyLabel" | "underlineColorAndroid" | "textAlignVertical" | "key" | "customStyle" | "clearable" | "backContent" | "searchButtonContent" | "prefixIcon" | "renderPrefixIcon" | "suffixIcon" | "renderSuffixIcon" | "showBack" | "onBackPress" | "onSearchPress" | "onClear"> & React.RefAttributes<SearchBarRef>>;
export declare const KidSearchBar: React.ForwardRefExoticComponent<Pick<SearchBarProps, "style" | "value" | "onLayout" | "testID" | "accessible" | "accessibilityActions" | "accessibilityLabel" | "accessibilityRole" | "accessibilityStates" | "accessibilityState" | "accessibilityHint" | "accessibilityValue" | "onAccessibilityAction" | "accessibilityComponentType" | "accessibilityLiveRegion" | "importantForAccessibility" | "accessibilityElementsHidden" | "accessibilityTraits" | "accessibilityViewIsModal" | "onAccessibilityEscape" | "onAccessibilityTap" | "onMagicTap" | "accessibilityIgnoresInvertColors" | "hitSlop" | "onBlur" | "onFocus" | "hasTVPreferredFocus" | "tvParallaxProperties" | "pointerEvents" | "removeClippedSubviews" | "nativeID" | "collapsable" | "needsOffscreenAlphaCompositing" | "renderToHardwareTextureAndroid" | "shouldRasterizeIOS" | "isTVSelectable" | "tvParallaxShiftDistanceX" | "tvParallaxShiftDistanceY" | "tvParallaxTiltAngle" | "tvParallaxMagnification" | "onStartShouldSetResponder" | "onMoveShouldSetResponder" | "onResponderEnd" | "onResponderGrant" | "onResponderReject" | "onResponderMove" | "onResponderRelease" | "onResponderStart" | "onResponderTerminationRequest" | "onResponderTerminate" | "onStartShouldSetResponderCapture" | "onMoveShouldSetResponderCapture" | "onTouchStart" | "onTouchMove" | "onTouchEnd" | "onTouchCancel" | "onTouchEndCapture" | "allowFontScaling" | "numberOfLines" | "maxFontSizeMultiplier" | "selectionColor" | "textBreakStrategy" | "onScroll" | "onContentSizeChange" | "scrollEnabled" | "defaultValue" | "placeholder" | "autoFocus" | "maxLength" | "onChangeText" | "autoCapitalize" | "autoCorrect" | "blurOnSubmit" | "caretHidden" | "contextMenuHidden" | "editable" | "keyboardType" | "multiline" | "onChange" | "onEndEditing" | "onSelectionChange" | "onSubmitEditing" | "onKeyPress" | "placeholderTextColor" | "returnKeyType" | "secureTextEntry" | "selectTextOnFocus" | "selection" | "inputAccessoryViewID" | "clearButtonMode" | "clearTextOnFocus" | "dataDetectorTypes" | "enablesReturnKeyAutomatically" | "keyboardAppearance" | "passwordRules" | "rejectResponderTermination" | "selectionState" | "spellCheck" | "textContentType" | "autoCompleteType" | "importantForAutofill" | "disableFullscreenUI" | "inlineImageLeft" | "inlineImagePadding" | "returnKeyLabel" | "underlineColorAndroid" | "textAlignVertical" | "key" | "customStyle" | "clearable" | "backContent" | "searchButtonContent" | "prefixIcon" | "renderPrefixIcon" | "suffixIcon" | "renderSuffixIcon" | "showBack" | "onBackPress" | "onSearchPress" | "onClear"> & React.RefAttributes<SearchBarRef>>;
export {};
