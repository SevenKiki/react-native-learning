var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { View, TextInput, Text, TouchableOpacity, StyleSheet, Platform } from 'react-native';
import { KidIcon } from '../icon/index';
import { getThemeValue, rem } from '../../utils';
const defaultPrefixIcon = {
    kid: 'common_search_search_16',
};
const icon_size = rem(16);
const search_input_height = rem(40);
const cs_search_background = getThemeValue({
    dark: '#35353C',
    light: '#F2F3F7',
});
export const SearchBar = forwardRef((_a, ref) => {
    var { customStyle = {}, value, backContent, searchButtonContent = '搜索', prefixIcon = defaultPrefixIcon, renderPrefixIcon, suffixIcon, renderSuffixIcon, clearable = true, showBack = false, onBackPress, onSearchPress, onClear, style: inputStyle } = _a, rest = __rest(_a, ["customStyle", "value", "backContent", "searchButtonContent", "prefixIcon", "renderPrefixIcon", "suffixIcon", "renderSuffixIcon", "clearable", "showBack", "onBackPress", "onSearchPress", "onClear", "style"]);
    const innerRef = useRef(null);
    const { inputHeight, inputBackgroundColor, inputBorderRadius } = customStyle;
    const clearValue = () => {
        var _a;
        (_a = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _a === void 0 ? void 0 : _a.clear();
        rest.onChangeText && rest.onChangeText('');
        typeof onClear === 'function' && onClear();
    };
    useImperativeHandle(ref, () => ({
        clear: () => {
            clearValue();
        },
        focus: () => {
            var _a;
            (_a = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        },
        blur: () => {
            var _a;
            (_a = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _a === void 0 ? void 0 : _a.blur();
        },
        isFocused: () => {
            var _a, _b;
            return (_b = (_a = innerRef === null || innerRef === void 0 ? void 0 : innerRef.current) === null || _a === void 0 ? void 0 : _a.isFocused()) !== null && _b !== void 0 ? _b : false;
        },
        get nativeElement() {
            return innerRef === null || innerRef === void 0 ? void 0 : innerRef.current;
        },
    }));
    // 搜索栏左侧区域
    const searchLeftContent = () => {
        if (showBack) {
            if (typeof backContent === 'string') {
                return (<TouchableOpacity testID="search-bar-back" activeOpacity={1} onPress={() => {
                        typeof onBackPress === 'function' && onBackPress();
                    }} style={styles.leftTextContent}>
              <Text style={styles.text}>{backContent}</Text>
            </TouchableOpacity>);
            }
            if (React.isValidElement(backContent)) {
                return (<TouchableOpacity testID="search-bar-back" activeOpacity={1} onPress={() => {
                        typeof onBackPress === 'function' && onBackPress();
                    }}>
              {backContent}
            </TouchableOpacity>);
            }
            return (<TouchableOpacity testID="search-bar-back" activeOpacity={1} onPress={() => {
                    typeof onBackPress === 'function' && onBackPress();
                }}>
            <KidIcon kid="common_base_return_24" size={rem(24)}/>
          </TouchableOpacity>);
        }
        return null;
    };
    // 搜索栏右侧区域
    const searchRightContent = () => {
        if (typeof searchButtonContent === 'string') {
            return (<TouchableOpacity testID="search-bar-search-btn" activeOpacity={1} style={styles.rightTextContent} onPress={() => {
                    typeof onSearchPress === 'function' && onSearchPress();
                }}>
            <Text style={styles.text}>{searchButtonContent}</Text>
          </TouchableOpacity>);
        }
        if (React.isValidElement(searchButtonContent)) {
            return (<TouchableOpacity testID="search-bar-search-btn" activeOpacity={1} onPress={() => {
                    typeof onSearchPress === 'function' && onSearchPress();
                }}>
            {searchButtonContent}
          </TouchableOpacity>);
        }
        return null;
    };
    // 输入框右侧icon
    const inputRightContent = () => {
        if (clearable && value) {
            return (<TouchableOpacity testID="search-bar-clear" activeOpacity={1} onPress={clearValue}>
            <KidIcon kid="common_base_close_24" size={icon_size}/>
          </TouchableOpacity>);
        }
        if (renderSuffixIcon && typeof renderSuffixIcon === 'function') {
            return renderSuffixIcon();
        }
        if (suffixIcon) {
            return <KidIcon size={icon_size} {...suffixIcon}/>;
        }
    };
    // 输入框左侧icon
    const inputLeftContent = () => {
        if (renderPrefixIcon && typeof renderPrefixIcon === 'function') {
            return renderPrefixIcon();
        }
        if (prefixIcon) {
            return (<View style={styles.prefixIcon}>
            <KidIcon size={icon_size} {...prefixIcon}/>
          </View>);
        }
    };
    return (<View style={[styles.search, { height: inputHeight !== null && inputHeight !== void 0 ? inputHeight : search_input_height }]}>
        {searchLeftContent()}
        <View style={[
            styles.content,
            {
                borderRadius: inputBorderRadius !== null && inputBorderRadius !== void 0 ? inputBorderRadius : (inputHeight !== null && inputHeight !== void 0 ? inputHeight : search_input_height) / 2,
                backgroundColor: inputBackgroundColor !== null && inputBackgroundColor !== void 0 ? inputBackgroundColor : cs_search_background,
            },
        ]}>
          {inputLeftContent()}
          <TextInput testID="search-bar-input" ref={innerRef} value={value} style={[
            styles.input,
            {
                height: inputHeight !== null && inputHeight !== void 0 ? inputHeight : search_input_height,
            },
            inputStyle,
        ]} placeholderTextColor="#666" selectionColor="#FE3666" {...rest}/>
          {inputRightContent()}
        </View>
        {searchRightContent()}
      </View>);
});
const styles = StyleSheet.create({
    leftTextContent: {
        marginRight: rem(12),
    },
    text: {
        fontSize: rem(16),
        color: '#000',
    },
    rightTextContent: {
        marginLeft: rem(12),
    },
    prefixIcon: {
        marginRight: rem(5),
    },
    search: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    content: {
        flex: 1,
        flexDirection: 'row',
        alignItems: 'center',
        paddingHorizontal: rem(12),
    },
    input: Object.assign({ flex: 1, fontSize: rem(16), color: '#000', paddingVertical: 0 }, (Platform.OS === 'web'
        ? {
            caretColor: '#FE3666',
        }
        : null)),
});
export const KidSearchBar = SearchBar;
