import React from 'react';
import { Text, View } from 'react-native';
import { useThemeValue } from '../../theme/useThemeValue';
import { createKidComponent, rem } from '../../utils';
const BadgeView = (props) => {
    const { badgeColor, borderColor, textColor, borderWidth, diameter, textCount, maxCount = 99, style, textStyle } = props;
    const hasCount = React.useMemo(() => !isNaN(textCount) && textCount > 0, [textCount]);
    const hasOut = React.useMemo(() => !isNaN(borderWidth) && borderWidth > 0, [borderWidth]);
    const backgroundColor = useThemeValue(borderColor);
    const _renderOut = React.useCallback((innerView) => {
        let radius = diameter / 2 + borderWidth;
        if (radius == 0 || isNaN(radius)) {
            radius = 10;
        }
        const viewStyle = {
            width: radius * 2,
            height: radius * 2,
            backgroundColor,
            borderRadius: radius,
            overflow: 'hidden',
        };
        return <View style={[viewStyle, style]}>{innerView}</View>;
    }, [
        style,
        diameter,
        borderWidth,
        backgroundColor
    ]);
    const _badgeColor = useThemeValue(badgeColor);
    const _renderInnerNoCount = React.useCallback(() => {
        let radius = diameter / 2 + borderWidth;
        if (radius == 0 || isNaN(radius)) {
            radius = 10;
        }
        const badgeStyle = {
            width: radius * 2,
            height: radius * 2,
            borderRadius: radius,
            backgroundColor: _badgeColor,
            overflow: 'hidden',
        };
        return <View style={[badgeStyle, hasOut ? {} : style]}/>;
    }, [
        diameter,
        borderWidth,
        _badgeColor,
        hasOut,
        style
    ]);
    const _textColor = useThemeValue(textColor);
    const _renderInnerCount = React.useCallback(() => {
        let radius = diameter / 2 + borderWidth;
        if (radius == 0 || isNaN(radius)) {
            radius = 10;
        }
        const showCount = textCount > maxCount ? maxCount + '+' : textCount;
        const layoutStyle = {
            height: radius * 2,
            width: radius * 2,
            minWidth: radius * 2,
            backgroundColor: _badgeColor,
            borderRadius: radius,
            justifyContent: 'center',
            alignItems: 'center',
            paddingHorizontal: borderWidth,
            overflow: 'hidden',
        };
        const _textStyle = {
            fontSize: rem(10),
            color: _textColor,
            backgroundColor: 'transparent',
        };
        return (<View style={[layoutStyle, hasOut ? {} : style]}>
                <Text style={[_textStyle, textStyle]}>{showCount}</Text>
            </View>);
    }, [
        diameter,
        borderWidth,
        textCount,
        maxCount,
        hasOut,
        style,
        textStyle,
        _badgeColor,
        _textColor,
    ]);
    const innerView = React.useMemo(() => hasCount ? _renderInnerCount() : _renderInnerNoCount(), [hasCount, _renderInnerCount, _renderInnerNoCount]);
    return hasOut ? _renderOut(innerView) : innerView;
};
BadgeView.defaultProps = {
    maxCount: 100,
};
export const KidBadgeView = createKidComponent(BadgeView);
