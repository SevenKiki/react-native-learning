import * as React from 'react';
import { StyleProp, ViewStyle, TextStyle, NativeSyntheticEvent, NativeScrollEvent } from 'react-native';
import { Props as TabBarItemProps } from './TabBarItem';
import { Props as IndicatorProps } from './TabBarIndicator';
import type { Route, Scene, SceneRendererProps, NavigationState, Layout, Event } from '../tab-view/types';
export declare type Props<T extends Route> = SceneRendererProps & {
    navigationState: NavigationState<T>;
    scrollEnabled?: boolean;
    bounces?: boolean;
    activeColor?: string;
    inactiveColor?: string;
    pressColor?: string;
    pressOpacity?: number;
    getLabelText: (scene: Scene<T>) => string | undefined;
    getAccessible: (scene: Scene<T>) => boolean | undefined;
    getAccessibilityLabel: (scene: Scene<T>) => string | undefined;
    getTestID: (scene: Scene<T>) => string | undefined;
    renderLabel?: (scene: Scene<T> & {
        focused: boolean;
        color: string;
    }) => React.ReactNode;
    renderIcon?: (scene: Scene<T> & {
        focused: boolean;
        color: string;
    }) => React.ReactNode;
    renderBadge?: (scene: Scene<T>) => React.ReactNode;
    renderIndicator: (props: IndicatorProps<T>) => React.ReactNode;
    renderTabBarItem?: (props: TabBarItemProps<T> & {
        key: string;
    }) => React.ReactElement;
    onTabPress?: (scene: Scene<T> & Event) => void;
    onTabLongPress?: (scene: Scene<T>) => void;
    onTabBarItemsLayoutChange?: (routes: T[]) => void;
    shownPercent?: number;
    tabItemStyle?: StyleProp<ViewStyle>;
    tabItemActiveStyle?: StyleProp<ViewStyle>;
    lastTabItemStyle?: StyleProp<ViewStyle>;
    firstTabItemStyle?: StyleProp<ViewStyle>;
    indicatorStyle?: StyleProp<ViewStyle>;
    indicatorWidth?: number;
    enableIndicatorAnimate?: boolean;
    labelStyle?: StyleProp<TextStyle>;
    contentContainerStyle?: StyleProp<ViewStyle>;
    style?: StyleProp<ViewStyle>;
    tabBarContainerStyle?: StyleProp<ViewStyle>;
    tabBarScrollViewStyle?: StyleProp<ViewStyle>;
    tabBarScrollViewContentStyle?: StyleProp<ViewStyle>;
    autoCenter?: boolean;
    dividerColor?: string;
    showBottomShadow?: boolean;
    tabItemTextStyle?: StyleProp<TextStyle>;
    tabItemActiveTextStyle?: StyleProp<TextStyle>;
    tabItemActiveStyleMode?: 'enlarge' | 'normal';
    controlType?: 'normal' | 'debounce' | 'throttle';
    controlDuration?: number;
    openPageAnimate?: boolean;
};
declare type State = {
    opacity: number;
    tabWidth: number;
    tabWidths: {
        [key: string]: number;
    };
    showIndicator: boolean;
    itemWidth: number | undefined;
};
export default class TabBar<T extends Route> extends React.Component<Props<T>, State> {
    static defaultProps: {
        autoCenter: boolean;
        getLabelText: ({ route }: Scene<Route>) => string | undefined;
        getAccessible: ({ route }: Scene<Route>) => boolean;
        getAccessibilityLabel: ({ route }: Scene<Route>) => string | undefined;
        getTestID: ({ route }: Scene<Route>) => string | undefined;
        renderIndicator: (props: IndicatorProps<Route>) => JSX.Element;
        controlType: string;
        controlDuration: number;
    };
    state: State;
    layout: Layout | null;
    contentLayout: Layout | null;
    centerPointArr: number[];
    constructor(props: Props<T>);
    debounceJump: (path: string) => void;
    throttleJump: (path: string) => void;
    jump: (path: string) => void;
    componentDidUpdate(prevProps: Props<T>, preState: State): void;
    private measuredTabWidths;
    private measuredTabsPos;
    private tabBarScrollTime;
    private itemLayoutTime;
    private scrollX;
    private scrollAmount;
    private scrollViewRef;
    onItemLayout(e: any, route: Route, index: number): void;
    onMomentumScrollBegin(): void;
    handleMeasuredTabsPos(): void;
    getInScenceRoutes(inScenceRoute: T[], x: number, width: number): void;
    onTabBarScroll(e: NativeSyntheticEvent<NativeScrollEvent>): void;
    private getScrollAmount;
    private resetScroll;
    componentDidMount(): void;
    componentWillUnmount(): void;
    private handleLayout;
    private onContentSizeChange;
    checkReady(): void;
    render(): JSX.Element;
}
export {};
