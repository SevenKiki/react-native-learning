import React from 'react';
import { View, Text, StyleSheet, } from 'react-native';
import { KidIcon } from '../icon';
import { KidAvatar } from '../avatar';
import useStyles from './styles';
const Tag = (props) => {
    const styles = useStyles(props);
    const { text, description, size, backgroundColor, borderRadius, style, textStyle, textColor, textFontSize, textLineHeight, descriptionTextStyle, lineStyle, leftIcons, leftIconSize, rightIcons, rightIconSize, avatars, avatarWrapperStyle, avatarSize, renderContent, } = props;
    const iconSize = React.useMemo(() => {
        const isSmall = size === 'small';
        const isBig = size === 'big';
        return isBig ? 16 : isSmall ? 12 : 14;
    }, [size]);
    const borderColor = React.useMemo(() => {
        var _a;
        const _bgc = ((_a = StyleSheet.flatten(style)) === null || _a === void 0 ? void 0 : _a.backgroundColor) || backgroundColor || '#FE3666';
        return _bgc === '#FE3666' ? '#FE3666' : '#FFF';
    }, [backgroundColor, style]);
    const avatarsWrapperWidth = React.useMemo(() => {
        return avatars && avatars.length && 16 + (avatars.length - 1) * 8 + 5;
    }, [avatars]);
    const renderIcons = (position, icons, size) => {
        const iconStyle = position === 'left' ? styles.leftIconStyle : styles.rightIconStyle;
        return (<View style={{ flexDirection: 'row' }}>
        {icons.map((icon, index) => {
                return (<KidIcon key={`tag-${position}-icon-${index}`} size={size || iconSize} {...icon} style={[iconStyle, icon.style]}/>);
            })}
      </View>);
    };
    return (<View style={[styles.wrapperStyle, { backgroundColor, borderRadius }, style]}>
      {typeof renderContent === 'function' ? (renderContent()) : (<>
          {(avatars && avatars.length) ? (<View style={[
                    {
                        flexDirection: 'row',
                        width: avatarsWrapperWidth,
                    },
                    avatarWrapperStyle
                ]}>
              {avatars.map((avatar, index) => {
                    const props = typeof avatar === 'string' ? { uri: avatar } : avatar;
                    return (<KidAvatar key={`tag-avatar-${index}`} diameter={avatarSize} wrapStyle={[
                            styles.avatarStyle,
                            { zIndex: avatars.length - index, borderColor },
                            index === 0 ? styles.firstAvatarStyle : null,
                            index !== 0 ? { left: index * -8 } : null,
                        ]} {...props}/>);
                })}
            </View>) : null}
          {(leftIcons && leftIcons.length) ? renderIcons('left', leftIcons, leftIconSize) : null}
          <Text style={[styles.textStyle, { color: textColor, fontSize: textFontSize, lineHeight: textLineHeight }, textStyle]}>{text}</Text>
          {description ? <View style={[styles.lineStyle, lineStyle]}/> : null}
          {description ? (<Text style={[styles.descriptionTextStyle, descriptionTextStyle]}>
              {description}
            </Text>) : null}
          {(rightIcons && rightIcons.length) ? renderIcons('right', rightIcons, rightIconSize) : null}
        </>)}
    </View>);
};
Tag.defaultProps = {
    size: 'normal',
    text: '标签',
    backgroundColor: '#FE3666',
    borderRadius: 4,
    description: '',
    leftIcons: [],
    rightIcons: [],
    avatars: [],
    avatarSize: 16
};
export default Tag;
export { Tag };
