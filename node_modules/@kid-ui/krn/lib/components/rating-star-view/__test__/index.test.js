import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import { RatingStarView } from '../index';
import { PanGestureHandler, State } from 'react-native-gesture-handler';
describe('testing Rating-Star-View', () => {
    it('test click', () => {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const onSwipeRating = jest.fn();
        const { UNSAFE_queryByType, getByTestId } = render(<RatingStarView totalCount={10} initCount={2.5} onSwipeRating={onSwipeRating}/>);
        const gestureHandler = UNSAFE_queryByType(PanGestureHandler);
        const viewRoot = getByTestId('ratingViewRoot');
        fireEvent(viewRoot, 'onLayout', {
            nativeEvent: { layout: { x: 0, width: 159 } },
        });
        // test click exceed half
        fireEvent(gestureHandler, 'onHandlerStateChange', {
            nativeEvent: { x: 168, state: State.BEGAN },
        });
        (_a = expect(onSwipeRating)) === null || _a === void 0 ? void 0 : _a.toHaveBeenCalledTimes(0);
        // test click negative
        fireEvent(gestureHandler, 'onHandlerStateChange', {
            nativeEvent: { x: -1, state: State.BEGAN },
        });
        (_b = expect(onSwipeRating)) === null || _b === void 0 ? void 0 : _b.toHaveBeenCalledTimes(0);
        // test click min
        fireEvent(gestureHandler, 'onHandlerStateChange', {
            nativeEvent: { x: 0, state: State.BEGAN },
        });
        (_c = expect(onSwipeRating)) === null || _c === void 0 ? void 0 : _c.toHaveBeenCalledWith(0.5);
        // test click max
        fireEvent(gestureHandler, 'onHandlerStateChange', {
            nativeEvent: { x: 159, state: State.BEGAN },
        });
        (_d = expect(onSwipeRating)) === null || _d === void 0 ? void 0 : _d.toHaveBeenCalledWith(10);
        // test click exceed half
        fireEvent(gestureHandler, 'onHandlerStateChange', {
            nativeEvent: { x: 167, state: State.BEGAN },
        });
        (_e = expect(onSwipeRating)) === null || _e === void 0 ? void 0 : _e.toHaveBeenCalledWith(10);
        // test click on star
        const singleSize = 15;
        const space = 1;
        for (let i = 0.5; i <= 10; i += 0.5) {
            const tapX = singleSize * i + (Math.max(0, Math.floor(i)) - 1) * space;
            fireEvent(gestureHandler, 'onHandlerStateChange', {
                nativeEvent: { x: tapX, state: State.BEGAN },
            });
            (_f = expect(onSwipeRating)) === null || _f === void 0 ? void 0 : _f.toHaveBeenCalledWith(i);
        }
        // test click on space
        for (let i = 1; i < 10; i++) {
            const tapX = singleSize * i + (Math.max(0, Math.floor(i)) - 1) * space + 0.5;
            fireEvent(gestureHandler, 'onHandlerStateChange', {
                nativeEvent: { x: tapX, state: State.BEGAN },
            });
            (_g = expect(onSwipeRating)) === null || _g === void 0 ? void 0 : _g.toHaveBeenCalledWith(i);
        }
        // test round
        fireEvent(gestureHandler, 'onHandlerStateChange', {
            nativeEvent: { x: 7.6, state: State.BEGAN },
        });
        (_h = expect(onSwipeRating)) === null || _h === void 0 ? void 0 : _h.toHaveBeenCalledWith(1);
    });
});
