import React from 'react';
import { Animated } from 'react-native';
import { render, fireEvent } from '@testing-library/react-native';
import { CollectAnimView } from '../index';
import { sequence } from '../sequence';
jest.useFakeTimers();
describe('testing Rating-Star-View', () => {
    it('test click', () => {
        var _a, _b, _c, _d, _e, _f;
        var alterFunction = null;
        const onCollect = jest.fn((collected, alterCollectStatus) => {
            alterFunction = alterCollectStatus;
        });
        const { getByTestId } = render(<CollectAnimView initCollected={false} onCollect={onCollect}/>);
        const root = getByTestId('collectRootView');
        const collectAnimView = getByTestId('collectAnimView');
        const unCollectAnimView = getByTestId('unCollectAnimView');
        // test single press
        fireEvent(root, 'onPress');
        (_a = expect(onCollect)) === null || _a === void 0 ? void 0 : _a.toHaveBeenCalledTimes(1);
        (_b = expect(onCollect)) === null || _b === void 0 ? void 0 : _b.toHaveBeenCalledWith(true, alterFunction);
        // test keep status
        fireEvent(root, 'onPress');
        (_c = expect(onCollect)) === null || _c === void 0 ? void 0 : _c.toHaveBeenCalledTimes(2);
        (_d = expect(onCollect)) === null || _d === void 0 ? void 0 : _d.toHaveBeenCalledWith(true, alterFunction);
        // test alter status
        alterFunction && alterFunction(true);
        fireEvent(root, 'onPress');
        (_e = expect(onCollect)) === null || _e === void 0 ? void 0 : _e.toHaveBeenCalledTimes(3);
        (_f = expect(onCollect)) === null || _f === void 0 ? void 0 : _f.toHaveBeenCalledWith(false, alterFunction);
    });
    it('sequence', () => {
        const value1 = new Animated.Value(0);
        const value2 = new Animated.Value(0);
        const animation1 = Animated.timing(value1, {
            toValue: 1,
            duration: 100,
            useNativeDriver: false
        });
        const animation2 = Animated.timing(value2, {
            toValue: 1,
            duration: 100,
            useNativeDriver: false
        });
        const animations1 = sequence([
            animation1,
            animation2
        ]);
        const cb1 = jest.fn();
        animations1.start(cb1);
        jest.runAllTimers();
        expect(cb1).toHaveBeenCalledTimes(1);
        const cb = jest.fn();
        const animations2 = sequence([]);
        animations2.start(cb);
        expect(cb).toHaveBeenCalledTimes(1);
    });
});
