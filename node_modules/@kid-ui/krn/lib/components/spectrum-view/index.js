import React, { useEffect, useMemo, useState } from 'react';
import { Animated, View, StyleSheet } from 'react-native';
const INCREMENT = 0.02;
function withSinFunction(peek, seed) {
    let inputRange = [], outputRange = [];
    for (let i = 0; i <= Math.PI; i += INCREMENT) {
        inputRange.push(i);
        outputRange.push(peek * Math.abs(Math.sin(i + seed)));
    }
    return { inputRange, outputRange };
}
function useProp(value, defaultValue) {
    const [prop, setProp] = useState(value !== null && value !== void 0 ? value : defaultValue);
    useEffect(() => {
        setProp((prev) => value !== null && value !== void 0 ? value : prev);
    }, [value]);
    return prop;
}
const styles = StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'flex-end',
    },
});
const DefaultProps = {
    barColor: '#FF5000',
    barNum: 4,
    barWidth: 1,
    sleepMillis: 100,
    radius: 0,
    duration: 1000,
};
export function SpectrumView(props) {
    const { width, height, barColor: pBarColor, barNum: pBarNum, barWidth: pBarWidth, sleepMillis: pSleepMillis, radius: pRadius, duration: pDuration, style, } = props;
    const barColor = useProp(pBarColor, DefaultProps.barColor);
    const barNum = useProp(pBarNum, DefaultProps.barNum);
    const barWidth = useProp(pBarWidth, DefaultProps.barWidth);
    const sleepMillis = useProp(pSleepMillis, DefaultProps.sleepMillis);
    const radius = useProp(pRadius, DefaultProps.radius);
    const duration = useProp(pDuration, DefaultProps.duration);
    const anim = useMemo(() => {
        return new Animated.Value(0);
    }, []);
    const bars = useMemo(() => {
        const interval = (width - barNum * barWidth) / (barNum - 1);
        const initBars = [];
        for (let i = 0; i < barNum; i++) {
            const barStyle = {
                width: barWidth,
                height: height,
                backgroundColor: barColor,
                marginLeft: 0,
                borderRadius: radius,
            };
            if (i !== 0) {
                barStyle.marginLeft = interval;
            }
            let sinHeight;
            if (i % 2 === 0) {
                sinHeight = anim.interpolate(withSinFunction(height, Math.PI / 4));
            }
            else {
                sinHeight = anim.interpolate(withSinFunction(height, Math.PI / 2));
            }
            barStyle.height = sinHeight;
            initBars.push(<Animated.View key={i} style={[barStyle]}/>);
        }
        return initBars;
    }, [anim, barColor, barNum, barWidth, height, radius, width]);
    useEffect(() => {
        const playAnim = Animated.loop(Animated.sequence([
            Animated.timing(anim, {
                toValue: Math.PI,
                duration: duration,
                useNativeDriver: false,
            }),
            Animated.delay(sleepMillis),
        ]));
        playAnim.start();
        return () => {
            playAnim.stop;
        };
    }, [
        anim,
        barNum,
        barWidth,
        duration,
        height,
        barColor,
        radius,
        sleepMillis,
        width,
    ]);
    const sizeStyle = useMemo(() => {
        return {
            width,
            height,
        };
    }, [height, width]);
    return (<View style={[styles.container, style, sizeStyle]}>
            {bars === null || bars === void 0 ? void 0 : bars.map((value) => value)}
        </View>);
}
