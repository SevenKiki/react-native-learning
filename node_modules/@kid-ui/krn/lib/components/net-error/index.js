import { View, Text, StyleSheet, NativeModules, TouchableOpacity, Platform } from 'react-native';
import React from 'react';
import { createKidComponent, rem } from '../../utils';
import { KidButton } from '../button';
import NetErrorIcon from './net-error-icon';
import useThemeValue from '../../theme/useThemeValue';
import { useTranslate, Locale } from '../locale';
import { getKidColor, getThemeValue } from '../../utils';
import ThemeContext from '../../theme/context';
const defaultMessages = {
    nonet: '无法连接网络，请稍后重试',
    replay: '点击重试',
    tips: '查看解决办法',
};
const hantMessages = {
    nonet: '無法連接網絡，請稍後重試',
    replay: '點擊重試',
    tips: '查看解決辦法',
};
const engMessages = {
    nonet: 'No Internet connection, please try later',
    tips: 'Solutions',
    replay: 'Tap to retry',
};
const defaultLang = 'zh-Hans'; // 简体中文
Locale.add({
    [defaultLang]: { netError: defaultMessages },
    en: { netError: engMessages },
    'zh-Hant': { netError: hantMessages },
    'zh-CN': { netError: defaultMessages },
});
const styles = StyleSheet.create({
    wrap: {
        paddingLeft: rem(48),
        paddingRight: rem(48),
        height: '100%',
        justifyContent: 'center',
        alignItems: 'center',
    },
    buttonText: {
        fontFamily: Platform.OS === 'ios' ? 'PingFangSC-Medium' : 'sans-serif-medium',
        fontSize: rem(14),
        fontWeight: '500',
        lineHeight: rem(20)
    },
    text: {
        fontFamily: Platform.OS === 'ios' ? 'PingFangSC-Medium' : 'sans-serif-medium',
        fontWeight: '500',
        fontSize: rem(18),
        lineHeight: rem(26),
        marginTop: rem(20),
        marginBottom: rem(20),
        textAlign: 'center',
    },
    solution: {
        fontFamily: Platform.OS === 'ios' ? 'PingFangSC-Regular' : 'sans-serif',
        fontWeight: '400',
        textAlign: 'center',
        fontSize: rem(13),
        lineHeight: rem(16),
        marginTop: rem(23)
    },
    line: {
        height: rem(1),
        top: -rem(1)
    }
});
const NetError = (props) => {
    const { title, iconColor: _iconColor, buttonCornerRadius, emptyStyle, buttonBorderWidth, onPress, onPressSolution } = props;
    const text = useTranslate('netError');
    const linkColor = useThemeValue(props.linkColor);
    const buttonTextColor = useThemeValue(props.buttonTextColor);
    const theme = React.useContext(ThemeContext);
    const getColor = React.useCallback((color) => {
        if (color.indexOf('_') !== -1) {
            return getKidColor(color, theme);
        }
        else {
            return color;
        }
    }, [theme]);
    const iconColor = React.useMemo(() => {
        if (_iconColor) {
            let color = '';
            if (typeof _iconColor === 'string') {
                color = getColor(_iconColor);
            }
            else if (typeof _iconColor === 'object') {
                color = getColor(getThemeValue(_iconColor, theme));
            }
            return color;
        }
    }, [_iconColor, getColor, theme]);
    const buttonBgColor = useThemeValue(props.buttonBgColor);
    const buttonBorderColor = useThemeValue(props.buttonBorderColor);
    const descTextColor = useThemeValue(props.descTextColor);
    let [iconShow, buttonShow, resolveShow] = [true, true, true];
    switch (emptyStyle) {
        case 'empty':
            buttonShow = false;
            resolveShow = false;
            break;
        case 'half':
            iconShow = false;
            break;
        case 'severError':
            resolveShow = false;
            break;
        default:
            break;
    }
    return (<View style={styles.wrap}>
      {!iconShow ? null : <NetErrorIcon color={iconColor}/>}
      <Text style={[
            {
                color: descTextColor,
            },
            styles.text
        ]}>
        {title || text('nonet')}
      </Text>
      {!buttonShow ? null : (<KidButton kid={'style_button_medium_orange_bg'} isRoundButtonMax={true} textStyle={styles.buttonText} textFont={rem(14)} textColor={buttonTextColor} cornerRadius={buttonCornerRadius} bgColor={buttonBgColor} borderWidth={buttonBorderWidth} borderColor={buttonBorderColor} onPress={onPress} height={rem(40)} width={rem(112)} text={text('replay')}/>)}
      {!resolveShow ? null : (<TouchableOpacity onPress={onPressSolution} hitSlop={{ left: rem(20), right: rem(20), top: rem(9), bottom: rem(20) }}>
          <Text style={[
                {
                    color: linkColor,
                },
                styles.solution,
            ]}>
            {text('tips')}
          </Text>
          <View style={[
                {
                    backgroundColor: linkColor,
                },
                styles.line,
            ]}/>
        </TouchableOpacity>)}
    </View>);
};
NetError.defaultProps = {
    buttonBgColor: { light: '#00000000', dark: '#00000000' },
    descTextColor: { light: '#222222', dark: '#B5B5B6' },
    buttonCornerRadius: rem(300),
    linkColor: { light: '#5181FB', dark: '#4F7EF8' },
    emptyStyle: '',
    buttonBorderColor: { light: '#9C9C9C', dark: '#909092' },
    buttonBorderWidth: 0.5,
    buttonTextColor: { light: '#222222', dark: '#B5B5B6' },
    onPress: () => { },
    onPressSolution: () => {
        var _a, _b;
        (_b = (_a = NativeModules.KIDBridge) === null || _a === void 0 ? void 0 : _a.showNetworkSolutionAlert) === null || _b === void 0 ? void 0 : _b.call(_a);
    },
};
export const KidNetError = createKidComponent(NetError);
