var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Dimensions } from 'react-native';
import { DialogShow } from '../dialog';
import { DialogComponent } from '../alert/dialog-component';
import { AlertListComponent } from '../alert/alert-list-component';
import { wrapFuc } from '../alert/common';
const windowWidth = Dimensions.get('window').width;
export const AlertSheet = (arg = {}) => {
    const { message, kid, onPress = () => {
        alert.close();
    }, optionHeight, warnColor, uselessColor, normalColor, defaultBackgroundColor, activeBackgroundColor, borderBottomLineHeight, borderBottomLineColor, activeOpacity, optionStyle, listContainerStyle, listTopContainerStyle, listBottomContainerStyle, hasCustomCancel, customCancelMessage, popupSet } = arg, rest = __rest(arg, ["message", "kid", "onPress", "optionHeight", "warnColor", "uselessColor", "normalColor", "defaultBackgroundColor", "activeBackgroundColor", "borderBottomLineHeight", "borderBottomLineColor", "activeOpacity", "optionStyle", "listContainerStyle", "listTopContainerStyle", "listBottomContainerStyle", "hasCustomCancel", "customCancelMessage", "popupSet"]);
    const alertListProps = {
        message,
        onPress,
        optionHeight,
        warnColor,
        uselessColor,
        normalColor,
        defaultBackgroundColor,
        activeBackgroundColor,
        borderBottomLineHeight,
        borderBottomLineColor,
        activeOpacity,
        optionStyle,
        listContainerStyle,
        listTopContainerStyle,
        listBottomContainerStyle,
        hasCustomCancel,
        customCancelMessage,
    };
    let defaultProps = Object.assign(Object.assign({ position: 'bottom', animate: 'slider', popupStyle: {
            width: windowWidth,
            backgroundColor: 'rgba(0,0,0,0)',
        }, maskBgColor: 'rgba(0,0,0,0.3)', popupSet }, popupSet), { width: '100%', showButton: false, showTitle: false, showDesc: false, renderContent: wrapFuc(AlertListComponent, alertListProps) });
    const alert = DialogShow(Object.assign(Object.assign({}, defaultProps), rest), DialogComponent);
    return {
        close: () => {
            alert.close();
        },
        update: (props) => {
            const updateProps = Object.assign(Object.assign(Object.assign({}, defaultProps), rest), props);
            alert.update(updateProps);
        },
    };
};
