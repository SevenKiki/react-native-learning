import React from 'react';
import { TextInput, Keyboard } from 'react-native';
import { mergeRefs } from '../../utils';
const Input = React.forwardRef((props, ref) => {
    const { focused, autoFocus } = props;
    const [_focused, setFocused] = React.useState(focused || false);
    const inputRef = React.useRef();
    React.useImperativeHandle(ref, () => ({
        focus,
        clear
    }));
    React.useEffect(() => {
        if (inputRef.current && (autoFocus || focused)) {
            inputRef.current.focus();
        }
    }, []);
    React.useEffect(() => {
        const _keyboardDidHide = () => {
            if (inputRef.current) {
                inputRef.current.blur();
            }
        };
        Keyboard.addListener('keyboardDidHide', _keyboardDidHide);
        return () => {
            Keyboard.removeListener('keyboardDidHide', _keyboardDidHide);
        };
    }, []);
    React.useEffect(() => {
        if (inputRef.current && focused) {
            inputRef.current.focus();
        }
        if (focused !== undefined && focused !== _focused) {
            setFocused(focused);
        }
    }, [focused]);
    const focus = () => {
        if (inputRef.current) {
            inputRef.current.focus();
        }
    };
    const clear = () => {
        if (inputRef.current) {
            inputRef.current.clear();
        }
    };
    return (<TextInput ref={mergeRefs([inputRef, ref])} underlineColorAndroid="transparent" selectionColor='#FE3666' {...props}/>);
});
Input.defaultProps = {
    focused: false
};
export default React.memo(Input);
