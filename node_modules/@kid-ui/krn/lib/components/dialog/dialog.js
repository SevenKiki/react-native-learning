var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Popup } from '../popup';
import { DialogComponent } from './dialog-wrapper';
export const Dialog = DialogComponent;
const getProps = (arg) => {
    const { useModal, showMask, maskBgColor, maskClosable, position, top, left, animate, animateDuration, isControlAnimationIn, popupStyle, beforeClose, onAnimateEnd, onShow, onDismiss, popupSet = {} } = arg, dialogWrapperProps = __rest(arg, ["useModal", "showMask", "maskBgColor", "maskClosable", "position", "top", "left", "animate", "animateDuration", "isControlAnimationIn", "popupStyle", "beforeClose", "onAnimateEnd", "onShow", "onDismiss", "popupSet"]);
    const popupProps = Object.assign(Object.assign({}, popupSet), { useModal,
        showMask,
        maskBgColor,
        maskClosable,
        position,
        top,
        left,
        animate,
        animateDuration,
        isControlAnimationIn,
        popupStyle,
        beforeClose,
        onAnimateEnd,
        onShow,
        onDismiss });
    return [popupProps, dialogWrapperProps];
};
const show = (arg, Component = DialogComponent, showLeftButton = true) => {
    const [popupProps, dialogWrapperProps] = getProps(arg);
    const alert = Popup.show(Object.assign({ children: (<Component showLeftButton={showLeftButton} {...dialogWrapperProps} componentApi={false}/>) }, popupProps));
    return {
        close: () => {
            alert.remove();
        },
        update: (props) => {
            const [updatePopupProps, updateDialogWrapperProps] = getProps(props);
            alert.update(Object.assign({ children: (<Component showLeftButton={showLeftButton} {...updateDialogWrapperProps} componentApi={false}/>) }, updatePopupProps));
        },
    };
};
Dialog.alert = (props = {}) => {
    return show(props, DialogComponent, false);
};
Dialog.confirm = (props = {}) => {
    return show(props, DialogComponent);
};
export const DialogShow = show;
