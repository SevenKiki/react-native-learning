import React from 'react';
import type { RefreshControlParams } from '@kds/refresh-list';
import { LoadingType } from '../loading';
declare type KsRefreshControlProps = {};
declare type KsRefreshControlPropsState = {
    animated: boolean;
    percent: number;
};
export default function getKsRefreshControl(type?: LoadingType | string): {
    new (props: KsRefreshControlProps): {
        setRefreshControlParams(refreshControlParams: RefreshControlParams): void;
        render(): JSX.Element;
        context: any;
        setState<K extends keyof KsRefreshControlPropsState>(state: KsRefreshControlPropsState | ((prevState: Readonly<KsRefreshControlPropsState>, props: Readonly<KsRefreshControlProps>) => KsRefreshControlPropsState | Pick<KsRefreshControlPropsState, K> | null) | Pick<KsRefreshControlPropsState, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<KsRefreshControlProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<KsRefreshControlPropsState>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<KsRefreshControlProps>, nextState: Readonly<KsRefreshControlPropsState>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<KsRefreshControlProps>, prevState: Readonly<KsRefreshControlPropsState>): any;
        componentDidUpdate?(prevProps: Readonly<KsRefreshControlProps>, prevState: Readonly<KsRefreshControlPropsState>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<KsRefreshControlProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<KsRefreshControlProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<KsRefreshControlProps>, nextState: Readonly<KsRefreshControlPropsState>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<KsRefreshControlProps>, nextState: Readonly<KsRefreshControlPropsState>, nextContext: any): void;
    };
    contextType?: React.Context<any> | undefined;
};
export {};
