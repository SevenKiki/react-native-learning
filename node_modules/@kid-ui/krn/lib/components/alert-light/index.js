var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { DialogShow } from '../dialog';
import { DialogComponent } from '../alert/dialog-component';
import { renderInput, renderPassword, Checkbox } from '../alert/alert-component';
import { wrapFuc } from '../alert/common';
export const Alert = (arg = {}) => {
    const { showInput = false, onInputChange = () => null, inputPlaceholder = '默认文案', inputAutoFocus = false, inputMaxLength, showPassword = false, showCheckbox = false, password, message, single, checkboxDefaultValue, kid, popupSet, checkboxItemsWrapStyle, checkboxItemStyle, checkboxItemOptionStyle, iconSelectedColor, iconUnSelectedColor, iconSize, iconStyle, selectedIconKid, selectedIconKidConfig, unSelectedIconKid, unSelectedIconKidConfig, renderCheckboxIcon } = arg, rest = __rest(arg, ["showInput", "onInputChange", "inputPlaceholder", "inputAutoFocus", "inputMaxLength", "showPassword", "showCheckbox", "password", "message", "single", "checkboxDefaultValue", "kid", "popupSet", "checkboxItemsWrapStyle", "checkboxItemStyle", "checkboxItemOptionStyle", "iconSelectedColor", "iconUnSelectedColor", "iconSize", "iconStyle", "selectedIconKid", "selectedIconKidConfig", "unSelectedIconKid", "unSelectedIconKidConfig", "renderCheckboxIcon"]);
    let defaultProps = Object.assign(Object.assign({ onConfirm: () => {
            alert.close();
        }, onCancel: () => {
            alert.close();
        }, maskBgColor: 'rgba(0,0,0,0.3)', popupStyle: {
            backgroundColor: 'rgba(0,0,0,0)',
        }, popupSet }, popupSet), { cancelText: '辅助操作', renderContent: ((showPassword &&
            wrapFuc(renderPassword, { password: password })) ||
            (showInput &&
                wrapFuc(renderInput, {
                    onInputChange,
                    placeholder: inputPlaceholder,
                    autoFocus: inputAutoFocus,
                    maxLength: inputMaxLength
                })) ||
            (showCheckbox &&
                wrapFuc(Checkbox, {
                    message,
                    onInputChange,
                    single,
                    defaultValue: checkboxDefaultValue,
                    checkboxItemsWrapStyle,
                    checkboxItemStyle,
                    checkboxItemOptionStyle,
                    iconSelectedColor,
                    iconUnSelectedColor,
                    iconSize,
                    iconStyle,
                    selectedIconKid,
                    selectedIconKidConfig,
                    unSelectedIconKid,
                    unSelectedIconKidConfig,
                    renderCheckboxIcon,
                }))) });
    const alert = DialogShow(Object.assign(Object.assign({}, defaultProps), rest), DialogComponent);
    return {
        close: () => {
            alert.close();
        },
        update: (props) => {
            const updateProps = Object.assign(Object.assign(Object.assign({}, defaultProps), rest), props);
            alert.update(updateProps);
        },
    };
};
