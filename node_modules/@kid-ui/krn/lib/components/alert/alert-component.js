import { View, Text, StyleSheet, TouchableOpacity, TextInput, Clipboard, FlatList } from 'react-native';
import React, { useState, useMemo } from 'react';
import useThemeValue from '../../theme/useThemeValue';
import useKidColor from '../../theme/useKidColor';
import { KidIcon } from '../icon';
import common_list_checkbox_selected from '@ks/kw/icon/output/common/list/common_list_checkbox_selected';
import common_list_checkbox_unselected from '@ks/kw/icon/output/common/list/common_list_checkbox_unselected';
import { KidButton } from '../button';
import { rem } from '../../utils';
;
export const Checkbox = (props) => {
    const { message, optionColor = { light: '#666666', dark: '#b5b5b6' }, single = true, defaultValue, onInputChange, checkboxItemsWrapStyle, checkboxItemStyle, checkboxItemOptionStyle, iconSelectedColor, iconUnSelectedColor, iconSize = rem(20), iconStyle, selectedIconKid = 'common_list_checkbox_selected', selectedIconKidConfig = common_list_checkbox_selected, unSelectedIconKid = 'common_list_checkbox_unselected', unSelectedIconKidConfig = common_list_checkbox_unselected, renderCheckboxIcon } = props;
    const _defaultValue = useMemo(() => {
        if (typeof defaultValue === 'string') {
            if (message === null || message === void 0 ? void 0 : message.some(m => m.title === defaultValue)) {
                return [defaultValue];
            }
        }
        else if (Array.isArray(defaultValue)) {
            const list = [];
            defaultValue.forEach(dv => {
                if (message === null || message === void 0 ? void 0 : message.some(m => m.title === dv)) {
                    list.indexOf(dv) === -1 && list.push(dv);
                }
            });
            if (list.length) {
                if (single) {
                    return [list.shift()];
                }
                else {
                    return [...list];
                }
            }
        }
        else {
            if (single) {
                return [message === null || message === void 0 ? void 0 : message[0].title];
            }
        }
        return [];
    }, [single, defaultValue, message]);
    const [selectedIdList, setSelectedIdList] = useState(_defaultValue);
    const color = useThemeValue(optionColor);
    const _renderIcon = React.useCallback((item) => {
        const selected = selectedIdList.some(i => i === item.title);
        if (renderCheckboxIcon) {
            return renderCheckboxIcon(selected);
        }
        else {
            return (<KidIcon kid={selected ? selectedIconKid : unSelectedIconKid} kidConfig={selected ? selectedIconKidConfig : unSelectedIconKidConfig} kidColor={selected ? iconSelectedColor : iconUnSelectedColor} style={iconStyle} size={iconSize}/>);
        }
    }, [
        selectedIdList,
        renderCheckboxIcon,
        selectedIconKid,
        unSelectedIconKid,
        selectedIconKidConfig,
        unSelectedIconKidConfig,
        iconSelectedColor,
        iconUnSelectedColor,
        iconStyle,
        iconSize,
    ]);
    const Item = ({ item, onPress }) => (<TouchableOpacity activeOpacity={1} onPress={onPress} style={[styles.item, checkboxItemStyle]} hitSlop={{ top: rem(10), bottom: rem(10), left: rem(40), right: rem(100) }}>
      <Text style={[styles.option, checkboxItemOptionStyle, { color: color }]}>{item.title}</Text>
    </TouchableOpacity>);
    const handleClick = (option) => {
        const index = selectedIdList.indexOf(option);
        let list = [];
        if (index === -1) {
            if (single) {
                list = [option];
            }
            else {
                list = [...selectedIdList, option];
            }
        }
        else {
            list = [...selectedIdList];
            if (!single) {
                list.splice(index, 1);
            }
        }
        onInputChange === null || onInputChange === void 0 ? void 0 : onInputChange(list);
        setSelectedIdList(list);
    };
    const renderItem = ({ item }) => {
        return (<View style={[styles.itemWrap, checkboxItemsWrapStyle]}>
        {_renderIcon(item)}
        <Item item={item} onPress={() => {
                handleClick(item.title);
            }}/>
      </View>);
    };
    return (<View style={styles.container}>
      <FlatList data={message} renderItem={renderItem} keyExtractor={(item) => item.id} extraData={{ selectedIdList, color, handleClick }}/>
    </View>);
};
export const renderInput = (props) => {
    const { onInputChange, placeholder, autoFocus, maxLength } = props;
    const borderColor = useThemeValue({
        light: '#eaeaea',
        dark: 'rgba(255,255,255,0.04)',
    });
    const placeholderTextColor = useThemeValue({
        light: '#c6c6c6',
        dark: '#6b6b6f',
    });
    const [value, onChangeText] = React.useState('');
    return (<View style={styles.inputWrap}>
      <TextInput autoFocus={autoFocus} maxLength={maxLength} style={[
            {
                marginHorizontal: rem(24),
                borderColor: borderColor,
            },
            styles.input,
        ]} placeholder={placeholder || '默认文案'} placeholderTextColor={placeholderTextColor} onChangeText={(text) => {
            onChangeText(text);
            onInputChange === null || onInputChange === void 0 ? void 0 : onInputChange(text);
        }} value={value}/>
    </View>);
};
export const renderPassword = ({ password }) => {
    const titleColor = { light: '#222222', dark: '#e6e6e6' };
    const titleColorSingle = useThemeValue(titleColor);
    const borderColor = useThemeValue({
        light: '#eaeaea',
        dark: 'rgba(255,255,255,0.04)',
    });
    Clipboard.setString(password);
    return (<View style={styles.inputWrap}>
      <Text selectable={true} style={[
            {
                color: titleColorSingle,
                borderColor: borderColor,
                marginBottom: rem(16),
                marginHorizontal: rem(24),
            },
            styles.password,
        ]}>
        {password}
      </Text>
    </View>);
};
export const renderBigButton = (props) => {
    const { onConfirm, confirmText } = props;
    const textColor = useKidColor('cs_common_text_title');
    const borderColorLight = useKidColor('color_base_black_5');
    const borderColorDark = useKidColor('color_base_black_12');
    const borderColor = useThemeValue({
        light: borderColorLight,
        dark: borderColorDark,
    });
    return (<KidButton width={256} textColor={textColor} borderColor={borderColor} kid={'style_button_big_grey_border'} text={confirmText} onPress={onConfirm}></KidButton>);
};
const styles = StyleSheet.create({
    // checkbox
    container: {
        width: '100%',
    },
    itemWrap: {
        flexDirection: 'row',
        alignItems: 'center',
        marginLeft: rem(24),
        marginBottom: rem(12),
    },
    item: {
        marginVertical: rem(8),
        marginHorizontal: rem(16),
    },
    option: {
        fontSize: rem(16),
        lineHeight: rem(19),
        textAlign: 'left',
        fontFamily: 'PingFangSC-Regular',
    },
    // 快口令password
    password: {
        // 这里宽度设为1时，导致入场动画时长变长，出场无动画，待定位TODO
        borderWidth: rem(1.1),
        fontSize: rem(15),
        lineHeight: rem(23),
        justifyContent: 'center',
        fontFamily: 'PingFangSC-Regular',
        textAlign: 'justify',
        padding: rem(8),
        borderStyle: 'solid',
        borderRadius: rem(4),
    },
    // input
    input: {
        height: rem(32),
        padding: 0,
        paddingLeft: rem(8),
        marginBottom: rem(17),
        borderWidth: rem(1),
    },
    inputWrap: {
        width: '100%',
    },
});
