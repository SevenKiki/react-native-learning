var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { DialogComponent as Dialog } from '../dialog';
import useThemeValue from '../../theme/useThemeValue';
const titleColors = { light: '#222222', dark: '#e6e6e6' };
const descTextColors = { light: '#666666', dark: '#b5b5b6' };
const borderColors = { light: '#eaeaea', dark: 'rgba(255,255,255,0.04)' };
const backgroundColor = { light: '#fff', dark: '#2b2b2f' };
const leftButtonColors = { light: '#666666', dark: '#b5b5b6' };
const rightButtonColors = { light: '#5181fb', dark: '#4f7ef8' };
export const DialogComponent = (props) => {
    const { popupSet = {}, borderColor, leftButtonColor, rightButtonColor, titleColor, descTextColor, wrapBackGroundColor } = props, rest = __rest(props, ["popupSet", "borderColor", "leftButtonColor", "rightButtonColor", "titleColor", "descTextColor", "wrapBackGroundColor"]);
    const _leftButtonColor = useThemeValue(leftButtonColor || leftButtonColors);
    const _rightButtonColor = useThemeValue(rightButtonColor || rightButtonColors);
    const _borderColor = useThemeValue(borderColor || borderColors);
    const _titleColor = useThemeValue(titleColor || titleColors);
    const _descTextColor = useThemeValue(descTextColor || descTextColors);
    const _wrapBackGroundColor = useThemeValue(wrapBackGroundColor || backgroundColor);
    const defaultOpts = {
        leftButtonColor: _leftButtonColor,
        rightButtonColor: _rightButtonColor,
        borderColor: _borderColor,
        titleColor: _titleColor,
        descTextColor: _descTextColor,
        wrapBackGroundColor: _wrapBackGroundColor,
    };
    return <Dialog {...defaultOpts} {...rest}></Dialog>;
};
