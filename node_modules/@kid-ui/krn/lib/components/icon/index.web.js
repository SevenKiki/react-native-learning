// @ts-nocheck
/* eslint-disable react-hooks/rules-of-hooks */
import React, { useContext } from 'react';
import ThemeContext from '../../theme/context';
import Icon from '@ks/kw/icon/output/Icon.js';
import { StyleSheet } from 'react-native';
import { getKidColor, getThemeValue } from '../../utils';
function getIconColorConfig(kidConfig) {
    const [, light, dark] = kidConfig;
    return {
        light,
        dark,
    };
}
export function KidIcon(props) {
    var _a;
    const { kidConfig, style = {}, size, width, height, kidColor } = props;
    if (!kidConfig) {
        return null;
    }
    const _width = width !== null && width !== void 0 ? width : size;
    const _height = height !== null && height !== void 0 ? height : size;
    const iconColorConfig = getIconColorConfig(kidConfig) || {};
    const theme = useContext(ThemeContext);
    const getColor = React.useCallback((color) => {
        if (color.indexOf('_') !== -1) {
            return getKidColor(color, theme);
        }
        else {
            return color;
        }
    }, [theme]);
    const _useKidColor = React.useMemo(() => {
        if (kidColor) {
            let color = '';
            if (typeof kidColor === 'string') {
                color = getColor(kidColor);
            }
            else if (typeof kidColor === 'object') {
                color = getColor(getThemeValue(kidColor, theme));
            }
            return color;
        }
    }, [kidColor, getColor, theme]);
    // 下面的逻辑是为了兼容h5做的抹平，因为h5的style不支持数组，且不认识tintColor
    const _style = Object.assign({}, StyleSheet.flatten(style));
    const tintColor = (kidColor && _useKidColor) || ((_a = _style) === null || _a === void 0 ? void 0 : _a.tintColor) || iconColorConfig[theme] || null;
    _style.color = tintColor;
    _style.width = (_width !== null && _width !== void 0 ? _width : _style.width) || 40;
    _style.height = (_height !== null && _height !== void 0 ? _height : _style.height) || 40;
    return (<Icon config={kidConfig} style={_style}/>);
}
