/* eslint-disable react-hooks/rules-of-hooks */
import React, { useContext } from 'react';
import ThemeContext from '../../theme/context';
import { safeParse, rem, getKidColor, getThemeValue } from '../../utils';
import { NativeModules, Image } from 'react-native';
const KIDBridge = NativeModules.KIDBridge;
export function KidIcon(props) {
    var _a, _b, _c, _d;
    const { kid, style, size = rem(40), width, height, kidColor } = props;
    const _width = width !== null && width !== void 0 ? width : size;
    const _height = height !== null && height !== void 0 ? height : size;
    if (!kid) {
        console.warn('⚠️警告：KidIcon的kid属性不能为空字符串');
    }
    let iconColorConfig = safeParse((_a = KIDBridge === null || KIDBridge === void 0 ? void 0 : KIDBridge.getIconColorConfig) === null || _a === void 0 ? void 0 : _a.call(KIDBridge, kid));
    if (!iconColorConfig) {
        (_c = (_b = NativeModules.KRNBasic) === null || _b === void 0 ? void 0 : _b.log) === null || _c === void 0 ? void 0 : _c.call(_b, `iconColorConfig为空！kid=${kid}, KIDBridge.getIconColorConfig(kid)=${JSON.stringify((_d = KIDBridge === null || KIDBridge === void 0 ? void 0 : KIDBridge.getIconColorConfig) === null || _d === void 0 ? void 0 : _d.call(KIDBridge, kid))}, props=${JSON.stringify(props)}`);
        // iconColorConfig = {};
    }
    const theme = useContext(ThemeContext);
    let uri = iconColorConfig === null || iconColorConfig === void 0 ? void 0 : iconColorConfig.file;
    const getColor = React.useCallback((color) => {
        if (color.indexOf('_') !== -1) {
            return getKidColor(color, theme);
        }
        else {
            return color;
        }
    }, [theme]);
    const _useKidColor = React.useMemo(() => {
        if (kidColor) {
            let color = '';
            if (typeof kidColor === 'string') {
                color = getColor(kidColor);
            }
            else if (typeof kidColor === 'object') {
                color = getColor(getThemeValue(kidColor, theme));
            }
            return color;
        }
    }, [kidColor, getColor, theme]);
    const tintColor = (kidColor && _useKidColor) ||
        (iconColorConfig === null || iconColorConfig === void 0 ? void 0 : iconColorConfig[theme]) ||
        (iconColorConfig === null || iconColorConfig === void 0 ? void 0 : iconColorConfig.normal) ||
        null;
    if (uri === '0' || !uri) {
        uri = (iconColorConfig === null || iconColorConfig === void 0 ? void 0 : iconColorConfig[theme + 'Url']) || (iconColorConfig === null || iconColorConfig === void 0 ? void 0 : iconColorConfig.normalUrl);
    }
    return (<Image style={[{ width: _width, height: _height, tintColor }, style]} source={{ uri }}/>);
}
