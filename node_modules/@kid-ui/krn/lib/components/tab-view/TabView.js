import * as React from 'react';
import { StyleSheet, View } from 'react-native';
import { TabBar } from '../tab-bar';
import SceneView from './SceneView';
import Pager from './Pager';
import { createKidComponent, getThemeValue } from '../../utils';
import ThemeContext from '../../theme/context';
function TabView(props) {
    const tabBarRef = React.createRef();
    const theme = React.useContext(ThemeContext);
    const { onIndexChange, navigationState, renderScene, initialLayout, keyboardDismissMode = 'auto', lazy = false, lazyPreloadDistance = 0, tabBarHeight, textSelectedColor = '#fff', textNormalColor = '#666', tabBgColor = '#000', indicatorWidth = 0, enableIndicatorAnimate = true, indicatorColor = '#fff', fitTextWidth = false, dividerColor = 'transparent', showBottomShadow = true, tabItemTextStyle, tabItemActiveTextStyle, renderIcon, renderTabBarItem, onTabPress, onTabLongPress, onTabBarItemsLayoutChange, shownPercent, tabItemStyle, tabBarContainerStyle, tabItemActiveStyle, lastTabItemStyle, tabBarScrollViewStyle, tabBarScrollViewContentStyle, tabItemActiveStyleMode = 'normal', firstTabItemStyle, indicatorStyle, onSwipeStart, onSwipeEnd, onSwipe, overdrag, controlType = 'normal', controlDuration = 0, openPageAnimate = true, renderLazyPlaceholder = () => null, renderTabBar = (props) => (<TabBar {...props} ref={tabBarRef} autoCenter={!getThemeValue(fitTextWidth, theme)} scrollEnabled activeColor={getThemeValue(textSelectedColor, theme)} inactiveColor={getThemeValue(textNormalColor, theme)} style={{ backgroundColor: getThemeValue(tabBgColor, theme), height: tabBarHeight }} tabBarContainerStyle={tabBarContainerStyle} renderIcon={renderIcon} renderTabBarItem={renderTabBarItem} tabItemTextStyle={tabItemTextStyle} tabBarScrollViewStyle={tabBarScrollViewStyle} tabBarScrollViewContentStyle={tabBarScrollViewContentStyle} tabItemActiveTextStyle={tabItemActiveTextStyle} tabItemStyle={tabItemStyle} tabItemActiveStyle={tabItemActiveStyle} lastTabItemStyle={lastTabItemStyle} firstTabItemStyle={firstTabItemStyle} indicatorStyle={[{ width: getThemeValue(indicatorWidth, theme), backgroundColor: getThemeValue(indicatorColor, theme) }, indicatorStyle]} indicatorWidth={indicatorWidth} enableIndicatorAnimate={enableIndicatorAnimate} showBottomShadow={showBottomShadow} dividerColor={getThemeValue(dividerColor, theme)} controlType={controlType} controlDuration={controlDuration} openPageAnimate={openPageAnimate} onTabPress={onTabPress} onTabLongPress={onTabLongPress} onTabBarItemsLayoutChange={onTabBarItemsLayoutChange} shownPercent={shownPercent} tabItemActiveStyleMode={tabItemActiveStyleMode}/>), sceneContainerStyle, style, swipeEnabled = true, enterOnce = false, tabBarPosition = 'top', } = props;
    const [layout, setLayout] = React.useState(Object.assign({ width: 0, height: 0 }, initialLayout));
    const jumpToIndex = (index) => {
        if (index !== navigationState.index) {
            onIndexChange(index);
        }
    };
    const handleLayout = (e) => {
        const { height, width } = e.nativeEvent.layout;
        setLayout((prevLayout) => {
            if (prevLayout.width === width && prevLayout.height === height) {
                return prevLayout;
            }
            return { height, width };
        });
    };
    return (<View onLayout={handleLayout} style={[styles.pager, style]}>
      <Pager layout={layout} navigationState={navigationState} keyboardDismissMode={keyboardDismissMode} swipeEnabled={swipeEnabled} enterOnce={enterOnce} openPageAnimate={openPageAnimate} onSwipeStart={onSwipeStart} onSwipeEnd={onSwipeEnd} onSwipe={onSwipe} overdrag={overdrag} onIndexChange={jumpToIndex}>
        {({ position, render, addEnterListener, jumpTo }) => {
            // All of the props here must not change between re-renders
            // This is crucial to optimizing the routes with PureComponent
            const sceneRendererProps = {
                position,
                layout,
                jumpTo,
            };
            return (<React.Fragment>
              {tabBarPosition === 'top' &&
                    renderTabBar(Object.assign(Object.assign({}, sceneRendererProps), { navigationState }))}
              {render(navigationState.routes.map((route, i) => {
                    return (<SceneView {...sceneRendererProps} addEnterListener={addEnterListener} key={route.key} index={i} lazy={typeof lazy === 'function' ? lazy({ route }) : lazy} lazyPreloadDistance={lazyPreloadDistance} navigationState={navigationState} containerStyle={sceneContainerStyle}>
                      {({ loading }) => loading
                            ? renderLazyPlaceholder({
                                route,
                            })
                            : renderScene(Object.assign(Object.assign({}, sceneRendererProps), { route }))}
                    </SceneView>);
                }))}
              {tabBarPosition === 'bottom' &&
                    renderTabBar(Object.assign(Object.assign({}, sceneRendererProps), { navigationState }))}
            </React.Fragment>);
        }}
      </Pager>
    </View>);
}
const styles = StyleSheet.create({
    pager: {
        flex: 1,
        overflow: 'hidden',
    },
});
export const KidTabView = createKidComponent(TabView);
