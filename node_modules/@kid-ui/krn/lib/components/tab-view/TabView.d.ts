import * as React from 'react';
import { StyleProp, ViewStyle, TextStyle } from 'react-native';
import type { Layout, NavigationState, Route, SceneRendererProps, PagerProps, Scene } from './types';
import type { TabBarProps } from '../tab-bar';
export declare type Props<T extends Route> = PagerProps & {
    onIndexChange: (index: number) => void;
    navigationState: NavigationState<T>;
    renderScene: (props: SceneRendererProps & {
        route: T;
    }) => React.ReactNode;
    renderLazyPlaceholder?: (props: {
        route: T;
    }) => React.ReactNode;
    renderTabBar?: (props: SceneRendererProps & {
        navigationState: NavigationState<T>;
    }) => React.ReactNode;
    renderIcon?: (scene: Scene<T> & {
        focused: boolean;
        color: string;
    }) => React.ReactNode;
    renderTabBarItem?: (props: any) => React.ReactElement;
    tabBarPosition?: 'top' | 'bottom';
    initialLayout?: Partial<Layout>;
    lazy?: ((props: {
        route: T;
    }) => boolean) | boolean;
    lazyPreloadDistance?: number;
    sceneContainerStyle?: StyleProp<ViewStyle>;
    style?: StyleProp<ViewStyle>;
    onTabPress?: TabBarProps<T>['onTabPress'];
    onTabLongPress?: TabBarProps<T>['onTabLongPress'];
    onTabBarItemsLayoutChange?: (routes: T[]) => void;
    shownPercent?: number;
    tabBarHeight?: number;
    tabBgColor?: string;
    indicatorWidth?: number;
    enableIndicatorAnimate?: boolean;
    indicatorColor?: string;
    fitTextWidth?: boolean;
    textNormalColor?: string;
    textSelectedColor?: string;
    underLineColor?: string;
    dividerColor?: string;
    showBottomShadow?: boolean;
    tabItemTextStyle?: StyleProp<TextStyle>;
    tabItemActiveTextStyle?: StyleProp<TextStyle>;
    tabItemStyle?: StyleProp<ViewStyle>;
    tabItemActiveStyle?: StyleProp<ViewStyle>;
    tabItemActiveStyleMode?: TabBarProps<T>['tabItemActiveStyleMode'];
    swipeEnabled?: boolean;
    enterOnce?: boolean;
    openPageAnimate?: boolean;
    lastTabItemStyle?: StyleProp<ViewStyle>;
    firstTabItemStyle?: StyleProp<ViewStyle>;
    tabBarContainerStyle?: StyleProp<ViewStyle>;
    tabBarScrollViewStyle?: StyleProp<ViewStyle>;
    tabBarScrollViewContentStyle?: TabBarProps<T>['tabBarScrollViewContentStyle'];
    indicatorStyle?: StyleProp<ViewStyle>;
    overdrag?: boolean;
    controlType?: 'normal' | 'debounce' | 'throttle';
    controlDuration?: number;
};
export declare const KidTabView: React.FC<Omit<import("@kds/react-native-pager-view").PagerViewProps, "children" | "keyboardDismissMode" | "scrollEnabled" | "initialPage" | "onPageScroll" | "onPageSelected" | "onPageScrollStateChanged"> & {
    keyboardDismissMode?: "auto" | "none" | "on-drag" | undefined;
    swipeEnabled?: boolean | undefined;
    onSwipeStart?: (() => void) | undefined;
    onSwipeEnd?: (() => void) | undefined;
    onSwipe?: ((index: number) => void) | undefined;
} & {
    onIndexChange: (index: number) => void;
    navigationState: NavigationState<Route>;
    renderScene: (props: SceneRendererProps & {
        route: Route;
    }) => React.ReactNode;
    renderLazyPlaceholder?: ((props: {
        route: Route;
    }) => React.ReactNode) | undefined;
    renderTabBar?: ((props: SceneRendererProps & {
        navigationState: NavigationState<Route>;
    }) => React.ReactNode) | undefined;
    renderIcon?: ((scene: Scene<Route> & {
        focused: boolean;
        color: string;
    }) => React.ReactNode) | undefined;
    renderTabBarItem?: ((props: any) => React.ReactElement) | undefined;
    tabBarPosition?: "top" | "bottom" | undefined;
    initialLayout?: Partial<Layout> | undefined;
    lazy?: boolean | ((props: {
        route: Route;
    }) => boolean) | undefined;
    lazyPreloadDistance?: number | undefined;
    sceneContainerStyle?: StyleProp<ViewStyle>;
    style?: StyleProp<ViewStyle>;
    onTabPress?: ((scene: Scene<Route> & import("./types").Event) => void) | undefined;
    onTabLongPress?: ((scene: Scene<Route>) => void) | undefined;
    onTabBarItemsLayoutChange?: ((routes: Route[]) => void) | undefined;
    shownPercent?: number | undefined;
    tabBarHeight?: number | undefined;
    tabBgColor?: string | undefined;
    indicatorWidth?: number | undefined;
    enableIndicatorAnimate?: boolean | undefined;
    indicatorColor?: string | undefined;
    fitTextWidth?: boolean | undefined;
    textNormalColor?: string | undefined;
    textSelectedColor?: string | undefined;
    underLineColor?: string | undefined;
    dividerColor?: string | undefined;
    showBottomShadow?: boolean | undefined;
    tabItemTextStyle?: StyleProp<TextStyle>;
    tabItemActiveTextStyle?: StyleProp<TextStyle>;
    tabItemStyle?: StyleProp<ViewStyle>;
    tabItemActiveStyle?: StyleProp<ViewStyle>;
    tabItemActiveStyleMode?: "normal" | "enlarge" | undefined;
    swipeEnabled?: boolean | undefined;
    enterOnce?: boolean | undefined;
    openPageAnimate?: boolean | undefined;
    lastTabItemStyle?: StyleProp<ViewStyle>;
    firstTabItemStyle?: StyleProp<ViewStyle>;
    tabBarContainerStyle?: StyleProp<ViewStyle>;
    tabBarScrollViewStyle?: StyleProp<ViewStyle>;
    tabBarScrollViewContentStyle?: StyleProp<ViewStyle>;
    indicatorStyle?: StyleProp<ViewStyle>;
    overdrag?: boolean | undefined;
    controlType?: "normal" | "debounce" | "throttle" | undefined;
    controlDuration?: number | undefined;
} & import("../../utils").KidProps>;
