import { DragAndDropRootContext } from './context';
import React, { useCallback, useState } from 'react';
import { debounceTime, Observable, Subject, throttleTime } from 'rxjs';
export const DragAndDropRoot = (props) => {
    const [poiMap, setPoiMap] = useState({});
    const [subjects, setSubjects] = useState({});
    const updatePoi = (context, newPoi) => setPoiMap((prevState) => (Object.assign(Object.assign({}, prevState), { [context]: newPoi })));
    const ensureSubjects = useCallback((context) => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const newSubjects = {
            startDrag: new Subject(),
            hoverEnter: new Subject(),
            hoverLeave: new Subject(),
            drop: new Subject(),
            cancelDrag: new Subject(),
            updatePoi: new Subject(),
            hoverEnterObserver: new Observable(),
            hoverLeaveObserver: new Observable(),
            dropObserver: new Observable(),
            dropAreaUpdatePoiObserver: new Observable(),
            dropAreaUpdatePoi: new Subject(),
        };
        newSubjects.hoverEnterObserver = (_b = (_a = newSubjects.hoverEnter) === null || _a === void 0 ? void 0 : _a.pipe) === null || _b === void 0 ? void 0 : _b.call(_a, throttleTime(50));
        newSubjects.hoverLeaveObserver = (_d = (_c = newSubjects.hoverLeave) === null || _c === void 0 ? void 0 : _c.pipe) === null || _d === void 0 ? void 0 : _d.call(_c, throttleTime(100));
        newSubjects.dropObserver = (_f = (_e = newSubjects.drop) === null || _e === void 0 ? void 0 : _e.pipe) === null || _f === void 0 ? void 0 : _f.call(_e, throttleTime(500));
        newSubjects.dropAreaUpdatePoiObserver = (_h = (_g = newSubjects.dropAreaUpdatePoi) === null || _g === void 0 ? void 0 : _g.pipe) === null || _h === void 0 ? void 0 : _h.call(_g, debounceTime(100));
        // 首屏的
        // update poit的debounce时间会影响快速响应的速度。不够流畅的话 可以考虑这里再快一点。
        // 中高端安卓机的measure大概在十几毫秒
        // 低端机大概在10~50不等，平均大概30
        (_m = (_l = (_k = (_j = newSubjects.updatePoi) === null || _j === void 0 ? void 0 : _j.pipe) === null || _k === void 0 ? void 0 : _k.call(_j, debounceTime(100))) === null || _l === void 0 ? void 0 : _l.subscribe) === null || _m === void 0 ? void 0 : _m.call(_l, (newPoi) => {
            updatePoi(context, newPoi);
        });
        setSubjects((prevState) => (Object.assign(Object.assign({}, prevState), { [context]: newSubjects })));
    }, []);
    const initContext = useCallback((context) => {
        if (!subjects[context]) {
            const defaultPoi = { x: 0, y: 0, width: 0, height: 0 };
            ensureSubjects(context);
            setPoiMap((prevState) => (Object.assign(Object.assign({}, prevState), { [context]: defaultPoi })));
        }
    }, [subjects, ensureSubjects]);
    return (<DragAndDropRootContext.Provider value={{
            poiMap,
            subjects,
            initContext,
        }}>
      {props.children}
    </DragAndDropRootContext.Provider>);
};
