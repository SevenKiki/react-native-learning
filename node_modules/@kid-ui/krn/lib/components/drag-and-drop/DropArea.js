import { View } from 'react-native';
import React, { useCallback, useContext, useEffect, useLayoutEffect, useRef } from 'react';
import { debounceTime } from 'rxjs';
import { useDrop } from './useDragAndDrop';
import { DropAreaContext } from './context';
export const DropArea = (props) => {
    const ref = useRef(null);
    // drop area context 不允许是数组
    const dndContext = useContext(DropAreaContext);
    const { subjects: dndHook } = useDrop(dndContext);
    const setDropAreaPoi = useCallback((e) => {
        // 初始化onLayout算得不准……拿到的x,y是错的。直接用measure计算代替
        dndHook === null || dndHook === void 0 ? void 0 : dndHook.dropAreaUpdatePoi.next(null);
    }, [dndHook]);
    useEffect(() => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        if (!dndHook) {
            return;
        }
        const subscribes = [
            (_b = (_a = dndHook.startDrag) === null || _a === void 0 ? void 0 : _a.subscribe) === null || _b === void 0 ? void 0 : _b.call(_a, () => { var _a; return (_a = props === null || props === void 0 ? void 0 : props.onStartDrag) === null || _a === void 0 ? void 0 : _a.call(props); }),
            (_d = (_c = dndHook.hoverEnterObserver) === null || _c === void 0 ? void 0 : _c.subscribe) === null || _d === void 0 ? void 0 : _d.call(_c, () => { var _a; return (_a = props === null || props === void 0 ? void 0 : props.onHoverEnter) === null || _a === void 0 ? void 0 : _a.call(props); }),
            (_f = (_e = dndHook.hoverLeaveObserver) === null || _e === void 0 ? void 0 : _e.subscribe) === null || _f === void 0 ? void 0 : _f.call(_e, () => { var _a; return (_a = props === null || props === void 0 ? void 0 : props.onHoverLeave) === null || _a === void 0 ? void 0 : _a.call(props); }),
            (_h = (_g = dndHook.drop) === null || _g === void 0 ? void 0 : _g.subscribe) === null || _h === void 0 ? void 0 : _h.call(_g, (data) => { var _a; return (_a = props === null || props === void 0 ? void 0 : props.onDrop) === null || _a === void 0 ? void 0 : _a.call(props, data); }),
            (_k = (_j = dndHook.cancelDrag) === null || _j === void 0 ? void 0 : _j.subscribe) === null || _k === void 0 ? void 0 : _k.call(_j, () => { var _a; return (_a = props === null || props === void 0 ? void 0 : props.onCancelDrag) === null || _a === void 0 ? void 0 : _a.call(props); }),
        ];
        return () => subscribes.forEach((subscribe) => subscribe.unsubscribe());
    }, [
        dndHook,
        props.onStartDrag,
        props.onHoverEnter,
        props.onHoverLeave,
        props.onDrop,
        props.onCancelDrag,
    ]);
    useLayoutEffect(() => {
        var _a, _b, _c, _d;
        if (!dndHook) {
            return;
        }
        const poiSubject = (_d = (_c = (_b = (_a = dndHook.dropAreaUpdatePoi) === null || _a === void 0 ? void 0 : _a.pipe) === null || _b === void 0 ? void 0 : _b.call(_a, debounceTime(200))) === null || _c === void 0 ? void 0 : _c.subscribe) === null || _d === void 0 ? void 0 : _d.call(_c, (next) => {
            var _a;
            (_a = ref.current) === null || _a === void 0 ? void 0 : _a.measure((...poi) => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
                const coor = {
                    width: Number((_b = poi === null || poi === void 0 ? void 0 : (_a = poi[2]).toFixed) === null || _b === void 0 ? void 0 : _b.call(_a)),
                    height: Number((_d = poi === null || poi === void 0 ? void 0 : (_c = poi[3]).toFixed) === null || _d === void 0 ? void 0 : _d.call(_c)),
                    x: Number((_f = poi === null || poi === void 0 ? void 0 : (_e = poi[4]).toFixed) === null || _f === void 0 ? void 0 : _f.call(_e)),
                    y: Number((_h = poi === null || poi === void 0 ? void 0 : (_g = poi[5]).toFixed) === null || _h === void 0 ? void 0 : _h.call(_g)),
                };
                (_k = (_j = dndHook.updatePoi) === null || _j === void 0 ? void 0 : _j.next) === null || _k === void 0 ? void 0 : _k.call(_j, coor);
            });
        });
        return () => poiSubject.unsubscribe();
    }, [dndHook]);
    return (
    // @ts-ignore
    <View testID="dnd-drop-area-container" ref={ref} style={props.style} onLayout={setDropAreaPoi}>
      {props.children}
    </View>);
};
export default DropArea;
