var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { StyleSheet, Text } from 'react-native';
import MaskedView from './mask-view';
import LinearGradient from 'react-native-linear-gradient';
import { useThemeValues } from '../../theme/useThemeValue';
import { rem } from '../../utils';
const styles = StyleSheet.create({
    defaultText: {
        color: '#FFF',
    },
    innerText: {
        opacity: 0,
    },
});
;
const LinearGradientText = (_a) => {
    var { children, text, textFont, textStyle, colors, start, end, locations, useAngle, angleCenter, angle, onPress, onLongPress, onLayout, 
    //@ts-ignore
    onTextLayout } = _a, props = __rest(_a, ["children", "text", "textFont", "textStyle", "colors", "start", "end", "locations", "useAngle", "angleCenter", "angle", "onPress", "onLongPress", "onLayout", "onTextLayout"]);
    const renderText = text || children;
    const gradientColours = useThemeValues(colors);
    const innerTextStyle = [
        { fontSize: textFont },
        styles.defaultText,
        textStyle,
    ];
    return (<MaskedView {...props} maskElement={(<Text style={innerTextStyle} {...props}>
                    {renderText}
                </Text>)}>
            <LinearGradient colors={gradientColours} start={start} end={end} locations={locations} useAngle={useAngle} angleCenter={angleCenter} angle={angle}>
                <Text testID='LinearGradientTextText' style={[
            innerTextStyle,
            styles.innerText
        ]} {...props} onPress={onPress} onLongPress={onLongPress} onLayout={onLayout} 
    //@ts-ignore
    onTextLayout={onTextLayout}>
                    {renderText}
                </Text>
            </LinearGradient>
        </MaskedView>);
};
LinearGradientText.defaultProps = {
    textFont: rem(14),
    colors: [
        { normal: '#ff4906', dark: '#ff4906' },
        { normal: '#FE3666', dark: '#FE3666' },
    ],
};
export default LinearGradientText;
export { LinearGradientText };
