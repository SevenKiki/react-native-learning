var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Dimensions, Platform } from 'react-native';
import { isIphoneX } from 'react-native-iphone-x-helper';
import { DialogShow } from '../dialog';
import { KidIcon } from '../icon';
import { DialogComponent } from '../alert/dialog-component';
import { renderBigButton } from '../alert/alert-component';
import { wrapFuc } from '../alert/common';
import { rem } from '../../utils';
const isX = isIphoneX();
const isIos = Platform.OS === 'ios';
const windowWidth = Dimensions.get('window').width;
export const AlertBottomCard = (arg = {}) => {
    const { kid, popupSet, topIconKid, confirmText = '我知道了', onConfirm = () => { } } = arg, rest = __rest(arg, ["kid", "popupSet", "topIconKid", "confirmText", "onConfirm"]);
    const bigButtonProps = {
        confirmText,
        onConfirm: () => {
            onConfirm();
            alert.close();
        },
    };
    let defaultProps = Object.assign(Object.assign({ descTextStyle: { maxWidth: rem(328) }, showButton: false, renderButton: wrapFuc(renderBigButton, bigButtonProps), renderCloseIcon: () => <KidIcon kid={'common_dialog_colse_normal'} size={20}></KidIcon>, renderTop: () => topIconKid ? <KidIcon kid={topIconKid} style={{ marginTop: rem(32) }} size={20}></KidIcon> : null, onPressCloseIcon: () => {
            alert.close();
        }, position: 'bottom', animate: 'slider', popupStyle: {
            width: windowWidth,
            paddingHorizontal: rem(11),
            backgroundColor: 'rgba(0,0,0,0)',
            bottom: isIos ? (isX ? rem(48) : rem(32)) : rem(16),
        }, maskBgColor: 'rgba(0,0,0,0.3)', popupSet }, popupSet), { borderRadius: rem(32), width: '100%' });
    const alert = DialogShow(Object.assign(Object.assign({}, defaultProps), rest), DialogComponent);
    return {
        close: () => {
            alert.close();
        },
        update: (props) => {
            const updateProps = Object.assign(Object.assign(Object.assign({}, defaultProps), rest), props);
            alert.update(updateProps);
        },
    };
};
