export declare type ThemeValue<T, K = never> = T | ({
    light?: T;
    dark?: T;
} & Record<keyof K, T>);
declare type UnWrap<T> = T extends {
    light?: any;
    dark?: any;
} ? T[keyof T] : T;
export declare const useThemeValue: <T>(kidKey: ThemeValue<T, never>, customTheme?: string | undefined) => T | UnWrap<T>;
export declare const useThemeValues: <T>(kidKeys: ThemeValue<T, never>[], customThemes?: string[] | undefined) => (T | UnWrap<T>)[];
export default useThemeValue;
