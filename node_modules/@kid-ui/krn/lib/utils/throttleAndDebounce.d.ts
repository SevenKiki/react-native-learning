/// <reference types="lodash" />
export declare function throttle(func: Function, wait?: number, options?: {
    leading: boolean;
} | any): {
    (): any;
    cancel(): void;
};
/**
 * @description: 创建一个防抖函数，该函数延迟调用 func 直到自上次调用去抖动函数后经过等待delay毫秒。
 * @param {function} func: 需要去抖动的函数
 * @param {number} delay: 等待的时间，单位毫秒
 * @return {*}
 */
export declare const transformToDebounce: (func: (...any: any) => any, delay: number) => import("lodash").DebouncedFunc<(...any: any) => any>;
/**
 * @description: 创建一个节流函数，每等待delay毫秒最多只调用一次func 。
 * @param {function} func: 需要节流的函数
 * @param {number} delay: 等待的时间，单位毫秒
 * @return {*}
 */
export declare const transformToThrottle: (func: (...any: any) => any, delay: number) => {
    (): any;
    cancel(): void;
};
export declare const transformOnPress: (func: (...any: any) => any, debounceDuration?: number | undefined, throttleDuration?: number | undefined) => ((...any: any) => any) | undefined;
