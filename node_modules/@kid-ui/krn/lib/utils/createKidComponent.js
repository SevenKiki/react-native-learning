import React from 'react';
import { Platform, NativeModules } from 'react-native';
import { _rem } from './rem';
import { safeParse } from './safeParse';
const KIDBridge = NativeModules.KIDBridge;
const UnitsOfLength = new Set([
    'diameter',
    'borderWidth',
    'textFont',
    'arrowWidth',
    'arrowHeight',
    'arrowCornerRadius',
    'bubbleOffsetX',
    'bubbleOffsetY',
    'bubbleCornerRadius',
    'width',
    'height',
    'cornerRadius',
]);
/**
 * 长度单位自适应转换
 */
const conversionUnitOfLength = (data) => {
    if (Platform.OS === 'web') {
        return data;
    }
    Object.keys(data).forEach((key) => {
        if (typeof data[key] === 'number' && UnitsOfLength.has(key)) {
            data[key] = _rem(data[key]);
        }
    });
    return data;
};
// 显然用 hooks 比高阶函数要好啊 ┓( ´∀` )┏
export const createKidComponent = (Component) => {
    return (props) => {
        var _a, _b, _c, _d;
        const { kid } = props;
        // console.log(JSON.stringify(safeParse(KIDBridge.getIconColorConfig('common_detail_add_black'))))
        const data = (_d = (kid && ((_c = (_b = safeParse((_a = KIDBridge === null || KIDBridge === void 0 ? void 0 : KIDBridge.getComponentStyleConfig) === null || _a === void 0 ? void 0 : _a.call(KIDBridge, kid))) === null || _b === void 0 ? void 0 : _b.widgetStyleData) === null || _c === void 0 ? void 0 : _c.styleConfig))) !== null && _d !== void 0 ? _d : {};
        return <Component {...conversionUnitOfLength(data)} {...props}/>;
    };
};
