import { useContext } from 'react';
import ThemeContext from './context';

export type ThemeValue<T, K = never> =
    | T
    | ({
          light?: T;
          dark?: T;
      } & Record<keyof K, T>);

type UnWrap<T> = T extends {
    light?: any;
    dark?: any;
}
    ? T[keyof T]
    : T;

export const useThemeValue = <T>(
    kidKey: ThemeValue<T>,
    customTheme?: string,
): UnWrap<ThemeValue<T>> => {
    const theme = useContext(ThemeContext);

    if (!kidKey || typeof kidKey !== 'object') {
        return kidKey as UnWrap<ThemeValue<T>>;
    }

    return (
        (kidKey as any)[customTheme || theme] ??
        (kidKey as any)[theme] ??
        (kidKey as any).normal ??
        kidKey
    );
}

export const useThemeValues = <T>(
    kidKeys: ThemeValue<T>[],
    customThemes?: string[],
): UnWrap<ThemeValue<T>>[] => {
    const theme = useContext(ThemeContext);

    return kidKeys.map((kidKey, index) => {
        if (!kidKey || typeof kidKey !== 'object') {
            return kidKey as UnWrap<ThemeValue<T>>;
        }

        return (
            (kidKey as any)[customThemes?.[index] || theme] ??
            (kidKey as any)[theme] ??
            (kidKey as any).normal ??
            kidKey
        );
    });
};

export default useThemeValue;
