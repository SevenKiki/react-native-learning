import React from 'react';
import { Platform, NativeModules } from 'react-native';
import { _rem } from './rem';
import { safeParse } from './safeParse';

const KIDBridge = NativeModules.KIDBridge;

export type KidProps = {
  kid?: string;
};

const UnitsOfLength = new Set([
  'diameter',
  'borderWidth',
  'textFont',
  'arrowWidth',
  'arrowHeight',
  'arrowCornerRadius',
  'bubbleOffsetX',
  'bubbleOffsetY',
  'bubbleCornerRadius',
  'width',
  'height',
  'cornerRadius',
]);

type dataType = Record<string, any | number>;

/**
 * 长度单位自适应转换
 */
const conversionUnitOfLength = (data: dataType) => {
  if (Platform.OS === 'web') {
    return data;
  }
  Object.keys(data).forEach((key: string) => {
    if (typeof data[key] === 'number' && UnitsOfLength.has(key)) {
      data[key] = _rem(data[key]);
    }
  });
  return data;
};

// 显然用 hooks 比高阶函数要好啊 ┓( ´∀` )┏
export const createKidComponent = <P,>(Component: React.FC<P>): React.FC<P & KidProps> => {
  return (props: P & KidProps) => {
    const { kid } = props;
    // console.log(JSON.stringify(safeParse(KIDBridge.getIconColorConfig('common_detail_add_black'))))
    const data =
      (kid && safeParse(KIDBridge?.getComponentStyleConfig?.(kid))?.widgetStyleData?.styleConfig) ??
      {};

    return <Component {...conversionUnitOfLength(data)} {...props} />;
  };
};