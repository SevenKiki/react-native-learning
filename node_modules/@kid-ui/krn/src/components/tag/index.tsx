import React from 'react';
import {
  View,
  Text,
  StyleProp,
  ViewStyle,
  TextStyle,
  StyleSheet,
} from 'react-native';
import { KidIcon } from '../icon';
import type { KidIconProps } from '../icon';
import { KidAvatar } from '../avatar';
import type { AvatarProps } from '../avatar';
import useStyles from './styles';

export interface TagProps {
  text: string; // 标签主文案
  description?: string; //标签副文案
  size?: 'normal' | 'small' | 'big'; // 标签尺寸
  backgroundColor?: string; // 标签背景色
  borderRadius?: number; // 标签圆角
  style?: StyleProp<ViewStyle>; // 标签样式
  textStyle?: StyleProp<TextStyle>; // 标签主文案样式
  textColor?: string; // 标签主文案颜色
  textFontSize?: number; // 标签主文案字体大小
  textLineHeight?: number; // 标签主文案字体行高
  descriptionTextStyle?: StyleProp<TextStyle>; // 标签副文案样式
  lineStyle?: StyleProp<ViewStyle>; // 主文案和副文案之间的分割线样式
  leftIcons?: Array<KidIconProps>; // 左边的图标
  leftIconSize?: number; // 左边图标尺寸
  rightIcons?: Array<KidIconProps>; // 右边的图标
  rightIconSize?: number; // 右边图标尺寸
  avatars?: Array<AvatarProps | string>;
  avatarSize?: number; // 头像的大小
  avatarWrapperStyle?: StyleProp<ViewStyle>;
  renderContent?: () => React.ReactNode;
}

const Tag: React.FC<TagProps> = (props: TagProps) => {
  const styles = useStyles(props);
  const {
    text,
    description,
    size,
    backgroundColor,
    borderRadius,
    style,
    textStyle,
    textColor,
    textFontSize,
    textLineHeight,
    descriptionTextStyle,
    lineStyle,
    leftIcons,
    leftIconSize,
    rightIcons,
    rightIconSize,
    avatars,
    avatarWrapperStyle,
    avatarSize,
    renderContent,
  } = props;

  const iconSize = React.useMemo(() => {
    const isSmall = size === 'small';
    const isBig = size === 'big';
    return isBig ? 16 : isSmall ? 12 : 14;
  }, [size]);

  const borderColor = React.useMemo(() => {
    const _bgc = StyleSheet.flatten(style)?.backgroundColor || backgroundColor || '#FE3666';
    return _bgc === '#FE3666' ? '#FE3666' : '#FFF';
  }, [backgroundColor, style]);

  const avatarsWrapperWidth = React.useMemo(() => {
    return avatars && avatars.length && 16 + (avatars.length - 1) * 8 + 5;
  }, [avatars]);

  const renderIcons = (
    position: 'left' | 'right',
    icons: Array<KidIconProps>,
    size?: number,
  ) => {
    const iconStyle = position === 'left' ? styles.leftIconStyle : styles.rightIconStyle;
    return (
      <View style={{ flexDirection: 'row' }}>
        {icons.map((icon: KidIconProps, index: number) => {
          return (
            <KidIcon
              key={`tag-${position}-icon-${index}`}
              size={size || iconSize}
              {...icon}
              style={[iconStyle, icon.style]}
            />
          )
        })}
      </View>
    )
  }

  return (
    <View style={[styles.wrapperStyle, { backgroundColor, borderRadius }, style]}>
      {typeof renderContent === 'function' ? (
        renderContent()
      ) : (
        <>
          {(avatars && avatars.length) ? (
            <View
              style={[
                {
                  flexDirection: 'row',
                  width: avatarsWrapperWidth,
                },
                avatarWrapperStyle
              ]}>
              {avatars.map((avatar: AvatarProps | string, index: number) => {
                const props = typeof avatar === 'string' ? { uri: avatar } : avatar;
                return (
                  <KidAvatar
                    key={`tag-avatar-${index}`}
                    diameter={avatarSize}
                    wrapStyle={[
                      styles.avatarStyle,
                      { zIndex: avatars.length - index, borderColor },
                      index === 0 ? styles.firstAvatarStyle : null,
                      index !== 0 ? { left: index * -8 } : null,
                    ]}
                    {...props}
                  />
                )
              })}
            </View>
          ) : null}
          {(leftIcons && leftIcons.length ) ? renderIcons('left', leftIcons, leftIconSize) : null}
          <Text style={[styles.textStyle, {color: textColor, fontSize: textFontSize, lineHeight: textLineHeight}, textStyle]}>{text}</Text>
          {description ? <View style={[styles.lineStyle, lineStyle]} /> : null}
          {description ? (
            <Text style={[styles.descriptionTextStyle, descriptionTextStyle]}>
              {description}
            </Text>
          ) : null}
          {(rightIcons && rightIcons.length) ? renderIcons('right', rightIcons, rightIconSize) : null}
        </>
      )}
    </View>
  );
};

Tag.defaultProps = {
  size: 'normal',
  text: '标签',
  backgroundColor: '#FE3666',
  borderRadius: 4,
  description: '',
  leftIcons: [],
  rightIcons: [],
  avatars: [],
  avatarSize: 16
};

export default Tag;
export { Tag };
