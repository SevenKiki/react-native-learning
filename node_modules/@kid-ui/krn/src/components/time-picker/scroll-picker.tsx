import React from 'react';
import { View, Text, ScrollView, PixelRatio, ViewStyle, TextStyle, Platform } from 'react-native';
import variables from './styles/variables';
import { range } from './utils';
import scrollpickerStyles from './styles';
import { getThemeValue, getKidFont } from '../../utils';
import { ThemeContext } from '../../theme/context';

export { scrollpickerStyles };

const px = 1 / PixelRatio.get();
const ITEM_HEIGHT = 50;
const CONTAINER_HEIGHT = 250;

interface ListItem {
    label: string | number;
    [propName: string]: any;
}

export interface ScrollPickerProps {
    style?: ViewStyle;
    textStyle?: TextStyle;
    selectedTextStyle?: TextStyle;
    list?: Array<Array<ListItem>> | any;
    value?: number[];
    proportion?: number[];
    offsetCount?: number;
    onChange?: Function;
    renderItem?: Function;
    topMaskViewStyle?: ViewStyle;
    bottomMaskViewStyle?: ViewStyle;
}

interface ScrollPickerState {
    list: Array<Array<ListItem>>;
    value: number[];
    selectedValue: number[];
    proportion: number[];
    isMomentumScroll: boolean;
}

export class ScrollPicker extends React.Component<
    ScrollPickerProps,
    ScrollPickerState
> {
    containerRef: View | null = null;
    scrollers: Array<any> = [];
    mountScrollTime: any = null;
    willReceivePropsScrollTime: any = null;

    static defaultProps = {
        style: {},
        textStyle: {},
        selectedTextStyle: {},
        list: [
            ['第一列第一项', '第一列第二项', '第一列第三项'],
            ['第二列第一项', '第二列第二项', '第二列第三项'],
            ['第三列第一项', '第三列第二项', '第三列第三项'],
        ],
        value: [],
        proportion: [2, 1, 1],
        offsetCount: 2,
        onChange: null,
        renderItem: null,
        topMaskViewStyle: {},
        bottomMaskViewStyle: {}
    };

    constructor(props: ScrollPickerProps) {
        super(props);
        this.containerRef = null;

        const data = this.initialize(props);

        this.state = {
            ...data,
            isMomentumScroll: false,
        };

        this.scrollers = [];
    }

    initialize(props: ScrollPickerProps) {
        const data = this.initData(props);

        return data;
    }

    initData(props: ScrollPickerProps) {
        let { list, proportion, value } = props;

        if (!list || !list.length) {
            throw TypeError('提供有效的 list 参数');
        }

        const { offsetCount } = this.props;

        const placeholderList = range(offsetCount!).map(() => {
            return '';
        });

        list = list.map((scrollItem: Array<ListItem>) => {
            const tmp: Array<ListItem | string> = scrollItem.concat();

            ([] as Array<ListItem | string>).push.apply(tmp, placeholderList);
            ([] as Array<ListItem | string>).unshift.apply(tmp, placeholderList);

            return tmp;
        });

        const length = list.length;

        if (
            !proportion ||
            !proportion.length ||
            (proportion && proportion.length && proportion.length !== length)
        ) {
            proportion = range(length).map(() => {
                return 1;
            });
        }

        if (
            !value ||
            !value.length ||
            (value && value.length && value.length !== length)
        ) {
            value = range(length).map(() => {
                return 0;
            });
        }

        const selectedValue = [...value];

        return {
            list,
            value,
            selectedValue,
            proportion,
        };
    }

    componentDidMount() {
        this.mountScrollTime = setTimeout(() => {
            const { value } = this.state;

            value.forEach((item, index) => {
                this.scrollTo(index, item);
            });
        }, 100);
    }


    UNSAFE_componentWillReceiveProps(nextProps: ScrollPickerProps) {
        if (nextProps !== this.props) {
            const data = this.initialize(nextProps);

            this.setState(
                {
                    ...data,
                },
                () => {
                    this.willReceivePropsScrollTime = setTimeout(() => {
                        const { value } = this.state;

                        value.forEach((item, index) => {
                            this.scrollTo(index, item);
                        });
                    }, 100);
                },
            );
        }
    }

    componentWillUnmount(): void {
        clearTimeout(this.mountScrollTime);
        clearTimeout(this.willReceivePropsScrollTime);
    }

    locateIndicator() {
        const styles = scrollpickerStyles;
        const { offsetCount, topMaskViewStyle, bottomMaskViewStyle } = this.props;

        return (
            <View style={[styles.indicator]} pointerEvents="none">
                <View
                    style={[
                        styles.indicator,
                        styles.indicatorMask,
                        {backgroundColor: getThemeValue({light: '#FFFFFF', dark: '#2B2B2F'}, this.context)},
                        {
                            bottom:
                                ITEM_HEIGHT +
                                offsetCount! * ITEM_HEIGHT,
                        },
                        {
                            borderBottomWidth: 1 * px,
                            borderBottomColor: getThemeValue({ light: '#E0E0E0', dark: '#222226' }, this.context),
                        },
                        topMaskViewStyle
                    ]}
                />

                <View
                    style={[
                        styles.indicator,
                        styles.indicatorMask,
                        {backgroundColor: getThemeValue({light: '#FFFFFF', dark: '#2B2B2F'}, this.context)},
                        {
                            top:
                                ITEM_HEIGHT +
                                offsetCount! * ITEM_HEIGHT,
                        },
                        {
                            borderTopWidth: 1 * px,
                            borderTopColor: getThemeValue({ light: '#E0E0E0', dark: '#222226' }, this.context),
                        },
                        bottomMaskViewStyle
                    ]}
                />
            </View>
        );
    }

    scrollTo(scrollIndex: number, targetItemIndex: number, animated: boolean = false) {
        this.scrollProper(
            scrollIndex,
            ITEM_HEIGHT! * targetItemIndex,
            animated,
        );
    }

    onScroll(scrollIndex: number, scrollHeight: number) {
        const targetItemIndex = this.scrollProper(scrollIndex, scrollHeight);

        const selectedValue = [...this.state.selectedValue];
        selectedValue[scrollIndex] = targetItemIndex;

        this.setState({
            selectedValue
        })

        this.props.onChange &&
            this.props.onChange(scrollIndex, targetItemIndex);
    }

    scrollProper(scrollIndex: number, scrollHeight: number, animated?: boolean) {
        const { list } = this.state;
        const { offsetCount } = this.props;
        const scrollListLength = list[scrollIndex].length;

        let newScrollHeight;

        const min = 0;
        const max = (scrollListLength - 2 * offsetCount! - 1) * ITEM_HEIGHT!;

        if (scrollHeight <= min) {
            newScrollHeight = min;
        } else if (scrollHeight >= max) {
            newScrollHeight = max;
        } else {
            const quotient = parseInt(
                String(scrollHeight / ITEM_HEIGHT!),
                10,
            );
            newScrollHeight = quotient * ITEM_HEIGHT!;

            const halfHeight = ITEM_HEIGHT! / 2;

            if (scrollHeight - newScrollHeight > halfHeight) {
                newScrollHeight += ITEM_HEIGHT!;
            }
        }

        this.scrollers[scrollIndex] &&
            this.scrollers[scrollIndex].scrollTo &&
            this.scrollers[scrollIndex].scrollTo({
                x: 0,
                y: newScrollHeight,
                animated: animated === false ? false : true,
            });

        const targetItemIndex = newScrollHeight / ITEM_HEIGHT!;
        return targetItemIndex;
    }

    render() {
        const styles = scrollpickerStyles;
        const { list, proportion } =
            this.state;

        return (
            <View
                ref={(el) => {
                    this.containerRef = el;
                }}
                style={[
                    styles.container,
                    {backgroundColor: getThemeValue({light: '#FFFFFF', dark: '#222226'}, this.context)},
                    this.props.style,
                    { height: CONTAINER_HEIGHT },
                ]}
            >
                {this.locateIndicator()}

                {list.map((scrollItem, scrollIndex) => {
                    return (
                        <View
                            key={scrollIndex}
                            style={[
                                styles.proportionWrapper,
                                { flex: Number(proportion[scrollIndex]) },
                            ]}
                        >
                            <ScrollView
                                nestedScrollEnabled
                                ref={(c) => {
                                    this.scrollers[scrollIndex] = c;
                                }}
                                scrollEventThrottle={16}
                                style={styles.scroller}
                                showsVerticalScrollIndicator={false}
                                contentContainerStyle={[
                                    styles.scrollerContentContainer,
                                ]}
                                onScrollEndDrag={(e) => {
                                    this.onScroll(
                                        scrollIndex,
                                        (e as any).nativeEvent.contentOffset.y,
                                    );
                                }}
                                onMomentumScrollBegin={(e) => {
                                    this.setState({
                                        isMomentumScroll: true,
                                    })
                                }}
                                onMomentumScrollEnd={(e) => {
                                    if (this.state.isMomentumScroll) {
                                        this.onScroll(
                                            scrollIndex,
                                            (e as any).nativeEvent.contentOffset.y,
                                        );
                                    }
                                    this.setState({
                                        isMomentumScroll: false
                                    })
                                }}
                            >
                                {scrollItem.map((item, index) => {
                                    return (
                                        <View
                                            key={index}
                                            style={[
                                                styles.targetItem,
                                                { height: ITEM_HEIGHT },
                                            ]}
                                        >
                                            {this.props.renderItem ? (
                                                this.props.renderItem(
                                                    item,
                                                    index,
                                                )
                                            ) : (
                                                <Text
                                                    style={[
                                                        styles.targetItemContent,
                                                        {
                                                            color: getThemeValue({ dark: '#B5B5B6', light: '#000000' }, this.context),
                                                            fontSize: 14,
                                                        },
                                                        index - 2 === this.state.selectedValue[scrollIndex] ? this.props.selectedTextStyle : null,
                                                        index - 2 !== this.state.selectedValue[scrollIndex] ? this.props.textStyle : null
                                                    ]}
                                                    numberOfLines={1}
                                                >
                                                    {typeof item === 'object'
                                                        ? item.label
                                                        : item}
                                                </Text>
                                            )}
                                        </View>
                                    );
                                })}
                            </ScrollView>
                        </View>
                    );
                })}
            </View>
        );
    }
}

ScrollPicker.contextType = ThemeContext;
