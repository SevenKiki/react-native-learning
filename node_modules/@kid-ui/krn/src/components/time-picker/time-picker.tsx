import React from 'react';
import { ScrollPicker, ScrollPickerProps } from './scroll-picker';
import { range, convert2Digit } from './utils';

export interface TimePickerProps extends ScrollPickerProps {
    hourStep?: number;
    minuteStep?: number;
    secondStep?: number;
    value?: any; // string
    onChange?: Function;
}

export class TimePicker extends React.Component<TimePickerProps, any> {
    static defaultProps = {
        ...ScrollPicker.defaultProps,
        hourStep: 1,
        minuteStep: 1,
        secondStep: 1,
    };

    constructor(props: TimePickerProps) {
        super(props);
        this.state = {
            ...this.init(props),
        };
    }

    init(props: TimePickerProps): any {
        const { hourStep, minuteStep, value } = props;
        const hourSum = 24;
        const minuteSum = 60;

        if (hourSum % hourStep! !== 0) {
            throw TypeError(`hourStep 参数 ${hourStep} 无效`);
        }

        if (minuteSum % minuteStep! !== 0) {
            throw TypeError(`minuteStep 参数 ${minuteStep} 无效`);
        }

        const hours = range(hourSum / hourStep!).map((item) => {
            item = convert2Digit(item * hourStep!);
            return {
                label: `${item}时`,
                value: item,
            };
        });

        const minutes = range(minuteSum / minuteStep!).map((item) => {
            item = convert2Digit(item * minuteStep!);
            return {
                label: `${item}分`,
                value: item,
            };
        });

        const list = [hours, minutes];

        let valueArray = [];
        let valueRet = [0, 0];
        if (value) {
            valueArray = value.split(':');
        }
        if (valueArray && valueArray.length && valueArray.length !== 2) {
            throw TypeError(`value 参数 ${value} 无效`);
        }

        if (valueArray && valueArray.length) {
            valueArray.forEach((valueItem: any, valueIndex: number) => {
                const tag = list[valueIndex].some((targetItem, targetIndex) => {
                    if (targetItem.value === valueItem) {
                        valueRet[valueIndex] = targetIndex;
                        return true;
                    } else {
                        return false;
                    }
                });

                if (!tag) {
                    throw TypeError(
                        `value 参数${
                            valueIndex === 0
                                ? '时'
                                : valueIndex === 1
                                ? '分'
                                : '秒'
                        }字段 ${valueItem} 无效`,
                    );
                }
            });
        }

        const data = {
            value: valueRet,
            list,
        };
        return data;
    }

    UNSAFE_componentWillReceiveProps(nextProps: TimePickerProps) {
        if (nextProps.value !== this.props.value) {
            this.setState({
                ...this.state,
                ...this.init(nextProps),
            });
        }
    }

    handleChange = (columnIndex: number, rowIndex: number) => {
        const { list, value } = this.state;
        const tmpValue = value.concat();
        tmpValue.splice(columnIndex, 1, rowIndex);

        const ret = tmpValue.map((valueItem: any, valueIndex: number) => {
            return list[valueIndex][valueItem].value;
        });

        let newValue = [...value];
        newValue[columnIndex] = rowIndex;
        this.setState({
            value: newValue,
        });
        this.props.onChange && this.props.onChange(ret.join(':'));
    };

    render() {
        const { value, list } = this.state;
        return (
            <ScrollPicker
                {...this.props}
                value={value}
                list={list}
                onChange={this.handleChange}
            />
        );
    }
}
