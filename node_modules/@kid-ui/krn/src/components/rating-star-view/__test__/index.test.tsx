import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import { RatingStarView } from '../index';
import { PanGestureHandler, State } from 'react-native-gesture-handler';

describe('testing Rating-Star-View', () => {
    it('test click', () => {
        const onSwipeRating = jest.fn();
        const { UNSAFE_queryByType, getByTestId } = render(
            <RatingStarView
                totalCount={10}
                initCount={2.5}
                onSwipeRating={onSwipeRating}
            />,
        );
        const gestureHandler = UNSAFE_queryByType(PanGestureHandler);
        const viewRoot = getByTestId('ratingViewRoot');
        fireEvent(viewRoot, 'onLayout', {
            nativeEvent: { layout: { x: 0, width: 159 } },
        });
        // test click exceed half
        fireEvent(gestureHandler!, 'onHandlerStateChange', {
            nativeEvent: { x: 168, state: State.BEGAN },
        });
        expect(onSwipeRating)?.toHaveBeenCalledTimes(0);
        // test click negative
        fireEvent(gestureHandler!, 'onHandlerStateChange', {
            nativeEvent: { x: -1, state: State.BEGAN },
        });
        expect(onSwipeRating)?.toHaveBeenCalledTimes(0);
        // test click min
        fireEvent(gestureHandler!, 'onHandlerStateChange', {
            nativeEvent: { x: 0, state: State.BEGAN },
        });
        expect(onSwipeRating)?.toHaveBeenCalledWith(0.5);
        // test click max
        fireEvent(gestureHandler!, 'onHandlerStateChange', {
            nativeEvent: { x: 159, state: State.BEGAN },
        });
        expect(onSwipeRating)?.toHaveBeenCalledWith(10);
        // test click exceed half
        fireEvent(gestureHandler!, 'onHandlerStateChange', {
            nativeEvent: { x: 167, state: State.BEGAN },
        });
        expect(onSwipeRating)?.toHaveBeenCalledWith(10);
        // test click on star
        const singleSize = 15;
        const space = 1;
        for (let i = 0.5; i <= 10; i += 0.5) {
            const tapX =
                singleSize * i + (Math.max(0, Math.floor(i)) - 1) * space;
            fireEvent(gestureHandler!, 'onHandlerStateChange', {
                nativeEvent: { x: tapX, state: State.BEGAN },
            });
            expect(onSwipeRating)?.toHaveBeenCalledWith(i);
        }
        // test click on space
        for (let i = 1; i < 10; i++) {
            const tapX =
                singleSize * i + (Math.max(0, Math.floor(i)) - 1) * space + 0.5;
            fireEvent(gestureHandler!, 'onHandlerStateChange', {
                nativeEvent: { x: tapX, state: State.BEGAN },
            });
            expect(onSwipeRating)?.toHaveBeenCalledWith(i);
        }
        // test round
        fireEvent(gestureHandler!, 'onHandlerStateChange', {
            nativeEvent: { x: 7.6, state: State.BEGAN },
        });
        expect(onSwipeRating)?.toHaveBeenCalledWith(1);
    });
});
