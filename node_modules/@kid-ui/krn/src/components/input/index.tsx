import React from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  TouchableWithoutFeedback,
  NativeSyntheticEvent,
  TextInputContentSizeChangeEventData,
  TextInputFocusEventData
}
  from 'react-native';
import type { InputProps } from './types';
import TextInput from './Input';
import { KidIcon } from '../icon';
import { KidBadgeView } from '../badge';
import useStyles, {
  LABEL_FONTSIZE,
  CONTAINER_HEIGHT_NORMAL,
  EXTRA_FONTSIZE
} from './styles';
import common_baseflat_deletetext_24 from '@ks/kw/icon/output/common/baseflat/common_baseflat_deletetext_24';
import common_base_next_24 from '@ks/kw/icon/output/common/base/common_base_next_24';
import { useThemeValue } from '../../theme/useThemeValue';
import { ThemeContext } from '../../theme/context';

const MIN_LABEL_NUMBER = 4;

const noop = () => { }

const normalizeValue = (value?: string) => {
  if (typeof value === 'undefined' || value === null) {
    return ''
  }
  return value
}

const keyboardTypeArray = [
  'default',
  'email-address',
  'numeric',
  'phone-pad',
  'ascii-capable',
  'numbers-and-punctuation',
  'url',
  'number-pad',
  'name-phone-pad',
  'decimal-pad',
  'twitter',
  'web-search',
]

const fixControlledValue = (value?: string) => {
  if (typeof value === 'undefined' || value === null) {
    return '';
  }
  return value;
};


export type { InputProps };

const Input: React.FC<InputProps> = (props) => {
  const theme = React.useContext(ThemeContext);
  const styles = useStyles(props, { theme });
  const inputRef = React.useRef<any>();
  const [focused, setFocused] = React.useState(false);
  const [count, setCount] = React.useState(fixControlledValue(props.value || props.defaultValue).length);
  const [isEditing, setIsEditing] = React.useState(false);
  const [inputHeight, setInputHeight] = React.useState(24);

  const {
    required,
    showLine,
    showArrow,
    showStatistics,
    type,
    editable,
    clearable,
    children,
    error,
    extra,
    labelNumber,
    onExtraPress,
    onErrorPress,
    onContentSizeChange,
    onBlur,
    onChange,
    onFocus,
    disabled,
    containerStyle,
    textContainerStyle,
    badgeStyle,
    lineStyle,
    inputContainerStyle,
    errorContainerStyle,
    errorTextStyle,
    clearContainerStyle,
    clearIconStyle,
    arrowContainerStyle,
    arrowIconStyle,
    statisticsContainerStyle,
    statisticsLeftStyle,
    statisticsRightStyle,
    extraContainerStyle,
    showBottomLine,
    bottomLineStyle,
    ...restProps
  } = props

  const { value, maxLength, defaultValue, style, multiline } = restProps;

  const _onChange = (text: string) => {
    switch (type) {
      case 'bankCard':
        text = text.replace(/\D/g, '')
        if (maxLength! > 0) {
          text = text.substring(0, maxLength)
        }
        text = text.replace(/\D/g, '').replace(/(....)(?=.)/g, '$1 ')
        break
      case 'phone':
        text = text.replace(/\D/g, '').substring(0, 11)
        const valueLen = text.length
        if (valueLen > 3 && valueLen < 8) {
          text = `${text.substr(0, 3)} ${text.substr(3)}`
        } else if (valueLen >= 8) {
          text = `${text.substr(0, 3)} ${text.substr(3, 4)} ${text.substr(7)}`
        }
        break
      case 'password':
        break
      default:
        break
    }
    if (onChange) {
      onChange(text)
    }
    setCount(text.length);
    setIsEditing(true);
  }

  const onInputBlur = (e: NativeSyntheticEvent<TextInputFocusEventData>) => {
    setFocused(false)
    setIsEditing(false)
    onBlur && onBlur(e);
  }

  const onInputFocus = (e: NativeSyntheticEvent<TextInputFocusEventData>) => {
    setFocused(true);
    setIsEditing(true);
    onFocus && onFocus(e);
  }

  const onInputClear = () => {
    if (inputRef.current && (isEditing && count)) {
      inputRef.current.clear()
      onChange && onChange('')
      setCount(0);
    }
  }

  const _onContentSizeChange = (e: NativeSyntheticEvent<TextInputContentSizeChangeEventData>) => {
    const { width, height } = e.nativeEvent.contentSize;
    setInputHeight(height);
    onContentSizeChange && onContentSizeChange(e)
  }


  const valueProps = React.useMemo(() => {
    if ('value' in props) {
      return {
        value: normalizeValue(value),
      }
    } else {
      return {
        defaultValue,
      }
    }
  }, [value, defaultValue])


  const textStyle = React.useMemo(() => {
    return { width: LABEL_FONTSIZE * (labelNumber! > MIN_LABEL_NUMBER ? MIN_LABEL_NUMBER : labelNumber!) + labelNumber! - 1 }
  }, [labelNumber])

  const disabledStyle = React.useMemo(() => {
    return disabled ? styles.inputDisabled : {};
  }, [disabled])

  const extraStyle = React.useMemo(() => {
    return {
      width:
        typeof extra === 'string' && (extra as string).length > 0
          ? (extra as string).length * EXTRA_FONTSIZE
          : 0,
    }
  }, [extra])

  const keyboardType = React.useMemo(() => {
    if (type === 'number') {
      return 'numeric';
    } else if (type === 'bankCard') {
      return 'number-pad'; // 不带小数点
    } else if (type === 'phone') {
      return 'phone-pad';
    } else if (type && keyboardTypeArray.indexOf(type) > -1) {
      return type;
    }
    return 'default';
  }, [type])

  const isShowClearBtn = React.useMemo(() => {
    return editable && clearable
  }, [editable, clearable])

  const [width, setWidth] = React.useState(0);

  const placeholderTextColor = useThemeValue({ light: '#9C9C9C', dark: '#909092' });

  return (
    <View style={[styles.container, containerStyle]}>
      <View style={[styles.prefix, textContainerStyle]}>
        {children ? (
          typeof children === 'string' ? (
            <Text style={[styles.text, textStyle]}>{children}</Text>
          ) : (
            <View style={textStyle}>
              {children}
            </View>
          )
        ) : null}
        {required ? (
          <KidBadgeView kid='style_badge_small' diameter={4} style={[styles.badge, badgeStyle]} />
        ) : null}
      </View>
      <View style={styles.content} onLayout={(e) => { !width && setWidth(e.nativeEvent.layout.width) }}>
        {showLine ? (
          <View style={[styles.line, { height: multiline ? inputHeight : 24 }, lineStyle]} />
        ) : null}
        <View style={[styles.inputContainer, inputContainerStyle]}>
          <TextInput
            testID='InputTextInput'
            editable={!disabled && editable}
            underlineColorAndroid="transparent"
            placeholderTextColor={placeholderTextColor}
            ref={inputRef}
            {...restProps}
            {...valueProps}
            style={[
              styles.input,
              error ? styles.inputErrorColor : null,
              disabledStyle,
              // 支持自定义样式
              style,
            ]}
            //@ts-ignore
            keyboardType={keyboardType}
            onChange={(event: any) => _onChange(event.nativeEvent.text)}
            secureTextEntry={type === 'password'}
            onBlur={onInputBlur}
            onFocus={onInputFocus}
            onContentSizeChange={_onContentSizeChange}
          />
          {error ? (
            <TouchableWithoutFeedback onPress={onErrorPress}>
              <View style={errorContainerStyle}>
                {typeof error === 'string' ? (
                  <Text style={[styles.error, errorTextStyle]}>{error}</Text>
                ) : (
                  error
                )}
              </View>
            </TouchableWithoutFeedback>
          ) : null}
        </View>
        {isShowClearBtn ? (
          <TouchableOpacity
            testID='InputTouchableOpacityClear'
            style={[styles.clear, clearContainerStyle]}
            onPress={onInputClear}
            hitSlop={{ top: 15, left: 15, bottom: 15, right: 15 }}>
            <KidIcon
              size={20}
              kid='common_baseflat_deletetext_24'
              kidConfig={common_baseflat_deletetext_24}
              style={[{ tintColor: '#C6C6C6', opacity: (isEditing && count) ? 1 : 0 }, clearIconStyle]}
            />
          </TouchableOpacity>
        ) : null}
        {showArrow ? (
          <TouchableOpacity
            activeOpacity={1}
            style={[styles.arrow, arrowContainerStyle]}
            hitSlop={{ top: 5, left: 5, bottom: 5, right: 5 }}>
            <KidIcon
              kid='common_base_next_24'
              kidConfig={common_base_next_24}
              size={16}
              style={[{ tintColor: '#9C9C9C' }, arrowIconStyle]}
            />
          </TouchableOpacity>
        ) : null}
        {showStatistics && maxLength ? (
          <Text style={[styles.statistics, statisticsContainerStyle]}>
            <Text testID='InputStatisticsCount' style={[{ color: count === maxLength ? '#FE3666' : '#9C9C9C' }, statisticsLeftStyle]}>{count}</Text>
            <Text style={statisticsRightStyle}>/{maxLength}</Text>
          </Text>
        ) : null}
        {/* 只在有 value 的受控模式下且在编辑状态时展示自定义的安卓 clear 按钮 */}
        {extra ? (
          <TouchableWithoutFeedback onPress={onExtraPress}>
            <View style={extraContainerStyle}>
              {typeof extra === 'string' ? (
                <Text style={[styles.extra, extraStyle]}>{extra}</Text>
              ) : (
                extra
              )}
            </View>
          </TouchableWithoutFeedback>
        ) : null}
      </View>
      {showBottomLine && (
        <View style={
          [
            styles.bottomLine,
            {
              width: width - 40 - (required ? 7 : 0)
            },
            bottomLineStyle
          ]
        } />
      )}
    </View>
  )
}

Input.defaultProps = {
  labelNumber: 4,
  disabled: false,
  editable: true,
  clearable: false,
  onChange: noop,
  onBlur: noop,
  onFocus: noop,
  extra: '',
  onExtraPress: noop,
  error: false,
  onErrorPress: noop,
  labelPosition: 'left',
  textAlign: 'left'
}

export { Input };
export default Input;