import React from 'react';
import { Text } from 'react-native';
import { render, fireEvent } from '@testing-library/react-native';
import { Input } from '../index';

describe('testing Input', () => {
  it('props: defaultprops', () => {
    const { toJSON, getByTestId } = render(<Input/>)
    expect(toJSON()).toMatchSnapshot();
    const input = getByTestId('InputTextInput');
    fireEvent(input, 'onChange', {nativeEvent: {text: '这是输入的内容'}});
  })

  it('props: placeholder', () => {
    const { toJSON } = render(<Input placeholder='请输入电话号码'>电话号码</Input>)
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: value', () => {
    const { toJSON } = render(<Input value='89700145'>电话号码</Input>)
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: value invalid', () => {
    const { toJSON } = render(<Input value={undefined}>电话号码</Input>)
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: children 1', () => {
    const { toJSON } = render(<Input>这是一个很长的标签</Input>)
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: children 2', () => {
    const { toJSON } = render(<Input><Text>这是标签</Text></Input>)
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: required', () => {
    const { toJSON } = render(<Input required>电话号码</Input>)
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: showLine', () => {
    const { toJSON } = render(<Input showLine>电话号码</Input>)
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: showArrow', () => {
    const { toJSON } = render(<Input showArrow>电话号码</Input>)
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: maxLength showStatics', () => {
    const { toJSON } = render(<Input maxLength={20} showStatistics>电话号码</Input>)
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: clearable', () => {
    const { toJSON } = render(<Input clearable >电话号码</Input>)
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: error 1', () => {
    const { toJSON } = render(<Input error='报错提示' >电话号码</Input>)
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: error 2', () => {
    const { toJSON } = render(<Input error={<Text>这是错误提示</Text>} >电话号码</Input>)
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: extra 1', () => {
    const { toJSON } = render(<Input extra='发送验证码' >电话号码</Input>)
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: extra 2', () => {
    const { toJSON } = render(<Input extra={<Text>发送验证码</Text>} >电话号码</Input>)
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: editable', () => {
    const { toJSON } = render(<Input editable={false} >电话号码</Input>)
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: disabled', () => {
    const { toJSON } = render(<Input disabled >电话号码</Input>)
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: type', () => {
    const { toJSON: toJSON1 } = render(<Input type='number' >电话号码</Input>)
    expect(toJSON1()).toMatchSnapshot();

    const { toJSON: toJSON2 } = render(<Input type='email-address' >电话号码</Input>)
    expect(toJSON2()).toMatchSnapshot();
  })

  it('props: focused', () => {
    const { toJSON } = render(<Input focused>电话号码</Input>)
    expect(toJSON()).toMatchSnapshot();
  })

  it('events: onChange', () => {
    const change = jest.fn();
    const { getByTestId } = render(<Input onChange={change}>电话号码</Input>);
    const input = getByTestId('InputTextInput');
    fireEvent(input, 'onChange', {nativeEvent: {text: '这是输入的内容'}});
    expect(change).toHaveBeenLastCalledWith('这是输入的内容')
  })

  it('events: onChange, props type = bankCard', () => {
    const change = jest.fn();
    const { getByTestId } = render(<Input type='bankCard' onChange={change}>银行卡号</Input>);
    const input = getByTestId('InputTextInput');
    fireEvent(input, 'onChange', {nativeEvent: {text: '3325897656437654'}});
    expect(change).toHaveBeenLastCalledWith('3325 8976 5643 7654')
  })

  it('events: onChange, props type = bankCard maxLength = 10', () => {
    const change = jest.fn();
    const { getByTestId } = render(<Input maxLength={10} type='bankCard' clearable showStatistics onChange={change}>银行卡号</Input>);
    const input = getByTestId('InputTextInput');
    fireEvent(input, 'onChange', {nativeEvent: {text: '3325897656437654'}});
    expect(change).toHaveBeenLastCalledWith('3325 8976 56')
  })

  it('events: onChange, props type = phone 8', () => {
    const change = jest.fn();
    const { getByTestId } = render(<Input type='phone' onChange={change} clearable>电话号码</Input>);
    const input = getByTestId('InputTextInput');
    fireEvent(input, 'onChange', {nativeEvent: {text: '95555'}});
    expect(change).toHaveBeenLastCalledWith('955 55')
  })

  it('events: onChange, props type = phone 11', () => {
    const change = jest.fn();
    const { getByTestId } = render(<Input type='phone' onChange={change}>电话号码</Input>);
    const input = getByTestId('InputTextInput');
    fireEvent(input, 'onChange', {nativeEvent: {text: '15478659870'}});
    expect(change).toHaveBeenLastCalledWith('154 7865 9870')
  })

  it('events: onChange, props type = password', () => {
    const change = jest.fn();
    const { getByTestId } = render(<Input type='password' onChange={change}>密码</Input>);
    const input = getByTestId('InputTextInput');
    fireEvent(input, 'onChange', {nativeEvent: {text: '123456789'}});
    expect(change).toHaveBeenLastCalledWith('123456789')
  })

  it('events: onBlur', () => {
    const blur = jest.fn();
    const { getByTestId } = render(<Input type='password' onBlur={blur}>密码</Input>);
    const input = getByTestId('InputTextInput');
    fireEvent(input, 'onBlur');
    expect(blur).toHaveBeenCalled();
  })
  
  it('events: onFocus', () => {
    const focus = jest.fn();
    const { getByTestId } = render(<Input type='password' onFocus={focus}>密码</Input>);
    const input = getByTestId('InputTextInput');
    fireEvent(input, 'onFocus');
    expect(focus).toHaveBeenCalled();
  })

  it('events: onInputClear', () => {
    const change = jest.fn();
    const { getByTestId } = render(<Input type='password' clearable onChange={change}>密码</Input>);
    const clear = getByTestId('InputTouchableOpacityClear');
    const input = getByTestId('InputTextInput');
    fireEvent(input, 'onChange', {nativeEvent: {text: '123456789'}});
    fireEvent(clear, 'onPress');
    expect(change).toHaveBeenLastCalledWith('')
  })

  it('events: onContentSizeChange', () => {
    const change = jest.fn();
    const { getByTestId } = render(<Input multiline onContentSizeChange={change}>密码</Input>);
    const input = getByTestId('InputTextInput');
    fireEvent(input, 'onContentSizeChange', {nativeEvent: {contentSize: {width: 414, height: 50}}});
    expect(change).toHaveBeenCalled();
  })
})