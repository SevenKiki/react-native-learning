import React from 'react';
import { Text, ScrollView, View, Animated } from 'react-native';
import { render, fireEvent } from '@testing-library/react-native';
import { renderHook } from '@testing-library/react-hooks';
import { NavBar } from '../index';

const useScroll = () => {
  const scrollY = React.useRef(new Animated.Value(0)).current;

  const onScroll = Animated.event(
    [{ nativeEvent: { contentOffset: { y: scrollY } } }],
    {
      useNativeDriver: false,
      listener: (e) => {
        console.log('onScroll')
      }
    }
  )

  return {
    scrollY,
    onScroll
  }
}

describe('testing NavBar', () => {
  it('props: null', () => {
    const { toJSON } = render(<NavBar />);
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: left title right', () => {
    const { toJSON } = render(
      <NavBar
        title='关注'
        left={{
          config: [
            {
              iconKid: 'common_base_return_24'
            }
          ]
        }}
        right={{
          config: [
            {
              text: '反馈'
            }
          ]
        }}
      />
    )
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: isCapsule', () => {
    const { toJSON } = render(
      <NavBar
        title='关注'
        left={{
          config: [
            {
              iconKid: 'common_base_return_24'
            }
          ]
        }}
        right={{
          config: [
            {
              iconKid: 'common_base_shop_24',
            },
            {
              iconKid: 'common_base_inforsma_24',
            },
          ],
          isCapsule: true
        }}
      />
    )
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: render', () => {
    const { toJSON } = render(
      <NavBar
        renderLeft={() => <Text>左边</Text>}
        renderMiddle={() => <Text>中间</Text>}
        renderRight={() => <Text>右边</Text>}
      />
    )
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: right btn', () => {
    const { toJSON } = render(
      <NavBar
        left={{
          config: [
            {
              iconKid: 'common_base_return_24',
            },
          ]
        }}
        title='关注'
        right={{
          config: [
            {
              btn: {
                text: '超小'
              }
            }
          ]
        }}
      />
    )
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: isAnimatedGradient scrollY', () => {
    const { result } = renderHook(() => useScroll());
    const { scrollY, onScroll } = result.current;
    const { toJSON, UNSAFE_getByType } = render(
      <View>
        <NavBar
          isAnimatedGradient
          scrollY={scrollY}
          left={{
            config: [
              {
                iconKid: 'common_base_return_24',
              },
              {
                text: '回退',
              },
            ]
          }}
          title='关注'
        />
        <ScrollView scrollEventThrottle={16} onScroll={onScroll}>
          <View style={{ width: '100%' }}>
            {Array(100).fill(0).map((_, index) => (
              <Text key={index} style={{ textAlign: 'center' }}>KID-UI NAVBAR EXAMPLE</Text>
            ))}
          </View>
        </ScrollView>
      </View>
    )
    expect(toJSON()).toMatchSnapshot();
    const scroll = UNSAFE_getByType(ScrollView);
    fireEvent(scroll, 'onScroll', {nativeEvent: { contentOffset: {y: 10} }});
    expect((scrollY as any).__getValue()).toEqual(10);
  })

  it('events: item onPress', () => {
    const press = jest.fn();
    const { getByTestId } = render(
      <NavBar
        left={{
          config: [
            {
              iconKid: 'common_base_return_24',
            },
            {
              iconKid: 'common_base_return_24',
              onPress: press
            },
          ]
        }}
        title='关注'
      />
    )
    const icon1 = getByTestId('NavBarleftIcon0');
    const icon2 = getByTestId('NavBarleftIcon1');
    fireEvent(icon1, 'onPress');
    fireEvent(icon2, 'onPress');
    expect(press).toHaveBeenCalled();
  })

  it('events: children onScroll', () => {
    const scroll = jest.fn();
    const { UNSAFE_getByType } = render(
      <View>
        <NavBar
          left={{
            config: [
              {
                iconKid: 'common_base_return_24',
              },
            ]
          }}
          title='关注'

        />
        <ScrollView nestedScrollEnabled style={{ width: '100%', height: 200 }} onScroll={scroll}>
          <View style={{ width: '100%' }}>
            {Array(10).fill(0).map((_,i) => (
              <Text key={i} style={{ textAlign: 'center' }}>KID-UI NAVBAR EXAMPLE</Text>
            ))}
          </View>
        </ScrollView>
      </View>
    )
    const view = UNSAFE_getByType(ScrollView);
    fireEvent(view, 'onScroll', { nativeEvent: { contentOffset: { y: 10 } } });
    expect(scroll).toHaveBeenCalled();
  })
})