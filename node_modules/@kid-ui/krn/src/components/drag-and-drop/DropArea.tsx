import type { LayoutChangeEvent, LayoutRectangle, ViewStyle } from 'react-native';
import { View } from 'react-native';
import React, { useCallback, useContext, useEffect, useLayoutEffect, useRef } from 'react';
import { debounceTime } from 'rxjs';
import { useDrop } from './useDragAndDrop';
import type { ContextType } from './context';
import { DropAreaContext } from './context';

export type IDropAreaProps = {
  onStartDrag?: () => void;
  onHoverEnter?: () => void;
  onHoverLeave?: () => void;
  onCancelDrag?: () => void;
  onDrop?: (data: unknown) => void;
  onLayout?: (e: LayoutRectangle) => void;
  style?: ViewStyle | ViewStyle[];
};

type IMeasure = {
  measure: (arg: (...poi: number[]) => void) => void;
};

export const DropArea: React.FC<IDropAreaProps> = (props) => {
  const ref = useRef<IMeasure>(null);
  // drop area context 不允许是数组
  const dndContext = useContext(DropAreaContext) as ContextType;
  const { subjects: dndHook } = useDrop(dndContext);

  const setDropAreaPoi = useCallback(
    (e: LayoutChangeEvent) => {
      // 初始化onLayout算得不准……拿到的x,y是错的。直接用measure计算代替
      dndHook?.dropAreaUpdatePoi.next(null);
    },
    [dndHook],
  );

  useEffect(() => {
    if (!dndHook) {
      return;
    }
    const subscribes = [
      dndHook.startDrag?.subscribe?.(() => props?.onStartDrag?.()),
      dndHook.hoverEnterObserver?.subscribe?.(() => props?.onHoverEnter?.()),
      dndHook.hoverLeaveObserver?.subscribe?.(() => props?.onHoverLeave?.()),
      dndHook.drop?.subscribe?.((data) => props?.onDrop?.(data)),
      dndHook.cancelDrag?.subscribe?.(() => props?.onCancelDrag?.()),
    ];
    return () => subscribes.forEach((subscribe) => subscribe.unsubscribe());
  }, [
    dndHook,
    props.onStartDrag,
    props.onHoverEnter,
    props.onHoverLeave,
    props.onDrop,
    props.onCancelDrag,
  ]);

  useLayoutEffect(() => {
    if (!dndHook) {
      return;
    }
    const poiSubject = dndHook.dropAreaUpdatePoi?.pipe?.(debounceTime(200))?.subscribe?.((next) => {
      ref.current?.measure((...poi: number[]) => {
        const coor = {
          width: Number(poi?.[2].toFixed?.()),
          height: Number(poi?.[3].toFixed?.()),
          x: Number(poi?.[4].toFixed?.()),
          y: Number(poi?.[5].toFixed?.()),
        };
        dndHook.updatePoi?.next?.(coor);
      });
    });
    return () => poiSubject.unsubscribe();
  }, [dndHook]);

  return (
    // @ts-ignore
    <View testID="dnd-drop-area-container" ref={ref} style={props.style} onLayout={setDropAreaPoi}>
      {props.children}
    </View>
  );
};

export default DropArea;
