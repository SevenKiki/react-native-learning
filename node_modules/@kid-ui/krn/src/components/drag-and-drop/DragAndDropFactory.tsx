import type { IDraggableProps } from './Draggable';
import { createDraggableElement, createDropElement } from './factory';
import type { PropsWithChildren } from 'react';
import React from 'react';
import type { IDropAreaProps } from './DropArea';

export class DragAndDropFactory {
  static id = 0;

  static makeAnonymousContext() {
    return Symbol(`anonymous-context-${this.id++}`);
  }

  static makeDraggableComponent(context: symbol) {
    return (props: PropsWithChildren<IDraggableProps>) =>
      createDraggableElement(props.children, context, props);
  }

  static makeDropAreaComponent(context: symbol) {
    return (props: PropsWithChildren<IDropAreaProps>) =>
      createDropElement(props.children, context, props);
  }

  static build() {
    const context = this.makeAnonymousContext();
    return {
      DropArea: this.makeDropAreaComponent(context),
      Draggable: this.makeDraggableComponent(context),
    };
  }
}
