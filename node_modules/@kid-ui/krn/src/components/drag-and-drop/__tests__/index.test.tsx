import React from 'react';
import { DragAndDropFactory } from '../DragAndDropFactory';
import { render, fireEvent } from '@testing-library/react-native';
import { DragHost } from '../DragHost';
import type { LayoutRectangle } from 'react-native';
import { Text, View } from 'react-native';
import {
  GestureHandlerRootView,
  LongPressGestureHandler,
  State,
} from 'react-native-gesture-handler';
// @ts-ignore
import mockComponent from 'react-native/jest/mockComponent';
import { debounceTime, Observable, Subject, throttleTime } from 'rxjs';
type Component = ReturnType<typeof DragAndDropFactory.build>;

// 变量名用mock做prefix的允许在Mock作用域外操作
const mockSubjects = {
  startDrag: new Subject(),
  hoverEnter: new Subject(),
  hoverLeave: new Subject(),
  drop: new Subject(),
  cancelDrag: new Subject(),
  updatePoi: new Subject<LayoutRectangle>(),
  hoverEnterObserver: new Observable(),
  hoverLeaveObserver: new Observable(),
  dropObserver: new Observable(),
  dropAreaUpdatePoiObserver: new Observable(),
  dropAreaUpdatePoi: new Subject(),
};
mockSubjects.hoverEnterObserver = mockSubjects.hoverEnter;
mockSubjects.hoverLeaveObserver = mockSubjects.hoverLeave;
mockSubjects.dropObserver = mockSubjects.drop;
mockSubjects.dropAreaUpdatePoiObserver = mockSubjects.dropAreaUpdatePoi;

jest.mock('../useDragAndDrop', () => ({
  useDrop: jest.fn(() => ({ subjects: mockSubjects })),
  useDrag: jest.requireActual('../useDragAndDrop').useDrag,
}));

describe('testing DragAndDrop Factory', () => {
  let TestDraggable: Component['Draggable'];
  let TestDropArea: Component['DropArea'];

  beforeEach(() => {
    const component = DragAndDropFactory.build();
    TestDraggable = component.Draggable;
    TestDropArea = component.DropArea;
  });

  it('component should be defined', () => {
    expect(TestDraggable)?.toBeDefined?.();
    expect(TestDropArea)?.toBeDefined?.();
  });
});

describe('test draggable', () => {
  const cubeStyle = { width: 100, height: 100 };
  let Cube: JSX.Element;
  let TestDraggable: Component['Draggable'];

  beforeEach(() => {
    const component = DragAndDropFactory.build();
    TestDraggable = component.Draggable;
    Cube = (
      <View style={cubeStyle}>
        <Text>DRAG</Text>
      </View>
    );
  });

  it('testing draggable onChange', () => {
    const onChange = jest.fn();
    const { UNSAFE_queryByType } = render(
      <GestureHandlerRootView>
        <DragHost>
          <TestDraggable placeholderStyle={cubeStyle} onChange={onChange} slideBackStatus={false}>
            {Cube}
          </TestDraggable>
        </DragHost>
      </GestureHandlerRootView>,
    );
    // 由于RNGH的版本为1.X，没有方便的方法获取到目标组件，所以这里用UNSAFE方法来获取。
    const node = UNSAFE_queryByType(LongPressGestureHandler);
    fireEvent(node!, 'handlerStateChange', { nativeEvent: { state: State.ACTIVE } });
    expect(onChange)?.toHaveBeenLastCalledWith(true);
    fireEvent(node!, 'handlerStateChange', { nativeEvent: { state: State.END } });
    expect(onChange)?.toHaveBeenLastCalledWith(false);
  });
});

describe('test dropArea', () => {
  const cubeStyle = { width: 100, height: 100 };
  const Cube = <View style={cubeStyle} />;
  const BigBox = <View style={{ marginTop: 100, width: 200, height: 200 }} />;
  let TestDraggable: Component['Draggable'];
  let TestDropArea: Component['DropArea'];

  beforeEach(() => {
    jest.resetModules();
    jest.doMock('react-native/Libraries/Components/View/View', () =>
      mockComponent('react-native/Libraries/Components/View/View', {
        measure: jest.fn((cb: (...poi: number[]) => void) => {
          cb(0, 0, 200, 200, 0, 200);
        }),
      }),
    );

    const component = DragAndDropFactory.build();
    TestDraggable = component.Draggable;
    TestDropArea = component.DropArea;
  });

  it('testing dropArea onStartDrag and onCancelDrag', () => {
    const onStartDrag = jest.fn();
    const onCancelDrag = jest.fn();
    render(
      <GestureHandlerRootView>
        <DragHost>
          <TestDraggable placeholderStyle={cubeStyle}>{Cube}</TestDraggable>
          <TestDropArea onStartDrag={onStartDrag} onCancelDrag={onCancelDrag}>
            {BigBox}
          </TestDropArea>
        </DragHost>
      </GestureHandlerRootView>,
    );
    mockSubjects.startDrag.next(null);
    mockSubjects.cancelDrag.next(null);
    expect(onStartDrag)?.toBeCalled();
    expect(onCancelDrag)?.toBeCalled();
  });

  it('testing dropArea onHoverEnter and onHoverLeave', async () => {
    const onHoverEnter = jest.fn();
    const onHoverLeave = jest.fn();
    render(
      <GestureHandlerRootView>
        <DragHost>
          <TestDropArea onHoverEnter={onHoverEnter} onHoverLeave={onHoverLeave}>
            {BigBox}
          </TestDropArea>
        </DragHost>
      </GestureHandlerRootView>,
    );
    mockSubjects.hoverEnter?.next?.(null);
    mockSubjects.hoverLeave?.next?.(null);
    expect(onHoverEnter)?.toBeCalled();
    expect(onHoverLeave)?.toBeCalled();
  });
  it('testing dropArea onDrop', () => {
    const onDrop = jest.fn((data) => data);
    render(
      <GestureHandlerRootView>
        <DragHost>
          <TestDropArea onDrop={onDrop}>{BigBox}</TestDropArea>
        </DragHost>
      </GestureHandlerRootView>,
    );
    mockSubjects.drop?.next?.('mock');
    expect(onDrop)?.toBeCalledWith('mock');
  });
});
