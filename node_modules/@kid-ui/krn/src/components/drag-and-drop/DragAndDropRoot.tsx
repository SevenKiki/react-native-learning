import type { ContextType } from './context';
import { DragAndDropRootContext } from './context';
import React, { useCallback, useState } from 'react';
import { debounceTime, Observable, Subject, throttleTime } from 'rxjs';
import type { LayoutRectangle } from 'react-native';

export type IDnDSubject = {
  startDrag: Subject<unknown>;
  hoverEnter: Subject<unknown>;
  hoverLeave: Subject<unknown>;
  drop: Subject<unknown>;
  cancelDrag: Subject<unknown>;
  updatePoi: Subject<LayoutRectangle>;
  hoverEnterObserver: Observable<unknown>;
  hoverLeaveObserver: Observable<unknown>;
  dropAreaUpdatePoi: Subject<unknown>;
  dropAreaUpdatePoiObserver: Observable<unknown>;
};

export const DragAndDropRoot: React.FC = (props) => {
  const [poiMap, setPoiMap] = useState<Record<ContextType, LayoutRectangle>>({});
  const [subjects, setSubjects] = useState<Record<ContextType, IDnDSubject>>({});
  const updatePoi = (context: string, newPoi: LayoutRectangle) =>
    setPoiMap((prevState) => ({ ...prevState, ...{ [context]: newPoi } }));
  const ensureSubjects = useCallback((context) => {
    const newSubjects = {
      startDrag: new Subject(),
      hoverEnter: new Subject(),
      hoverLeave: new Subject(),
      drop: new Subject(),
      cancelDrag: new Subject(),
      updatePoi: new Subject<LayoutRectangle>(),
      hoverEnterObserver: new Observable(),
      hoverLeaveObserver: new Observable(),
      dropObserver: new Observable(),
      dropAreaUpdatePoiObserver: new Observable(),
      dropAreaUpdatePoi: new Subject(),
    };
    newSubjects.hoverEnterObserver = newSubjects.hoverEnter?.pipe?.(throttleTime(50));
    newSubjects.hoverLeaveObserver = newSubjects.hoverLeave?.pipe?.(throttleTime(100));
    newSubjects.dropObserver = newSubjects.drop?.pipe?.(throttleTime(500));
    newSubjects.dropAreaUpdatePoiObserver = newSubjects.dropAreaUpdatePoi?.pipe?.(
      debounceTime(100),
    );
    // 首屏的
    // update poit的debounce时间会影响快速响应的速度。不够流畅的话 可以考虑这里再快一点。
    // 中高端安卓机的measure大概在十几毫秒
    // 低端机大概在10~50不等，平均大概30
    newSubjects.updatePoi?.pipe?.(debounceTime(100))?.subscribe?.((newPoi) => {
      updatePoi(context, newPoi);
    });
    setSubjects((prevState) => ({ ...prevState, ...{ [context]: newSubjects } }));
  }, []);

  const initContext = useCallback(
    (context: ContextType) => {
      if (!subjects[context]) {
        const defaultPoi = { x: 0, y: 0, width: 0, height: 0 };
        ensureSubjects(context);
        setPoiMap((prevState) => ({ ...prevState, ...{ [context]: defaultPoi } }));
      }
    },
    [subjects, ensureSubjects],
  );

  return (
    <DragAndDropRootContext.Provider
      value={{
        poiMap,
        subjects,
        initContext,
      }}
    >
      {props.children}
    </DragAndDropRootContext.Provider>
  );
};
