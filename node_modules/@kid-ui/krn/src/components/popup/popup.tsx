import type { WrapperComponentProps as PopupProps } from './alert-wrapper';
import { WrapperComponent } from './alert-wrapper';
import React from 'react';
import RootSiblings from 'react-native-root-siblings';
type PopupApi = typeof WrapperComponent & {
    show: typeof show;
};
export const Popup: PopupApi = WrapperComponent as any;

const show = (props: PopupProps) => {
    let newProps = props;
    const sibling = PopupManager.show(
        <Popup
            {...props}
            componentApi={false}
            onAnimateEnd={() => {
                props.onAnimateEnd && props.onAnimateEnd();
                sibling.destroy();
            }}
        />,
    );
    return {
        update: (props: PopupProps) => {
            newProps = props;
            sibling.update(
                <Popup
                    {...props}
                    visible={true}
                    componentApi={false}
                    onAnimateEnd={() => {
                        props.onAnimateEnd && props.onAnimateEnd();
                        sibling.destroy();
                    }}
                />,
            );
        },
        remove: () => {
            sibling.update(
                <Popup
                    {...newProps}
                    visible={false}
                    componentApi={false}
                    onAnimateEnd={() => {
                        props.onAnimateEnd && props.onAnimateEnd();
                        sibling.destroy();
                    }}
                />,
            );
        },
    };
};
Popup.show = show;
export const PopupManager = {
    show(children: React.ReactNode) {
        const sibling = new RootSiblings(children);
        return {
            update: (children: React.ReactNode) => {
                sibling.update(children);
            },
            destroy: () => {
                sibling.destroy();
            },
        };
    },
};
