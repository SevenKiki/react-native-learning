import React, { useEffect, useRef, useState } from 'react';
import {
    Animated,
    StyleProp,
    StyleSheet,
    Text,
    TextStyle,
    TouchableOpacity,
    View,
    ViewStyle,
    Insets
} from 'react-native';
import useThemeValue, { ThemeValue } from '../../theme/useThemeValue';
import { createKidComponent, rem } from '../../utils';

/**
 * 开关组件
 * @see https://design.corp.kuaishou.com/kid/widget/collections/all?styleId=103
 */
export interface SwitchButtonProps {
    /**
     * 主要参数
     */
    onPress?: (isSwitchOn: boolean) => void;
    switchOn: boolean; //默认是打开状态/关闭状态
    isControlSwitch?: boolean; //是否在外部操控打开/关闭的状态
    disabled?: boolean; // 是否禁用
    /**
     * Kid样式支持的参数
     */
    width?: number; //开关的宽度
    height?: number; //开关的高度
    onTintColor?: ThemeValue<string>; //开关开启时的颜色
    offTintColor?: ThemeValue<string>; //开关关闭时的颜色
    thumbTintColor?: ThemeValue<string>; //圆形按钮颜色
    /**
     * 其他的一些参数，可以按需使用
     */
    testID?: string;
    containerStyle?: ViewStyle;
    circleStyle?: ViewStyle;
    backgroundColorOn?: string;
    backgroundColorOff?: string;
    backgroundImageOn?: React.ReactElement;
    backgroundImageOff?: React.ReactElement;
    circleColorOff?: string;
    circleColorOn?: string;
    duration?: number;
    type?: number;
    buttonText?: string;
    backTextRight?: string;
    backTextLeft?: string;
    buttonTextStyle?: StyleProp<TextStyle>;
    textRightStyle?: StyleProp<TextStyle>;
    textLeftStyle?: StyleProp<TextStyle>;
    buttonStyle?: StyleProp<ViewStyle>;
    buttonContainerStyle?: StyleProp<ViewStyle>;
    rightContainerStyle?: StyleProp<ViewStyle>;
    leftContainerStyle?: StyleProp<ViewStyle>;
    RTL?: boolean;
    hitSlop?: Insets;
}

const SwitchButton = (props: SwitchButtonProps) => {
    const { 
        width,
        height,
        offTintColor = { light: '#EAEAEA', dark: '#6B6B6F'},
        onTintColor = { light: '#326BFB', dark: '#618EFF'},
        thumbTintColor = { light: '#FFFFFF', dark: '#FFFFFF'},
        isControlSwitch = false, 
        duration = 300, 
        disabled = false,
    } = props;
    const backgroundColorOn = useThemeValue(onTintColor),
        backgroundColorOff = useThemeValue(offTintColor),
        circleColorOn = useThemeValue(thumbTintColor),
        circleColorOff = useThemeValue(thumbTintColor);
    const [isSwitchOn, setIsSwitchOn] = useState(props.switchOn);
    useEffect(() => {
        if(isControlSwitch && isSwitchOn !== props.switchOn) {
            setIsSwitchOn(props.switchOn);
        }
    }, [props.switchOn]);

    const [animXValue] = useState(new Animated.Value(isSwitchOn ? 1 : 0));

    const getStart = (): number | Record<string, unknown> | undefined => {
        return props.type === undefined
            ? 0
            : props.type === 0
            ? 0
            : props.containerStyle && props.containerStyle.padding
            ? (props.containerStyle.padding as number) * 2
            : {};
    };

    // eslint-disable-next-line react-hooks/exhaustive-deps
    const runAnimation = (): void => {
        const animValue = {
            fromValue: isSwitchOn ? 0 : 1,
            toValue: isSwitchOn ? 1 : 0,
            duration,
            useNativeDriver: false,
        };

        Animated.timing(animXValue, animValue).start();
    };

    const endPos =
        props.containerStyle && props.circleStyle
            ? (width || props.containerStyle.width as number) -
              ((props.circleStyle.width as number) +
                  ((props.containerStyle.padding as number) || 0) * 2)
            : 0;

    const circlePosXEnd = props.RTL ? -endPos : endPos;
    const [circlePosXStart] = useState(getStart());

    const prevSwitchOnRef = useRef<boolean>();
    const prevSwitchOn = !!prevSwitchOnRef.current;

    useEffect(() => {
        prevSwitchOnRef.current = isSwitchOn;

        if (prevSwitchOn !== isSwitchOn) {
            runAnimation();
        }
    }, [prevSwitchOn, isSwitchOn, runAnimation]);

    const generateRightText = (): React.ReactElement => {
        return (
            <Animated.View style={props.rightContainerStyle!}>
                <Text style={props.textRightStyle}>{props.backTextRight}</Text>
            </Animated.View>
        );
    };

    const generateLeftText = (): React.ReactElement => {
        return (
            <Animated.View style={props.leftContainerStyle!}>
                <Text style={props.textLeftStyle}>{props.backTextLeft}</Text>
            </Animated.View>
        );
    };

    const generateLeftIcon = (): React.ReactElement => {
        return (
            <View style={{ position: 'absolute', left: 5 }}>
                {props.backgroundImageOn}
            </View>
        );
    };

    const generateRightIcon = (): React.ReactElement => {
        return (
            <View style={{ position: 'absolute', right: 5 }}>
                {props.backgroundImageOff}
            </View>
        );
    };

    return (
        <TouchableOpacity
            disabled={disabled}
            testID={props.testID}
            hitSlop={props.hitSlop}
            onPress={() => {
                let newSwitchOn = !isSwitchOn;
                if(!isControlSwitch) {
                    setIsSwitchOn(newSwitchOn);
                }
                if (props.onPress) {
                    props.onPress(newSwitchOn);
                }
            }}
            activeOpacity={1}>
            <Animated.View
                style={[
                    styles.container,
                    props.containerStyle,
                    {
                        width: width || props.containerStyle?.width,
                        height: height || props.containerStyle?.height
                    },
                    {
                        backgroundColor: animXValue.interpolate({
                            inputRange: [0, 1],
                            outputRange: [
                                backgroundColorOff as string | number,
                                backgroundColorOn as string | number,
                            ] as string[] | number[],
                        }),
                    },
                ]}>
                {generateLeftText()}
                {isSwitchOn && generateLeftIcon()}
                <Animated.View
                    style={[
                        props.circleStyle,
                        {
                            backgroundColor: animXValue.interpolate({
                                inputRange: [0, 1],
                                outputRange: [
                                    circleColorOff as string | number,
                                    circleColorOn as string | number,
                                ] as string[] | number[],
                            }),
                        },
                        {
                            transform: [
                                {
                                    translateX: animXValue.interpolate({
                                        inputRange: [0, 1],
                                        outputRange: [
                                            circlePosXStart as string | number,
                                            circlePosXEnd as string | number,
                                        ] as string[] | number[],
                                    }),
                                },
                            ],
                        },
                        props.buttonStyle,
                    ]}>
                    <Animated.View style={props.buttonContainerStyle!}>
                        <Text style={props.buttonTextStyle}>
                            {props.buttonText}
                        </Text>
                    </Animated.View>
                </Animated.View>
                {generateRightText()}
                {!isSwitchOn && generateRightIcon()}
            </Animated.View>
        </TouchableOpacity>
    );
}

SwitchButton.defaultProps = {
    containerStyle: {
        // marginTop: 16,
        width: rem(48),
        height: rem(26),
        borderRadius: rem(13),
        padding: rem(1),
    },
    circleStyle: {
        width: rem(24),
        height: rem(24),
        borderRadius: rem(12),
    },
    hitSlop: {
        top: rem(10), 
        bottom: rem(10), 
        left: rem(10), 
        right: rem(10)
    }
};

const styles = StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
    },
});

export const KidSwitchButton = createKidComponent(SwitchButton);
