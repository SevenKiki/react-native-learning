import {
  View,
  StyleSheet,
  StyleProp,
  ViewStyle,
  Platform,
  NativeSyntheticEvent,
  NativeScrollEvent
} from 'react-native';
import React from 'react';
import Swiper from 'react-native-swiper';

interface SwiperInternals {
  autoplayEnd: false
  loopJump: false
  width: number
  height: number
  offset: {
    x: number
    y: number
  }
  total: number
  index: number
  dir: 'x' | 'y'
  isScrolling: boolean
}

export interface CarouselProps {
  carouselWidth?: number | string;
  carouselHeight?: number | string;
  borderRadius?: number;
  dotType?: 'ellipse' | 'circle' | 'bar';
  paginationPosition?: 'left' | 'center' | 'right';
  children?: React.ReactNode;
  itemStyle?: StyleProp<ViewStyle>;
  
  // Swiper Props
  loop?: boolean;
  autoplay?: boolean;
  autoplayTimeout?: number;
  showsPagination?: boolean;
  onIndexChanged?: (index: number) => void;
  horizontal?: boolean;
  scrollEnabled?: boolean;
  dotStyle?: StyleProp<ViewStyle>;
  activeDotStyle?: StyleProp<ViewStyle>;
  paginationStyle?: StyleProp<ViewStyle>;
  renderPagination?: (
    index: number,
    total: number,
    swiper: Swiper
  ) => React.ReactNode
  loadMinimal?: boolean
  loadMinimalSize?: number
  loadMinimalLoader?: React.ReactNode
  onScrollBeginDrag?: (
    e: NativeSyntheticEvent<NativeScrollEvent>,
    state: SwiperInternals,
    swiper: Swiper
  ) => void
  onScrollEndDrag?: (event: NativeSyntheticEvent<NativeScrollEvent>) => void;
  onMomentumScrollEnd?: (
    e: NativeSyntheticEvent<NativeScrollEvent>,
    state: SwiperInternals,
    swiper: Swiper
  ) => void
  onTouchStartCapture?: any
  onTouchStart?: any
  onTouchEnd?: any
  onResponderRelease?: any
  pagingEnabled?: boolean
  showsHorizontalScrollIndicator?: boolean
  showsVerticalScrollIndicator?: boolean
  bounces?: boolean
  scrollsToTop?: boolean
  removeClippedSubviews?: boolean
  automaticallyAdjustContentInsets?: boolean
}
export interface CarouselRef {
  scrollBy: (index?: number, animated?: boolean) => void;
}

const styles: any = StyleSheet.create({
  // 指示器样式
  pagination_x_left: {
    justifyContent: 'flex-start',
    paddingLeft: 15,
    bottom: 20,
  },
  pagination_y_left: {
    justifyContent: 'flex-start',
    paddingTop: 15,
  },
  pagination_x_center: {
    bottom: 20,
  },
  pagination_y_center: {},
  pagination_x_right: {
    justifyContent: 'flex-end',
    paddingRight: 15,
    bottom: 20,
  },
  pagination_y_right: {
    justifyContent: 'flex-end',
    bottom: 20,
  },
  // dot的样式
  x_ellipse: {},
  x_active_ellipse: {
    width: 16,
  },
  y_ellipse: {},
  y_active_ellipse: {
    height: 16,
  },
  x_circle: {},
  x_active_circle: {},
  y_circle: {},
  y_active_circle: {},
  x_bar: {
    width: 10,
    height: 3,
  },
  x_active_bar: {
    width: 16,
    height: 3,
  },
  y_bar: {
    width: 3,
    height: 10,
  },
  y_active_bar: {
    width: 3,
    height: 16,
  },
});

const Carousel = React.forwardRef<CarouselRef, CarouselProps>((props, ref) => {
  const swiperRef = React.useRef<any>();
  React.useImperativeHandle(
    ref,
    () => ({
      scrollBy: swiperRef.current.scrollBy,
    }),
    [swiperRef.current],
  );
  const {
    carouselWidth,
    carouselHeight,
    borderRadius,
    paginationPosition,
    dotType,
    horizontal,
    dotStyle,
    activeDotStyle,
    paginationStyle,
    itemStyle,
    loadMinimal,
    onMomentumScrollEnd,
    onResponderRelease,
    ...restProps
  } = props;
  const dir = horizontal ? 'x' : 'y';
  const SwiperPrpos: any = {
    showsButtons: false,
    paginationStyle: [styles['pagination_' + dir + '_' + paginationPosition], paginationStyle],
    dotStyle: [{ backgroundColor: '#fff', opacity: 0.4 }, styles[dir + '_' + dotType], dotStyle],
    activeDotStyle: [
      { backgroundColor: '#fff' },
      styles[dir + '_active_' + dotType],
      dotStyle,
      activeDotStyle,
    ],
    horizontal,
    loadMinimal: loadMinimal === undefined ? (Platform.OS === 'ios' ? true : false) : loadMinimal,
    ...restProps
  };
  return (
    <View
      style={{
        width: carouselWidth,
        height: carouselHeight,
      }}
    >
      <Swiper
        ref={swiperRef}
        {...SwiperPrpos}
        removeClippedSubviews={false}
        onMomentumScrollEnd={(e: any, state: any, swpier: any) => {
          onMomentumScrollEnd?.(e, state, swpier);
          if (!(Platform.OS === 'android')) return;
          setTimeout(() => {
            if (swpier && swpier.autoplay) {
              swpier.autoplay()
            }
          }, 300);
        }}
        onResponderRelease={(e: any, state: any, swpier: any) => {
          onResponderRelease?.(e, state, swpier);
          if ((Platform.OS === 'android')) return;
          // 延迟一秒执行，滚动动画时间内swpier.internals.isScrolling 为true，会导致autoplay方法直接return， 需要等待滚动动画结束
          setTimeout(() => {
            if (swpier && swpier.autoplay) {
              swpier.autoplay()
            }
          }, 1000);
        }}>
        {React.Children.map(props.children as any, (c) => {
          return (
            <View style={[{ flex: 1, borderRadius: borderRadius, overflow: 'hidden' }, itemStyle]}>{c}</View>
          );
        })}
      </Swiper>
    </View>
  );
});

Carousel.defaultProps = {
  carouselWidth: '100%',
  carouselHeight: 250,
  loop: false,
  autoplay: false,
  showsPagination: true,
  borderRadius: 10,
  autoplayTimeout: 2.5,
  horizontal: true,
  paginationPosition: 'right',
  dotType: 'ellipse',
  scrollEnabled: true,
};

export const KidCarousel = Carousel;
