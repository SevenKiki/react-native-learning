import * as React from 'react';
import { StyleSheet, View, StyleProp, ViewStyle, TextStyle, LayoutChangeEvent } from 'react-native';
import { TabBar } from '../tab-bar';
import SceneView from './SceneView';
import Pager from './Pager';
import type { Layout, NavigationState, Route, SceneRendererProps, PagerProps, Scene } from './types';
import type { TabBarProps } from '../tab-bar';
import { createKidComponent, getThemeValue } from '../../utils';
import ThemeContext from '../../theme/context';

export type Props<T extends Route> = PagerProps & {
  onIndexChange: (index: number) => void;
  navigationState: NavigationState<T>;
  renderScene: (props: SceneRendererProps & { route: T }) => React.ReactNode;
  renderLazyPlaceholder?: (props: { route: T }) => React.ReactNode;
  renderTabBar?: (
    props: SceneRendererProps & { navigationState: NavigationState<T> },
  ) => React.ReactNode;
  renderIcon?: (
    scene: Scene<T> & {
      focused: boolean;
      color: string;
    },
  ) => React.ReactNode; // 自定义icon
  renderTabBarItem?: (
    props: any,
  ) => React.ReactElement;
  tabBarPosition?: 'top' | 'bottom';
  initialLayout?: Partial<Layout>;
  lazy?: ((props: { route: T }) => boolean) | boolean;
  lazyPreloadDistance?: number;
  sceneContainerStyle?: StyleProp<ViewStyle>;
  style?: StyleProp<ViewStyle>;
  onTabPress?: TabBarProps<T>['onTabPress']; // TabBar 点击事件
  onTabLongPress?: TabBarProps<T>['onTabLongPress']; // TabBar 长按事件
  onTabBarItemsLayoutChange?: (routes: T[]) => void; // TabBar 可视区范围内的Items发生改变时触发回调，参数routes表示可视区内的TabBar Item所指向的route集合
  shownPercent?: number // TabBar Item在该百分比以上的部分暴露在可视区时，才在onTabBarItemsLayoutChange时上报
  tabBarHeight?: number; // TabBar 的高度
  tabBgColor?: string; // TabBar 背景颜色
  indicatorWidth?: number; // TabBar 指示条宽度
  enableIndicatorAnimate?: boolean; // 是否开启指示器动画
  indicatorColor?: string; // TabBar 指示条颜色
  fitTextWidth?: boolean; // TabBar Item 项是否按文本宽度自适应
  textNormalColor?: string; // TabBar 文字没有选中时的颜色
  textSelectedColor?: string; // TabBar 文字选中时的颜色
  underLineColor?: string; // ???
  dividerColor?: string; // TabBar 分割线颜色
  showBottomShadow?: boolean; // TabBar 是否展示底部阴影
  tabItemTextStyle?: StyleProp<TextStyle>; // 设置 tabItem 文字的样式
  tabItemActiveTextStyle?: StyleProp<TextStyle>; // 设置 tabItem acitve 文字的样式
  tabItemStyle?: StyleProp<ViewStyle>; // TabBar Item的样式
  tabItemActiveStyle?: StyleProp<ViewStyle>;// TabBar Item选中时的样式
  tabItemActiveStyleMode?: TabBarProps<T>['tabItemActiveStyleMode']; // 当前聚焦 tabBarItem 的样式模式，enlarge 表示放大，例如设置了 tabItemActiveTextStyle 使字体变大、加粗等，normal 表示不变或缩小，默认值为 normal
  swipeEnabled?: boolean; // 是否启动滑动手势切换 tab 页
  enterOnce?: boolean; // 修复与react-native-modal + input配合使用时失去焦点的问题
  openPageAnimate?: boolean; // 默认要开启翻页动画，开启时需要把指示器的动画 enableIndicatorAnimate 也关闭，否则ios上指示器位置会出现问题
  lastTabItemStyle?: StyleProp<ViewStyle>;// TabBar Item最后一项的样式
  firstTabItemStyle?: StyleProp<ViewStyle>;// TabBar Item第一项的样式
  tabBarContainerStyle?: StyleProp<ViewStyle>; // TabBar 容器的样式
  tabBarScrollViewStyle?: StyleProp<ViewStyle>; // TabBar 容器中 ScrollView 的样式
  tabBarScrollViewContentStyle?: TabBarProps<T>['tabBarScrollViewContentStyle']; // TabBar 容器中 ScrollView 内容区域的样式，设置到 contentContainerStyle 属性
  indicatorStyle?: StyleProp<ViewStyle>;  // 指示器的样式
  overdrag?: boolean; // 是否支持弹性滑动
  controlType?: 'normal' | 'debounce' | 'throttle'; //切换tabbar的类型，选择debounce表示防抖，选择throttle表示节流
  controlDuration?: number; //控制防抖或者节流的时长
};

function TabView<T extends Route>(props: Props<T>) {
  const tabBarRef = React.createRef<TabBar<T>>();
  const theme = React.useContext(ThemeContext);
  const {
    onIndexChange,
    navigationState,
    renderScene,
    initialLayout,
    keyboardDismissMode = 'auto',
    lazy = false,
    lazyPreloadDistance = 0,
    tabBarHeight,
    textSelectedColor = '#fff',
    textNormalColor = '#666',
    tabBgColor = '#000',
    indicatorWidth = 0,
    enableIndicatorAnimate = true,
    indicatorColor = '#fff',
    fitTextWidth = false,
    dividerColor = 'transparent',
    showBottomShadow = true,
    tabItemTextStyle,
    tabItemActiveTextStyle,
    renderIcon,
    renderTabBarItem,
    onTabPress,
    onTabLongPress,
    onTabBarItemsLayoutChange,
    shownPercent,
    tabItemStyle,
    tabBarContainerStyle,
    tabItemActiveStyle,
    lastTabItemStyle,
    tabBarScrollViewStyle,
    tabBarScrollViewContentStyle,
    tabItemActiveStyleMode = 'normal',
    firstTabItemStyle,
    indicatorStyle,
    onSwipeStart,
    onSwipeEnd,
    onSwipe,
    overdrag,
    controlType = 'normal',
    controlDuration = 0,
    openPageAnimate = true,
    renderLazyPlaceholder = () => null,
    renderTabBar = (props) => (
      <TabBar
        {...props}
        ref={tabBarRef}
        autoCenter={!getThemeValue(fitTextWidth, theme)}
        scrollEnabled
        activeColor={getThemeValue(textSelectedColor, theme)}
        inactiveColor={getThemeValue(textNormalColor, theme)}
        style={{ backgroundColor: getThemeValue(tabBgColor, theme), height: tabBarHeight }}
        tabBarContainerStyle={tabBarContainerStyle}
        renderIcon={renderIcon}
        renderTabBarItem={renderTabBarItem}
        tabItemTextStyle={tabItemTextStyle}
        tabBarScrollViewStyle={tabBarScrollViewStyle}
        tabBarScrollViewContentStyle={tabBarScrollViewContentStyle}
        tabItemActiveTextStyle={tabItemActiveTextStyle}
        tabItemStyle={tabItemStyle}
        tabItemActiveStyle={tabItemActiveStyle}
        lastTabItemStyle={lastTabItemStyle}
        firstTabItemStyle={firstTabItemStyle}
        indicatorStyle={[{ width: getThemeValue(indicatorWidth, theme), backgroundColor: getThemeValue(indicatorColor, theme) }, indicatorStyle]}
        indicatorWidth={indicatorWidth}
        enableIndicatorAnimate={enableIndicatorAnimate}
        showBottomShadow={showBottomShadow}
        dividerColor={getThemeValue(dividerColor, theme)}
        controlType={controlType}
        controlDuration={controlDuration}
        openPageAnimate={openPageAnimate}
        onTabPress={onTabPress}
        onTabLongPress={onTabLongPress}
        onTabBarItemsLayoutChange={onTabBarItemsLayoutChange}
        shownPercent={shownPercent}
        tabItemActiveStyleMode={tabItemActiveStyleMode}
      />
    ),
    sceneContainerStyle,
    style,
    swipeEnabled = true,
    enterOnce = false,
    tabBarPosition = 'top',
  } = props;
  const [layout, setLayout] = React.useState({
    width: 0,
    height: 0,
    ...initialLayout,
  });

  const jumpToIndex = (index: number) => {
    if (index !== navigationState.index) {
      onIndexChange(index);
    }
  };

  const handleLayout = (e: LayoutChangeEvent) => {
    const { height, width } = e.nativeEvent.layout;

    setLayout((prevLayout) => {
      if (prevLayout.width === width && prevLayout.height === height) {
        return prevLayout;
      }

      return { height, width };
    });
  };

  return (
    <View onLayout={handleLayout} style={[styles.pager, style]}>
      <Pager
        layout={layout}
        navigationState={navigationState}
        keyboardDismissMode={keyboardDismissMode}
        swipeEnabled={swipeEnabled}
        enterOnce={enterOnce}
        openPageAnimate={openPageAnimate}
        onSwipeStart={onSwipeStart}
        onSwipeEnd={onSwipeEnd}
        onSwipe={onSwipe}
        overdrag={overdrag}
        onIndexChange={jumpToIndex}
      >
        {({ position, render, addEnterListener, jumpTo }) => {
          // All of the props here must not change between re-renders
          // This is crucial to optimizing the routes with PureComponent
          const sceneRendererProps = {
            position,
            layout,
            jumpTo,
          };

          return (
            <React.Fragment>
              {tabBarPosition === 'top' &&
                renderTabBar({
                  ...sceneRendererProps,
                  navigationState,
                })}
              {render(
                navigationState.routes.map((route, i) => {
                  return (
                    <SceneView
                      {...sceneRendererProps}
                      addEnterListener={addEnterListener}
                      key={route.key}
                      index={i}
                      lazy={typeof lazy === 'function' ? lazy({ route }) : lazy}
                      lazyPreloadDistance={lazyPreloadDistance}
                      navigationState={navigationState}
                      containerStyle={sceneContainerStyle}
                    >
                      {({ loading }) =>
                        loading
                          ? renderLazyPlaceholder({
                            route,
                          })
                          : renderScene({
                            ...sceneRendererProps,
                            route,
                          })
                      }
                    </SceneView>
                  );
                }),
              )}
              {tabBarPosition === 'bottom' &&
                renderTabBar({
                  ...sceneRendererProps,
                  navigationState,
                })}
            </React.Fragment>
          );
        }}
      </Pager>
    </View>
  );
}

const styles = StyleSheet.create({
  pager: {
    flex: 1,
    overflow: 'hidden',
  },
});

export const KidTabView = createKidComponent(TabView);

