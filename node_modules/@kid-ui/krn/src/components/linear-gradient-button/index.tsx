import React from 'react';
import {
    StyleProp,
    Text,
    TextStyle,
    TouchableOpacity,
    ViewStyle,
} from 'react-native';
import LinearGradient from 'react-native-linear-gradient';
import useThemeValue, { ThemeValue } from '../../theme/useThemeValue';
import { createKidComponent, rem } from '../../utils';

export interface LinearGradientButtonProps {
    text: string;
    width?: number;
    height?: number;
    cornerRadius?: number;
    textFont?: number;
    textColor?: ThemeValue<string>;
    borderWidth?: number;
    borderColor?: ThemeValue<string>;
    gradientColorStart?: ThemeValue<string>;
    gradientColorEnd?: ThemeValue<string>;
    gradientStartPoint?: Record<'x' | 'y', number>;
    gradientEndPoint?: Record<'x' | 'y', number>;
    textStyle?: StyleProp<TextStyle>;
    style?: StyleProp<ViewStyle>;
    onPress?: () => void;
    activeOpacity?: number;
}

const LinearGradientButton: React.FC<LinearGradientButtonProps> = (props) => {
    const {
        text,
        width,
        height,
        cornerRadius,
        textFont,
        textColor,
        borderWidth,
        borderColor,
        gradientColorStart,
        gradientColorEnd,
        gradientStartPoint,
        gradientEndPoint,
        textStyle,
        style,
        onPress,
        activeOpacity = 0.5
    } = props;

    const _borderColor = useThemeValue(borderColor);

    const buttonStyle: ViewStyle = {
        height,
        width,
        alignItems: 'center',
        justifyContent: 'center',
        borderRadius: cornerRadius,
        borderWidth: borderWidth,
        borderColor: _borderColor,
    };

    const _textColor = useThemeValue(textColor)
    const innerTextStyle = [
        {
            color: _textColor,
            fontSize: textFont,
        },
        textStyle,
    ];

    const _gradientColorStart = useThemeValue(gradientColorStart!); 
    const _gradientColorEnd = useThemeValue(gradientColorEnd!); 
    const gradientColors = [_gradientColorStart, _gradientColorEnd];
    const gradientStartXy = {
        x: parseFloat(gradientStartPoint!.x as unknown as string),
        y: parseFloat(gradientStartPoint!.y as unknown as string),
    }
    const gradientEndXy = {
        x: parseFloat(gradientEndPoint!.x as unknown as string),
        y: parseFloat(gradientEndPoint!.y as unknown as string),
    };

    return (
        <TouchableOpacity
            activeOpacity={activeOpacity}
            onPress={onPress}
            style={[buttonStyle, style]}>

            <LinearGradient
                start={gradientStartXy}
                end={gradientEndXy}
                colors={gradientColors}
                style={[buttonStyle, style]}>
                <Text style={innerTextStyle}>{text}</Text>
            </LinearGradient>
        </TouchableOpacity>
    );
}

LinearGradientButton.defaultProps = {
    width: rem(180),
    height: rem(40),
    cornerRadius: rem(300),
    textFont: rem(14),
    textColor: { normal: '#ffffff', dark: '#ffffff' },
    borderWidth: 0,
    borderColor: { normal: '#00000000', dark: '#00000000' },
    gradientColorStart: { normal: '#ff4906', dark: '#ff4906' },
    gradientColorEnd: { normal: '#FE3666', dark: '#FE3666' },
    gradientStartPoint: { x: 0, y: 0 },
    gradientEndPoint: { x: 1, y: 1 },
}

export const KidLinearGradientButton = createKidComponent(LinearGradientButton);
