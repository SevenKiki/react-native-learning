//@ts-nocheck
import {
    View,
    Text,
    TouchableOpacity,
    Platform,
    StyleSheet,
    StyleProp,
    TextStyle,
    ViewStyle,
} from 'react-native';
import React from 'react';
import { ScaleContext } from '../context';
import { Popup, PopupProps } from '../popup';

export interface DialogComponentProps {
    wrapStyle?: StyleProp<ViewStyle>;
    width?: number | string;
    onConfirm?: () => void;
    onCancel?: () => void;
    showLeftButton?: boolean;
    showButton?: boolean;
    cancelText?: string;
    confirmText?: string;
    leftButtonColor?: string;
    rightButtonColor?: string;
    showTitle?: boolean;
    showDesc?: boolean;
    title?: string;
    titleColor?: string;
    descTextColor?: string;
    wrapBackGroundColor?: string;
    content?: string;
    titleStyle?: StyleProp<TextStyle>;
    descTextStyle?: StyleProp<TextStyle>;
    borderRadius?: number;
    borderColor?: string;
    leftBorderColor?: string;
    componentApi?: boolean;
    visible?: boolean;
    renderButton?: () => React.ReactNode;
    renderContent?: () => React.ReactNode;
    renderTop?: () => React.ReactNode;
    renderCloseIcon?: () => React.ReactNode;
    onPressCloseIcon?: () => void;
    closeIconStyle?: StyleProp<ViewStyle>;
}
export interface DialogProps extends DialogComponentProps, PopupProps {
    popupSet?: PopupProps; // popup的参数项，外面包了一层，以备未暴露的属性拓展
}

export const DialogComponent: React.FC<DialogProps> = function (
    props?: DialogProps,
) {
    const {rem} = React.useContext(ScaleContext);
    const {
        visible = false,
        componentApi = true,
        wrapStyle = {},
        width = rem(280),
        onConfirm = () => { },
        onCancel = () => { },
        showLeftButton = true,
        cancelText = '取消',
        confirmText = '确认',
        showButton = true,
        showDesc = true,
        showTitle = true,
        title = '标题',
        content = '',
        titleStyle = {},
        descTextStyle = {},
        renderButton = null,
        renderContent = null,
        renderTop = null,
        renderCloseIcon = null,
        onPressCloseIcon = () => { },
        closeIconStyle = {},
        popupSet = {},
        borderRadius = rem(16),
        leftButtonColor = '#666666',
        rightButtonColor = '#5181fb',
        borderColor = '#eaeaea',
        titleColor = '#222222',
        descTextColor = '#666666',
        wrapBackGroundColor = '#fff',
        // popup中的属性
        useModal,
        showMask,
        maskBgColor,
        maskClosable,
        position,
        top,
        left,
        animate,
        animateDuration,
        isControlAnimationIn,
        popupStyle,
        beforeClose,
        onAnimateEnd,
        onShow,
        onDismiss,
    } = props;
    const popupProps = {
        useModal,
        showMask,
        maskBgColor,
        maskClosable,
        position,
        top,
        left,
        animate,
        animateDuration,
        isControlAnimationIn,
        popupStyle,
        beforeClose,
        onAnimateEnd,
        onShow,
        onDismiss,
    };

    const styles = StyleSheet.create({
        title: {
            fontSize: rem(18),
            lineHeight: rem(26),
            maxHeight: rem(92),
            textAlign: 'center',
            fontFamily: 'PingFangSC-Medium',
        },
        desc: {
            fontSize: rem(16),
            lineHeight: rem(24),
            justifyContent: 'center',
            fontFamily: 'PingFangSC-Regular',
            textAlign: 'center'
        },
        buttonWrap: {
            borderTopWidth: rem(0.5),
            flexDirection: 'row',
            height: rem(48),
            width: '100%',
            alignItems: 'center',
            justifyContent: 'center',
        },
        leftButton: {
            flex: 0.5,
            justifyContent: 'center',
            height: '100%',
        },
        leftText: {
            textAlign: 'center',
            fontFamily: 'PingFangSC-Regular',
            fontSize: rem(17),
            lineHeight: rem(21),
        },
        closeIcon: {
            position: 'absolute',
            zIndex: 99,
            top: rem(14.74),
            right: rem(14.74),
        },
    });

    const renderButtonComponent = () => {
        return (
            <View style={[styles.buttonWrap, { borderColor: borderColor }]}>
                {showLeftButton && (
                    <TouchableOpacity
                        onPress={() => {
                            onCancel();
                        }}
                        hitSlop={{ top: rem(20), left: rem(20), bottom: rem(20) }}
                        style={[
                            {
                                borderRightWidth: rem(0.5),
                                borderColor: borderColor,
                            },
                            styles.leftButton,
                        ]}
                    >
                        <Text
                            style={[
                                {
                                    color: leftButtonColor,
                                },
                                styles.leftText,
                            ]}
                        >
                            {cancelText}
                        </Text>
                    </TouchableOpacity>
                )}
                <TouchableOpacity
                    style={{
                        flex: 0.5,
                    }}
                    hitSlop={{ top: rem(20), right: rem(20), bottom: rem(20) }}
                    onPress={() => {
                        onConfirm();
                    }}
                >
                    <Text
                        style={[
                            {
                                textAlign: 'center',
                                color: rightButtonColor,
                                fontFamily: 'PingFangSC-Regular',
                                fontSize: rem(17),
                                lineHeight: rem(21),
                            },
                        ]}
                    >
                        {confirmText}
                    </Text>
                </TouchableOpacity>
            </View>
        );
    };
    const renderTitle = () => {
        return (
            <Text
                style={[
                    { color: titleColor },
                    styles.title,
                    Platform.OS === 'android' && { fontWeight: '500' },
                    titleStyle,
                ]}
            >
                {title}
            </Text>
        );
    };
    const renderDesc = () => {
        if (content === '') {
            return null;
        }
        return (
            <Text
                style={
                    [
                        {
                            color: descTextColor,
                            marginTop: showTitle ? rem(12) : 0
                        },
                        styles.desc,
                        descTextStyle
                    ]
                }
            >
                {content}
            </Text>
        );
    };
    const renderContentComponent = () => {
        return (
            <View
                style={[
                    {
                        backgroundColor: wrapBackGroundColor,
                        width: width,
                        borderRadius: borderRadius,
                    },
                    wrapStyle,
                ]}
            >
                {renderCloseIcon && (
                    <TouchableOpacity
                        onPress={onPressCloseIcon}
                        style={[styles.closeIcon, closeIconStyle]}
                        hitSlop={{
                            left: rem(20),
                            right: rem(20),
                            top: rem(20),
                            bottom: rem(20),
                        }}
                    >
                        {renderCloseIcon()}
                    </TouchableOpacity>
                )}

                {renderTop && (
                    <View
                        style={{
                            justifyContent: 'center',
                            alignItems: 'center',
                        }}
                    >
                        {renderTop()}
                    </View>
                )}

                {(showTitle || showDesc) && (
                    <View
                        style={{
                            justifyContent: 'center',
                            alignItems: 'center',
                            marginHorizontal: rem(24),
                            marginTop: rem(24),
                            marginBottom: renderContent ? rem(12) : rem(24)
                        }}
                    >
                        {showTitle && renderTitle()}
                        {showDesc && renderDesc()}
                    </View>
                )}

                {renderContent && (
                    <View
                        style={{
                            justifyContent: 'center',
                            alignItems: 'center'
                        }}
                    >
                        {renderContent()}
                    </View>
                )}

                {renderButton && (
                    <View
                        style={{
                            width: '100%',
                            alignItems: 'center',
                            justifyContent: 'center',
                            paddingBottom: rem(32),
                        }}
                    >
                        {renderButton()}
                    </View>
                )}
                {showButton && !renderButton && renderButtonComponent()}
            </View>
        );
    };

    return (
        <>
            {componentApi ? (
                <Popup {...popupSet} {...popupProps} visible={visible}>
                    {renderContentComponent()}
                </Popup>
            ) : (
                renderContentComponent()
            )}
        </>
    );
};

