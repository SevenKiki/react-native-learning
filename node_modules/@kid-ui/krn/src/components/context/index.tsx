import React, { useState, useEffect } from 'react';
import { RootSiblingParent } from 'react-native-root-siblings';
import { NativeModules, NativeEventEmitter, Dimensions } from 'react-native';

import { LocaleContext } from '../locale';
import ThemeContext from '../../theme/context';
import { rem } from '../../utils';

export const ScaleContext = React.createContext({rem});

export interface KidContextProps {
    customTheme?: string;
    baseWidth?: number;
}

const eventEmitter = new NativeEventEmitter(NativeModules.KSAppearance);

export const KidContext: React.FC<KidContextProps> = (props) => {
    const { customTheme, baseWidth } = props;
    const _rem = (num: number) => {
        return rem(num, baseWidth);
    }
    const mode = NativeModules.KSAppearance?.getColorScheme?.() || customTheme || 'light';
    const language = NativeModules.KSLanguage?.getLanguage?.() || 'zh-Hans';
    // 设置界面主题
    const [theme, setTheme] = useState(mode);
    const [lang] = useState(language);
    useEffect(() => {
        const colorListener = eventEmitter.addListener(
            'ksAppearanceChanged',
            ({ colorScheme }) => {
                setTheme(colorScheme === 'normal' ? 'light' : colorScheme);
            },
        );

        return () => {
            colorListener.remove();
        };
    }, []);

    return (
        <LocaleContext.Provider value={lang}>
            <ThemeContext.Provider value={props.customTheme || theme}>
                <ScaleContext.Provider value={{rem: _rem}}>
                    <RootSiblingParent>{props.children}</RootSiblingParent>
                </ScaleContext.Provider>
            </ThemeContext.Provider>
        </LocaleContext.Provider>
    );
}

export const WrapContext = function (App: React.ComponentClass<any, any> | React.FunctionComponent<any>, contextOptions: KidContextProps = {}) {
    return (props = {}) => {
        return (
            <KidContext {...contextOptions}>
                <App {...props}></App>
            </KidContext>
        );
    };
};
