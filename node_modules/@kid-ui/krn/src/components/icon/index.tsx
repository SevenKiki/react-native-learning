/* eslint-disable react-hooks/rules-of-hooks */
import React, { useContext } from 'react';
import ThemeContext from '../../theme/context';
import useThemeValue, { ThemeValue } from '../../theme/useThemeValue';
import { safeParse, rem, getKidColor, getThemeValue } from '../../utils';
import { NativeModules, ImageStyle, Image, StyleProp } from 'react-native';

const KIDBridge = NativeModules.KIDBridge;

export interface KidIconProps {
    kid: string;
    kidConfig?: (number | string)[],
    style?: StyleProp<ImageStyle>;
    size?: number;
    width?: number;
    height?: number;
    kidColor?: ThemeValue<string>;
}

export function KidIcon(props: KidIconProps) {
    const { kid, style, size = rem(40), width, height, kidColor } = props;
    const _width = width ?? size;
    const _height = height ?? size;
    if (!kid) {
        console.warn('⚠️警告：KidIcon的kid属性不能为空字符串');
    }
    let iconColorConfig = safeParse(KIDBridge?.getIconColorConfig?.(kid));
    if(!iconColorConfig) {
        NativeModules.KRNBasic?.log?.(`iconColorConfig为空！kid=${kid}, KIDBridge.getIconColorConfig(kid)=${JSON.stringify(KIDBridge?.getIconColorConfig?.(kid))}, props=${JSON.stringify(props)}`);
        // iconColorConfig = {};
    }
    const theme = useContext(ThemeContext);
    let uri = iconColorConfig?.file;

    const getColor = React.useCallback((color: string) => {
        if(color.indexOf('_') !== -1) {
            return getKidColor(color, theme)
        } else {
            return color;
        }
    }, [theme])

    const _useKidColor = React.useMemo(() => {
        if(kidColor) {
            let color = '';
            if(typeof kidColor === 'string') {
                color = getColor(kidColor)
            } else if(typeof kidColor === 'object') {
                color = getColor(getThemeValue(kidColor, theme))
            }
            return color;
        }
    }, [kidColor, getColor, theme])

    const tintColor =
        (kidColor && _useKidColor) ||
        iconColorConfig?.[theme] ||
        iconColorConfig?.normal ||
        null;
    if (uri === '0' || !uri) {
        uri = iconColorConfig?.[theme + 'Url'] || iconColorConfig?.normalUrl;
    }
    return (
        <Image
            style={[{ width: _width, height: _height, tintColor }, style]}
            source={{ uri }}
        />
    );
}
