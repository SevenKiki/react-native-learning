// @ts-nocheck

/* eslint-disable react-hooks/rules-of-hooks */
import React, { useContext } from 'react';
import ThemeContext from '../../theme/context';
import { ThemeValue } from '../../theme/useThemeValue';
import Icon from '@ks/kw/icon/output/Icon.js';
import { StyleSheet } from 'react-native';
import { getKidColor, getThemeValue } from '../../utils';

export type KidIconProps = {
  kid: string;
  kidConfig: (number | string)[];
  style?: any;
  size?: number;
  width?: number;
  height?: number;
  kidColor?: ThemeValue<string>;
};

function getIconColorConfig(kidConfig) {
  const [, light, dark] = kidConfig;
  return {
    light,
    dark,
  };
}
export function KidIcon(props: KidIconProps) {
  const { kidConfig, style = {}, size, width, height, kidColor } = props;
  if (!kidConfig) {
    return null;
  }
  const _width = width ?? size;
  const _height = height ?? size;
  const iconColorConfig = getIconColorConfig(kidConfig) || {};
  const theme = useContext(ThemeContext);

  const getColor = React.useCallback((color: string) => {
    if (color.indexOf('_') !== -1) {
      return getKidColor(color, theme)
    } else {
      return color;
    }
  }, [theme])

  const _useKidColor = React.useMemo(() => {
    if (kidColor) {
      let color = '';
      if (typeof kidColor === 'string') {
        color = getColor(kidColor)
      } else if (typeof kidColor === 'object') {
        color = getColor(getThemeValue(kidColor, theme))
      }
      return color;
    }
  }, [kidColor, getColor, theme])

  // 下面的逻辑是为了兼容h5做的抹平，因为h5的style不支持数组，且不认识tintColor
  const _style = { ...StyleSheet.flatten(style) };

  const tintColor =
    (kidColor && _useKidColor) || (_style as any)?.tintColor || iconColorConfig[theme] || null;

  _style.color = tintColor;
  _style.width = (_width ?? _style.width) || 40;
  _style.height = (_height ?? _style.height) || 40;

  return (
    <Icon
      config={kidConfig}
      style={_style}
    />
  );
}
