import React from 'react';
import { View, TextInput, TouchableOpacity, StyleSheet, StyleProp, ViewStyle, TextStyle, ImageStyle, Platform } from 'react-native';
import { getThemeValue } from '../../utils';
import { KidIcon } from '../icon';
import common_base_add_24 from '@ks/kw/icon/output/common/base/common_base_add_24'
import common_base_subtract_24 from '@ks/kw/icon/output/common/base/common_base_subtract_24'

const styles = StyleSheet.create({
  increaseContainer: {
    paddingVertical: 9.33
  },
  decreaseContainer: {
    paddingVertical: 15.17
  },
  control: {
    width: 13.33,
    height: 13.33,
    tintColor: getThemeValue({ light: '#222222', dark: '#E6E6E6' }),
  },
  content: {
    paddingVertical: 4.5,
    paddingHorizontal: 9,
    marginHorizontal: 11.33,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 4,
    backgroundColor: getThemeValue({ light: '#f8f8f8', dark: '#222226' })
  },
  text: {
    fontSize: 15,
    color: getThemeValue({ light: '#222222', dark: '#e6e6e6' }),
    textAlign: 'center',
    textAlignVertical: 'center',
    width: Platform.OS === 'web' ? '100%' : undefined,
    height: 23,
    paddingTop: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    paddingRight: 0,
    borderWidth: 0,
  }
})

export enum StepperChangeType {
  STATE_CHANGE_INC = 1,
  STATE_CHANGE_DEC,
  STATE_CHANGE_DIRECTLY
}

export interface StepperProps {
  children: React.ReactNode;
  defaultValue?: number; // 初始值
  value?: number; // 值
  max?: number; // 最大值
  min?: number; // 最小值
  step?: number; // 步长
  disabled?: boolean; // 是否禁用
  editable?: boolean; // 是否可以键盘编辑
  contentStyle?: StyleProp<ViewStyle>; // 内容区样式
  textStyle?: StyleProp<TextStyle>; // 内容区样式
  increaseButtonStyle?: StyleProp<ImageStyle>; // 左边按钮样式
  decreaseButtonStyle?: StyleProp<ImageStyle>; // 右边按钮样式
  onChange?: (value: number) => void; // 步进器值改变的时候触发的回调
  countReducer?: (oldCount: number | string, newCount: number | string, type: StepperChangeType) => number | string; // 重置值的变更
}

interface StepperContextType extends Omit<StepperProps, 'children'> {
  count: number | string;
  increase: () => void;
  decrease: () => void;
  setDirectly: (count: number | string) => void;
}

export const StepperContext = React.createContext<StepperContextType>({
  count: 0,
  increase: () => { },
  decrease: () => { },
  setDirectly: () => { }
});


const BaseStepper: React.FC<StepperProps> = (props: StepperProps) => {
  const {
    children,
    defaultValue = 0,
    value,
    max,
    min,
    step = 1,
    editable = true,
    onChange,
    countReducer
  } = props;
  const [count, setCount] = React.useState<number | string>(defaultValue!);

  React.useEffect(() => {
    if(typeof value === 'number') {
      setCount(value);
    }
  }, [value])

  const changeCount = (
    stateModifier: (count: number | string) => number | string,
    type: StepperChangeType
  ) => {
    const oldCount = count;
    const newCount = stateModifier(count);
    const finalCount = countReducer ? countReducer(oldCount, newCount, type) : newCount;
    if (max && finalCount > max) {
      setCount(max);
      onChange && onChange(max);
    } else if (min && finalCount < min) {
      setCount(min);
      onChange && onChange(min);
    } else {
      setCount(finalCount);
      onChange && onChange(Number(finalCount));
    }
  };

  const increase = () => {
    changeCount((count: number | string) => {
      return Number(count) + Math.abs(step!)
    }, StepperChangeType.STATE_CHANGE_INC)
  }

  const decrease = () => {
    changeCount((count: number | string) => {
      return Number(count) - Math.abs(step!)
    }, StepperChangeType.STATE_CHANGE_DEC)
  }

  const setDirectly = (count: number | string) => {
    changeCount(() => {
      return count;
    }, StepperChangeType.STATE_CHANGE_DIRECTLY)
  }

  return (
    <StepperContext.Provider value={{ count, increase, decrease, setDirectly, ...props }}>
      {children}
    </StepperContext.Provider>
  )
}

const CountDecrease: React.FC = () => {
  const { count, decrease, decreaseButtonStyle, disabled, min } = React.useContext(StepperContext);
  return (
    <TouchableOpacity testID='DecreaseBtn' hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }} disabled={disabled || count === min} style={styles.decreaseContainer} activeOpacity={1} onPress={decrease}>
      <KidIcon kid='common_base_subtract_24' kidConfig={common_base_subtract_24} style={[styles.control, { opacity: (disabled || count === min) ? 0.5 : 1 }, decreaseButtonStyle]} />
    </TouchableOpacity>
  )
}

const CountIncrease: React.FC = () => {
  const { count, increase, increaseButtonStyle, disabled, max } = React.useContext(StepperContext);
  return (
    <TouchableOpacity testID='IncreaseBtn' hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }} disabled={disabled || count === max} style={styles.increaseContainer} activeOpacity={1} onPress={increase}>
      <KidIcon kid='common_base_add_24' kidConfig={common_base_add_24} style={[styles.control, { opacity: (disabled || count === max) ? 0.5 : 1 }, increaseButtonStyle]} />
    </TouchableOpacity>
  )
}

const CountContent: React.FC = () => {
  const { count, contentStyle, textStyle, disabled, editable, setDirectly } = React.useContext(StepperContext);
  const { fontSize: size = 15 } = StyleSheet.flatten(textStyle) || {};
  const length = count.toString().length;
  const [width, setWidth] = React.useState(size * (Math.floor(length / 2) + 1) + length - 1 + 18);

  React.useEffect(() => {
    const length = count.toString().length;
    setWidth(size * (Math.floor(length / 2) + 1) + length - 1 + 18);
  }, [count])

  const onChange = (text: string) => {
    if (!isNaN(Number(text))) {
      const length = text.length;
      setWidth(size * (Math.floor(length / 2) + 1) + length - 1 + 18);
      if(text === '') {
        setDirectly('')
      } else {
        setDirectly(Number(text))
      }
    }
  }
  return (
    <View style={[styles.content, { opacity: disabled ? 0.5 : 1 }, Platform.OS === 'web' ? { width: width > 36 ? width : 36} : null, contentStyle]}>
      <TextInput editable={!disabled && editable} style={[styles.text, textStyle]} value={count.toString()} keyboardType='numeric' onChangeText={onChange} />
    </View>
  )
}
const Stepper = BaseStepper as any;
Stepper.increase = CountIncrease;
Stepper.decrease = CountDecrease;
Stepper.content = CountContent

export { Stepper };
export default Stepper;

