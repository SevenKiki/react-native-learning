import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import { Stepper, StepperChangeType } from '../index';

const countReducer = (oldCount: number | string, newCount: number | string, type: StepperChangeType) => {
  if (newCount < 100) {
    switch (type) {
      case StepperChangeType.STATE_CHANGE_INC:
        return Number(oldCount) + 20;
      case StepperChangeType.STATE_CHANGE_DEC:
        return Number(oldCount) - 10;
      case StepperChangeType.STATE_CHANGE_DIRECTLY:
        return newCount
    }
  } else {
    return newCount;
  }
}

describe('testing Stepper', () => {
  it('props: defaultValue step, events: onChange', () => {
    const change = jest.fn();
    const { getByTestId } = render(
      <Stepper
        defaultValue={100}
        step={5}
        onChange={change}
      />
    )
    const decreaseBtn = getByTestId('DecreaseBtn')
    const increaseBtn = getByTestId('IncreaseBtn')
    fireEvent(decreaseBtn, 'onPress');
    expect(change).toHaveBeenCalledWith(95);
    fireEvent(increaseBtn, 'onPress');
    expect(change).toHaveBeenCalledWith(100);
  })

  it('props: min max, events: onChange', () => {
    const change = jest.fn();
    const { getByTestId } = render(
      <Stepper
        min={0}
        max={3}
        onChange={change}
      />
    )
    const decreaseBtn = getByTestId('DecreaseBtn')
    const increaseBtn = getByTestId('IncreaseBtn')
    fireEvent(decreaseBtn, 'onPress');
    expect(change).toHaveBeenCalledTimes(0);
    fireEvent(increaseBtn, 'onPress');
    fireEvent(increaseBtn, 'onPress');
    fireEvent(increaseBtn, 'onPress');
    fireEvent(increaseBtn, 'onPress');
    fireEvent(increaseBtn, 'onPress');
    expect(change).toHaveBeenCalledTimes(3);
  })

  it('props: disabled', () => {
    const change = jest.fn();
    const { getByTestId } = render(
      <Stepper
        disabled
        onChange={change}
      />
    )
    const decreaseBtn = getByTestId('DecreaseBtn')
    const increaseBtn = getByTestId('IncreaseBtn')
    fireEvent(decreaseBtn, 'onPress');
    expect(change).toHaveBeenCalledTimes(0);
    fireEvent(increaseBtn, 'onPress');
    expect(change).toHaveBeenCalledTimes(0);
  })

  it('events: countReducer', () => {
    const change = jest.fn();
    const { getByTestId } = render(
      <Stepper
        defaultValue={80}
        min={85}
        max={104}
        onChange={change}
        countReducer={countReducer}
      />
    )
    const decreaseBtn = getByTestId('DecreaseBtn')
    const increaseBtn = getByTestId('IncreaseBtn')
    fireEvent(decreaseBtn, 'onPress');
    expect(change).toHaveBeenCalledWith(85);
    fireEvent(increaseBtn, 'onPress');
    expect(change).toHaveBeenCalledWith(104);
    fireEvent(increaseBtn, 'onPress');
    expect(change).toHaveBeenCalledWith(104);
    fireEvent(decreaseBtn, 'onPress');
    expect(change).toHaveBeenCalledWith(103);
  })
});