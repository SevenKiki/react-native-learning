import React from 'react';
import { Animated } from 'react-native';
import { render, fireEvent } from '@testing-library/react-native';
import { CollectAnimView } from '../index';
import { sequence } from '../sequence';

jest.useFakeTimers();
describe('testing Rating-Star-View', () => {
  it('test click', () => {
    var alterFunction: any = null;
    const onCollect = jest.fn((collected, alterCollectStatus) => {
      alterFunction = alterCollectStatus;
    });
    const { getByTestId } = render(
      <CollectAnimView
        initCollected={false}
        onCollect={onCollect}
      />
    )
    const root = getByTestId('collectRootView');
    const collectAnimView = getByTestId('collectAnimView');
    const unCollectAnimView = getByTestId('unCollectAnimView');
    // test single press
    fireEvent(root, 'onPress');
    expect(onCollect)?.toHaveBeenCalledTimes(1);
    expect(onCollect)?.toHaveBeenCalledWith(true, alterFunction);
    // test keep status
    fireEvent(root, 'onPress');
    expect(onCollect)?.toHaveBeenCalledTimes(2);
    expect(onCollect)?.toHaveBeenCalledWith(true, alterFunction);
    // test alter status
    alterFunction && alterFunction(true);
    fireEvent(root, 'onPress');
    expect(onCollect)?.toHaveBeenCalledTimes(3);
    expect(onCollect)?.toHaveBeenCalledWith(false, alterFunction);
  })

  it('sequence', () => {
    const value1 = new Animated.Value(0);
    const value2 = new Animated.Value(0);
    const animation1 = Animated.timing(value1, {
      toValue: 1,
      duration: 100,
      useNativeDriver: false
    });
    const animation2 = Animated.timing(value2, {
      toValue: 1,
      duration: 100,
      useNativeDriver: false
    });
    const animations1 = sequence([
      animation1,
      animation2
    ])
    
    const cb1 = jest.fn();
    animations1.start(cb1);
    jest.runAllTimers();
    expect(cb1).toHaveBeenCalledTimes(1)

    const cb = jest.fn();
    const animations2 = sequence([]);
    animations2.start(cb);
    expect(cb).toHaveBeenCalledTimes(1);
  })
});