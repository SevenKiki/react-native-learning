import {
    Animated,
    ViewStyle,
    ImageStyle,
    StyleSheet,
    TouchableOpacity,
} from 'react-native';
import React, { useCallback, useMemo, useRef } from 'react';
import { sequence } from './sequence';
import { KidIcon } from '../icon';
import common_base_collection_24 from '@ks/kw/icon/output/common/base/common_base_collection_24';
import common_baseflat_collection_24 from '@ks/kw/icon/output/common/baseflat/common_baseflat_collection_24';

const styles = StyleSheet.create({
    starContainer: {
        position: 'absolute',
        left: 0,
        top: 0,
        right: 0,
        bottom: 0,
        alignItems: 'center',
        justifyContent: 'center',
    },
});

const DEFAULT_UNCOLLECT_KID = 'common_base_collection_24';
const DEFAULT_UNCOLLECT_KID_CONFIG = common_base_collection_24;
const DEFAULT_COLLECT_ICON_TINTCOLOR = 'rgb(252, 189, 58)'
const DEFAULT_COLLECT_KID = 'common_baseflat_collection_24';
const DEFAULT_COLLECT_KID_CONFIG = common_baseflat_collection_24;
const DEFAULT_ICON_SIZE = 24;

export interface CollectAnimViewProps {
    initCollected: boolean; // 初始状态，后续状态通过atlerCollectStatus更改
    size?: number; // 收藏大小，默认24
    collectIconKid?: string; //收藏图标kid 默认 feed_hashtag_collection_32yellow
    collectIconKidConfig?: (number | string)[]; //收藏图标kidConfig 默认 feed_hashtag_collection_32yellow
    unCollectIconKid?: string; // 未收藏图标kid，默认 feed_hashtag_collection_32black
    unCollectIconKidConfig?: (number | string)[]; // 未收藏图标kidConnfig，默认 feed_hashtag_collection_32black
    onCollect?: (
        collect: boolean, // 点击后状态
        alterCollectStatus: (toStatus: boolean) => void, // 调用alterCollectStatus会改变收藏状态并播放动画
    ) => void; // 收藏点击回调，
    style?: ViewStyle; // 容器style
    collectStyle?: ImageStyle; // 收藏图标style
    unCollectStyle?: ImageStyle; // 未收藏图标style
}

function buildScaleAnim(
    animator: Animated.Value,
    to: number,
    duration: number,
) {
    return Animated.timing(animator, {
        toValue: to,
        duration: duration,
        useNativeDriver: true,
    });
}

/* eslint-disable camelcase */
/**
 * 收藏动画view,动画参考native的CollectAnimView
 */
export function CollectAnimView(props: CollectAnimViewProps) {
    const {
        initCollected,
        size,
        collectIconKid,
        collectIconKidConfig,
        unCollectIconKid,
        unCollectIconKidConfig,
        onCollect,
        style,
        collectStyle,
        unCollectStyle,
    } = props;
    const collect = useRef(initCollected ? initCollected : false);
    // front 是未收藏，back 是收藏黄色那个
    const {
        collectAlphaAnim,
        unCollectAlphaAnim,
        frontAlphaStyle,
        backAlphaStyle,
    } = useMemo(() => {
        const animator = new Animated.Value(collect.current ? 1 : 0);

        const frontAnimator = animator.interpolate({
            inputRange: [0, 1],
            outputRange: [1, 0],
        });

        const backAnimator = animator.interpolate({
            inputRange: [0, 1],
            outputRange: [0, 1],
        });
        return {
            collectAlphaAnim: Animated.timing(animator, {
                toValue: 1,
                duration: 240,
                useNativeDriver: true,
            }),
            unCollectAlphaAnim: sequence([
                Animated.delay(20),
                Animated.timing(animator, {
                    toValue: 0,
                    duration: 240,
                    useNativeDriver: true,
                }),
            ]),
            frontAlphaStyle: {
                opacity: frontAnimator,
            },
            backAlphaStyle: {
                opacity: backAnimator,
            },
        };
    }, []);

    const { collectScaleAnim, unCollectScaleAnim, scaleStyle } = useMemo(() => {
        const animator = new Animated.Value(1);

        const c_scale1 = buildScaleAnim(animator, 0.2, 100);
        const c_scale2 = buildScaleAnim(animator, 1, 100);
        const c_scale3 = buildScaleAnim(animator, 1.0965, 60);
        const c_scale4 = buildScaleAnim(animator, 0.9645, 120);
        const c_scale5 = buildScaleAnim(animator, 1.10131, 120);
        const c_scale6 = buildScaleAnim(animator, 0.9952, 120);
        const c_scale7 = buildScaleAnim(animator, 1.0018, 120);
        const c_scale8 = buildScaleAnim(animator, 1, 0);

        const u_scale1 = buildScaleAnim(animator, 1.0965, 0);
        const u_scale2 = buildScaleAnim(animator, 1, 60);
        const u_scale3 = buildScaleAnim(animator, 0.2, 100);
        const u_scale4 = buildScaleAnim(animator, 1, 100);

        return {
            collectScaleAnim: sequence([
                c_scale1,
                c_scale2,
                c_scale3,
                c_scale4,
                c_scale5,
                c_scale6,
                c_scale7,
                c_scale8,
            ]),
            unCollectScaleAnim: sequence([
                u_scale1,
                u_scale2,
                u_scale3,
                u_scale4,
            ]),
            scaleStyle: {
                transform: [
                    {
                        scale: animator,
                    },
                ],
            },
        };
    }, []);

    const { collectAnim, unCollectAnim } = useMemo(() => {
        return {
            collectAnim: Animated.parallel([
                collectAlphaAnim,
                collectScaleAnim,
            ]),
            unCollectAnim: Animated.parallel([
                unCollectAlphaAnim,
                unCollectScaleAnim,
            ]),
        };
    }, [
        collectAlphaAnim,
        collectScaleAnim,
        unCollectAlphaAnim,
        unCollectScaleAnim,
    ]);

    const alterCollectStatus = useCallback(
        (toStatus: boolean) => {
            if (collect.current === toStatus) {
                return;
            }
            unCollectAnim.stop();
            collectAnim.stop();
            if (collect.current) {
                unCollectAnim.start();
            } else {
                collectAnim.start();
            }
            collect.current = !collect.current;
        },
        [collectAnim, unCollectAnim],
    );

    const onPress = useCallback(() => {
        onCollect && onCollect(!collect.current, alterCollectStatus);
    }, [alterCollectStatus, collect, onCollect]);

    const sizeStyle = useMemo<ImageStyle>(() => {
        return {
            width: size ?? DEFAULT_ICON_SIZE,
            height: size ?? DEFAULT_ICON_SIZE,
        };
    }, [size]);

    return (
        <TouchableOpacity testID='collectRootView' style={[style, sizeStyle]} onPress={onPress}>
            <Animated.View
                testID={'collectAnimView'}
                style={[styles.starContainer, backAlphaStyle, scaleStyle]}
            >
                <KidIcon
                    style={[(!collectIconKid && !collectIconKidConfig) && {tintColor: DEFAULT_COLLECT_ICON_TINTCOLOR}, collectStyle, sizeStyle]}
                    kid={collectIconKid ?? DEFAULT_COLLECT_KID }
                    kidConfig={collectIconKidConfig ?? DEFAULT_COLLECT_KID_CONFIG}
                />
            </Animated.View>
            <Animated.View
                testID={'unCollectAnimView'}
                style={[styles.starContainer, frontAlphaStyle, scaleStyle]}
            >
                <KidIcon
                    style={[unCollectStyle, sizeStyle]}
                    kid={unCollectIconKid ?? DEFAULT_UNCOLLECT_KID}
                    kidConfig={unCollectIconKidConfig ?? DEFAULT_UNCOLLECT_KID_CONFIG}
                />
            </Animated.View>
        </TouchableOpacity>
    );
}
