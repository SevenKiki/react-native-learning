import React, { Component } from 'react';
import {
    View,
    Text,
    StyleSheet,
    Animated,
    StyleProp,
    ViewStyle,
    TextStyle,
} from 'react-native';
import { KidIcon } from '../icon';
import { Svg, Circle } from './svg'
import common_toast_success from '@ks/kw/icon/output/common/toast/common_toast_success';
import common_toast_error from '@ks/kw/icon/output/common/toast/common_toast_error';
import { ScaleContext } from '../context';

const AnimateCircle: any = Animated.createAnimatedComponent(Circle);

interface ToastProgressProps {
    type?: string;
    percent?: number;
    size?: number;
    style?: StyleProp<ViewStyle>;
}
export class ToastComponent extends Component<ToastProgressProps> {
    offset: Animated.Value;
    animation?: Animated.CompositeAnimation;
    constructor(props: ToastProgressProps) {
        super(props);
        this.offset = new Animated.Value(0);
    }

    UNSAFE_componentWillReceiveProps(nextProps: ToastProgressProps) {
        this.onPropsChange(nextProps);
    }
    componentDidMount() {
        this.onPropsChange(this.props);
    }

    onPropsChange(nextProps: ToastProgressProps) {
        const { percent = 0 } = nextProps;
        this.offset.setValue(
            percent > 100 ? 0 : ((100 - percent) / 100) * 14 * Math.PI,
        );
    }

    shouldComponentUpdate(nextProps: ToastProgressProps) {
        const changeKeys: (keyof ToastProgressProps)[] = [
            'type',
            'size',
            'style',
        ];
        return changeKeys.some((key) => this.props[key] !== nextProps[key]);
    }
    render() {
        const { type = '#ffffff', size = 38, style } = this.props;
        return (
            <Svg width={size} height={size} viewBox="0 0 38 38" style={style}>
                <Circle cx="19" cy="19" r="18" strokeWidth="2" stroke={type} />
                <AnimateCircle
                    cx="19"
                    cy="19"
                    r="7"
                    fill="none"
                    strokeWidth="14"
                    stroke={type}
                    strokeDasharray={14 * Math.PI}
                    strokeDashoffset={this.offset}
                    transform="rotate(-90, 19, 19)"
                />
            </Svg>
        );
    }
}
export interface ToastProps {
    toastStyle?: ViewStyle;
    textStyle?: TextStyle;
    kid?:
    | ''
    | 'style_toast_text'
    | 'style_toast_success'
    | 'style_toast_failed'
    | 'style_toast_download';
    text?: string;
    percent?: number;
    duration?: number;
    getPercentText?: (percent: number) => string;
}

export const KidToastComponent: React.FC<ToastProps> = (toast: ToastProps = {}) => {
    const { rem } = React.useContext(ScaleContext);
    const {
        toastStyle = {},
        text = '',
        textStyle = {},
        kid = 'style_toast_text',
        percent = 0,
        getPercentText
    } = toast;

    // style_toast_text 文案最长时内容去的宽度即为最大宽度
    const MAX_TEXT_LENGTH = 15;
    const FONT_SIZE = 16;
    const MAX_TEXT_WIDTH = MAX_TEXT_LENGTH * (FONT_SIZE + 1) - 1;

    const textWidth = React.useMemo(() => {
        if (text.length <= MAX_TEXT_LENGTH) {
            return undefined
        }
        return rem(MAX_TEXT_WIDTH);
    }, [text])

    const textNumberOfLines = React.useMemo(() => {
        if (text.length <= MAX_TEXT_LENGTH) {
            return 1;
        } else {
            return Math.ceil(text.length / MAX_TEXT_LENGTH);
        }
    }, [text])

    const styles = StyleSheet.create({
        toastText: {
            marginVertical: rem(12),
            marginHorizontal: rem(20),
            lineHeight: rem(24),
            fontSize: rem(16),
            fontFamily: 'PingFangSC-Regular',
            textAlign: 'center',
            color: '#fff',
            position: 'relative'
        },
        toastSmallText: {
            height: rem(21),
            lineHeight: rem(21),
            fontSize: rem(14),
            fontFamily: 'PingFangSC-Regular',
            alignItems: 'center',
            textAlign: 'center',
            color: '#fff',
            marginTop: rem(12),
        },
    });

    return (
        <View
            style={[
                {
                    borderRadius: rem(8),
                },
                toastStyle,
            ]}>
            <View
                style={[
                    {
                        opacity: 0.7,
                        backgroundColor: '#000000',
                        borderRadius: rem(8),
                        position: 'absolute',
                        top: 0,
                        bottom: 0,
                        left: 0,
                        right: 0,
                    },
                ]}
            />
            {kid === 'style_toast_text' || '' ? (
                <Text style={[styles.toastText, { width: textWidth }, textStyle]} numberOfLines={textNumberOfLines}>{text}</Text>
            ) : null}
            {kid === 'style_toast_success' && (
                <View
                    style={{
                        width: rem(120),
                        height: rem(120),
                        borderRadius: rem(8),
                        justifyContent: 'center',
                        alignItems: 'center',
                    }}>
                    <KidIcon
                        kid="common_toast_success"
                        kidConfig={common_toast_success}
                        width={38}
                        height={29}
                    />
                    <Text style={[styles.toastSmallText, { marginTop: rem(16) }, textStyle]}>
                        {text}
                    </Text>
                </View>
            )}
            {kid === 'style_toast_failed' && (
                <View
                    style={{
                        width: rem(120),
                        height: rem(120),
                        borderRadius: rem(8),
                        justifyContent: 'center',
                        alignItems: 'center',
                    }}>
                    <KidIcon
                        kid="common_toast_error"
                        kidConfig={common_toast_error}
                        width={38}
                        height={29}
                    />
                    <Text style={[styles.toastSmallText, { marginTop: rem(14) }, textStyle]}>
                        {text}
                    </Text>
                </View>
            )}
            {kid === 'style_toast_download' && (
                <View
                    style={{
                        width: rem(120),
                        height: rem(120),
                        borderRadius: rem(8),
                        justifyContent: 'center',
                        alignItems: 'center',
                    }}>
                    <ToastComponent percent={percent}></ToastComponent>
                    <Text style={[styles.toastSmallText, textStyle]}>
                        {getPercentText ? getPercentText(percent) : `已经下载${percent}%`}
                    </Text>
                </View>
            )}
        </View>
    );
};


