//@ts-nocheck
import React, { Component } from 'react';
import type { TextStyle, ViewStyle } from 'react-native';
import { Text, StyleSheet } from 'react-native';
import { Popup } from '../popup';
import RootSiblings from 'react-native-root-siblings';
import {
  ToastDuration,
  ToastInOutDuration,
  ToastPosition,
  ToastDefaultOpt,
  ModalDefaultOpt,
} from './constants';
import { shadowBlackStyleBottom } from './util';
export interface ToastProps {
  onRequestClose?: () => void;
  data?: React.ReactNode;
  maskBgColor?: string,
  position?: number;
  useAnimate?: boolean;
  textColor?: string;
  backgroundColor?: string;
  icon?: React.ReactNode;
  duration?: number;
  isShowShadow?: boolean;
  contentStyle?: ViewStyle;
  textStyle?: TextStyle;
  showMask?: boolean;
  useModal?: boolean;
}

let rootSiblings: RootSiblings = null;
let liftCycleManage: number = null;

const styles = StyleSheet.create({
  icon: {},
  text: {
    fontSize: 14,
    position: 'relative'
  },
});

export class Toast extends Component<ToastProps> {
  static duration = ToastDuration;

  static position = ToastPosition;

  static show = (toastOpts: ToastProps | string) => {
    if (typeof toastOpts === 'string') {
      toastOpts = { data: toastOpts };
    }

    toastOpts = Object.assign({}, toastOpts.showMask ? ModalDefaultOpt : ToastDefaultOpt, toastOpts);

    Toast.hide();
    rootSiblings = new RootSiblings(<Toast {...toastOpts} />);
    if (toastOpts.duration > 0) {
      liftCycleManage = setTimeout(() => {
        Toast.hide();
      }, toastOpts.duration + ToastInOutDuration);
    }
  };

  static update = (toastOpts: ToastProps | string = {}) => {
    if (typeof toastOpts === 'string') {
      toastOpts = { data: toastOpts };
    }

    Toast.show({ ...toastOpts, useAnimate: false });
  };

  static hide = () => {
    if (liftCycleManage) {
      clearTimeout(liftCycleManage);
      liftCycleManage = null;
    }
    if (rootSiblings) {
      rootSiblings.destroy();
      rootSiblings = null;
    }
  };

  render() {
    const {
      showMask = false,
      useModal = false,
      useAnimate = true,
      isShowShadow = true,
      contentStyle = {},
      maskBgColor = "transparent",
      onRequestClose
    } = this.props;
    const popupStyle: any = {
      backgroundColor: this.props.backgroundColor,
      padding: 10,
      borderRadius: 4,
      ...(isShowShadow ? shadowBlackStyleBottom : {}),
      ...contentStyle
    };
    let position: 'bottom' | 'top' | 'center' = 'bottom';
    if (this.props.position > 0) {
      position = 'top';
      popupStyle.top = 80;
    } else if (this.props.position === 0) {
      position = 'center';
    } else if (this.props.position < 0) {
      popupStyle.marginTop = -100;
    }

    return (
      <Popup maskBgColor={maskBgColor} beforeClose={onRequestClose} maskClosable={false} popupStyle={popupStyle} animate={useAnimate ? 'slider' : 'none'} position={position} showMask={showMask} visible componentApi={false} useModal={useModal}>
        {this.props.icon}
        {typeof this.props.data === 'string' ? (
          <Text style={[styles.text, { color: this.props.textColor }, this.props.textStyle]}>
            {this.props.data}
          </Text>
        ) : (
          this.props.data
        )}
      </Popup>
    );
  }
}
