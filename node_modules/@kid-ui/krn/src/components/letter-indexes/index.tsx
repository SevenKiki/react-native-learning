// @ts-nocheck
import { createKidComponent } from '../../utils';
import React, { useState, useRef, useEffect } from 'react';
import {
    View,
    Text,
    PanResponder,
    FlatList,
    TouchableOpacity,
    NativeModules,
    StyleProp,
    ViewStyle,
    TextStyle
} from 'react-native';

export interface LetterIndexesProps {
    onChange?: (
        value?: number,
        string?: number | string | React.ReactElement,
    ) => void;
    indicatorBgColor?: string;
    indicatorTextColor?: string;
    indicatorTextFont?: number;
    indicatorHeight?: number;
    indicatorRightMargin?: number;
    indicatorCornerRadius?: number;
    indexBgColor?: string;
    indexTextColor?: string;
    indexSelectedBgColor?: string;
    indexSelectedTextColor?: string;
    indexHeight?: number;
    indexRightMargin?: number;
    indexSpace?: number;
    indexTextFont?: number;
    indexSelectedRadius?: number;
    indexTextStyle?: StyleProp<TextStyle>,
    data?: Array<string | number | React.ReactElement>;
    indexNum?: number;
}
const TRIANGLE_LEFT = 0.5 / Math.sqrt(2) + 0.25;
export const Indexes: React.FC<LetterIndexesProps> = (props) => {
    const {
        indexNum = 0,
        onChange = () => { },
        indicatorBgColor = '#c6c6c6',
        indicatorTextColor = '#ffffff',
        indicatorTextFont = 30,
        indicatorHeight = 50,
        indicatorRightMargin = 40,
        indicatorCornerRadius = indicatorHeight / 2, //10
        indexBgColor = '#00000000',
        indexTextColor = '#666666',
        indexSelectedBgColor = '#FF5000',
        indexSelectedTextColor = '#ffffff',
        indexHeight = 18,
        indexRightMargin = 5,
        indexSpace = 3,
        indexTextFont = 11,
        indexSelectedRadius = 15, // 7
        indexTextStyle = {},
        data = [
            'A',
            'B',
            'C',
            'D',
            'E',
            'F',
            'G',
            'H',
            'I',
            'J',
            'K',
            'L',
            'M',
            'N',
            'O',
            'P',
            'Q',
            'R',
            'S',
            'T',
            'U',
            'V',
            'W',
            'X',
            'Y',
            'Z',
        ],
    } = props;
    const indicatorWidth =
        indicatorRightMargin + (indicatorHeight * Math.sqrt(2)) / 2;

    const [top, listHeight, itemHeight] = [useRef(0), useRef(0), useRef(0)];

    const [selectIndex, setSelectIndex] = useState(indexNum);
    const [showBubble, setShowBubble] = useState(false);
    useEffect(() => {
        if (!showBubble) {
            setSelectIndex(props.indexNum);
        }
    }, [props.indexNum]);
    /**
     * 计算当前位置对应的字母及其index
     */
    function getWordIndex(y) {
        const index = Math.floor(
            (y - indicatorHeight / 2 - top.current) / itemHeight.current,
        );
        return {
            index,
        };
    }
    /**
     * 改变背景色
     */

    const _onChange = (index) => {
        if (data.length > index && index > -1) {
            onChange(index, data[index]);
            setSelectIndex(index);
        }
    };
    const panResponder = PanResponder.create({
        onStartShouldSetPanResponderCapture: () => true,
        onStartShouldSetPanResponder: () => true,
        onMoveShouldSetPanResponder: () => true,
        onMoveShouldSetPanResponderCapture: () => true,
        onPanResponderGrant: (evt, gestureState) => {
            const { index } = getWordIndex(gestureState.y0);
            setShowBubble(true);
            _onChange(index);
        },
        onPanResponderMove: (evt, gestureState) => {
            // 获取当前滑动到的位置，根据当前位置，取出index 对应 word
            const { index } = getWordIndex(gestureState.moveY);
            _onChange(index);
        },
        onPanResponderRelease: () => {
            //  隐藏dialog
            setShowBubble(false);
        },
        onPanResponderTerminate: () => {
            //  隐藏dialog
            setShowBubble(false);
        },
        onPanResponderTerminationRequest: () => false,
    });

    const _onLayout = (e) => {
        NativeModules.UIManager?.measure?.(
            e.nativeEvent.target,
            (x, y, width, _height, pageX, pageY) => {
                top.current = pageY;
                listHeight.current = _height;
                const length = data.length;
                itemHeight.current = (_height - indicatorHeight) / length;
            },
        );
    };
    const renderTriangle = () => {
        const triangleStyle: StyleProp<ViewStyle> = {
            position: 'absolute',
            backgroundColor: indicatorBgColor,
            width: indicatorHeight / 2,
            height: indicatorHeight / 2,
            left: indicatorHeight * TRIANGLE_LEFT,
            top: (indexSelectedRadius - indicatorHeight / 2) / 2,
            transform: [{ rotate: '45deg' }],
        };

        return <View style={triangleStyle} />;
    };
    const renderCircle = (item) => {
        return (
            <View
                style={{
                    position: 'absolute',
                    backgroundColor: indicatorBgColor,
                    top: (indexSelectedRadius - indicatorHeight) / 2,
                    width: indicatorHeight,
                    height: indicatorHeight,
                    borderRadius: indicatorCornerRadius,
                    justifyContent: 'center',
                    alignItems: 'center',
                }}>
                <Text
                    style={{
                        color: indicatorTextColor,
                        fontSize: indicatorTextFont,
                        lineHeight: indicatorHeight,
                    }}>
                    {item}
                </Text>
            </View>
        );
    };

    const renderItem = ({ item, index }) => {
        const isSelected = index === selectIndex;
        const textBackgroundColor = isSelected ? indexSelectedBgColor : null;
        const textColor = isSelected ? indexSelectedTextColor : indexTextColor;
        return (
            <View
                style={{
                    justifyContent: 'space-between',
                    flexDirection: 'row-reverse',
                    backgroundColor: indexBgColor,
                    height: indexHeight,
                    // 放大父级容器宽度，使hitSlop可以扩充按钮的外延范围
                    minWidth: indexHeight * 2,
                    marginVertical: indexSpace / 2,
                }}>
                <TouchableOpacity
                    hitSlop={{
                        left: 20,
                    }}
                    style={{
                        backgroundColor: textBackgroundColor,
                        width: indexSelectedRadius,
                        height: indexSelectedRadius,
                        borderRadius: indexSelectedRadius / 2,
                        alignItems: 'center',
                        justifyContent: 'center',
                    }}>
                    <Text
                        style={[
                            {
                                textAlign: 'center',
                            },
                            indexTextStyle,
                            {
                                color: textColor,
                                fontSize: indexTextFont,
                                lineHeight: indexSelectedRadius,
                            }
                        ]}>
                        {item}
                    </Text>
                </TouchableOpacity>
                <View
                    style={{
                        display: isSelected && showBubble ? 'flex' : 'none',
                        width: indicatorWidth,
                        height: indexSelectedRadius,
                    }}>
                    {renderTriangle()}
                    {renderCircle(item)}
                </View>

                <View />
            </View>
        );
    };

    return (
        <View
            style={{
                paddingRight: indexRightMargin,
            }}
            onLayout={_onLayout}
            {...panResponder.panHandlers}>
            <FlatList
                ListFooterComponent={
                    <View style={{ height: indicatorHeight / 2 }} />
                }
                ListHeaderComponent={
                    <View style={{ height: indicatorHeight / 2 }} />
                }
                data={data}
                keyExtractor={(item, index) => index.toString()}
                renderItem={renderItem}
            />
        </View>
    );
};

export const KidLetterIndexes = createKidComponent(Indexes);
