import React from 'react';
import { Dimensions, View, Text, StyleSheet } from 'react-native';
import { DialogProps, DialogShow } from '../dialog';
import { DialogComponent } from '../alert/dialog-component';
import { ScrollPicker, DatePicker, TimePicker } from '../time-picker'
import { AlertPickerProps, AlertPickerTopProps, AlertPickerContentProps, wrapFuc } from '../alert/common';
import { rem } from '../../utils';
import useKidColor from '../../theme/useKidColor';

const windowWidth = Dimensions.get('window').width;

export const AlertPicker = (arg: AlertPickerProps) => {
    const {
        pickerType,
        topContainerStyle,
        topCancelText = '取消',
        topCancelTextStyle,
        topCancelStyle,
        topConfirmText = '完成',
        topConfirmTextStyle,
        topConfirmStyle,
        topTitleText = '标题',
        topTitleTextStyle,
        topTitleStyle,
        pickerStyle,
        onTopCancel,
        onTopConfirm,
        scrollPickerProps,
        datePickerProps,
        timePickerProps,
        popupSet,
        ...rest
    } = arg;

    const pickerTopProps = {
        topContainerStyle,
        topCancelText,
        topCancelTextStyle,
        topCancelStyle,
        topConfirmText,
        topConfirmTextStyle,
        topConfirmStyle,
        topTitleText,
        topTitleTextStyle,
        topTitleStyle,
        onTopCancel,
        onTopConfirm,
    }

    const pickerContentProps = {
        pickerType,
        pickerStyle,
        scrollPickerProps,
        datePickerProps,
        timePickerProps,
    }

    const Top: React.FC<AlertPickerTopProps> = (props) => {
        const {
            topContainerStyle,
            topCancelText,
            topCancelTextStyle,
            topCancelStyle,
            topConfirmText,
            topConfirmTextStyle,
            topConfirmStyle,
            topTitleText,
            topTitleTextStyle,
            topTitleStyle,
            onTopCancel,
            onTopConfirm,
        } = props;
        
        const borderBottomColor = useKidColor('cs_common_stroke_dialogline');
        const topCancelTextColor = useKidColor('cs_common_text_primary');
        const topTitleTextColor = useKidColor('cs_common_text_title');
        const topConfirmTextColor = useKidColor('cs_common_text_main');

        return (<View style={[styles.top, { borderBottomColor }, topContainerStyle]}>
            <View style={[styles.topCancel, topCancelStyle]}>
                <Text onPress={onTopCancel} style={[styles.topCancelText, {color: topCancelTextColor}, topCancelTextStyle]}>{topCancelText}</Text>
            </View>
            <View style={topTitleStyle}>
                <Text style={[styles.topTitleText, {color: topTitleTextColor}, topTitleTextStyle]}>{topTitleText}</Text>
            </View>
            <View style={[styles.topConfirm, topConfirmStyle]}>
                <Text onPress={onTopConfirm} style={[styles.topConfirmText, {color: topConfirmTextColor}, topConfirmTextStyle]}>{topConfirmText}</Text>
            </View>
        </View>)
    }

    const Picker: React.FC<AlertPickerContentProps> = (props) => {
        const {
            pickerType,
            pickerStyle,
            scrollPickerProps,
            datePickerProps,
            timePickerProps,
        } = props;
        const backgroundColor = useKidColor('cs_common_background_surface_primary')
        switch (pickerType) {
            case 'original':
                return (
                    <View style={[styles.picker, {backgroundColor}, pickerStyle]}>
                        <ScrollPicker {...scrollPickerProps} />
                    </View>
                )
            case 'date':
                return (
                    <View style={[styles.picker, {backgroundColor},  pickerStyle]}>
                        <DatePicker {...datePickerProps} />
                    </View>
                )
            case 'time':
                return (
                    <View style={[styles.picker, {backgroundColor},  pickerStyle]}>
                        <TimePicker {...timePickerProps} />
                    </View>
                )
            case 'date-time':
                return (
                    <View style={[styles.picker, {backgroundColor},  pickerStyle]}>
                        <DatePicker {...datePickerProps} />
                        <TimePicker {...timePickerProps} />
                    </View>
                )
            default:
                return null;
        }
    }

    const renderContent = (props: AlertPickerContentProps) => {
        return <Picker {...props} />
    }
    let defaultProps: DialogProps = {
        position: 'bottom',
        animate: 'slider',
        popupStyle: {
            width: windowWidth,
            backgroundColor: 'rgba(0,0,0,0)',
        },
        maskBgColor: 'rgba(0,0,0,0.3)',
        popupSet,
        ...popupSet,
        width: '100%',
        showButton: false,
        showTitle: false,
        showDesc: false,
        renderTop: wrapFuc(Top, pickerTopProps),
        renderContent: wrapFuc(renderContent, pickerContentProps)
    };
    const alert = DialogShow(
        { ...(defaultProps as any), ...rest },
        DialogComponent,
    );
    return {
        close: () => {
            alert.close();
        },
        update: (props: AlertPickerProps) => {
            const updateProps = { ...defaultProps, ...rest, ...props };
            alert.update(updateProps as DialogProps)
        },
    };
};

const styles = StyleSheet.create({
    top: {
        width: '100%',
        height: rem(48),
        backgroundColor: 'transparent',
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
        borderBottomWidth: 0.5,
    },
    topCancel: {
        marginLeft: rem(24),
    },
    topCancelText: {
        fontSize: 16
    },
    topTitleText: {
        fontSize: 17,
        fontWeight: '500',
    },
    topConfirm: {
        marginRight: rem(24),
        fontSize: 16
    },
    topConfirmText: {
        fontSize: 16
    },
    picker: {
        flexDirection: 'row',
        width: '100%',
        alignItems: 'center'
    }
})
