import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import { View, Text } from 'react-native';
import { KidSearchBar } from '../index';
import type { SearchBarRef } from '../index';

const RefDemo = ({ handleFocus, handleBlur, handleClear }) => {
  const searchBarRef = React.useRef<SearchBarRef>(null);
  React.useEffect(() => {
    searchBarRef.current?.focus();
    searchBarRef.current?.clear();
    searchBarRef.current?.blur();
    searchBarRef.current?.isFocused();
    searchBarRef.current?.nativeElement;
  });

  return (
    <KidSearchBar
      ref={searchBarRef}
      onFocus={handleFocus}
      onBlur={handleBlur}
      onClear={handleClear}
    />
  );
};

describe('testing KidSearchBar', () => {
  it('props: customStyle', () => {
    const { toJSON } = render(
      <KidSearchBar
        customStyle={{
          inputHeight: 60,
          inputBackgroundColor: 'skyblue',
          inputBorderRadius: 20,
        }}
        placeholder="请输入内容"
        placeholderTextColor="#fff"
      />,
    );
    expect(toJSON()).toMatchSnapshot();
  });

  it('props: showBack', () => {
    const { toJSON } = render(<KidSearchBar placeholder="请输入内容" showBack={true} />);
    expect(toJSON()).toMatchSnapshot();
  });

  it('props: backContent', () => {
    const { toJSON } = render(
      <KidSearchBar
        placeholder="请输入内容"
        showBack={true}
        backContent={
          <View
            style={{
              width: 20,
              height: 20,
              backgroundColor: '#000',
              borderRadius: 10,
              marginRight: 4,
            }}
          />
        }
      />,
    );
    expect(toJSON()).toMatchSnapshot();
  });

  it('props: searchButtonContent', () => {
    const { toJSON } = render(
      <KidSearchBar
        placeholder="请输入内容"
        searchButtonContent={
          <View
            style={{
              width: 20,
              height: 20,
              backgroundColor: '#000',
              borderRadius: 10,
              marginLeft: 4,
            }}
          />
        }
      />,
    );
    expect(toJSON()).toMatchSnapshot();
  });

  it('props: prefixIcon', () => {
    const { toJSON } = render(<KidSearchBar placeholder="请输入内容" prefixIcon={false} />);
    expect(toJSON()).toMatchSnapshot();
  });

  it('props: suffixIcon', () => {
    const { toJSON } = render(<KidSearchBar placeholder="请输入内容" suffixIcon={false} />);
    expect(toJSON()).toMatchSnapshot();
  });

  it('props: renderPrefixIcon', () => {
    const { toJSON } = render(
      <KidSearchBar
        placeholder="请输入内容"
        renderPrefixIcon={() => <Text style={{ marginRight: 5 }}>icon</Text>}
      />,
    );
    expect(toJSON()).toMatchSnapshot();
  });

  it('props: renderSuffixIcon', () => {
    const { toJSON } = render(
      <KidSearchBar
        placeholder="请输入内容"
        renderSuffixIcon={() => <Text style={{ marginRight: 5 }}>icon</Text>}
      />,
    );
    expect(toJSON()).toMatchSnapshot();
  });

  it('props: clearable', () => {
    const { toJSON } = render(<KidSearchBar placeholder="请输入内容" clearable={false} />);
    expect(toJSON()).toMatchSnapshot();
  });

  it('events: onBackPress', () => {
    const onPress = jest.fn();
    const { getByTestId } = render(
      <KidSearchBar placeholder="请输入内容" showBack={true} onBackPress={onPress} />,
    );
    const backEle = getByTestId('search-bar-back');
    fireEvent.press(backEle);
    expect(onPress).toHaveBeenCalled();
  });

  it('events: onSearchPress', () => {
    const onPress = jest.fn();
    const { getByTestId } = render(
      <KidSearchBar placeholder="请输入内容" onSearchPress={onPress} />,
    );
    const searchEle = getByTestId('search-bar-search-btn');
    fireEvent.press(searchEle);
    expect(onPress).toHaveBeenCalled();
  });

  it('events: onClear', () => {
    const onClear = jest.fn();
    const { getByTestId } = render(
      <KidSearchBar value="1234" placeholder="请输入内容" onClear={onClear} />,
    );
    const clearBtn = getByTestId('search-bar-clear');
    fireEvent.press(clearBtn);
    expect(onClear).toHaveBeenCalled();
  });

  it('ref function focus blur clear', () => {
    const onFocus = jest.fn();
    const onBlur = jest.fn();
    const onClear = jest.fn();
    const props = {
      handleFocus: onFocus,
      handleBlur: onBlur,
      handleClear: onClear,
    };
    const { getByTestId } = render(<RefDemo {...props} />);
    const input = getByTestId('search-bar-input');
    fireEvent(input, 'focus');
    fireEvent(input, 'blur');
    fireEvent(input, 'clear');
    expect(onFocus).toHaveBeenCalled();
    expect(onClear).toHaveBeenCalled();
    expect(onBlur).toHaveBeenCalled();
  });
});
