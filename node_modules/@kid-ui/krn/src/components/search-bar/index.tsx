import React, { forwardRef, useRef, ReactNode, useImperativeHandle } from 'react';
import { View, TextInput, Text, TouchableOpacity, StyleSheet, Platform } from 'react-native';
import { KidIcon, KidIconProps } from '../icon/index';
import { getThemeValue, rem } from '../../utils';

export interface SearchBarCustomStyleProps {
  inputHeight?: number;
  inputBackgroundColor?: string;
  inputBorderRadius?: number;
}

export type SearchBarRef = {
  clear: () => void;
  focus: () => void;
  blur: () => void;
  isFocused: () => boolean;
  nativeElement: TextInput | null;
};

interface SearchBarProps extends React.ComponentPropsWithRef<typeof TextInput> {
  customStyle?: SearchBarCustomStyleProps; // 用户自定义样式，可以通过 inputHeight、inputBackgroundColor、inputBorderRadius 设置高度、背景色和圆角
  backContent?: string | ReactNode; // 返回 icon 区域的内容，可以是字符串或者 ReactNode 节点,当 showBack 为 true 时生效
  searchButtonContent?: string | ReactNode; // 搜索按钮区域的内容，可以是字符串或者 ReactNode 节点
  prefixIcon?: KidIconProps | false; // 输入框头部图标
  renderPrefixIcon?: () => ReactNode; // 自定义输入框头部图标，优先级高于 prefixIcon
  suffixIcon?: KidIconProps | false; // 输入框尾部图标
  renderSuffixIcon?: () => ReactNode; // 自定义输入框尾部图标，优先级高于 suffixIcon
  showBack?: boolean; // 是否显示返回按钮
  clearable?: boolean; // 是否启用清除图标，点击清除图标后会清空输入框
  onBackPress?: () => void; // 点击返回 icon 区域时触发的回调
  onSearchPress?: () => void; // 点击搜索按钮区域时触发的回调
  onClear?: () => void; // 点击清除按钮后触发
}

const defaultPrefixIcon = {
  kid: 'common_search_search_16',
};
const icon_size = rem(16);
const search_input_height = rem(40);
const cs_search_background = getThemeValue({
  dark: '#35353C',
  light: '#F2F3F7',
});

export const SearchBar = forwardRef<SearchBarRef, SearchBarProps>(
  (
    {
      customStyle = {},
      value,
      backContent,
      searchButtonContent = '搜索',
      prefixIcon = defaultPrefixIcon,
      renderPrefixIcon,
      suffixIcon,
      renderSuffixIcon,
      clearable = true,
      showBack = false,
      onBackPress,
      onSearchPress,
      onClear,
      style: inputStyle,
      ...rest
    },
    ref,
  ) => {
    const innerRef = useRef<TextInput | null>(null);
    const { inputHeight, inputBackgroundColor, inputBorderRadius } = customStyle;
    const clearValue = () => {
      innerRef?.current?.clear();
      rest.onChangeText && rest.onChangeText('');
      typeof onClear === 'function' && onClear();
    };

    useImperativeHandle(ref, () => ({
      clear: () => {
        clearValue();
      },
      focus: () => {
        innerRef?.current?.focus();
      },
      blur: () => {
        innerRef?.current?.blur();
      },
      isFocused: () => {
        return innerRef?.current?.isFocused() ?? false;
      },
      get nativeElement() {
        return innerRef?.current;
      },
    }));

    // 搜索栏左侧区域
    const searchLeftContent = () => {
      if (showBack) {
        if (typeof backContent === 'string') {
          return (
            <TouchableOpacity
              testID="search-bar-back"
              activeOpacity={1}
              onPress={() => {
                typeof onBackPress === 'function' && onBackPress();
              }}
              style={styles.leftTextContent}
            >
              <Text style={styles.text}>{backContent}</Text>
            </TouchableOpacity>
          );
        }
        if (React.isValidElement(backContent)) {
          return (
            <TouchableOpacity
              testID="search-bar-back"
              activeOpacity={1}
              onPress={() => {
                typeof onBackPress === 'function' && onBackPress();
              }}
            >
              {backContent}
            </TouchableOpacity>
          );
        }
        return (
          <TouchableOpacity
            testID="search-bar-back"
            activeOpacity={1}
            onPress={() => {
              typeof onBackPress === 'function' && onBackPress();
            }}
          >
            <KidIcon kid="common_base_return_24" size={rem(24)} />
          </TouchableOpacity>
        );
      }
      return null;
    };

    // 搜索栏右侧区域
    const searchRightContent = () => {
      if (typeof searchButtonContent === 'string') {
        return (
          <TouchableOpacity
            testID="search-bar-search-btn"
            activeOpacity={1}
            style={styles.rightTextContent}
            onPress={() => {
              typeof onSearchPress === 'function' && onSearchPress();
            }}
          >
            <Text style={styles.text}>{searchButtonContent}</Text>
          </TouchableOpacity>
        );
      }
      if (React.isValidElement(searchButtonContent)) {
        return (
          <TouchableOpacity
            testID="search-bar-search-btn"
            activeOpacity={1}
            onPress={() => {
              typeof onSearchPress === 'function' && onSearchPress();
            }}
          >
            {searchButtonContent}
          </TouchableOpacity>
        );
      }
      return null;
    };
    // 输入框右侧icon
    const inputRightContent = () => {
      if (clearable && value) {
        return (
          <TouchableOpacity testID="search-bar-clear" activeOpacity={1} onPress={clearValue}>
            <KidIcon kid="common_base_close_24" size={icon_size} />
          </TouchableOpacity>
        );
      }
      if (renderSuffixIcon && typeof renderSuffixIcon === 'function') {
        return renderSuffixIcon();
      }
      if (suffixIcon) {
        return <KidIcon size={icon_size} {...suffixIcon} />;
      }
    };

    // 输入框左侧icon
    const inputLeftContent = () => {
      if (renderPrefixIcon && typeof renderPrefixIcon === 'function') {
        return renderPrefixIcon();
      }
      if (prefixIcon) {
        return (
          <View style={styles.prefixIcon}>
            <KidIcon size={icon_size} {...prefixIcon} />
          </View>
        );
      }
    };

    return (
      <View style={[styles.search, { height: inputHeight ?? search_input_height }]}>
        {searchLeftContent()}
        <View
          style={[
            styles.content,
            {
              borderRadius: inputBorderRadius ?? (inputHeight ?? search_input_height) / 2,
              backgroundColor: inputBackgroundColor ?? cs_search_background,
            },
          ]}
        >
          {inputLeftContent()}
          <TextInput
            testID="search-bar-input"
            ref={innerRef}
            value={value}
            style={[
              styles.input,
              {
                height: inputHeight ?? search_input_height,
              },
              inputStyle,
            ]}
            placeholderTextColor="#666"
            selectionColor="#FE3666"
            {...rest}
          />
          {inputRightContent()}
        </View>
        {searchRightContent()}
      </View>
    );
  },
);

const styles = StyleSheet.create({
  leftTextContent: {
    marginRight: rem(12),
  },
  text: {
    fontSize: rem(16),
    color: '#000',
  },
  rightTextContent: {
    marginLeft: rem(12),
  },
  prefixIcon: {
    marginRight: rem(5),
  },
  search: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  content: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: rem(12),
  },
  input: {
    flex: 1,
    fontSize: rem(16),
    color: '#000',
    paddingVertical: 0,
    ...(Platform.OS === 'web'
      ? {
          caretColor: '#FE3666',
        }
      : null),
  },
});

export const KidSearchBar = SearchBar;
