import React from 'react';
import { Text, StyleProp, ViewStyle, TextStyle, GestureResponderEvent } from 'react-native';
import { createKidComponent, rem } from '../../utils';
import CustomBubble, { Placement } from './custom-bubble';
import { useThemeValue } from '../../theme/useThemeValue';
import type { ThemeValue } from '../../theme/useThemeValue';
import type { ShadowProps } from '@kds/react-native-shadow-2';

export interface TextBubbleProps {
    isVisible?: boolean;
    //触发视图rect
    fromRect?: { x: number; y: number; width: number; height: number };
    // 气泡文字
    text?: string;
    textFont?: number;
    textColor?: ThemeValue<string>;
    textWeight?: TextStyle["fontWeight"];
    numberOfLine?: number;
    width?: number | string;
    height?: number | string;
    // 箭头
    arrowDirection?: number;
    arrowWidth?: number;
    arrowHeight?: number;
    arrowCornerRadius?: number;
    arrowBorderWidth?: number;
    arroweBorderColor?: string;
    // 气泡
    bubbleOffsetX?: number;
    bubbleOffsetY?: number;
    bubbleStyle?: StyleProp<ViewStyle>
    //蒙层
    withOverlay?: boolean;
    overlayColor?: string;
    //调整气泡除三角箭头以外部分的X轴偏移（在bubbleOffsetX的基础上的X轴偏移）
    bubbleContentOffsetX?: number;
    bubbleCornerRadius?: number;
    bgColor?: ThemeValue<string>;
    shadowColor?: ThemeValue<string>;
    // 组件样式
    style?: StyleProp<ViewStyle>;
    // 事件
    onOpen?: () => void;
    onClose?: () => void;
    onToggle?: () => void;
    onClick?: (e: GestureResponderEvent) => void;
    //子组件
    children?: React.ReactNode;
    content?: React.ReactNode;
    //气泡是否为普通的view
    isJustBubble?: boolean;
    bubbleShadow?: ShadowProps;
    isFitContentSize?: boolean;
    widthToFixFit?: number; // 在部分机型上，宽度自适应的时候，仍然会换行，需要加一个值
    isUseInnerFromRect?: boolean;
}

const TextBubble: React.FC<TextBubbleProps> = (props) => {
    const { isJustBubble = false } = props;
    let placement: Placement;
    switch (props.arrowDirection) {
        case 0: {
            placement = 'bottom';
            break;
        }
        case 1: {
            placement = 'top';
            break;
        }
        case 2: {
            placement = 'right';
            break;
        }
        case 3: {
            placement = 'left';
            break;
        }
        default: {
            placement = 'bottom';
        }
    }
    const textColor = useThemeValue(props.textColor);
    const bgColor = useThemeValue(props.bgColor);
    const shadowColor = useThemeValue(props.shadowColor);
    return (
        <CustomBubble
            isVisible={props.isVisible}
            fromRect={props.fromRect}
            placement={placement}
            withOverlay={props.withOverlay}
            overlayColor={props.overlayColor}
            content={
                props.content || <Text
                    numberOfLines={props.numberOfLine}
                    style={{
                        fontSize: props.textFont,
                        fontWeight: props.textWeight,
                        color: textColor,
                        textAlign: 'center',
                    }}>
                    {props.text}
                </Text>
            }
            contentStyle={{ justifyContent: 'center' }}
            width={props.width}
            height={props.height}
            triangleSize={{
                width: props.arrowWidth!,
                height: props.arrowHeight!,
            }}
            bubbleOffsetX={props.bubbleOffsetX}
            bubbleOffsetY={props.bubbleOffsetY}
            bubbleContentOffsetX={props.bubbleContentOffsetX}
            bubbleCornerRadius={props.bubbleCornerRadius}
            bubbleStyle={props.bubbleStyle}
            backgroundColor={bgColor}
            shadowColor={shadowColor}
            onOpen={props.onOpen}
            onClick={props.onClick}
            onClose={props.onClose}
            onToggle={props.onToggle}
            isJustBubble={isJustBubble}
            isFitContentSize={props.isFitContentSize}
            widthToFixFit={props.widthToFixFit}
            bubbleShadow={props.bubbleShadow}
            triangleBorderWidth={props.arrowBorderWidth}
            triangleBorderColor={props.arroweBorderColor}
            isUseInnerFromRect={props.isUseInnerFromRect}
        >
            {props.children}
        </CustomBubble>
    );
}

TextBubble.defaultProps = {
    isVisible: false,
    fromRect: {x: 0, y: 0, width: 0, height: 0},
    textFont: rem(14),
    textColor: { normal: '#ffffff' },
    numberOfLine: 1,
    width: rem(120),
    height: rem(40),
    arrowWidth: rem(13),
    arrowHeight: 6,
    // 默认气泡向下弹出，箭头在上
    arrowDirection: 0,
    arrowCornerRadius: 0,
    bubbleOffsetX: 0,
    bubbleOffsetY: rem(10),
    bubbleContentOffsetX: 0,
    bubbleCornerRadius: rem(4),
    bgColor: { normal: '#000000b2' },
    shadowColor: { normal: '#000000' },
};

export const KidTextBubble = createKidComponent(TextBubble);
