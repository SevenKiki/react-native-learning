import React, { memo, useState } from 'react';
import type { PropsWithChildren } from 'react';
import { View } from 'react-native';
import type { ICheckboxContext, ICheckboxGroupProps, ICheckboxValue } from './types';

export const CheckboxContext = React.createContext<ICheckboxContext | null>(null);

const CheckboxGroup = (
  props: PropsWithChildren<ICheckboxGroupProps>,
) => {
  const { value: propsValue, defaultValue, onChange, variant, ...rest} = props;
  const [value, setValue] = useState(propsValue || defaultValue || []);

  const onCheckboxGroupChange = (newVal: ICheckboxValue[]) => {
    if (!('value' in props)) {
      setValue(newVal);
    }
    onChange?.(newVal);
  }

  React.useEffect(() => {
    if ('value' in props) {
      setValue(propsValue || []);
    }
  }, [propsValue]);

  return (
    <CheckboxContext.Provider
      value={{
        onChange: onCheckboxGroupChange,
        value,
        variant,
      }}
    >
      <View {...rest}>
        {props.children}
      </View>
    </CheckboxContext.Provider>
  );
};

export default memo(CheckboxGroup);
