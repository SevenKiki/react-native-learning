import React, { PropsWithChildren, useContext, useMemo } from 'react';
import { StyleProp, TouchableOpacity, View, Text, ViewStyle } from 'react-native';
import { rem } from '../../utils';
import { CheckboxContext } from './checkbox-group';
import CheckboxIcon from './icon';
import { ICheckboxProps, ICheckboxValue, IconProps } from './types';

const Checkbox: React.FC<PropsWithChildren<ICheckboxProps>> = (props) => {
	const contextState = useContext(CheckboxContext);
	const isChecked = !contextState ? !!props.checked : contextState.value?.indexOf(props.value) !== -1;
  
  
  const isDisabled = !!props.disabled;

  const onPress = () => {
    if(contextState) {
			const newVal = (contextState.value! as ICheckboxValue[]).concat([]);
      const index = newVal.indexOf(props.value)
      if(index !== -1) {
        newVal.splice(index, 1);
      } else {
        newVal.push(props.value);
      }
      contextState?.onChange?.(newVal);
		} else {
			props.onChange?.(!props.checked);
		}
  };

  const { labelPosition, wrapStyle, containerStyle: propContainerStyle, labelStyle, variant: propVariant, style } = props;

  const variant = useMemo(() => {
    return propVariant || contextState ? contextState?.variant : 'facet';
  }, [propVariant, contextState])

  const containerStyle = useMemo<StyleProp<ViewStyle>>(() => {
    return [
      {
        flexDirection: 'row',
        justifyContent: 'flex-start',
        alignItems: 'center',
        borderRadius: 9999,
        margin: rem(4),
      },
      propContainerStyle
    ]
  }, [propContainerStyle]);

  const iconWrapperStyle = useMemo<StyleProp<ViewStyle>>(() => ([{
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: rem(1.5),
    borderRadius: 9999,
    padding: rem(2.5),
    borderColor: '#c6c6c6',
    ...isChecked ? {
      padding: rem(4),
      borderWidth: 0,
      backgroundColor: '#FE3666',
    } : {},
    ...isDisabled ? {
      backgroundColor: '#EAEAEA',
      ... isChecked ? {
        opacity: 0.5,
        backgroundColor: '#FE3666',
      } : {}
    }: {},
    ...variant === 'linear' ? {
      ... isChecked ? {
        borderColor: '#FE3666',
        borderWidth: rem(2),
        padding: rem(2),
        backgroundColor: 'transparent',
      } : {}
    } : {},
    ...variant === 'facet' ? {
      ... isChecked ? {
        borderWidth: 0,
        padding: rem(4),
        backgroundColor: '#FE3666',
      } : {},
      ... isDisabled ? {
        ...isChecked ? {
          backgroundColor: '#FE3666',
        } : {}
      } : {}
    } : {},
  }, style]), [isChecked, isDisabled, style]);

  const iconProps = useMemo<IconProps>(() => ({
    size: props.iconSize ?? contextState?.iconSize ?? rem(12),
    color: '#ffffff',
    ...isDisabled ? {
      backgroundColor: 'transparent',
    } : {},
    ...variant === 'linear' ? {
      color: '#FE3666',
    } : {},
    ...variant === 'facet' ? {
      color: '#FFFFFF',
    } : {},
  }), [isChecked, isDisabled]);

  const iconStyle = useMemo<StyleProp<ViewStyle>>(() => ({
    opacity: isChecked ? 1: 0
  }), [isChecked]);

  const labelContent = useMemo(() => {
    return <Text style={[{
      marginLeft: labelPosition === 'left' ? 0 : rem(8),
      marginRight: labelPosition === 'right' ? 0 : rem(8),
    }, labelStyle]}>{props.children}</Text>
  }, [props.children, labelPosition, labelStyle])
  


  return (
    <TouchableOpacity
      testID='CheckboxTouchBox'
      disabled={isDisabled}
      onPress={onPress}
      accessibilityRole="checkbox"
      style={wrapStyle}
      activeOpacity={1}
    >
      <View
        testID='CheckboxCenter'
        style={containerStyle}
      >
        {labelPosition === 'left' ?  labelContent : null}
        <View style={iconWrapperStyle}>
          <CheckboxIcon {...iconProps} testID="CheckboxCheckIcon" style={iconStyle} />
        </View>
        {/* Label */}
        {labelPosition === 'right' ?  labelContent : null}
      </View>
    </TouchableOpacity>
  );
};

Checkbox.defaultProps = {
  labelPosition: 'right',
}

export { Checkbox };

export default Checkbox;
