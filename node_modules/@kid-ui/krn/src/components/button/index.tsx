import {
    TouchableOpacity,
    View,
    Text,
    TextStyle,
    StyleProp,
    ViewStyle,
    ImageStyle
} from 'react-native';
import React from 'react';
import useThemeValue, { ThemeValue } from '../../theme/useThemeValue';
import { createKidComponent, rem } from '../../utils';
import debounce from 'lodash.debounce';
import throttle from 'lodash.throttle';
import { KidIcon } from '../icon';

export interface ButtonProps {
    text?: string;
    renderContent?: () => React.ReactNode;
    textLines?: number; //按钮文字显示行数，默认为1
    textEllipsizeMode?: 'head' | 'middle' | 'tail' | 'clip'; //按钮文字无法全部显示需要显示的字符串时如何用省略号进行修饰
    height?: number;
    width?: number;
    cornerRadius?: number;
    bgColor?: ThemeValue<string>;
    textColor?: ThemeValue<string>;
    borderColor?: ThemeValue<string>;
    textFont?: number;
    borderWidth?: number;
    textStyle?: StyleProp<TextStyle>;
    style?: StyleProp<ViewStyle>;
    wrapStyle?: StyleProp<ViewStyle>;
    onPress?: () => void;
    isRoundButtonMax?: boolean;
    activeOpacity?: number; //点击按钮时的透明度
    opacity?: number; //按钮透明度
    debounceDuration?: number;
    throttleDuration?: number;
    disabled?: boolean; //是否禁用button，默认为false
    // 图标相关的属性
    iconKid?: string; //RN 图标kid token
    iconKidConfig?: (number | string)[]; //RN WEB kidConfig
    iconStyle?: StyleProp<ImageStyle>;
}

const Button: React.FC<ButtonProps> = (props) => {
    const {
        text,
        textLines = 1,
        textEllipsizeMode = 'tail',
        height,
        width,
        cornerRadius,
        bgColor,
        textColor,
        textFont,
        borderWidth,
        borderColor,
        textStyle,
        wrapStyle,
        style,
        onPress = () => { },
        isRoundButtonMax,
        opacity = 1,
        activeOpacity = 0.5,
        debounceDuration,
        throttleDuration,
        disabled,
        iconKid,
        iconKidConfig,
        iconStyle,
        renderContent
    } = props;

    const _backgroundColor = useThemeValue<string>(bgColor!);
    const _borderColor = useThemeValue<string>(borderColor!)
    const buttonStyle = [
        {
            backgroundColor:_backgroundColor ,
            height,
            width,
            borderRadius: isRoundButtonMax ? cornerRadius : 0,
            flexDirection: 'row',
            justifyContent: 'center',
            alignItems: 'center',
            borderWidth,
            borderColor: _borderColor,
            opacity: opacity
        },
        style,
    ] as ViewStyle;

    const _color = useThemeValue(textColor);
    const innerTextStyle = [
        {
            color: _color,
            fontSize: textFont,
        },
        textStyle,
    ];

    const _onPress = React.useCallback(() => {
        if (debounceDuration) {
            debouncePress()
        } else if (throttleDuration) {
            throttlePress.current(onPress!)
        } else {
            onPress!()
        }
    }, [onPress, debounceDuration, throttleDuration])

    const debouncePress = debounce(onPress!, debounceDuration)

    const throttlePress = React.useRef(throttle((onPress: () => void) => onPress(), throttleDuration));
    return (
        <TouchableOpacity style={wrapStyle} disabled={disabled} activeOpacity={activeOpacity} onPress={_onPress}>
            <View style={buttonStyle}>
                { (iconKid || iconKidConfig) && <KidIcon style={iconStyle} kid={iconKid!} kidConfig={iconKidConfig!} />}
                {  text && <Text style={innerTextStyle} numberOfLines={textLines} ellipsizeMode={textEllipsizeMode}>{text}</Text> }
                { renderContent && renderContent()  }
            </View>
        </TouchableOpacity>
    );
}

Button.defaultProps = {
    height: rem(40),
    width: rem(100),
    cornerRadius: rem(10),
    bgColor: { normal: '#FF5000', dark: '#ffffff' },
    textColor: { normal: '#000000' },
    textFont: rem(16),
    borderWidth: 0,
    borderColor: { normal: '#FF5000' },
    disabled: false
}

export const KidButton = createKidComponent(Button);
