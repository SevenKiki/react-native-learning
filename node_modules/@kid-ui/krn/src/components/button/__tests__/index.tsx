import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import { KidButton } from '../index';

// TODO mock某个模块API的方法
jest.mock('../../../utils/rem', () => ({
  ...jest.requireActual('../../../utils/rem'),
  _rem: (num: number) => {
    return num;
  },
}));

describe('testing KidButton normal render', () => {
  beforeEach(() => {
  });

  it('testing onPress', () => {
    const onPress = jest.fn();
    const { getByText } = render( // 导出 toJSON 用来序列化组件的渲染内容
      <KidButton text="press" onPress={onPress} />,
    );
    const button = getByText('press');
    fireEvent.press(button);
    expect(onPress).toHaveBeenCalled();
  });

  it('testing render without kid', () => {
    const { toJSON } = render( // 导出 toJSON 用来序列化组件的渲染内容
      <KidButton
        text="press"
        height={30}
        width={100}
        cornerRadius={8}
        style={{ margin: 10 }}
        textStyle={{ fontSize: 20 }}
        textLines={1}
        textEllipsizeMode={'clip'}
        textFont={20}
        bgColor={'#eee'}
        borderWidth={1}
        borderColor={'orange'}
        isRoundButtonMax={true}
        debounceDuration={300}
      />,
    );
    expect(toJSON()).toMatchSnapshot();
  });

  it('testing render with kid', () => {
    const { toJSON } = render( // 导出 toJSON 用来序列化组件的渲染内容
      <KidButton
        text="press"
        kid={'style_button_big_orange_bg'}
      />,
    );
    expect(toJSON()).toMatchSnapshot();
  });

  afterEach(() => {
  });
});