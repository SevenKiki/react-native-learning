/* eslint-disable react-hooks/rules-of-hooks */
// 引入的头文件
import React, { useEffect, useState } from 'react';
import { useRef } from 'react';
import {
    Dimensions,
    LayoutChangeEvent,
    NativeScrollEvent,
    NativeSyntheticEvent,
    ScrollView,
    StyleSheet,
    TextInputScrollEventData,
    TouchableOpacity,
    View,
    ViewStyle,
} from 'react-native';
import useThemeValue, { ThemeValue } from '../../theme/useThemeValue';
import { createKidComponent } from '../../utils';

// https://design.corp.kuaishou.com/kid/widget/collections/all?ftId=3&groupId=13
export interface kidPageIndicatorProps extends PageIndicatorElementProps {
    // kid样式
    indicatorColor?: ThemeValue<string>;
    selectedIndicatorColor?: ThemeValue<string>;
}

// 小圆点的属性
interface PageIndicatorElementProps {
    backgroundColor?: string;
    selecteBackgroundColor?: string;
    numberOfPages?: number;
    selectIndex?: number;
    height?: number;
    width?: number;
    hideIndicatorOnePage?: boolean;
    handleSelectIndicatorElement?: (index: number) => void;
}

// PageIndicator组件属性
type PageIndicatorComponenttProps = {
    myScrollView?: ScrollView;
    children?: React.ReactNode;
};

const styles = StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'center',
    },
    indicator: {
        marginTop: 5,
        marginBottom: 5,
        marginLeft: 5,
        marginRight: 5,
    },
});

const PageIndicatorElement: React.FC<PageIndicatorElementProps> = (props) => {
    const [selectIndex, setSelectIndex] = useState(props.selectIndex);

    useEffect(() => {
        setSelectIndex(props.selectIndex);
    });

    const touchableView = (indicator_style: ViewStyle, index: number): React.ReactElement => {
        return (
            <TouchableOpacity
                key={String(index)}
                onPress={() => {
                    props.handleSelectIndicatorElement?.(index);
                    setSelectIndex(index);
                }}>
                <View style={indicator_style} />
            </TouchableOpacity>
        );
    };

    const loadIndicatorElements = (): React.ReactElement[] => {
        const borderRadius = props.height! / 2.0;
        const currentIndicatorStyle = [
            {
                backgroundColor: props.backgroundColor,
                width: props.width,
                height: props.height,
                borderRadius: borderRadius,
            },
            styles.indicator,
        ] as ViewStyle;
        const selectIndicatorStyle = [
            {
                backgroundColor: props.selecteBackgroundColor,
                width: props.width,
                height: props.height,
                borderRadius: borderRadius,
            },
            styles.indicator,
        ] as ViewStyle;
        if (props.numberOfPages === 1 && props.hideIndicatorOnePage) {
            return [];
        }
        const element = [];
        for (let i = 0; i < props.numberOfPages!; i++) {
            if (selectIndex == i) {
                element.push(touchableView(selectIndicatorStyle, i));
            } else {
                element.push(touchableView(currentIndicatorStyle, i));
            }
        }
        return element;
    };

    const elementStyle = [
        {
            "marginTop": -(props.height! + 10)
        },
        styles.container
    ];

    return <View style={elementStyle}>{loadIndicatorElements()}</View>;
}

const PageIndicatorComponent: React.FC<PageIndicatorComponenttProps & PageIndicatorElementProps> = (props) => {
    const myScrollView = useRef<ScrollView>()
    const [selectIndex, setSelectIndex] = useState(props.selectIndex);
    const [numberOfPages, setNumberOfPages] = useState(props.numberOfPages);
    const [scrollViewWidth, setScrollViewWidth] = useState(
        Dimensions.get('window').width,
    );

    const loadSelectIndex = (nativeEvent: any) => {
        const index = Math.floor(
            nativeEvent.contentOffset.x / nativeEvent.layoutMeasurement.width,
        );
        if (index != selectIndex) {
            setSelectIndex(index);
        }
    };

    const handleSelectIndicator = (index: number) => {
        if (myScrollView.current!.props.pagingEnabled) {
            myScrollView.current!.scrollTo({
                x: index * scrollViewWidth,
                y: 0,
                animated: true,
            });
        }
    };

    const loadScrollContent = () => {
        return React.Children.map(props.children, (child) => {
            if (React.isValidElement(child)) {
                return React.cloneElement(child as React.ReactElement<any>, {
                    scrollEventThrottle: 1,
                    onScroll: (
                        evt: NativeSyntheticEvent<TextInputScrollEventData>,
                    ) => {
                        loadSelectIndex(evt.nativeEvent);
                        if (
                            child.props.onScroll &&
                            typeof child.props.onScroll === 'function'
                        ) {
                            child.props.onScroll(evt);
                        }
                    },
                    onMomentumScrollEnd: (
                        evt: NativeSyntheticEvent<NativeScrollEvent>,
                    ) => {
                        loadSelectIndex(evt.nativeEvent);
                        if (
                            child.props.onMomentumScrollEnd &&
                            typeof child.props.onMomentumScrollEnd ===
                            'function'
                        ) {
                            child.props.onMomentumScrollEnd(evt);
                        }
                    },
                    onLayout: (evt: LayoutChangeEvent) => {
                        setScrollViewWidth(evt.nativeEvent.layout.width);
                        if (
                            child.props.onLayout &&
                            typeof child.props.onLayout ===
                            'function'
                        ) {
                            child.props.onLayout(evt);
                        }
                    },
                    ref: (view: any) => {
                        myScrollView.current = view as ScrollView;
                        setNumberOfPages(child.props.children.length);
                        // @ts-expect-error
                        const { ref } = child;
                        if (typeof ref === 'function') {
                            ref(view);
                        } else if (ref !== null) {
                            ref.current = view;
                        }
                    },
                });
            }
        });
    };

    return (
        <View>
            {loadScrollContent()}
            <PageIndicatorElement
                backgroundColor={props.backgroundColor}
                selecteBackgroundColor={props.selecteBackgroundColor}
                selectIndex={selectIndex}
                numberOfPages={numberOfPages}
                width={props.width}
                height={props.height}
                hideIndicatorOnePage={props.hideIndicatorOnePage}
                handleSelectIndicatorElement={handleSelectIndicator}
            />
        </View>
    );
}

function PageIndicatorControl(props: kidPageIndicatorProps) {
    const { indicatorColor, selectedIndicatorColor, ...rest } = props;
    const backgroundColor = useThemeValue(indicatorColor);
    const selecteBackgroundColor = useThemeValue(selectedIndicatorColor);
    if (indicatorColor && selectedIndicatorColor) {
        return (
            <PageIndicatorComponent
                backgroundColor={backgroundColor}
                selecteBackgroundColor={selecteBackgroundColor}
                {...rest}
            />
        );
    } else {
        return <PageIndicatorComponent {...rest} />;
    }
}

PageIndicatorComponent.defaultProps = {
    selectIndex: 0,
    numberOfPages: 0,
};

PageIndicatorElement.defaultProps = {
    selectIndex: 0,
    numberOfPages: 0,
    width: 6,
    height: 6,
};

export const KidPageIndicatorControl = createKidComponent(PageIndicatorControl);
