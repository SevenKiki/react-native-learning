import {
  DialogProps as KdsDialogProps,
} from '../dialog';
import { ThemeValue } from '../../theme/useThemeValue';
import type { AlertListProps } from './alert-list-component';
import type { CheckboxProps } from './alert-component'
import { ScrollPickerProps, DatePickerProps, TimePickerProps } from '../time-picker';
import { StyleProp, TextStyle, ViewStyle } from 'react-native';
interface Extension {
  leftButtonColor?: ThemeValue<string>;
  rightButtonColor?: ThemeValue<string>;
  borderColor?: ThemeValue<string>;
  titleColor?: ThemeValue<string>;
  descTextColor?: ThemeValue<string>;
  wrapBackGroundColor?: ThemeValue<string>;
}


interface DialogProps extends Omit<KdsDialogProps, keyof Extension>, Extension {

}
export interface SheetProps extends DialogProps, AlertListProps {
  kid?: string;
}
export interface BottomCardProps extends DialogProps {
  kid?: string;
  topIconKid?: string;
}
export interface AlertProps extends DialogProps, Omit<CheckboxProps, 'onInputChange' | 'defaultValue'> {
  kid?: string;
  showInput?: boolean;
  onInputChange?: (val: string | string[]) => void;
  inputPlaceholder?: string;
  inputAutoFocus?: boolean;
  inputMaxLength?: number;
  showPassword?: boolean;
  showCheckbox?: boolean;
  checkboxDefaultValue?: string | string[]
  password?: string;
}

export interface AlertPickerTopProps {
  topContainerStyle?: StyleProp<ViewStyle>;
  topCancelText?: string;
  topCancelTextStyle?: StyleProp<TextStyle>;
  topCancelStyle?: StyleProp<ViewStyle>;
  topConfirmText?: string;
  topConfirmTextStyle?: StyleProp<TextStyle>;
  topConfirmStyle?: StyleProp<ViewStyle>;
  topTitleText?: string;
  topTitleTextStyle?: StyleProp<TextStyle>;
  topTitleStyle?: StyleProp<ViewStyle>;
  onTopCancel?: () => void;
  onTopConfirm?: () => void;
}

export interface AlertPickerContentProps {
  pickerType: 'original' | 'date' | 'time' | 'date-time';
  pickerStyle?: StyleProp<ViewStyle>;
  scrollPickerProps?: ScrollPickerProps;
  datePickerProps?: DatePickerProps;
  timePickerProps?: TimePickerProps;
}

export interface AlertPickerProps extends DialogProps, AlertPickerTopProps, AlertPickerContentProps {
  
}

export const wrapFuc = <T, V>(fuc: (arg: T) => V, props: T) => () => fuc(props);