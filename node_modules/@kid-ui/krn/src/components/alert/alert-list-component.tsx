import React from 'react';
import { View, Text, StyleSheet, TouchableHighlight, StyleProp, TextStyle, Platform, ViewStyle } from 'react-native';
import useThemeValue, { ThemeValue } from '../../theme/useThemeValue';
import ThemeContext from '../../theme/context';
import { isIphoneX } from 'react-native-iphone-x-helper';
import { useKidColor } from '../../theme/useKidColor'
import { getThemeValue, rem } from '../../utils';

const isX = isIphoneX();

interface message {
    text?: string;
    theme?: 'title' | 'warn' | 'normal' | 'useless' | '';
    itemHeight?: number; //选项栏高度
    itemDefaultBackgroundColor?: ThemeValue<string>;
    itemActiveBackgroundColor?: ThemeValue<string>;
    itemActiveOpacity?: number; //选项按下时的透明度
    itemBorderBottomLineHeight?: number; //选项栏底部横线宽度
    itemBorderBottomLineColor?: ThemeValue<string>; //选项栏底部横线颜色
    itemStyle?: StyleProp<TextStyle>; //选项栏样式
}

export interface AlertListProps {
    message?: Array<message>;
    optionHeight?: number; //选项栏高度
    normalColor?: ThemeValue<string>;
    uselessColor?: ThemeValue<string>;
    warnColor?: ThemeValue<string>;
    defaultBackgroundColor?: ThemeValue<string>; //默认情况下按钮的颜色
    activeBackgroundColor?: ThemeValue<string>; //点击时激活状态下按钮的颜色
    activeOpacity?: number; //按下时的透明度
    borderBottomLineHeight?: number; //选项栏底部边框高度
    borderBottomLineColor?: ThemeValue<string>; //选项栏底部横线颜色
    optionStyle?: StyleProp<TextStyle>; //选项栏样式
    hasCustomCancel?: boolean;//是否自定义取消栏
    customCancelMessage?: message;//自定义取消栏信息
    listContainerStyle?: StyleProp<ViewStyle>; // 列表容器样式
    listTopContainerStyle?: StyleProp<ViewStyle>; // 列表上半部分容器样式
    listBottomContainerStyle?: StyleProp<ViewStyle>; // 列表下半部分容器样式
    onPress?: (text?: string, index?: number) => void; // item:点击的内容文字, index: 点击的内容序号
}

const styles = StyleSheet.create({
    wrap: {
        width: '100%',
        borderTopLeftRadius: rem(16),
        borderTopRightRadius: rem(16),
        justifyContent: 'center',
        alignItems: 'center',
    },
    itemWrap: {
        width: '100%',
        justifyContent: 'center',
        alignItems: 'center',
    },
    title: {
        fontSize: rem(14),
        fontWeight: '400',
        textAlign: 'center',
        fontFamily: Platform.OS === 'ios' ? 'PingFangSC-Regular' : 'sans-serif',
    },
    option: {
        fontSize: rem(17),
        fontWeight: '400',
        fontFamily: Platform.OS === 'ios' ? 'PingFangSC-Regular' : 'sans-serif',
        textAlign: 'center',
    },
    componentList: {
        width: '100%',
        borderTopLeftRadius: rem(16),
        borderTopRightRadius: rem(16),
        justifyContent: 'center',
        alignItems: 'center',
    },
    cancel: {
        width: '100%',
        borderTopLeftRadius: 0,
        borderTopRightRadius: 0,
        justifyContent: 'center',
        alignItems: 'center',
        marginTop: rem(8),
        paddingBottom: isX ? rem(34) : 0,
    },
    cancelText: {
        fontSize: rem(17),
        fontWeight: '500',
        fontFamily: Platform.OS === 'ios' ? 'PingFangSC-Medium' : 'sans-serif-medium',
    }
});

export const AlertListComponent: React.FC<AlertListProps> = (props) => {
    const {
        optionHeight,
        uselessColor = { light: '#c6c6c6', dark: '#6B6B6F' },
        warnColor = { light: '#fe3666', dark: '#fe3666' },
        message,
        normalColor = { light: '#666666', dark: '#b5b5b6' },
        defaultBackgroundColor = { light: '#fff', dark: '#2b2b2f' },
        activeBackgroundColor = { light: 'rgba(0, 0, 0, 0.05)', dark: 'rgba(255, 255, 255, 0.04)' },
        borderBottomLineHeight = rem(1),
        borderBottomLineColor = { light: '#E0E0E0', dark: '#222226' },
        activeOpacity = 0.85,
        optionStyle = {},
        listContainerStyle,
        listTopContainerStyle,
        listBottomContainerStyle,
        onPress = () => { },
    } = props;
    const themeContext = React.useContext(ThemeContext);
    const renderOption = React.useCallback((mes: message, theme = 'normal') => {
        const style = theme === 'title' ? styles.title : (mes.text === '取消' ? styles.cancelText : Object.assign({}, styles.option, optionStyle));
        const isTitle = theme === 'title';
        const isWarn = theme === 'warn';
        const isUseless = theme === 'useless';
        const isCancel = mes.text === '取消';
        const color = isWarn
            ? warnColor
            : isUseless
                ? uselessColor
                : isTitle
                    ? { light: '#9C9C9C', dark: '#909092' }
                    : isCancel
                        ? { light: '#222222', dark: '#E6E6E6' }
                        : normalColor
        return (
            <Text
                numberOfLines={2}
                style={[
                    {
                        color: getThemeValue(color, themeContext),
                        textAlign: 'center'
                    },
                    style,
                    mes.itemStyle
                ]}>
                {mes.text || '选项'}
            </Text>
        );
    }, [
        themeContext,
        optionStyle,
        warnColor,
        uselessColor,
        normalColor
    ]);
    const renderItem = React.useCallback((
        message: message,
        index?: number,
        top = false,
        bottom = false,
        style = {},
        border = true,
    ) => {
        const height = message.itemHeight ? message.itemHeight : (optionHeight ? optionHeight : (message.theme === 'title' ? rem(80) : rem(64)));
        const _borderBottomLineColor = message.itemBorderBottomLineColor ? message.itemBorderBottomLineColor : borderBottomLineColor;
        const _borderBottomLineHeight = message.itemBorderBottomLineHeight ? message.itemBorderBottomLineHeight : borderBottomLineHeight;
        const backgroundColor = message.itemDefaultBackgroundColor ? getThemeValue(message.itemDefaultBackgroundColor, themeContext) : getThemeValue(defaultBackgroundColor, themeContext);
        const aBackgroundColor = message.itemActiveBackgroundColor ? getThemeValue(message.itemActiveBackgroundColor, themeContext) : getThemeValue(activeBackgroundColor, themeContext);
        const underlayColor = message.theme === 'title' ? backgroundColor : aBackgroundColor;
        const _activeOpacity = message.itemActiveOpacity ? message.itemActiveOpacity : activeOpacity;
        return (
            <TouchableHighlight
                style={[
                    {
                        height: height,
                        paddingHorizontal: message.theme === 'title' ? rem(40) : rem(0),
                        borderBottomColor: border ? getThemeValue(_borderBottomLineColor, themeContext) : undefined,
                        borderBottomWidth: border ? _borderBottomLineHeight : 0,
                        backgroundColor: backgroundColor,
                        borderTopRightRadius: top ? rem(16) : 0,
                        borderTopLeftRadius: top ? rem(16) : 0,
                    },
                    styles.itemWrap,
                    { ...style },
                ]}
                underlayColor={underlayColor}
                activeOpacity={message.theme === 'title' ? 1 : _activeOpacity}
                key={message.text || ''}
                onPressOut={() => {
                    if (message.theme === 'title') {
                    } else {
                        onPress(message.text, index);
                    }
                }}>
                {renderOption(message, message.theme)}
            </TouchableHighlight>
        );
    }, [
        themeContext,
        borderBottomLineColor,
        borderBottomLineHeight,
        defaultBackgroundColor,
        activeBackgroundColor,
        activeOpacity,
        onPress,
        renderOption
    ])
    const renderCancel = () => {
        return (props.hasCustomCancel && props.customCancelMessage)
            ? renderItem(
                props.customCancelMessage,
                message?.length,
                true,
                true,
                Object.assign({}, {
                    borderTopRightRadius: 0,
                    borderTopLeftRadius: 0,
                    borderBottomRightRadius: 0,
                    borderBottomLeftRadius: 0,
                }, props.customCancelMessage.itemStyle),
                false,
            )
            : renderItem(
                { text: '取消', theme: 'normal' },
                message?.length,
                true,
                true,
                {
                    borderTopRightRadius: 0,
                    borderTopLeftRadius: 0,
                    borderBottomRightRadius: 0,
                    borderBottomLeftRadius: 0,
                    height: rem(57)
                },
                false,
            )
    }
    const len = message!.length;
    const componentList = message!.map((msg, i) => {
        return renderItem(msg, i, i === 0, i === len - 1, {}, i !== len - 1);
    })

    const backgroundColor = useKidColor('cs_common_background_divider_primary');

    const itemBackgroundColor = useThemeValue({
        light: '#ffffff',
        dark: '#2b2b2f',
    });

    return (
        <View
            style={[
                {
                    backgroundColor: backgroundColor,
                },
                styles.wrap,
                listContainerStyle
            ]}>
            <View style={[styles.componentList, { backgroundColor: itemBackgroundColor }, listTopContainerStyle]}>{componentList}</View>
            <View style={[styles.cancel, { backgroundColor: itemBackgroundColor }, listBottomContainerStyle]}>{renderCancel()}</View>
        </View>
    );
};

AlertListComponent.defaultProps = {
    uselessColor: { light: '#c6c6c6', dark: '#6B6B6F' },
    warnColor: { light: '#fe3666', dark: '#f73b68' },
    message: [],
    normalColor: { light: '#666666', dark: '#b5b5b6' },
    defaultBackgroundColor: { light: '#fff', dark: '#2b2b2f' },
    activeBackgroundColor: { light: 'rgba(0, 0, 0, 0.05)', dark: 'rgba(255, 255, 255, 0.04)' },
    borderBottomLineHeight: rem(1),
    borderBottomLineColor: { light: '#E0E0E0', dark: '#222226' },
    activeOpacity: 0.85,
    optionStyle: {},
    hasCustomCancel: false,
    customCancelMessage: {},
    onPress: () => { },
};
