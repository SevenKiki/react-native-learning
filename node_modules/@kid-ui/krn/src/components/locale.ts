//@ts-nocheck
import { createContext, useContext } from 'react';
import { deepAssign, get, isFunction } from '@kid-ui/shared';
import defaultMessages from '@kid-ui/locale/dist/zh-CN';
import En from '@kid-ui/locale/dist/en-US'
import Hant from '@kid-ui/locale/dist/zh-HK'

type Message = Record<string, any>;
type Messages = Record<string, Message>;

const defaultLang = 'zh-CN';
const LocaleContext = createContext<string>(defaultLang);

const messages: Messages = {
  [defaultLang]: defaultMessages,
};

const Locale = {
  lang: defaultLang,
  cb: null,
  use(newLang: string, newMessages?: Message) {
    Locale.lang = newLang;
    this.add({ [newLang]: newMessages });
    if (Locale.cb) {
      Locale.cb(newLang);
    }
  },
  onLangChange(cb) {
    Locale.cb = cb;
  },
  add(newMessages: Message = {}) {
    deepAssign(messages, newMessages);
  },
};

function useTranslate(name: string = '') {
  const prefix = name + '.';
  const lang = useContext(LocaleContext) || defaultLang;
  return function (path: string, ...args: any[]): any {
    const message = messages[lang];
    const result = name ? get(message, prefix + path) || get(message, path) : get(message, path);

    return isFunction(result) ? result(...args) : result;
  };
}

const engLang = 'en'
const hantLang = 'zh-Hant' // 繁体中文

const _messages = {
  [engLang]: En,
  [hantLang]: Hant,
}

Locale.add(_messages);

export {Locale, LocaleContext, useTranslate}
