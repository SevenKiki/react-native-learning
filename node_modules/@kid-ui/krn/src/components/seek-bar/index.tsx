import { View, StyleSheet, Text, StyleProp, ViewStyle } from 'react-native';
import React, { useState, useEffect } from 'react';
import { Slider, SliderProps } from '../slider';
import LinearGradient from 'react-native-linear-gradient';
import { NOOP } from '../../utils';

export interface SeekBarProps extends SliderProps {
    showTime?: boolean;
    showLeft?: boolean;
    showRight?: boolean;
    showLinearGradient?: boolean;
    LinearGradientColor?: (string | number)[];
    textWidth?: number;
    leftWidth?: number | string;
    rightWidth?: number | string;
    renderLeft?: () => React.ReactNode;
    renderRight?: () => React.ReactNode;
    sliderStyle?: StyleProp<ViewStyle>;
}

const numToTime = (num: number): number[] => {
    // [minute, second]
    return [Math.floor(num / 60), Math.floor(num % 60)];
};

const styles = StyleSheet.create({
    wrap: {
        alignItems: 'center',
        flexDirection: 'row',
    },
    text: {
        fontFamily: 'DINAlternate-Bold',
        fontWeight: '700',
        fontSize: 13,
        lineHeight: 16,
        textAlign: 'center',
        color: '#ffffff',
    },
});

export const SeekBar: React.FC<SeekBarProps> = (props) => {
    const {
        start,
        end,
        step,
        disabled,
        onDragEnd,
        onDragStart,
        ovalColor,
        maximumTrackTintColor,
        minimumTrackTintColor,
        ovalSize,
        height,
        renderHandle,
        style,
        // 展示进度参数
        showLeft,
        showRight,
        textWidth,
        leftWidth,
        rightWidth,
        onChange,
        showTime,
        showLinearGradient,
        LinearGradientColor,
        renderRight,
        renderLeft,
        value,
        sliderStyle,
        ...rest
    } = props as Required<SeekBarProps>;

    const sliderProps = {
        step,
        start,
        end,
        onChange: (val) => {
            setVal(val!);
            onChange(val);
        },
        maximumTrackTintColor,
        minimumTrackTintColor,
        onDragEnd: (val) => {
            setDragging(false);
            onDragEnd(val);
        },
        onDragStart: (val) => {
            setDragging(true);
            onDragStart(val);
        },
        disabled,
        ovalColor,
        ovalSize,
        height,
        renderHandle,
        value,
        ...rest,
    } as SliderProps;

    const [val, setVal] = useState(0);
    const [dragging, setDragging] = useState(false);
    
    useEffect(() => {
        if (value && !dragging) {
            setVal(value);
        }
    }, []);

    const renderLeftComponent = (leftContent: React.ReactNode) => {
        if (renderLeft) {
            return renderLeft();
        }
        return (
            <Text
                style={[
                    styles.text,
                    {
                        width: leftWidth || textWidth,
                    },
                ]}>
                {leftContent}
            </Text>
        );
    };
    const renderRightComponent = (rightContent: React.ReactNode) => {
        if (renderRight) {
            return renderRight();
        }
        return (
            <Text
                style={[
                    styles.text,
                    {
                        width: rightWidth || textWidth,
                    },
                ]}>
                {rightContent}
            </Text>
        );
    };

    const renderSlider = () => {
        const left = showTime ? numToTime(val).join(':') : val;
        const right = showTime ? numToTime(end).join(':') : end;
        return (
            <>
                {showLeft && renderLeftComponent(left)}
                <Slider style={[{ flex: 1 }, sliderStyle]} {...sliderProps} />
                {showRight && renderRightComponent(right)}
            </>
        );
    };

    return (
        <View style={[style, styles.wrap]}>
            {showLinearGradient ? (
                <LinearGradient
                    colors={LinearGradientColor}
                    style={[styles.wrap]}>
                    {renderSlider()}
                </LinearGradient>
            ) : (
                renderSlider()
            )}
        </View>
    );
};

SeekBar.defaultProps = {
    start: 0,
    end: 100,
    step: 1,
    disabled: false,
    onChange: NOOP,
    onDragEnd: NOOP,
    onDragStart: NOOP,
    ovalColor: '#fff',
    maximumTrackTintColor: 'rgba(255,255,255,0.25)',
    minimumTrackTintColor: '#fff',
    ovalSize: 16,
    height: 48,
    style: {},
    // 展示进度参数
    showLeft: true,
    showRight: true,
    textWidth: 60,
    showTime: true,
    showLinearGradient: true,
    LinearGradientColor: [
        'rgba(0, 0 ,0, 0)',
        'rgba(0, 0, 0, 0.1)',
        'rgba(0, 0, 0, 0)',
    ],
};
