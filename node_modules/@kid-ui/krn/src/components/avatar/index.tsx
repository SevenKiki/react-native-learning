import {
    Image,
    View,
    TouchableWithoutFeedback,
    StyleProp,
    ImageStyle,
    ViewStyle,
} from 'react-native';
import React from 'react';
import useThemeValue from '../../theme/useThemeValue';
import { createKidComponent, rem } from '../../utils';
import { KidIcon } from '../icon';
import common_emptystate_nopeople from '@ks/kw/icon/output/common/emptystate/common_emptystate_nopeople';
import debounce from 'lodash.debounce';
import throttle from 'lodash.throttle';

export interface AvatarProps {
    diameter?: number;
    uri?: string;
    style?: StyleProp<ImageStyle>;
    avatarStyle?: StyleProp<ImageStyle>;
    wrapStyle?: StyleProp<ViewStyle>;
    onPress?: () => void;
    debounceDuration?: number;
    throttleDuration?: number;
}

const Avatar: React.FC<AvatarProps> = function (props: AvatarProps) {
    const { diameter = rem(40), style, avatarStyle, wrapStyle, uri, onPress = () => { }, debounceDuration, throttleDuration } = props;
    const colors = useThemeValue({
        light: { bg: '#eaeaea', tint: '#ffffff' },
        dark: { bg: '#6b6b6f', tint: '#b5b5b6' },
    });
    const padding = uri ? 0 : rem(8);
    
    const _avatarStyle = [
        {
            height: diameter - padding * 2,
            width: diameter - padding * 2,
            tintColor: uri ? null : colors.tint,
        },
        style,
        avatarStyle
    ] as ImageStyle;
    const _wrapStyle = [
        {
            padding,
            height: diameter,
            width: diameter,
            borderRadius: diameter,
            backgroundColor: uri ? null : colors.bg,
            justifyContent: 'center',
            alignItems: 'center',
            overflow: 'hidden',
        },
        wrapStyle
    ] as ViewStyle;

    const _onPress = React.useCallback(() => {
        if (debounceDuration) {
            debouncePress()
        } else if (throttleDuration) {
            throttlePress.current(onPress!)
        } else {
            onPress!()
        }
    }, [onPress, debounceDuration, throttleDuration])

    const debouncePress = debounce(onPress!, debounceDuration)

    const throttlePress = React.useRef(throttle((onPress: () => void) => onPress(), throttleDuration ));

return (
    <TouchableWithoutFeedback onPress={_onPress}>
        <View style={_wrapStyle}>
            {uri ? (
                <Image source={{ uri }} style={_avatarStyle} />
            ) : (
                <KidIcon
                    size={diameter}
                    style={_avatarStyle}
                    kid={'common_emptystate_nopeople'}
                    kidConfig={common_emptystate_nopeople}
                />
            )}
        </View>
    </TouchableWithoutFeedback>
);
};

export const KidAvatar = createKidComponent(Avatar);
