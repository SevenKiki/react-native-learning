import React, { useState } from 'react';
import { View, StyleSheet, Text } from 'react-native';
import { render, fireEvent } from '@testing-library/react-native';
import { SlideOperation } from '../index';

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    flexDirection: 'column',
    alignItems: 'center',
  },
  item: {
    flex: 1,
    backgroundColor: 'yellow',
    justifyContent: 'center',
    alignItems: 'center'
  }
});

const Example = () => {
  const arr = [
    { key: '1', actions: 'left' },
    { key: '2', actions: 'right' },
    { key: '3', actions: 'both' }];

  const [showIndex, setShowIndex] = useState(-1);

  return (
    <View style={styles.container}>
      {arr.map((item, index) => {
        return (
          <SlideOperation
            key={item.key}
            index={index}
            close={showIndex !== index}
            enableLeftSlideBack={false}
            onCallBack={(inx: number) => setShowIndex(inx)}
            leftActions={item.actions !== 'right' ? [
              {
                text: '左1',
                bgColor: 'red',
                onClick: () => {
                  console.log('左');
                },
              },
              {
                text: '左2',
                textStyle: {
                  fontSize: 30,
                  color: 'yellow',
                },
                bgColor: 'green',
                onClick: () => {
                  console.log('中');
                },
              },
              {
                text: '左3',
                bgColor: 'blue',
                onClick: () => {
                  console.log('右');
                },
              },
            ] : []}
            rightActions={item.actions !== 'left' ? [
              {
                text: '右1',
                bgColor: 'red',
                onClick: () => {
                  console.log('左');
                },
              },
              {
                text: '右2',
                textStyle: {
                  fontSize: 30,
                  color: 'yellow',
                },
                bgColor: 'green',
                onClick: () => {
                  console.log('中');
                },
              },
              {
                text: '右3',
                bgColor: 'blue',
                onClick: () => {
                  console.log('右');
                },
              },
            ] : []}
          >
            <View style={styles.item}>
              <Text>{
                item.actions === 'both' ? '左边和右边都有操作项' : item.actions === 'left' ? '左边有操作项' : '右边有操作项'
              }</Text>
            </View>
          </SlideOperation>
        );
      })}
    </View>
  );
}

describe('testing SlideOperation', () => {
  it('Example', () => {
    const { toJSON } = render(<Example />)
    expect(toJSON()).toMatchSnapshot();
  })

  it('props: customStyle', () => {
    const { toJSON } = render(
      <SlideOperation
        customStyle={{
          containerHeight: 50
        }}
      >
        <View>
          <Text>内容</Text>
        </View>
      </SlideOperation>
    )
    expect(toJSON()).toMatchSnapshot();
  })

  it('events: handleMoveShouldSetPanResponderCapture', () => {
    const { getByTestId } = render(
      <SlideOperation>
        <View>
          <Text>内容</Text>
        </View>
      </SlideOperation>
    )

    const gesture = getByTestId('SlideOperationGesture');
    fireEvent(gesture, 'onStartShouldSetPanResponder', { nativeEvent: { pageX: 10 } }, { dx: 10, dy: 10 })
    fireEvent(gesture, 'onStartShouldSetPanResponder', { nativeEvent: { pageX: 10 } }, { dx: -10, dy: -10 })
    fireEvent(gesture, 'onStartShouldSetPanResponder', { nativeEvent: { pageX: 10 } }, { dx: 0, dy: 0 })
  })

  it('events: handlePanResponderGrant', () => {
    const { getByTestId } = render(
      <SlideOperation>
        <View>
          <Text>内容</Text>
        </View>
      </SlideOperation>
    )

    const gesture = getByTestId('SlideOperationGesture');
    fireEvent(gesture, 'onPanResponderGrant', { nativeEvent: { pageX: 10 } })
  })

  it('events: handlePanResponderGrant onCallBack', () => {
    const { getByTestId } = render(
      <SlideOperation onCallBack={jest.fn()}>
        <View>
          <Text>内容</Text>
        </View>
      </SlideOperation>
    )

    const gesture = getByTestId('SlideOperationGesture');
    fireEvent(gesture, 'onPanResponderGrant', { nativeEvent: { pageX: 10 } })
  })

  it('events: handlePanResponderMove dx > 0', () => {
    const { getByTestId } = render(
      <SlideOperation
        rightActions={[
          {
            text: '操作项',
          },
        ]}
        leftActions={[
          {
            text: '操作项',
          },
        ]}
      >
        <View>
          <Text>内容</Text>
        </View>
      </SlideOperation>
    )

    const gesture = getByTestId('SlideOperationGesture');
    fireEvent(gesture, 'onPanResponderMove', { nativeEvent: { pageX: 10 } }, { dx: 10, dy: 0 })

    fireEvent(gesture, 'onPanResponderEnd', { nativeEvent: { pageX: 10 } }, { dx: -50, dy: 0 })
    fireEvent(gesture, 'onPanResponderMove', { nativeEvent: { pageX: 10 } }, { dx: 10, dy: 0 })

    fireEvent(gesture, 'onPanResponderEnd', { nativeEvent: { pageX: 10 } }, { dx: 10, dy: 0 })
    fireEvent(gesture, 'onPanResponderEnd', { nativeEvent: { pageX: 10 } }, { dx: 50, dy: 0 })
    fireEvent(gesture, 'onPanResponderMove', { nativeEvent: { pageX: 10 } }, { dx: 10, dy: 0 })
  })

  it('events: handlePanResponderMove dx <= 0', () => {
    const { getByTestId } = render(
      <SlideOperation
        rightActions={[
          {
            text: '操作项',
          },
        ]}
        leftActions={[
          {
            text: '操作项',
          },
        ]}
      >
        <View>
          <Text>内容</Text>
        </View>
      </SlideOperation>
    )

    const gesture = getByTestId('SlideOperationGesture');
    fireEvent(gesture, 'onPanResponderMove', { nativeEvent: { pageX: 10 } }, { dx: 0, dy: 0 })

    fireEvent(gesture, 'onPanResponderEnd', { nativeEvent: { pageX: 10 } }, { dx: -50, dy: 0 })
    fireEvent(gesture, 'onPanResponderMove', { nativeEvent: { pageX: 10 } }, { dx: 0, dy: 0 })

    fireEvent(gesture, 'onPanResponderEnd', { nativeEvent: { pageX: 10 } }, { dx: 10, dy: 0 })
    fireEvent(gesture, 'onPanResponderEnd', { nativeEvent: { pageX: 10 } }, { dx: 50, dy: 0 })
    fireEvent(gesture, 'onPanResponderMove', { nativeEvent: { pageX: 10 } }, { dx: 0, dy: 0 })
  })

  it('events: handlePanResponderEnd', () => {
    const click = jest.fn();
    const { getByTestId } = render(
      <SlideOperation
        rightActions={[
          {
            text: '操作项',
            onClick: click
          },
        ]}
      >
        <View>
          <Text>内容</Text>
        </View>
      </SlideOperation>
    )

    const gesture = getByTestId('SlideOperationGesture');
    fireEvent(gesture, 'onPanResponderEnd', { nativeEvent: { pageX: 10 } }, { dx: 0, dy: 0 })
    fireEvent(gesture, 'onPanResponderEnd', { nativeEvent: { pageX: 10 } }, { dx: -50, dy: 0 })
    fireEvent(gesture, 'onPanResponderEnd', { nativeEvent: { pageX: 10 } }, { dx: 10, dy: 0 })
    fireEvent(gesture, 'onPanResponderEnd', { nativeEvent: { pageX: 10 } }, { dx: 10, dy: 0 })
  })

  it('events: onPanResponderTerminationRequest', () => {
    const { getByTestId } = render(
      <SlideOperation>
        <View>
          <Text>内容</Text>
        </View>
      </SlideOperation>
    )

    const gesture = getByTestId('SlideOperationGesture');
    fireEvent(gesture, 'onPanResponderTerminationRequest')
  })

  it('events: onShouldBlockNativeResponder', () => {
    const { getByTestId } = render(
      <SlideOperation>
        <View>
          <Text>内容</Text>
        </View>
      </SlideOperation>
    )

    const gesture = getByTestId('SlideOperationGesture');
    fireEvent(gesture, 'onShouldBlockNativeResponder')
  })

  it('renderAction onPress', () => {
    const { getByTestId } = render(
      <SlideOperation
        closeAfterClickedBtn
        rightActions={[
          {
            render: () => <Text>hhhhhh</Text>,
            onClick: jest.fn()
          },
          {
            onClick: jest.fn()
          },
        ]}
      >
        <View>
          <Text>内容</Text>
        </View>
      </SlideOperation>
    )

    const gesture0 = getByTestId('ActionTouchableOpacity0');
    const gesture1 = getByTestId('ActionTouchableOpacity1');
    fireEvent(gesture0, 'onPress');
    fireEvent(gesture1, 'onPress')
  })
})