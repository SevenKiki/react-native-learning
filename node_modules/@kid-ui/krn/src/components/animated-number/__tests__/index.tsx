import React, { useRef, useState } from 'react';
import { Button, Easing } from 'react-native';
import { fireEvent, render } from '@testing-library/react-native';

import { AnimatedNumber } from '../index';

const Example = () => {
  const [cnt, setCnt] = useState(0);
  return (
    <>
      <AnimatedNumber
        animateToNumber={cnt}
        fontStyle={{
          fontSize: 16,
          color: 'skyblue',
        }}
        animationDuration={400}
      />
      <Button testID="press-btn" title={'increment'} onPress={() => setCnt(cnt + 1)} />
    </>
  );
};

describe('animated number', () => {
  it('props: all', () => {
    const { toJSON } = render(
      <AnimatedNumber
        animateToNumber={0}
        fontStyle={{
          fontSize: 16,
          color: 'skyblue',
        }}
        animationDuration={400}
        easing={Easing.ease}
      />,
    );
    expect(toJSON())?.toMatchSnapshot?.();
  });

  it('props: min', () => {
    const { toJSON } = render(
      <AnimatedNumber
        animateToNumber={0}
        fontStyle={{
          fontSize: 16,
          color: 'skyblue',
        }}
        animationDuration={400}
      />,
    );
    expect(toJSON())?.toMatchSnapshot?.();
  });

  it('increment', async () => {
    const { getByTestId, toJSON } = render(<Example />);
    const btn = getByTestId('press-btn');
    fireEvent.press(btn);
    await new Promise((resolve) => setTimeout(resolve, 100));
    expect(toJSON())?.toMatchSnapshot?.();
  });
});
