import React from 'react';
import { Text } from 'react-native';
import { render, fireEvent } from '@testing-library/react-native';
import { renderHook } from '@testing-library/react-hooks';
import { Textarea } from '../index';

const PLACEHOLDER = '填写个人介绍更容易获得关注, 点击此处添加';

const useInput = () => {
  const [value, setValue] = React.useState('');
  //@ts-ignore
  const textareaRef = React.useRef<Textarea>();

  return {
    value,
    setValue,
    textareaRef
  }
}

describe('testing Textarea', () => {
  it('props: value', () => {
    const { result } = renderHook(() => useInput());
    const { getByTestId } = render(
      <Textarea
        placeholder={PLACEHOLDER}
        value={result.current.value}
        onChange={result.current.setValue}
      />
    )
    const input = getByTestId('KidTextInput');
    fireEvent(input, 'onChange', {nativeEvent: {text: PLACEHOLDER}})
    expect(result.current.value).toEqual(PLACEHOLDER)
  });

  it('props: rows count extra', () => {
    const { toJSON } = render(
      <Textarea
        placeholder={PLACEHOLDER}
        rows={4}
        count={200}
        extra={<Text>Extra...</Text>}
      />
    )

    expect(toJSON()).toMatchSnapshot()
  })

  it('props: autoHeight', () => {
    const { result } = renderHook(() => useInput());
    const { getByTestId } = render(
      <Textarea
        //@ts-ignore
        ref={result.current.textareaRef}
        placeholder={PLACEHOLDER}
        autoHeight
        rows={1}
      />
    )
    const fake_input = getByTestId('FakeTextInput');
    fireEvent(fake_input, 'onLayout', {nativeEvent: {layout: {height: 100}}});
    let height = result.current.textareaRef.current.height;
    expect(height).toEqual(100);
    const input = getByTestId('KidTextInput');
    fireEvent(input, 'onContentSizeChange', {nativeEvent: {contentSize: {height: 200}}});
    height = result.current.textareaRef.current.height;
    expect(height).toEqual(200);
  })

  it('events: onContentSizeChange', () => {
    const { result } = renderHook(() => useInput());
    const onContentSizeChange = jest.fn();
    const { getByTestId } = render(
      <Textarea
        //@ts-ignore
        ref={result.current.textareaRef}
        value={PLACEHOLDER}
        onContentSizeChange={onContentSizeChange}
      />
    )
    const input = getByTestId('KidTextInput');
    fireEvent(input, 'onContentSizeChange');
    expect(onContentSizeChange).toHaveBeenCalled()
  })

  it('events: focus clear blur get', () => {
    const { result } = renderHook(() => useInput());
    const onFocus = jest.fn();
    const onBlur = jest.fn();
    const onChange= jest.fn();
    const { getByTestId } = render(
      <Textarea
        //@ts-ignore
        ref={result.current.textareaRef}
        value={PLACEHOLDER}
        onChange={onChange}
        onFocus={onFocus}
        onBlur={onBlur}
      />
    )
    
    
    result.current.textareaRef.current.focus();
    // expect(onFocus).toHaveBeenCalled();
    result.current.textareaRef.current.clear();
    // expect(onChange).toHaveBeenCalledWith('');
    result.current.textareaRef.current.blur();
    // expect(onBlur).toHaveBeenCalled();
    const input = result.current.textareaRef.current.nativeElement;
  });
});