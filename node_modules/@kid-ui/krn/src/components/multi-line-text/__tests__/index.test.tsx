import React from 'react';
import { render, fireEvent } from '@testing-library/react-native';
import { MultiLineText } from '../index';

const text = '这两天超市里的商品供应和以前一样，什么都没有断货，早知道就不跟风囤东西了，面粉买太多，这两天不是蒸花卷就是蒸馒头，孩子一直嚷嚷着不想再吃面食了。”韩女士懊恼地说。';
const lines = [
  {
    ascender: 14,
    baseline: 14,
    capHeight: 8.866666793823242,
    descender: 4.333333492279053,
    height: 18.33333396911621,
    text: "这两天超市里的商品供应和以前一样，什么都没有断货，",
    width: 308.3333435058594,
    x: 0,
    xHeight: 6.553333282470703,
    y: 0
  },
  {
    ascender: 14,
    baseline: 32.33333206176758,
    capHeight: 8.866666793823242,
    descender: 4.333333492279053,
    height: 18.33333396911621,
    text: "早知道就不跟风囤东西了，面粉买太多，这两天不是蒸花",
    width: 308.3333435058594,
    x: 0,
    xHeight: 6.553333282470703,
    y: 18.33333396911621
  },
  {
    ascender: 14,
    baseline: 50.66666793823242,
    capHeight: 8.866666793823242,
    descender: 4.333333492279053,
    height: 18.33333396911621,
    text: "卷就是蒸馒头，孩子一直嚷嚷着不想再吃面食了。”韩女士",
    width: 312.6666564941406,
    x: 0,
    xHeight: 6.553333282470703,
    y: 36.66666793823242
  },
  {
    ascender: 14,
    baseline: 69,
    capHeight: 8.866666793823242,
    descender: 4.333333492279053,
    height: 18.33333396911621,
    text: "懊恼地说。",
    width: 61.66666793823242,
    x: 0,
    xHeight: 6.553333282470703,
    y: 55
  }];

const text1 = '北京囤货太多市民直呼后悔：有的菜都蔫儿了';
const lines1 = [
  {
    ascender: 14,
    baseline: 14,
    capHeight: 8.626666069030762,
    descender: 4,
    height: 18,
    text: "北京囤货太多市民直呼后悔：有的菜都蔫儿了",
    width: 312,
    x: 0,
    xHeight: 6.37666654586792,
    y: 0
  }
]

describe('KidMultiLineText', () => {
  it('onTextLayout calculateLines > line', () => {
    const { getByTestId } = render(<MultiLineText text={text} />)
    const t = getByTestId('MultiLineTextRNText');
    fireEvent(t, 'onTextLayout', {
      nativeEvent: {
        lines
      }
    })
    expect(t.props.children).toEqual(lines[0].text);
    fireEvent(t, 'onTextLayout', {
      nativeEvent: {
        lines
      }
    })
    expect(t.props.children).toEqual(lines[0].text);
  })

  it('onTextLayout calculateLines <= line', () => {
    const { getByTestId } = render(<MultiLineText text={text1} />)
    const t = getByTestId('MultiLineTextRNText');
    fireEvent(t, 'onTextLayout', {
      nativeEvent: {
        lines1
      }
    })
    expect(t.props.children).toEqual(lines1[0].text);
  })

  it('events: expandPress', () => {
    const { getByTestId } = render(<MultiLineText text={text} />)
    const t = getByTestId('MultiLineTextRNText');
    fireEvent(t, 'onTextLayout', {
      nativeEvent: {
        lines
      }
    })
    expect(t.props.children).toEqual(lines[0].text);
    const touch = getByTestId('MultiLineTextTouchableOpacity');
    fireEvent(touch, 'onPress');
    const t1 = getByTestId('MultiLineTextExpandedText');
    expect(t1.props.children).toEqual(lines[lines.length - 1].text);
  })
})