// 引入的头文件
import React, { useEffect, useState, useRef } from 'react';
import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { createKidComponent, rem } from '../../utils';

export type MultiLineTextProps = {
    text: string;
    color?: string;
    expandedColor?: string;
    line?: number;
    fontSize?: number;
    lineHeight?: number;
    expandedGap?: number;
    expandText?: string;
    closeText?: string;
};
// "@types/react-native": "0.62.2" 没有onTextLayout方法 这里trick一下
const RNText: any = Text;

const styles = StyleSheet.create({
    container: {
        width: '100%',
        alignItems: 'stretch',
        flexDirection: 'column',
    },
    expandContainer: {
        flexDirection: 'row',
        flexWrap: 'nowrap',
    },
    noExpandContain: {
        flexDirection: 'row',
        flexWrap: 'wrap',
    },
});

const MultiLineTextComponent: React.FC<MultiLineTextProps> = (props) => {
    const { line, color, expandedColor, fontSize, lineHeight, expandedGap, closeText, expandText } =
        props as Required<MultiLineTextProps>;
    const lineHeightRel = lineHeight || fontSize * 1.5;
    // 前半部分展示的文字 展开状态
    const [upShowTextShow, setUpShowTextShow] = useState('');
    // 最后一行的展示的文字 展开状态
    const [expandTextShow, setExpandTextShow] = useState('');

    // 前半部分展示的文字 收起状态
    const [upShowTextHide, setUpShowTextHide] = useState('');
    // 最后一行的展示的文字 收起状态
    const [expandTextHide, setExpandTextHide] = useState('');
    // 当前是否已经展开了
    const [expanded, setExpanded] = useState(false);
    // 是否需要折贴
    const [needExpand, setNeedExpanded] = useState(true);
    // 是否展示展开那妞
    const [showExpanded, setShowExpanded] = useState(false);
    // 需要重新计算展示内容吗？
    const calculated = useRef(true);

    useEffect(() => {
        calculated.current = false;
        setUpShowTextShow(props.text);
        setUpShowTextHide(props.text);
    }, [props.text]);

    // 文案的展开和收起
    const onTextLayout = (event: any) => {
        if (calculated.current) {
            return;
        }
        // 获取所能展示的总的行数
        const calculateLines = event.nativeEvent?.lines?.length;
        // 第一个text的文案 展开状态
        let tempUpShowTextShow = '';
        // 第二个text的文案 展开状态，即，最后一行所展示的
        let tempExpandTextShow = '';

        // 第一个text的文案 收起状态
        let tempUpShowTextHide = '';
        // 第二个text的文案 收起状态，即，最后一行所展示的
        let tempExpandTextHide = '';
        // 展示的最大行数，未展开是最多展示两行，展开后展示所有行数
        // const maxLine = expanded ? calculateLines : line;
        if (calculateLines > line) {
            // eslint-disable-next-line no-plusplus
            for (let index = 0; index < calculateLines; index++) {
                const lineText = event.nativeEvent?.lines?.[index]?.text;
                if (index < line - 1) {
                    tempUpShowTextShow += lineText;
                    tempUpShowTextHide += lineText;
                } else if (index === line - 1) {
                    tempUpShowTextShow += lineText;
                    tempExpandTextHide = lineText;
                } else if (index < calculateLines - 1) {
                    tempUpShowTextShow += lineText;
                } else {
                    tempExpandTextShow += lineText;
                }
            }
            setUpShowTextShow(tempUpShowTextShow);
            setExpandTextShow(tempExpandTextShow);

            setUpShowTextHide(tempUpShowTextHide);
            setExpandTextHide(tempExpandTextHide);

            calculated.current = true;
            setShowExpanded(true);
            setNeedExpanded(true);
        } else {
            setNeedExpanded(false);
        }
    };
    const expandPress = () => {
        setExpanded(!expanded);
    };
    const upShowText = expanded ? upShowTextShow : upShowTextHide;
    return (
        <View style={styles.container}>
            <RNText
                testID='MultiLineTextRNText'
                style={[
                    { color, fontSize, lineHeight: lineHeightRel },
                    upShowText ? {} : { height: 0 },
                ]}
                numberOfLines={0}
                onTextLayout={onTextLayout}
            >
                {upShowText}
            </RNText>
            {needExpand && (
                <View
                    style={
                        expanded
                            ? styles.noExpandContain
                            : styles.expandContainer
                    }
                >
                    <Text
                        testID='MultiLineTextExpandedText'
                        style={[
                            {
                                flexShrink: 1,
                                color,
                                fontSize,
                                lineHeight: lineHeightRel,
                            },
                            showExpanded && expanded
                                ? { marginRight: expandedGap }
                                : {},
                        ]}
                        numberOfLines={1}
                    >
                        {expanded ? expandTextShow : expandTextHide}
                    </Text>
                    {showExpanded && (
                        <TouchableOpacity
                            testID='MultiLineTextTouchableOpacity'
                            onPress={expandPress}
                            activeOpacity={1}
                            hitSlop={{ left: 5, right: 5, top: 5, bottom: 5 }}
                        >
                            <Text
                                style={{
                                    color: expandedColor,
                                    fontSize,
                                    lineHeight: lineHeightRel,
                                }}
                            >
                                {expanded ? closeText : expandText}
                            </Text>
                        </TouchableOpacity>
                    )}
                </View>
            )}
        </View>
    );
};

MultiLineTextComponent.defaultProps = {
    color: '#222',
    expandedColor: '#667BA3',
    line: 2,
    fontSize: rem(14),
    lineHeight: 0,
    expandedGap: rem(10),
    expandText: '更多',
    closeText: '收起',
};

export const MultiLineText = createKidComponent(
    MultiLineTextComponent,
);
