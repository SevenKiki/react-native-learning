//@ts-nocheck
import * as ReactNative from "react-native";

const NativeModules = {
  ...ReactNative.NativeModules,
  KRNBasic: {
    setSlideBack: jest.fn(),
    log: jest.fn(),
  },
  KSRCTBridge: {
    deviceInfo: {
      data: {
        statusBarHeight: 0,
        titleBarHeight: 0,
      },
    },
  }, 
  KIDBridge: {
    getComponentStyleConfig: (kid) => {
      const kidData = require('./data.json');
      return kidData.widgets[kid];
    },
    getFontConfigs: () => {
      const kidData = require('./data.json');
      return kidData.fonts;
    },
    getColorConfig: (kid) => {
      const kidData = require('./data.json');
      return kidData.color[kid];
    },
    getIconColorConfig: (kid) => {
      const kidData = require('./data.json');
      return kidData.icons[kid];
    },
  },
  UIManager: {
    ...ReactNative.NativeModules.UIManager,
    measure: jest.fn(),
  },
  KSAppearance: {
    getColorScheme: () => {
      return 'light';
    },
    addListener: () => {
      return {
        remove: jest.fn(),
      }
    },
    removeListeners: jest.fn(),
  },
  KSLanguage: {
    getLanguage: () => {
      return 'en';
    }
  }
}

const PanResponder = {
  ...ReactNative.PanResponder,
  create: (config) => ({ panHandlers: config }),
}

const Platform = {
  OS: 'android'
}

const Dimensions = {
  get: (type) => {
    if(type) {
      return {
        width: 414,
        height: 896
      }
    }
  }
}

export * from 'react-native'

export default Object.setPrototypeOf(
  {
    NativeModules,
    PanResponder,
    Platform,
    Dimensions
  },
  ReactNative
);

export {
  NativeModules,
  PanResponder,
  Platform,
  Dimensions
}
