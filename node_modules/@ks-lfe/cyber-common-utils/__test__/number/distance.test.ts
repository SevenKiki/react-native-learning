/**
 * 1. 距离在(0, 1km)内，展示 xxx m，保留整数
 * 2. 距离> 1km，展示实际距离x.x km，四舍五入，保留一位小数，若最后小数后最后一位为0，不显示
 */
import { getDistance } from "../../src"

test('距离在(0, 1km)内，展示 xxx m，保留整数', () => {
    expect(getDistance(10)).toBe('10m')
})
test('距离在(0, 1km)内，展示 xxx m，保留整数', () => {
    expect(getDistance(0.1)).toBe('0m')
})
test('距离在(0, 1km)内，展示 xxx m，保留整数', () => {
    expect(getDistance(16.8)).toBe('17m')
})
test('距离在(0, 1km)内，展示 xxx m，保留整数', () => {
    expect(getDistance(99.9)).toBe('100m')
})
test('距离在(0, 1km)内，展示 xxx m，保留整数', () => {
    expect(getDistance(999)).toBe('999m')
})
test('距离> 1km', () => {
    expect(getDistance(1000)).toBe('1000m')
})
test('距离> 1km', () => {
    expect(getDistance(9999)).toBe('10km')
})
test('距离> 1km', () => {
    expect(getDistance(9999)).toBe('10km')
})
test('距离> 1km', () => {
    expect(getDistance(999999)).toBe('1000km')
})
test('距离> 1km', () => {
    expect(getDistance(444444)).toBe('444.4km')
})
test('距离> 1km', () => {
    expect(getDistance(1234.5678)).toBe('1.2km')
})
test('边界case', () => {
    expect(getDistance(-1)).toBe('')
})
test('边界case', () => {
    expect(getDistance(-1111111)).toBe('')
})
test('边界case', () => {
    expect(getDistance(0)).toBe('')
})
test('边界case', () => {
    expect(getDistance(10000000000000000000000)).toBe('10000000000000000000km')
})