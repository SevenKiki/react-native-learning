/**
 * 1. 分换算为元，分换算为元，最多保留两位小数
 * 2. 若小数点后最后一位为0，不显示
 */
import { getPrice } from "../../src"

test('分换算为元，最多保留两位小数', () => {
    expect(getPrice(0)).toBe('')
})
test('分换算为元，最多保留两位小数', () => {
    expect(getPrice(1)).toBe('0.01')
})
test('分换算为元，最多保留两位小数', () => {
    expect(getPrice(100)).toBe('1')
})
test('分换算为元，最多保留两位小数', () => {
    expect(getPrice(100100)).toBe('1001')
})
test('若小数点后最后一位为0，不显示', () => {
    expect(getPrice(10000)).toBe('100')
})
test('分换算为元，最多保留两位小数', () => {
    expect(getPrice(1111)).toBe('11.11')
})
test('分换算为元，最多保留两位小数', () => {
    expect(getPrice(99)).toBe('0.99')
})
test('分换算为元，最多保留两位小数', () => {
    expect(getPrice(0.99)).toBe('0.01')
})
test('分换算为元，最多保留两位小数', () => {
    expect(getPrice(0.01)).toBe('0')
})
test('若小数点后最后一位为0，不显示', () => {
    expect(getPrice(1220)).toBe('12.2')
})
test('超出省略', () => {
    expect(getPrice(9999999)).toBe('9.99万+')
})
test('超出省略', () => {
    expect(getPrice(1000000)).toBe('1万')
})
test('超出省略', () => {
    expect(getPrice(100000000000)).toBe('10亿')
})
test('超出省略', () => {
    expect(getPrice(100000000000000)).toBe('1万亿')
})
test('超出省略', () => {
    expect(getPrice(1999999999999999)).toBe('19.99万亿+')
})
test('超出省略', () => {
    expect(getPrice(1990000000000000)).toBe('19.9万亿')
})
test('超出省略', () => {
    expect(getPrice(-1999999999999999)).toBe('')
})
test('精确', () => {
    expect(getPrice(1220, true)).toBe('12.2')
})
test('精确', () => {
    expect(getPrice(9999, true)).toBe('99.99')
})
test('精确', () => {
    expect(getPrice(1000, true)).toBe('10')
})
test('精确', () => {
    expect(getPrice(9999999999999, true)).toBe('99999999999.99')
})