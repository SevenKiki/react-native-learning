/**
 * 格式化销量
 * 1. X <= 0，不显示该字段
 * 2. 0 < X < 10000时，展示「已售X」，X为整数
 * 3. X >= 10000时，展示「已售X.Y万+」，向下取整
 * @param { number } sales 
 * @returns { string }
 */
import { getSales } from "../../src"

test('X <= 0，不显示该字段', () => {
    expect(getSales(0)).toBe('')
})
test('X <= 0，不显示该字段', () => {
    expect(getSales(-1)).toBe('')
})
test('X <= 0，不显示该字段', () => {
    expect(getSales(-9999999999)).toBe('')
})
test('0 < X < 10000时，展示「已售X」，X为整数', () => {
    expect(getSales(1)).toBe('1')
})
test('0 < X < 10000时，展示「已售X」，X为整数', () => {
    expect(getSales(100)).toBe('100')
})
test('0 < X < 10000时，展示「已售X」，X为整数', () => {
    expect(getSales(9999)).toBe('9999')
})
test('X >= 10000时，展示「已售X.Y万+」，向下取整', () => {
    expect(getSales(10000)).toBe('1.0万')
})
test('X >= 10000时，展示「已售X.Y万+」，向下取整', () => {
    expect(getSales(10001)).toBe('1.0万+')
})
test('X >= 10000时，展示「已售X.Y万+」，向下取整', () => {
    expect(getSales(19999)).toBe('1.9万+')
})
test('X >= 10000时，展示「已售X.Y万+」，向下取整', () => {
    expect(getSales(20001)).toBe('2.0万+')
})
test('X >= 10000时，展示「已售X.Y万+」，向下取整', () => {
    expect(getSales(99999999)).toBe('9999.9万+')
})