{"version":3,"file":"index.js","sources":["../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/decimal.js-light/decimal.mjs"],"sourcesContent":["export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","/*\r\n *  decimal.js-light v2.5.1\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js-light\r\n *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Expat Licence\r\n */\r\n\r\n\r\n// ------------------------------------  EDITABLE DEFAULTS  ------------------------------------- //\r\n\r\n\r\n// The limit on the value of `precision`, and on the value of the first argument to\r\n// `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\nvar MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  defaults = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed during run-time using `Decimal.config`.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,\r\n    // `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -MAX_E\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to MAX_E\r\n\r\n    // The natural logarithm of 10.\r\n    // 115 digits\r\n    LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'\r\n  },\r\n\r\n\r\n// ------------------------------------ END OF EDITABLE DEFAULTS -------------------------------- //\r\n\r\n\r\n  Decimal,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  exponentOutOfRange = decimalError + 'Exponent out of range: ',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  ONE,\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n  MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE),    // 1286742750677284\r\n\r\n  // Decimal.prototype object\r\n  P = {};\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue                       abs\r\n *  comparedTo                          cmp\r\n *  decimalPlaces                       dp\r\n *  dividedBy                           div\r\n *  dividedToIntegerBy                  idiv\r\n *  equals                              eq\r\n *  exponent\r\n *  greaterThan                         gt\r\n *  greaterThanOrEqualTo                gte\r\n *  isInteger                           isint\r\n *  isNegative                          isneg\r\n *  isPositive                          ispos\r\n *  isZero\r\n *  lessThan                            lt\r\n *  lessThanOrEqualTo                   lte\r\n *  logarithm                           log\r\n *  minus                               sub\r\n *  modulo                              mod\r\n *  naturalExponential                  exp\r\n *  naturalLogarithm                    ln\r\n *  negated                             neg\r\n *  plus                                add\r\n *  precision                           sd\r\n *  squareRoot                          sqrt\r\n *  times                               mul\r\n *  toDecimalPlaces                     todp\r\n *  toExponential\r\n *  toFixed\r\n *  toInteger                           toint\r\n *  toNumber\r\n *  toPower                             pow\r\n *  toPrecision\r\n *  toSignificantDigits                 tosd\r\n *  toString\r\n *  valueOf                             val\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s) x.s = 1;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this;\r\n\r\n  y = new x.constructor(y);\r\n\r\n  // Signs differ?\r\n  if (x.s !== y.s) return x.s || -y.s;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ x.s < 0 ? 1 : -1;\r\n\r\n  xdL = x.d.length;\r\n  ydL = y.d.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (x.d[i] !== y.d[i]) return x.d[i] > y.d[i] ^ x.s < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ x.s < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var x = this,\r\n    w = x.d.length - 1,\r\n    dp = (w - x.e) * LOG_BASE;\r\n\r\n  // Subtract the number of trailing zeros of the last word.\r\n  w = x.d[w];\r\n  if (w) for (; w % 10 == 0; w /= 10) dp--;\r\n\r\n  return dp < 0 ? 0 : dp;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, truncated to `precision` significant digits.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.idiv = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return round(divide(x, new Ctor(y), 0, 1), Ctor.precision);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return !this.cmp(y);\r\n};\r\n\r\n\r\n/*\r\n * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).\r\n *\r\n */\r\nP.exponent = function () {\r\n  return getBase10Exponent(this);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  return this.cmp(y) >= 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isint = function () {\r\n  return this.e > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isneg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.ispos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return this.s === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, truncated to\r\n * `precision` significant digits.\r\n *\r\n * If no base is specified, return log[10](x).\r\n *\r\n * log[base](x) = ln(x) / ln(base)\r\n *\r\n * The maximum error of the result is 1 ulp (unit in the last place).\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var r,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    wpr = pr + 5;\r\n\r\n  // Default base is 10.\r\n  if (base === void 0) {\r\n    base = new Ctor(10);\r\n  } else {\r\n    base = new Ctor(base);\r\n\r\n    // log[-b](x) = NaN\r\n    // log[0](x)  = NaN\r\n    // log[1](x)  = NaN\r\n    if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN');\r\n  }\r\n\r\n  // log[b](-x) = NaN\r\n  // log[b](0) = -Infinity\r\n  if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n  // log[b](1) = 0\r\n  if (x.eq(ONE)) return new Ctor(0);\r\n\r\n  external = false;\r\n  r = divide(ln(x, wpr), ln(base, wpr), wpr);\r\n  external = true;\r\n\r\n  return round(r, pr);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var x = this;\r\n  y = new x.constructor(y);\r\n  return x.s == y.s ? subtract(x, y) : add(x, (y.s = -y.s, y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // x % 0 = NaN\r\n  if (!y.s) throw Error(decimalError + 'NaN');\r\n\r\n  // Return x if x is 0.\r\n  if (!x.s) return round(new Ctor(x), pr);\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n  q = divide(x, y, 0, 1).times(y);\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`\r\n * significant digits.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return exp(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * truncated to `precision` significant digits.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return ln(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s || 0;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var x = this;\r\n  y = new x.constructor(y);\r\n  return x.s == y.s ? add(x, y) : subtract(x, (y.s = -y.s, y));\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var e, sd, w,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  e = getBase10Exponent(x) + 1;\r\n  w = x.d.length - 1;\r\n  sd = w * LOG_BASE + 1;\r\n  w = x.d[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) sd--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = x.d[0]; w >= 10; w /= 10) sd++;\r\n  }\r\n\r\n  return z && e > sd ? e : sd;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`\r\n * significant digits.\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var e, n, pr, r, s, t, wpr,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative or zero?\r\n  if (x.s < 1) {\r\n    if (!x.s) return new Ctor(0);\r\n\r\n    // sqrt(-x) = NaN\r\n    throw Error(decimalError + 'NaN');\r\n  }\r\n\r\n  e = getBase10Exponent(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  pr = Ctor.precision;\r\n  s = wpr = pr + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, wpr + 2)).times(0.5);\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r.d)).slice(0, wpr)) {\r\n      n = n.slice(wpr - 3, wpr + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (s == wpr && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        round(t, pr + 1, 0);\r\n\r\n        if (t.times(t).eq(x)) {\r\n          r = t;\r\n          break;\r\n        }\r\n      } else if (n != '9999') {\r\n        break;\r\n      }\r\n\r\n      wpr += 4;\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return round(r, pr);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  // Return 0 if either is 0.\r\n  if (!x.s || !y.s) return new Ctor(0);\r\n\r\n  y.s *= x.s;\r\n  e = x.e + y.e;\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = e;\r\n\r\n  return external ? round(y, Ctor.precision) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.todp = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return round(x, dp + getBase10Exponent(x) + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = toString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = round(new Ctor(x), dp + 1, rm);\r\n    str = toString(x, true, dp + 1);\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) return toString(x);\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  y = round(new Ctor(x), dp + getBase10Exponent(x) + 1, rm);\r\n  str = toString(y.abs(), false, dp + getBase10Exponent(y) + 1);\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isneg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.toInteger = P.toint = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return round(new Ctor(x), getBase10Exponent(x) + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,\r\n * truncated to `precision` significant digits.\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * The maximum error is 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, sign, yIsInt,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    guard = 12,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // pow(x, 0) = 1\r\n  if (!y.s) return new Ctor(ONE);\r\n\r\n  x = new Ctor(x);\r\n\r\n  // pow(0, y > 0) = 0\r\n  // pow(0, y < 0) = Infinity\r\n  if (!x.s) {\r\n    if (y.s < 1) throw Error(decimalError + 'Infinity');\r\n    return x;\r\n  }\r\n\r\n  // pow(1, y) = 1\r\n  if (x.eq(ONE)) return x;\r\n\r\n  pr = Ctor.precision;\r\n\r\n  // pow(x, 1) = x\r\n  if (y.eq(ONE)) return round(x, pr);\r\n\r\n  e = y.e;\r\n  k = y.d.length - 1;\r\n  yIsInt = e >= k;\r\n  sign = x.s;\r\n\r\n  if (!yIsInt) {\r\n\r\n    // pow(x < 0, y non-integer) = NaN\r\n    if (sign < 0) throw Error(decimalError + 'NaN');\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = new Ctor(ONE);\r\n\r\n    // Max k of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    e = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (k % 2) {\r\n        r = r.times(x);\r\n        truncate(r.d, e);\r\n      }\r\n\r\n      k = mathfloor(k / 2);\r\n      if (k === 0) break;\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, e);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return y.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);\r\n  }\r\n\r\n  // Result is negative if x is negative and the last digit of integer y is odd.\r\n  sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;\r\n\r\n  x.s = 1;\r\n  external = false;\r\n  r = y.times(ln(x, pr + guard));\r\n  external = true;\r\n  r = exp(r);\r\n  r.s = sign;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var e, str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    e = getBase10Exponent(x);\r\n    str = toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = round(new Ctor(x), sd, rm);\r\n    e = getBase10Exponent(x);\r\n    str = toString(x, sd <= e || e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toSignificantDigits = P.tosd = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return round(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = P.valueOf = P.val = P.toJSON = P[Symbol.for('nodejs.util.inspect.custom')] = function () {\r\n  var x = this,\r\n    e = getBase10Exponent(x),\r\n    Ctor = x.constructor;\r\n\r\n  return toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  add                 P.minus, P.plus\r\n *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd\r\n *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln\r\n *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln\r\n *  exp                 P.exp, P.pow\r\n *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,\r\n *                      P.toString, divide, round, toString, exp, ln\r\n *  getLn10             P.log, ln\r\n *  getZeroString       digitsToString, toString\r\n *  ln                  P.log, P.ln, P.pow, exp\r\n *  parseDecimal        Decimal\r\n *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,\r\n *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,\r\n *                      divide, getLn10, exp, ln\r\n *  subtract            P.minus, P.plus\r\n *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf\r\n *  truncate            P.pow\r\n *\r\n *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,\r\n *                      getLn10, exp, ln, parseDecimal, Decimal, config\r\n */\r\n\r\n\r\nfunction add(x, y) {\r\n  var carry, d, e, i, k, len, xd, yd,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  // If either is zero...\r\n  if (!x.s || !y.s) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!y.s) y = new Ctor(x);\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  k = x.e;\r\n  e = y.e;\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = e;\r\n\r\n  return external ? round(y, pr) : y;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % BASE | 0;\r\n      carry = temp / BASE | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * BASE + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, dp) {\r\n    var cmp, e, i, k, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either 0?\r\n    if (!x.s) return new Ctor(x);\r\n    if (!y.s) throw Error(decimalError + 'Division by zero');\r\n\r\n    e = x.e - y.e;\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    for (i = 0; yd[i] == (xd[i] || 0); ) ++i;\r\n    if (yd[i] > (xd[i] || 0)) --e;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n    } else if (dp) {\r\n      sd = pr + (getBase10Exponent(x) - getBase10Exponent(y)) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) return new Ctor(0);\r\n\r\n    // Convert precision in number of base 10 digits to base 1e7 digits.\r\n    sd = sd / LOG_BASE + 2 | 0;\r\n    i = 0;\r\n\r\n    // divisor < 1e7\r\n    if (yL == 1) {\r\n      k = 0;\r\n      yd = yd[0];\r\n      sd++;\r\n\r\n      // k is the carry.\r\n      for (; (i < xL || k) && sd--; i++) {\r\n        t = k * BASE + (xd[i] || 0);\r\n        qd[i] = t / yd | 0;\r\n        k = t % yd | 0;\r\n      }\r\n\r\n    // divisor >= 1e7\r\n    } else {\r\n\r\n      // Normalise xd and yd so highest order digit of yd is >= BASE/2\r\n      k = BASE / (yd[0] + 1) | 0;\r\n\r\n      if (k > 1) {\r\n        yd = multiplyInteger(yd, k);\r\n        xd = multiplyInteger(xd, k);\r\n        yL = yd.length;\r\n        xL = xd.length;\r\n      }\r\n\r\n      xi = yL;\r\n      rem = xd.slice(0, yL);\r\n      remL = rem.length;\r\n\r\n      // Add zeros to make remainder as long as divisor.\r\n      for (; remL < yL;) rem[remL++] = 0;\r\n\r\n      yz = yd.slice();\r\n      yz.unshift(0);\r\n      yd0 = yd[0];\r\n\r\n      if (yd[1] >= BASE / 2) ++yd0;\r\n\r\n      do {\r\n        k = 0;\r\n\r\n        // Compare divisor and remainder.\r\n        cmp = compare(yd, rem, yL, remL);\r\n\r\n        // If divisor < remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Calculate trial digit, k.\r\n          rem0 = rem[0];\r\n          if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);\r\n\r\n          // k will be how many times the divisor goes into the current remainder.\r\n          k = rem0 / yd0 | 0;\r\n\r\n          //  Algorithm:\r\n          //  1. product = divisor * trial digit (k)\r\n          //  2. if product > remainder: product -= divisor, k--\r\n          //  3. remainder -= product\r\n          //  4. if product was < remainder at 2:\r\n          //    5. compare new remainder and divisor\r\n          //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n          if (k > 1) {\r\n            if (k >= BASE) k = BASE - 1;\r\n\r\n            // product = divisor * trial digit.\r\n            prod = multiplyInteger(yd, k);\r\n            prodL = prod.length;\r\n            remL = rem.length;\r\n\r\n            // Compare product and remainder.\r\n            cmp = compare(prod, rem, prodL, remL);\r\n\r\n            // product > remainder.\r\n            if (cmp == 1) {\r\n              k--;\r\n\r\n              // Subtract divisor from product.\r\n              subtract(prod, yL < prodL ? yz : yd, prodL);\r\n            }\r\n          } else {\r\n\r\n            // cmp is -1.\r\n            // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n            // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n            if (k == 0) cmp = k = 1;\r\n            prod = yd.slice();\r\n          }\r\n\r\n          prodL = prod.length;\r\n          if (prodL < remL) prod.unshift(0);\r\n\r\n          // Subtract product from remainder.\r\n          subtract(rem, prod, remL);\r\n\r\n          // If product was < previous remainder.\r\n          if (cmp == -1) {\r\n            remL = rem.length;\r\n\r\n            // Compare divisor and new remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < new remainder, subtract divisor from remainder.\r\n            if (cmp < 1) {\r\n              k++;\r\n\r\n              // Subtract divisor from remainder.\r\n              subtract(rem, yL < remL ? yz : yd, remL);\r\n            }\r\n          }\r\n\r\n          remL = rem.length;\r\n        } else if (cmp === 0) {\r\n          k++;\r\n          rem = [0];\r\n        }    // if cmp === 1, k will be 0\r\n\r\n        // Add the next digit, k, to the result array.\r\n        qd[i++] = k;\r\n\r\n        // Update the remainder.\r\n        if (cmp && rem[0]) {\r\n          rem[remL++] = xd[xi] || 0;\r\n        } else {\r\n          rem = [xd[xi]];\r\n          remL = 1;\r\n        }\r\n\r\n      } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n    }\r\n\r\n    // Leading zero?\r\n    if (!qd[0]) qd.shift();\r\n\r\n    q.e = e;\r\n\r\n    return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`\r\n * significant digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n */\r\nfunction exp(x, sd) {\r\n  var denominator, guard, pow, sum, t, wpr,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  if (getBase10Exponent(x) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n\r\n  // exp(0) = 1\r\n  if (!x.s) return new Ctor(ONE);\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  while (x.abs().gte(0.1)) {\r\n    x = x.times(t);    // x = x / 2^5\r\n    k += 5;\r\n  }\r\n\r\n  // Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(ONE);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = round(pow.times(x), wpr);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      while (k--) sum = round(sum.times(sum), wpr);\r\n      Ctor.precision = pr;\r\n      return sd == null ? (external = true, round(sum, pr)) : sum;\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(x) {\r\n  var e = x.e * LOG_BASE,\r\n    w = x.d[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for (; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n\r\n  if (sd > Ctor.LN10.sd()) {\r\n\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(decimalError + 'LN10 precision limit exceeded');\r\n  }\r\n\r\n  return round(new Ctor(Ctor.LN10), sd);\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant\r\n * digits.\r\n *\r\n *  ln(n) is non-terminating (n != 1)\r\n *\r\n */\r\nfunction ln(y, sd) {\r\n  var c, c0, denominator, e, numerator, sum, t, wpr, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  // ln(-x) = NaN\r\n  // ln(0) = -Infinity\r\n  if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n  // ln(1) = 0\r\n  if (x.eq(ONE)) return new Ctor(0);\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  if (x.eq(10)) {\r\n    if (sd == null) external = true;\r\n    return getLn10(Ctor, wpr);\r\n  }\r\n\r\n  wpr += guard;\r\n  Ctor.precision = wpr;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n  e = getBase10Exponent(x);\r\n\r\n  if (Math.abs(e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = getBase10Exponent(x);\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = ln(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n\r\n    Ctor.precision = pr;\r\n    return sd == null ? (external = true, round(x, pr)) : x;\r\n  }\r\n\r\n  // x is reduced to a value near 1.\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(ONE), x.plus(ONE), wpr);\r\n  x2 = round(x.times(x), wpr);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = round(numerator.times(x2), wpr);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr);\r\n\r\n      Ctor.precision = pr;\r\n      return sd == null ? (external = true, round(sum, pr)) : sum;\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48;) ++i;\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48;) --len;\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    e = e - i - 1;\r\n    x.e = mathfloor(e / LOG_BASE);\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external && (x.e > MAX_E || x.e < -MAX_E)) throw Error(exponentOutOfRange + e);\r\n  } else {\r\n\r\n    // Zero.\r\n    x.s = 0;\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).\r\n */\r\n function round(x, sd, rm) {\r\n  var i, j, k, n, rd, doRound, w, xdi,\r\n    xd = x.d;\r\n\r\n  // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n  // w: the word of xd which contains the rounding digit, a base 1e7 number.\r\n  // xdi: the index of w within xd.\r\n  // n: the number of digits of w.\r\n  // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n  // they had leading zeros)\r\n  // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n  // Get the length of the first word of the digits array xd.\r\n  for (n = 1, k = xd[0]; k >= 10; k /= 10) n++;\r\n  i = sd - n;\r\n\r\n  // Is the rounding digit in the first word of xd?\r\n  if (i < 0) {\r\n    i += LOG_BASE;\r\n    j = sd;\r\n    w = xd[xdi = 0];\r\n  } else {\r\n    xdi = Math.ceil((i + 1) / LOG_BASE);\r\n    k = xd.length;\r\n    if (xdi >= k) return x;\r\n    w = k = xd[xdi];\r\n\r\n    // Get the number of digits of w.\r\n    for (n = 1; k >= 10; k /= 10) n++;\r\n\r\n    // Get the index of rd within w.\r\n    i %= LOG_BASE;\r\n\r\n    // Get the index of rd within w, adjusted for leading zeros.\r\n    // The number of leading zeros of w is given by LOG_BASE - n.\r\n    j = i - LOG_BASE + n;\r\n  }\r\n\r\n  if (rm !== void 0) {\r\n    k = mathpow(10, n - j - 1);\r\n\r\n    // Get the rounding digit at index j of w.\r\n    rd = w / k % 10 | 0;\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k;\r\n\r\n    // The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the\r\n    // digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give\r\n    // 714.\r\n\r\n    doRound = rm < 4\r\n      ? (rd || doRound) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n  }\r\n\r\n  if (sd < 1 || !xd[0]) {\r\n    if (doRound) {\r\n      k = getBase10Exponent(x);\r\n      xd.length = 1;\r\n\r\n      // Convert sd to decimal places.\r\n      sd = sd - k - 1;\r\n\r\n      // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n      xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n      x.e = mathfloor(-sd / LOG_BASE) || 0;\r\n    } else {\r\n      xd.length = 1;\r\n\r\n      // Zero.\r\n      xd[0] = x.e = x.s = 0;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n  // Remove excess digits.\r\n  if (i == 0) {\r\n    xd.length = xdi;\r\n    k = 1;\r\n    xdi--;\r\n  } else {\r\n    xd.length = xdi + 1;\r\n    k = mathpow(10, LOG_BASE - i);\r\n\r\n    // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n    // j > 0 means i > number of leading zeros of w.\r\n    xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k : 0;\r\n  }\r\n\r\n  if (doRound) {\r\n    for (;;) {\r\n\r\n      // Is the digit to be rounded up in the first word of xd?\r\n      if (xdi == 0) {\r\n        if ((xd[0] += k) == BASE) {\r\n          xd[0] = 1;\r\n          ++x.e;\r\n        }\r\n\r\n        break;\r\n      } else {\r\n        xd[xdi] += k;\r\n        if (xd[xdi] != BASE) break;\r\n        xd[xdi--] = 0;\r\n        k = 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n\r\n  if (external && (x.e > MAX_E || x.e < -MAX_E)) {\r\n    throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction subtract(x, y) {\r\n  var d, e, i, j, k, len, xd, xe, xLTy, yd,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  // Return y negated if x is zero.\r\n  // Return x if y is zero and x is non-zero.\r\n  if (!x.s || !y.s) {\r\n    if (y.s) y.s = -y.s;\r\n    else y = new Ctor(x);\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n\r\n  // x and y are non-zero numbers with the same sign.\r\n\r\n  e = y.e;\r\n  xe = x.e;\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of zeros\r\n    // needing to be prepended, but this can be avoided while still ensuring correct rounding by\r\n    // limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to xd if shorter.\r\n  // Don't add zeros to yd if shorter as subtraction only needs to start at yd length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(0);\r\n\r\n  y.d = xd;\r\n  y.e = e;\r\n\r\n  //return external && xd.length >= pr / LOG_BASE ? round(y, pr) : y;\r\n  return external ? round(y, pr) : y;\r\n}\r\n\r\n\r\nfunction toString(x, isExp, sd) {\r\n  var k,\r\n    e = getBase10Exponent(x),\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (e < 0 ? 'e' : 'e+') + e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  clone\r\n *  config/set\r\n */\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * value {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(value) {\r\n    var x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(value);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (value instanceof Decimal) {\r\n      x.s = value.s;\r\n      x.e = value.e;\r\n      x.d = (value = value.d) ? value.slice() : value;\r\n      return;\r\n    }\r\n\r\n    if (typeof value === 'number') {\r\n\r\n      // Reject Infinity/NaN.\r\n      if (value * 0 !== 0) {\r\n        throw Error(invalidArgument + value);\r\n      }\r\n\r\n      if (value > 0) {\r\n        x.s = 1;\r\n      } else if (value < 0) {\r\n        value = -value;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 0;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (value === ~~value && value < 1e7) {\r\n        x.e = 0;\r\n        x.d = [value];\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, value.toString());\r\n    } else if (typeof value !== 'string') {\r\n      throw Error(invalidArgument + value);\r\n    }\r\n\r\n    // Minus sign?\r\n    if (value.charCodeAt(0) === 45) {\r\n      value = value.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      x.s = 1;\r\n    }\r\n\r\n    if (isDecimal.test(value)) parseDecimal(x, value);\r\n    else throw Error(invalidArgument + value);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n\r\n  Decimal.clone = clone;\r\n  Decimal.config = Decimal.set = config;\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'];\r\n    for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') {\r\n    throw Error(decimalError + 'Object expected');\r\n  }\r\n  var i, p, v,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -1 / 0, 0,\r\n      'toExpPos', 0, 1 / 0\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if ((v = obj[p = ps[i]]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if ((v = obj[p = 'LN10']) !== void 0) {\r\n      if (v == Math.LN10) this[p] = new this(v);\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = clone(defaults);\r\n\r\n// Internal constant.\r\nONE = new Decimal(1);\r\n\r\nexport default Decimal;\r\n"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","MAX_DIGITS","defaults","precision","rounding","toExpNeg","toExpPos","LN10","Decimal","external","decimalError","invalidArgument","exponentOutOfRange","mathfloor","Math","floor","mathpow","pow","isDecimal","ONE","BASE","LOG_BASE","MAX_SAFE_INTEGER","MAX_E","P","absoluteValue","abs","x","s","comparedTo","cmp","y","i","j","xdL","ydL","e","d","length","decimalPlaces","dp","w","dividedBy","div","divide","dividedToIntegerBy","idiv","Ctor","round","equals","eq","exponent","getBase10Exponent","greaterThan","gt","greaterThanOrEqualTo","gte","isInteger","isint","isNegative","isneg","isPositive","ispos","isZero","lessThan","lt","lessThanOrEqualTo","lte","logarithm","log","base","r","pr","wpr","Error","ln","minus","sub","subtract","add","modulo","mod","q","times","naturalExponential","exp","naturalLogarithm","negated","neg","plus","sd","z","squareRoot","sqrt","n","t","digitsToString","toExponential","slice","indexOf","toString","mul","carry","k","rL","xd","yd","push","pop","shift","toDecimalPlaces","todp","rm","checkInt32","str","toFixed","toInteger","toint","toNumber","toPower","sign","yIsInt","guard","yn","ceil","truncate","max","toPrecision","toSignificantDigits","tosd","valueOf","val","toJSON","len","reverse","unshift","min","ws","indexOfLastWord","getZeroString","multiplyInteger","temp","compare","a","b","aL","bL","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","denominator","sum","getLn10","zs","c","c0","numerator","x2","charAt","parseDecimal","replace","search","substring","charCodeAt","rd","doRound","xdi","xe","xLTy","isExp","arr","clone","p","ps","value","test","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","config","set","hasOwnProperty","v"],"mappings":"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","x_google_ignoreList":[0,1]}