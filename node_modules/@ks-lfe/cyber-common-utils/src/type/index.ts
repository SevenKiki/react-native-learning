export const isFunction = (val: any) => {
    return (
        Object.prototype.toString.call(val) === '[object Function]' ||
        Object.prototype.toString.call(val) === '[object AsyncFunction]'
    );
};
export const isArray = (val: any) => Object.prototype.toString.call(val) === '[object Array]';
export const isDate = (val: any) => Object.prototype.toString.call(val) === '[object Date]';
export const isString = (val: any) => Object.prototype.toString.call(val) === '[object String]';
export const isBoolean = (val: any) => Object.prototype.toString.call(val) === '[object Boolean]';
export const isNumber = (val: any) => Object.prototype.toString.call(val) === '[object Number]';
export const isRegExp = (val: any) => Object.prototype.toString.call(val) === '[object RegExp]';
export const isObject = (val: any) => Object.prototype.toString.call(val) === '[object Object]';
export const isDef = (val: any) => val !== undefined && val !== null;
export const isEmptyObject = (val: {}) => isObject(val) && Object.keys(val).length === 0;
export const isBasic = (val: any) => typeof val !== 'object' && typeof val !== 'function';
export const isObjectOrArray = (val: any) => isObject(val) || isArray(val);
export const getType = (val: any) => Object.prototype.toString.call(val).slice(8, -1);
