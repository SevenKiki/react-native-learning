const path = require('path');

/**
 * 获取KCDN目录参数
 * @param {String} field 参数字段
 * @return { Object }
 */
const getEnvParam = (field = '') => {
  if (!field || typeof field !== 'string' || !field.trim()) return '';

  const env = process.env || '';
  let value = env[field] || '';

  // 注入自定义参数
  if (field === 'VERSION' && !env['VERSION']) {
    // 产品库版本，如：1.0.380。从 PIPELINE_BUILD_PRODUCT_VERSION 中提取
    const pipelineVersion = env['PIPELINE_BUILD_PRODUCT_VERSION'] || '';
    value = (pipelineVersion + '').split('-')[0] || '';
  }

  // 将/和:替换成中划线-
  value = value || '';
  value = (value + '').replace(/\/|\:/g, '-');

  field[field] = value;

  return value;
};
exports.getEnvParam = getEnvParam;

/**
 * 格式化cdn目标目录，将目录中{}的环境变量转换成值。支持ES6 TEMPLATE语法
 * @param {String} cdnDir cdn目标目录。如: /test/xxx/{PIPELINE_BUILD_PRODUCT_VERSION}/{BUILD_BRANCH}
 * @return {String}
 */
exports.formatCdnDir = (cdnDir = '') => {
  if (!cdnDir || typeof cdnDir !== 'string') return cdnDir;

  let formatted = cdnDir;

  // 兼容流水线不能直接使用$占位符的问题【NOTE: 不使用replaceAll，因为旧版本node不支持】
  formatted = formatted.replace(/\{/g, '{').replace(/\}/g, '}');

  // 获取所有的自定义参数列表。如 ['{VERSION}', '{MY_VAR}']
  let customParams = formatted.match(/(\$?\{(.*?)\})+/gi) || [];
  customParams = customParams.map(i => i && i.trim()).filter(i => i);

  customParams.forEach(param => {
    const field = param.replace(/\{/g, '').replace(/\}/g, '').replace(/\$/g, '');

    // 2. 对字段进行替换
    const fieldValue = getEnvParam(field) || '';

    formatted = formatted.replace(param, fieldValue);
  });

  // 3. 兼容因空白参数带来的路径为空的情况
  formatted = formatted.replace(/\/\/+/g, '/');

  return formatted;
};

/**
 * 获取退出进程的code列表，处理exit-on-error参数
 * @param {*} exitOnApiError exit-on-error参数值。默认值 unkown，未知报错直接退出进程; never 从不报错; duplicate 同名更新报错
 * @return {Array} code数组，如: ['unknown', 'duplicate']
 */
exports.getExitErrorCodes = exitOnApiError => {
  exitOnApiError = exitOnApiError === true || !exitOnApiError ? 'unknown' : exitOnApiError;

  if (exitOnApiError === 'never') return []; // 忽略报错

  const exitErrorCodes = (exitOnApiError + '')
    .split(',')
    .map(i => (i || '').trim())
    .filter(i => i);

  if (exitErrorCodes.includes('never')) return []; // 忽略报错

  return exitErrorCodes;
};

/**
 * 本地模拟文件上传失败的返回结果
 * @param {String} message 错误信息
 * @returns {Object}
 */
exports.mockLocalResponseError = message => {
  return { data: { success: false }, message, __type: 'local' };
};

/**
 * files列表强制转换成数组，兼容绝对路径
 * @param {Array | String} files 文件/文件夹列表
 * @param {String} dirname 当前执行的目录 process.cwd()
 * @return {Array}
 */
exports.formatInputFiles = (files, dirname) => {
  const fileStr = Array.isArray(files) ? files.join(',') : files;
  const fileList = (fileStr + '').split(/(\s|\,)+/gi);

  return fileList
    .map(i => i && i.trim())
    .filter(i => i && i !== ',')
    .map(file => {
      const isAbsolute = /^\/.+$/.test(file);
      if (!dirname || !isAbsolute) return file;

      // 返回相对路径
      return path.relative(dirname, file);
    });
};
