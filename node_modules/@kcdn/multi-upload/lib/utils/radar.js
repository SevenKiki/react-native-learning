const { v4: uuidv4 } = require('uuid');
const debug = require('debug')('cdn-upload:radar');
const axios = require('./axios');
const { jsonStringify, getIp } = require('./util.js');
const { dateFormat } = require('./time.js');

/**
 * 雷达上报接口
 * 正式环境：https://kradar.corp.kuaishou.com/micro/kcdn/kcdn.npm-upload/kcdn.npm-upload.production/module-call
 * 测试环境：https://kradar.corp.kuaishou.com/micro/kcdn/kcdn.npm-upload/kcdn.npm-upload.test/module-call
 */
const isTestEnv = process.env.NODE_ENV === 'test';
const KRADAR_BASE_URL = 'https://kcdn-plugin.corp.kuaishou.com/api/radarReport/v1';
const KRADAR_SERVICE_NAME = isTestEnv ? 'kcdn.npm-upload.test' : 'kcdn.npm-upload.production';

const ERROR_CODE_MAP = {
  SUCCESS: 0,
  VALIDATE_LOCAL_ERROR: 40001, // 本地校验不通过
  LOCAL_QUIT_BY_NOT_FOUND_FILE: 40002, // 文件/文件目录不存在，并退出进程
  LOCAL_QUIT_BY_FILE_IS_EMPTY: 40003, // 空文件上报
  API_QUIT_BY_FILE_IS_DUPLICATE: 40004, // 同名文件更新报错
  API_QUIT_BY_UPLOAD_ERROR: 40005, // API上传失败
};

module.exports = {
  /**
   * 雷达请求日志埋点
   * 日志查看地址：https://kradar.corp.kuaishou.com/micro/kcdn/kcdn.npm-upload/kcdn.npm-upload.production/log
   * @param {Int} code        返回码
   * @param {String} api      api接口名
   * @param {String} user     上报的用户
   * @param {String} request  请求数据
   * @param {String} response 返回体
   * @param {Int} duration    请求耗时，单位ms
   */
  async track({ user = '', code, api, mode, request, response, duration = 0 }) {
    if (!request || !response) return;

    const now = Date.now();
    let resCode = ERROR_CODE_MAP[code] || code || ERROR_CODE_MAP.SUCCESS;

    const logData = {
      code: isNaN(resCode) ? 0 : Number(resCode), // 返回码。0 成功， 其他失败
      request_info: request || '', // 返回值
      response_info: response || '', // 请求值
      interface_name: api, // 接口名
      wast_time: duration, // 执行耗时，单位ms

      passive_interface_name: mode || api, // 主调接口服务
      passive_service_en_name: 'npmUpload', // 主调服务名
      passive_ip: getIp() || '', // 被调ip
      container_id: user, // 机器名。HACK: 无机器名，展示为用户名

      user_id: user,
      begin_time: now * 1000 * 1000,
      day_time: dateFormat(now, 'YYYYMMDD'),
      log_time: dateFormat(now, 'YYYY-MM-DD HH:mm:ss'), // 上报时间
      report_env_type: 3, // 物理机上报
      service_en_name: KRADAR_SERVICE_NAME, // 雷达应用
      trace_id: uuidv4(), // 埋点上报id
    };
    // debug(jsonStringify(logData));

    return axios
      .request({
        url: '/mcallInitiativeLogReport',
        baseURL: KRADAR_BASE_URL,
        method: 'POST',
        data: { data: [logData] },
      })
      .then(response => {
        const { code, msg } = response || {};
        if (code !== 0) return Promise.reject(msg || response);
        debug('[RADAR_TRACK success]', jsonStringify(response));
      })
      .catch(e => {
        debug('[RADAR_TRACK request]', jsonStringify(logData));
        debug('[RADAR_TRACK error]', e);
      });
  },

  /**
   * 雷达远程日志上报
   * 日志查看地址：https://kradar.corp.kuaishou.com/micro/kcdn/kcdn.npm-upload/kcdn.npm-upload.production/remote-log
   * @param {String} msg  打点信息
   * @param {String} api  api地址
   * @param {String} user  上报的用户
   * @param {String} info  错误等级。默认 info
   */
  async log({ msg = '', api = '', user = 'npm', level = 'info' } = {}) {
    if (!msg) return;

    const now = Date.now();
    const logData = {
      caller: user,
      user_id: user,
      interface_name: api,
      msg: `[NPM_UPLOAD]${msg}`,

      level: level || 'info',
      line_number: 0,
      day_time: dateFormat(now, 'YYYYMMDD'),
      log_time: dateFormat(now, 'YYYY-MM-DD HH:mm:ss'), // 上报时间
      report_env_type: 3, // 物理机上报
      service_en_name: KRADAR_SERVICE_NAME, // 雷达应用
      trace_id: uuidv4(), // 埋点上报id
    };
    // debug(jsonStringify(logData));

    return axios
      .request({
        url: '/remoteLogReport',
        baseURL: KRADAR_BASE_URL,
        method: 'POST',
        data: { data: [logData] },
      })
      .then(response => {
        const { code, msg } = response || {};
        if (code !== 0) return Promise.reject(msg || response);
        debug('[RADAR_LOG success]', jsonStringify(response));
        return response;
      })
      .catch(e => {
        debug('[RADAR_LOG request]', jsonStringify(logData));
        debug('[RADAR_LOG error]', e);
      });
  },
};
