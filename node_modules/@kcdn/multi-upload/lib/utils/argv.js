const yargs = require('yargs');
const { toCamelCase, jsonStringify } = require('./util.js');

/**
 * 解析命令行参数
 * 说明：process.argv = [ node程序路径, node脚本文件路径, ...以空格为间隔的参数组 ]，从第三项开始为执行参数
 * 命令行格式支持三种:
 *  1）--a=xxx
 *    如: kcdn-upload debug-dir bin --exit-on-api-error=unknown --cdn-dir=/npm-kcdn-upload__normal/ --pid=xxx --token=11379_*** --allow-rewrite=false --allow-hash=false
 *  2) --a xxx --b xxx
 *    如: kcdn-upload debug-dir bin --exit-on-api-error unknown --cdn-dir /npm-kcdn-upload__normal/ --pid xxx --token 11379_*** --allow-rewrite false --allow-hash false
 *  3) --a --b
 *    如: kcdn-upload debug-dir bin --exit-on-api-error --cdn-dir=/npm-kcdn-upload__normal/ --pid xxx --token 11379_*** --allow-rewrite --allow-hash
 * @return {Object} 解析后的参数，key转成 CamelCase
 * @return 返回值例子: { files: ['dist'], exitOnApiError: 'unknown', cdnDir: '/test/', pid: 'xxx', token: '11379_***', allowRewrite: 'false', allowHash: 'false' }
 */
exports.getArgv = () => {
  // allow-rewite 和 allow-hash 支持 --xx 不带参数值方式传入
  let { _: files, ...argvs } = yargs.boolean(['allow-rewrite', 'allow-hash', 'is-staging']).argv || {};
  let result = { files };

  // 待上传的文件夹，移除空文件夹和空字符
  result.files = files
    .join(',')
    .split(/\,/g)
    .map(i => i && i.trim())
    .filter(i => i);

  Object.keys(argvs).forEach(key => {
    if (/^\$\d*/.test(key)) return; // 不展示$0

    const value = argvs[key] || '';
    key = toCamelCase(key || ''); // 将key转换成驼峰格式
    result[key] = value;
  });

  return result;
};

/**
 * 解析命令行参数
 * 说明：process.argv = [ node程序路径, node脚本文件路径, ...以空格为间隔的参数组 ]，从第三项开始为执行参数
 * 命令行格式:
 *     kcdn-upload <files> --cdn-dir=<目标CDN路径> --pid=<项目Pid> --token=<项目Token> --allow-rewrite=<是否开启同名更新> --allow-hash=<是否支持文件名Hash> --exit-on-api-error=<接口错误时是否退出进程>
 *     kcdn-upload debug-dir bin --exit-on-api-error=unknown --cdn-dir='/npm-kcdn-upload__normal/' --pid=xxx --token=11379_*** --allow-rewrite=false --allow-hash=false
 * @return {Object} 解析后的参数，key转成 CamelCase
 * @return 返回值例子: { files: ['dist'], exitOnApiError: 'unknown', cdnDir: '/test/', pid: 'xxx', token: '11379_***', allowRewrite: 'false', allowHash: 'false' }
 */
exports.getCmdParamter = argv => {
  argv = argv || process.argv || [];
  const paramList = argv
    .slice(2, argv.length)
    .map(i => i && i.trim())
    .filter(i => i);

  let files = []; // 待上传的文件/文件夹列表
  let params = {}; // 参数map

  paramList.forEach(str => {
    const isParam = /^\-\-.+\=.*$/.test(str); // 是否为实际参数

    // 非实际参数之前的参数，均为待上传的文件夹
    if (!isParam) return files.push(str);

    let [key, value] = str.split('=');
    key = toCamelCase((key || '').replace(/^\-\-/, '')); // 将key转换成驼峰格式
    params[key] = value || '';
  });

  // 将待上传的文件夹
  files = files
    .join(',')
    .split(/\,/g)
    .map(i => i && i.trim())
    .filter(i => i);

  return {
    ...params,
    files,
  };
};

// 本地调试，打印命令行参数
if (require.main === module) {
  const result = exports.getArgv();
  console.log(jsonStringify(result || {}));
}
