const { sleep } = require('./util.js');

/**
 * 请求重试
 * @param {Object} options
 * @param {Function} options.request       // 请求方法。函数执行后返回Promise
 * @param {Function} options.beforeRetry   // 失败重试前的处理函数
 * @param {Function} options.afterResponse // 请求完成后的回调函数。函数返回false，表示请求失败
 * @param {Int} options.maxRetryTime       // 失败重试次数，默认 1
 * @param {Int} options.retryDelay         // 失败重试间隔，单位ms。默认0s
 * @returns {Promise => Object} request response
 */
exports.requestWithRetry = options => {
  let { beforeRetry, afterResponse, request, maxRetryTime = 5, retryDelay = 0 } = options || {};
  maxRetryTime = maxRetryTime || 1;
  retryDelay = retryDelay || 1;

  let retryTime = 0;
  return new Promise(async (resolve, reject) => {
    while (retryTime < maxRetryTime) {
      try {
        retryTime++;

        // 1. 大于一次，失败重试
        if (retryTime > 1) {
          beforeRetry && beforeRetry(retryTime);
        }

        const result = await request().then(response => {
          // 2. 最后一次重试请求，原数据返回
          if (retryTime >= maxRetryTime) return response;

          // 3. 请求失败，延时1s后重新请求
          const isSuccess = afterResponse && afterResponse(response);
          if (isSuccess === false) return sleep(retryDelay).then(() => Promise.reject(response));

          // 4. 请求成功，返回请求结果
          return response;
        });

        resolve(result);
        break;
      } catch (error) {
        if (retryTime >= maxRetryTime) reject(error);
      }
    }
  });
};
