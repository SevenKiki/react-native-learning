const prompt = require('prompt');
const colors = require('colors/safe');
const { getTokenFromCache } = require('./token-cache.js');
const { default: chalk } = require('chalk');

// 添加着色
prompt.message = colors.green(' ? ');
prompt.delimiter = colors.green('');

const uploadSchema = [
  { name: 'pid', title: '项目pid', type: 'string', default: 'fe', required: true },
  {
    name: 'token',
    title: '项目token',
    type: 'string',
    message: 'token不能为空',
    required: true,
    ask: () => {
      // 如果已有token，则不再继续询问
      const pidHistory = prompt.history('pid');
      const pid = pidHistory && pidHistory.value;
      if (!pid) return true;

      const token = getTokenFromCache(pid) || '';
      return !token;
    },
  },
  { name: 'cdnDir', title: '目标CDN路径', type: 'string', default: '/', required: false },
  {
    name: 'files',
    title: '本地文件目录/文件',
    tip: '(以空格分隔)',
    type: 'string',
    default: './',
    required: false,
  },
  // { name: 'allowRewrite', description: '是否开启同名文件更新功能', ...booleanSchema },
  // { name: 'allowHash', description: '是否支持文件名hash', ...booleanSchema },
];

/**
 * 从命令行提示中获取参数
 * @param {Object} params  文件上传参数
 * @returns {Object | NULL}
 */
exports.getArgvFromPrompt = async params => {
  let { pid, token } = params;
  if (pid && token) return {};

  // 打印文档说明
  const projectInfoUrl = 'https://kcdn.corp.kuaishou.com/dashboard/project-info'; // 项目详情
  console.log(`👉 点击查看KCDN项目的pid和token: ${projectInfoUrl}\n`);
  // console.log(`⭐ 更多文档说明请详看: ${hl(docUrl)}`);

  // 有值的，不需要继续输入
  const filteredSchema = uploadSchema
    .filter(({ name } = {}) => {
      const value = params[name];
      if (name === 'files' && (!value || !value.length)) return true;
      return !value;
    })
    .map(item => {
      const { title, required, tip } = item;
      item.description = `[${required ? '必填' : '选填'}] ${required ? `请输入${title}` : title}${tip || ''}`;
      return item;
    });
  prompt.start();

  return new Promise((resolve, reject) => {
    prompt.get(filteredSchema, function (err, data) {
      if (err || !data || typeof data !== 'object') return reject(err);

      // 移除前后空格
      Object.keys(data).forEach(key => {
        const value = data[key];
        data[key] = typeof value === 'string' ? (value + '').trim() : '';
      });

      // 待上传文件转换成数组格式
      data.files = (data.files || '')
        .split(/\s|\,/gi)
        .map(i => i && i.trim())
        .filter(i => i);

      // 不允许上传本地根目录
      if (data.files.includes('/')) return reject('不允许上传本地根目录');

      // 无token，从缓存中读取
      const pid = params.pid || data.pid;
      data.token = params.token || data.token || getTokenFromCache(pid) || '';

      // 打印输入参数
      console.log('=========================');
      Object.keys(data).forEach(key => {
        const item = uploadSchema.filter(({ name } = {}) => name === key)[0];
        const { title } = item || {};
        console.log(`${title || key}: ${chalk.cyan(data[key])}`);
      });
      console.log('=========================');

      resolve(data || {});
    });
  });
};
