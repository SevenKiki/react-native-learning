const os = require('os');

/**
 * 延时执行
 * @param {Int} time 延时时间
 * @return {Promise}
 */
exports.sleep = time => {
  return new Promise(resolve => setTimeout(resolve, time));
};

/**
 * 将字符串转换成驼峰
 * @param {String} str 待转换成驼峰的字符串
 * @return {String}
 */
exports.toCamelCase = str => {
  return str.replace(/[\_|\-](\w)/g, (all, letter) => {
    return letter.toUpperCase();
  });
};

/**
 * 移除对象中值为undefined的键值对。兼容formData中不允许值为undefined的情况
 * @param {Object} obj         待处理的对象
 * @param {Object} defaultObj  默认值
 * @return {Object}
 */
exports.shakeEmptyKey = (obj = {}, defaultObj = {}) => {
  const keys = Object.keys(obj);
  const result = {};
  keys.forEach(key => {
    let value = obj[key];
    value = value === undefined ? defaultObj[key] : value;

    if (value !== undefined) {
      result[key] = value;
    }
  });
  return result;
};

/**
 * 安全执行JSON.stringfy，避免报错
 * @param {*} data
 */
exports.jsonStringify = (...args) => {
  try {
    return JSON.stringify(...args);
  } catch (e) {
    return '';
  }
};

/**
 * 获取本机ip
 * @returns {String}
 */
exports.getIp = () => {
  let ip;
  try {
    const ifaces = os.networkInterfaces();

    Object.keys(ifaces).forEach(ifname => {
      let alias = 0;
      ifaces[ifname].forEach(function (iface) {
        if ('IPv4' !== iface.family || iface.internal !== false) return;
        ip = iface.address;
        ++alias;
      });
    });
  } catch (e) {}
  return ip || '';
};
