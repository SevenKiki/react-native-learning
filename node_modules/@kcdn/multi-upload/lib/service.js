const fs = require('fs');
const path = require('path');
const rp = require('request-promise');
const debug = require('debug')('cdn-upload:service');
const axios = require('./utils/axios');
const { shakeEmptyKey, jsonStringify } = require('./utils/util.js');

// 限流白名单接口，专门用于kcdn上传插件
// const origin = 'https://kcdn.corp.kuaishou.com/api/kcdn/v1/service/npmUpload';
const origin = 'https://kcdn-plugin.corp.kuaishou.com/api/kcdn/v1/service/npmUpload';

// staging环境的上传接口
const stagingOrigin = 'https://kcdnconsole.staging.kuaishou.com/api/kcdn/v1/service/npmUpload';
const getOrigin = isStaging => (isStaging ? stagingOrigin : origin);

// 上传接口的默认参数
const DEFAULT_UPLOAD_PARAMS = {
  uid: 'npm', // 默认上传人: npm
  allowRewrite: 'false', // 默认不允许同名更新
  allowHash: 'false', // 默认不支持文件名hash
};

/**
 * npm多文件上传。接口文档：https://kapi.corp.kuaishou.com/project/4293/interface/api/321680
 * @param {Object} option
 * @param {String} option.token        // [必填]KCDN项目对应的token
 * @param {String} option.pid          // [必填]项目英文名称
 * @param {String} option.dir          // [选填]文件目录，用于给文件批量加目录。如 /dist/test
 * @param {String} option.allowRewrite // [选填]是否允许同名文件更新。可选值：false、true。默认 false
 * @param {String} option.allowMD5     // [选填]是否支持返回的head里添加md5信息。可选值：false、true。默认 false
 * @param {String} option.allowHash    // [选填]是否支持文件名hash。可选值：false、true。默认 false
 * @param {Array} option.files         // [必填]files数组
 *
 * @returns Request Promise。返回参数说明：
 * @returns {Int}    response // { code: 0, message: 'xxx', data: { success: true, fileResults: [ { status: 1, message: 'xxx', cdnUrl: 'https://xxxx' } ] } }
 * @returns {Int}    response.code             // 返回code码，0为成功，其他为失败
 * @returns {String} response.data.cdnUrl      // 返回的cdn 的url(默认返回的是项目下第一个域名)
 * @returns {Int}    response.data.status      // 状态值。1表示上传成功，2表示上传时遇到错误，3表示同名文件更新
 */
exports.uploadMultiple = ({ token, pid, uid, files, dir, allowRewrite, allowHash, allowMD5, isStaging }) => {
  let formData = {
    pid,
    'files[]': [],
    dir: dir || '',
    uid,
    allowRewrite,
    allowHash,
    allowMD5,
    timeout: 2000,
  };

  files.forEach((item, index) => {
    formData[`files[]`][index] = fs.createReadStream(item);
  });

  // HACK: allowRewrite 和 allowHash 强制转换成字符串。否则request报错
  const data = shakeEmptyKey(formData, DEFAULT_UPLOAD_PARAMS);
  data.allowRewrite = [true, 'true'].includes(data.allowRewrite) ? 'true' : 'false';
  data.allowHash = [true, 'true'].includes(data.allowHash) ? 'true' : 'false';

  const origin = getOrigin(isStaging);
  const options = {
    method: 'POST',
    uri: `${origin}/multiple?token=${token}`,
    formData: data,
    json: true,
  };
  debug('[uploadMultiple: request]', jsonStringify(formData));

  return rp(options).then(response => {
    debug('[uploadMultiple: response] ', jsonStringify(response || ''));
    return response;
  });
};

/**
 * npm单文件上传。接口文档：https://kapi.corp.kuaishou.com/project/4293/interface/api/319368
 * @param {Object} options
 * @param {String} options.token        // [必填]KCDN项目对应的token
 * @param {String} options.pid          // [必填]项目英文名称
 * @param {String} options.filename     // [选填]文件在kcdn项目中的路径，如 /dist/test/a.txt
 * @param {String} options.allowRewrite // [选填]是否允许同名文件更新。可选值：false、true。默认 false
 * @param {String} options.allowMD5     // [选填]是否支持返回的head里添加md5信息。可选值：false、true。默认 false
 * @param {String} options.allowHash    // [选填]是否支持文件名hash。可选值：false、true。默认 false
 * @param {String} options.file         // [必填]文件完整路径
 *
 * @returns Request Promise。返回参数说明：
 * @returns {Int}    response.code             // 返回code码，0为成功，其他为失败
 * @returns {String} response.data.cdnUrl      // 返回的cdn 的url(默认返回的是项目下第一个域名)
 * @returns {Int}    response.data.status      // 状态值。1表示上传成功，2表示上传时遇到错误，3表示同名文件更新
 */
exports.uploadSingle = ({ token, pid, uid, file, filename, allowRewrite, allowHash, allowMD5, isStaging }) => {
  let formData = {
    pid,
    timeout: 2000,
    file: fs.createReadStream(file),

    // 兼容formData不允许字段为undefined，设置默认值
    filename: filename || path.basename(file) || '',
    uid,
    allowRewrite,
    allowHash,
    allowMD5,
  };

  // HACK: allowRewrite 和 allowHash 强制转换成字符串。否则request报错
  const data = shakeEmptyKey(formData, DEFAULT_UPLOAD_PARAMS);
  data.allowRewrite = [true, 'true'].includes(data.allowRewrite) ? 'true' : 'false';
  data.allowHash = [true, 'true'].includes(data.allowHash) ? 'true' : 'false';

  const origin = getOrigin(isStaging);
  const options = {
    method: 'POST',
    uri: `${origin}/single?token=${token}`,
    formData: data,
    json: true,
  };
  debug('[uploadSingle: request]', jsonStringify(options));

  return rp(options).then(response => {
    debug('[uploadSingle: response] ', jsonStringify(response || ''));
    return response;
  });
};

/* [Deprecated] 已弃用，不建议继续使用。如有使用需求，请联系kcdn客服群 */
exports.refresh = token => {
  return axios.get(`${origin}/api/auth/refreshtoken`, { params: { token } });
};

/* [Deprecated] 已弃用，不建议继续使用。如有使用需求，请联系kcdn客服群 */
exports.getUinfo = token => {
  return axios.get(`${origin}/api/auth/user`, { params: { token } });
};

/* [Deprecated] 已弃用，不建议继续使用。如有使用需求，请联系kcdn客服群 */
exports.preupload = ({ token, pid, filename, newName, is_hash, chunk = 1, md5 }) => {
  return axios.post(`${origin}/api/cdn/preupload?token=${token}`, {
    pid,
    filename,
    newName,
    hash: is_hash,
    chunk,
    md5,
  });
};

/* [Deprecated] 已弃用，不建议继续使用。如有使用需求，请联系kcdn客服群 */
exports.upload = ({ token, pid, filename, hash, uploadId, isContinueUpload, chunk, file }) => {
  return axios.post(`${origin}/upload?token=${token}`, {
    pid,
    filename,
    hash,
    uploadId,
    isContinueUpload,
    chunk,
    file,
  });
};
