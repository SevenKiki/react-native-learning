const { weblog } = require('@krn/cli-shared');

module.exports = function ({ types: t }) {
    return {
        pre() {
            this.animatedResult = [];
            this.kidResult = [];
        },
        visitor: {
            Program(programePath, state) {
                const filename = state.file.opts.filename;
                if (filename.indexOf('node_modules') !== -1) {
                    return;
                }

                //通用
                state.hasRecordedPath = new Set();

                // Animated部分
                state.isAnalyzingAnimated = false;
                state.isLogAnimated = false;
                state.scanAnimatedResult = [
                    {
                        name: 'Image',
                        count: 0,
                    },
                    {
                        name: 'ScrollView',
                        count: 0,
                    },
                    {
                        name: 'Text',
                        count: 0,
                    },
                    {
                        name: 'View',
                        count: 0,
                    },
                    {
                        name: 'FlatList',
                        count: 0,
                    },
                    {
                        name: 'SectionList',
                        count: 0,
                    },
                    {
                        name: 'createAnimatedComponent',
                        count: 0,
                    },
                ];
                state.IsImportRNAnimation = false;
                state.IsImportRNCreateAnimatedComponent = false;

                // kid部分
                state.isAnalyzingKid = false;
                state.isLogKid = false;
                state.scanKidResult = [];
                state.kidComponents = [];

                programePath.traverse({
                    ImportDeclaration(outerPath) {
                        if (state.hasRecordedPath.has(outerPath)) {
                            return;
                        }
                        state.hasRecordedPath.add(outerPath);

                        const source = outerPath.get('source').node.value;

                        if (
                            source !== 'react-native' &&
                            source.indexOf('@kid-ui/krn') === -1
                        ) {
                            return;
                        }

                        //Animated部分
                        if (source === 'react-native') {
                            state.isAnalyzingAnimated = true;
                            outerPath.traverse({
                                ImportSpecifier(innerPath) {
                                    if (state.hasRecordedPath.has(innerPath)) {
                                        return;
                                    }
                                    state.hasRecordedPath.add(innerPath);

                                    const importedName = innerPath.get(
                                        'imported',
                                    ).node.name;
                                    if (importedName === 'Animated') {
                                        state.IsImportRNAnimation = true;
                                        if (
                                            innerPath.get('local') &&
                                            innerPath.get('local').node.name
                                        ) {
                                            state.AnimatedAlias = innerPath.get(
                                                'local',
                                            ).node.name;
                                        }
                                    }
                                    if (
                                        importedName ===
                                        'createAnimatedComponent'
                                    ) {
                                        state.IsImportRNCreateAnimatedComponent = true;
                                        if (
                                            innerPath.get('local') &&
                                            innerPath.get('local').node.name
                                        ) {
                                            state.createAnimatedComponentAlias = innerPath.get(
                                                'local',
                                            ).node.name;
                                        }
                                    }
                                },
                            });
                        }

                        //kid部分
                        if (source.indexOf('@kid-ui/krn') !== -1) {
                            state.isAnalyzingKid = true;
                            const importComponents = outerPath
                                .get('specifiers')
                                .map((s) => s.get('local').node.name);
                            state.kidComponents.push(...importComponents);

                            const excludes = [
                                'WrapContext',
                                'KidContext',
                                'useKidColor',
                                'useKidFont',
                                'useThemeValue',
                            ];
                            excludes.forEach((item) => {
                                const index = state.kidComponents.indexOf(item);
                                if (index !== -1) {
                                    state.kidComponents.splice(index, 1);
                                }
                            });
                        }
                    },

                    JSXOpeningElement(outerPath) {
                        if (state.hasRecordedPath.has(outerPath)) {
                            return;
                        }
                        state.hasRecordedPath.add(outerPath);

                        if (
                            (!state.isAnalyzingAnimated ||
                                !state.IsImportRNAnimation) &&
                            (!state.isAnalyzingKid ||
                                state.kidComponents.length <= 0)
                        ) {
                            return;
                        }

                        //Animated部分
                        if (
                            state.isAnalyzingAnimated &&
                            state.IsImportRNAnimation
                        ) {
                            outerPath.traverse({
                                JSXMemberExpression(innerPath) {
                                    if (state.hasRecordedPath.has(innerPath)) {
                                        return;
                                    }
                                    state.hasRecordedPath.add(innerPath);

                                    const objectName =
                                        (innerPath.get('object') &&
                                            innerPath.get('object').node
                                                .name) ||
                                        '';
                                    const propertyName =
                                        (innerPath.get('property') &&
                                            innerPath.get('property').node
                                                .name) ||
                                        '';
                                    if (
                                        (objectName === 'Animated' ||
                                            objectName ===
                                                state.AnimatedAlias) &&
                                        [
                                            'Image',
                                            'ScrollView',
                                            'Text',
                                            'View',
                                            'FlatList',
                                            'SectionList',
                                        ].indexOf(propertyName) !== -1
                                    ) {
                                        state.isLogAnimated = true;
                                        state.scanAnimatedResult.find(
                                            (r) => r.name === propertyName,
                                        ).count++;
                                    }
                                },
                            });
                        }

                        //kid部分
                        if (
                            state.isAnalyzingKid &&
                            state.kidComponents.length > 0
                        ) {
                            const component = outerPath.get('name').node.name;
                            if (state.kidComponents.indexOf(component) === -1) {
                                return;
                            }

                            if (outerPath.get('attributes').length === 0) {
                                return;
                            }

                            outerPath.traverse({
                                JSXAttribute(innerPath) {
                                    if (state.hasRecordedPath.has(innerPath)) {
                                        return;
                                    }
                                    state.hasRecordedPath.add(innerPath);

                                    if (
                                        innerPath.get('name').node.name !==
                                        'kid'
                                    ) {
                                        return;
                                    } else {
                                        let kidValue = 'custom_variable';
                                        if (
                                            innerPath.get('value').node.type ===
                                                'Literal' ||
                                            innerPath.get('value').node.type ===
                                                'StringLiteral'
                                        ) {
                                            kidValue = innerPath.get('value')
                                                .node.value;
                                            updateScanKidResult(
                                                component,
                                                kidValue,
                                                state.scanKidResult,
                                            );
                                            state.isLogKid = true;
                                        } else if (
                                            innerPath.get('value').node.type ===
                                            'JSXExpressionContainer'
                                        ) {
                                            innerPath.traverse({
                                                JSXExpressionContainer(path) {
                                                    if (
                                                        state.hasRecordedPath.has(
                                                            path,
                                                        )
                                                    ) {
                                                        return;
                                                    }
                                                    state.hasRecordedPath.add(
                                                        path,
                                                    );

                                                    if (
                                                        path.get('expression')
                                                            .node.type ===
                                                            'Literal' ||
                                                        path.get('expression')
                                                            .node.type ===
                                                            'StringLiteral'
                                                    ) {
                                                        kidValue = path.get(
                                                            'expression',
                                                        ).node.value;
                                                    }
                                                    updateScanKidResult(
                                                        component,
                                                        kidValue,
                                                        state.scanKidResult,
                                                    );
                                                    state.isLogKid = true;
                                                },
                                            });
                                        }
                                    }
                                },
                            });
                        }
                    },

                    CallExpression(outerPath) {
                        if (state.hasRecordedPath.has(outerPath)) {
                            return;
                        }
                        state.hasRecordedPath.add(outerPath);

                        if (
                            (!state.isAnalyzingAnimated ||
                                (!state.IsImportRNAnimation &&
                                    !state.IsImportRNCreateAnimatedComponent)) &&
                            (!state.isAnalyzingKid ||
                                state.kidComponents.length <= 0)
                        ) {
                            return;
                        }

                        //Animated部分
                        if (
                            state.isAnalyzingAnimated &&
                            (state.IsImportRNAnimation ||
                                state.IsImportRNCreateAnimatedComponent)
                        ) {
                            let isContinue = true;
                            if (
                                outerPath.get('callee').node.type ===
                                'Identifier'
                            ) {
                                if (!state.IsImportRNCreateAnimatedComponent) {
                                    isContinue = false;
                                }
                                if (isContinue) {
                                    if (
                                        outerPath.get('callee').node.name ===
                                            'createAnimatedComponent' ||
                                        outerPath.get('callee').node.name ===
                                            state.createAnimatedComponentAlias
                                    ) {
                                        state.isLogAnimated = true;
                                        state.scanAnimatedResult.find(
                                            (r) =>
                                                r.name ===
                                                'createAnimatedComponent',
                                        ).count++;
                                    }
                                }
                            } else if (
                                outerPath.get('callee').node.type ===
                                'MemberExpression'
                            ) {
                                if (!state.IsImportRNAnimation) {
                                    isContinue = false;
                                }
                                if (isContinue) {
                                    outerPath.traverse({
                                        MemberExpression(innerPath) {
                                            if (
                                                state.hasRecordedPath.has(
                                                    innerPath,
                                                )
                                            ) {
                                                return;
                                            }
                                            state.hasRecordedPath.add(
                                                innerPath,
                                            );

                                            const objectName =
                                                (innerPath.get('object') &&
                                                    innerPath.get('object').node
                                                        .name) ||
                                                '';
                                            const propertyName =
                                                (innerPath.get('property') &&
                                                    innerPath.get('property')
                                                        .node.name) ||
                                                '';
                                            if (
                                                (objectName === 'Animated' ||
                                                    objectName ===
                                                        state.AnimatedAlias) &&
                                                propertyName ===
                                                    'createAnimatedComponent'
                                            ) {
                                                state.isLogAnimated = true;
                                                state.scanAnimatedResult.find(
                                                    (r) =>
                                                        r.name ===
                                                        'createAnimatedComponent',
                                                ).count++;
                                            }
                                        },
                                    });
                                }
                            }
                        }

                        //kid部分
                        if (
                            state.isAnalyzingKid &&
                            state.kidComponents.length > 0
                        ) {
                            let isContinue = true;

                            const calleeType = outerPath.get('callee').type;
                            let component = '';
                            if (calleeType === 'Identifier') {
                                component = outerPath.get('callee').node.name;
                            } else if (calleeType === 'MemberExpression') {
                                component = outerPath.get('callee').node.object
                                    .name;
                            }

                            if (state.kidComponents.indexOf(component) === -1) {
                                isContinue = false;
                            }

                            if (isContinue) {
                                const arguments = outerPath.get('arguments');
                                if (arguments.length <= 0) {
                                    isContinue = false;
                                }

                                if (isContinue) {
                                    if (
                                        arguments[0].node.type !==
                                        'ObjectExpression'
                                    ) {
                                        isContinue = false;
                                    }

                                    if (isContinue) {
                                        outerPath.traverse({
                                            Property(innerPath) {
                                                if (
                                                    state.hasRecordedPath.has(
                                                        innerPath,
                                                    )
                                                ) {
                                                    return;
                                                }
                                                state.hasRecordedPath.add(
                                                    innerPath,
                                                );

                                                if (
                                                    innerPath.get('key').node
                                                        .type !== 'Identifier'
                                                ) {
                                                    return;
                                                }

                                                if (
                                                    innerPath.get('key').node
                                                        .name !== 'kid'
                                                ) {
                                                    return;
                                                }

                                                let kidValue =
                                                    'custom_variable';
                                                if (
                                                    innerPath.get('value').node
                                                        .type === 'Literal' ||
                                                    innerPath.get('value').node
                                                        .type ===
                                                        'StringLiteral'
                                                ) {
                                                    kidValue = innerPath.get(
                                                        'value',
                                                    ).node.value;
                                                }

                                                updateScanKidResult(
                                                    component,
                                                    kidValue,
                                                    state.scanKidResult,
                                                );
                                                state.isLogKid = true;
                                            },
                                        });
                                    }
                                }
                            }
                        }
                    },
                });

                if (state.isLogAnimated) {
                    this.animatedResult = state.scanAnimatedResult;
                }

                if (state.isLogKid) {
                    this.kidResult = state.scanKidResult;
                }
            },
        },
        post() {
            //Animated部分
            if (this.animatedResult.length) {
                this.animatedResult.forEach((item) => {
                    if (item.count > 0) {
                        weblog.sendImmediately('CLICK', {
                            action: `REACT_NATIVE_ANIMATED_USAGE`,
                            params: {
                                page: this.opts.bundleId || 'local',
                                usage: item.name,
                                count: item.count,
                            },
                        });
                    }
                });
            }
            //kid部分
            if (this.kidResult.length) {
                this.kidResult.forEach((item) => {
                    item.kidValue.forEach((kid) => {
                        weblog.sendImmediately('CLICK', {
                            action: `KID_ATTRIBUTE_USAGE`,
                            params: {
                                page: this.opts.bundleId || 'local',
                                usage: item.component,
                                value: kid.value,
                                count: kid.count,
                                totalCount: item.kidCount,
                            },
                        });
                    });
                });
            }
        },
    };
};

function updateScanKidResult(component, kidValue, scanKidResult) {
    const index = scanKidResult.findIndex((s) => s.component === component);
    if (index === -1) {
        scanKidResult.push({
            component,
            kidCount: 1,
            kidValue: [
                {
                    value: kidValue,
                    count: 1,
                },
            ],
        });
    } else {
        const result = scanKidResult[index];
        result.kidCount++;
        const vindex = result.kidValue.findIndex((k) => k.value === kidValue);
        if (vindex === -1) {
            result.kidValue.push({
                value: kidValue,
                count: 1,
            });
        } else {
            result.kidValue[vindex].count++;
        }
    }
}
