import { setStorageParam, GetStorageParam } from 'kdsbridge/types/KrnBridge';
import { NativeModules } from 'react-native';
import { IBridgeResult } from '../common/interface';
import { getInitData } from '../init';

export interface IGetStorageParam {
    /**
     * 可选项  bundleId +"_"+ componentName
     */
    page?: string;
    /**
     * 2种类型  memory、disk
     */
    level: 'memory' | 'disk';
    /**
     * 唯一标识
     */
    key: string;
}

export interface ISetStorageParam {
    /**
     * 2种类型  memory、disk
     */
    level: 'memory' | 'disk';
    /**
     * 唯一标识
     */
    key: string;
    /**
     * 数据
     */
    value: object;
}

export function setStorage(params: ISetStorageParam): Promise<IBridgeResult> {
    const { rootTag } = getInitData();
    return new Promise((resolve, reject) => {
        if (typeof NativeModules?.KrnBridge?.setStorage === 'function') {
            NativeModules.KrnBridge.setStorage(
                rootTag,
                params as setStorageParam,
            )
                .then((res) => {
                    resolve(res);
                })
                .catch((e) => {
                    reject(e);
                });
        } else {
            reject(
                new Error('NativeModules.KrnBridge.setStorage not function'),
            );
        }
    });
}

export function getStorage<T>(params: IGetStorageParam): Promise<T> {
    const { rootTag } = getInitData();
    return new Promise((resolve, reject) => {
        if (typeof NativeModules?.KrnBridge?.getStorage === 'function') {
            NativeModules.KrnBridge.getStorage(
                rootTag,
                params as GetStorageParam,
            )
                .then((res) => {
                    resolve(res);
                })
                .catch((e) => {
                    reject(e);
                });
        } else {
            reject(
                new Error('NativeModules.KrnBridge.getStorage not function'),
            );
        }
    });
}
