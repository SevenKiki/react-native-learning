import { RequestParams } from 'kdsbridge/types/KSURCTNetworkInterface';
import { NativeModules } from 'react-native';

export interface IRequestParams {
    /**
     * url,可以是 path
     */
    url: string;
    /**
     * post 或 get请求
     */
    method: 'POST' | 'GET';
    /**
     * 参数
     */
    params?: object;
    /**
     * 自定义 header
     */
    headers?: object;
    /**
     * 默认值为 'api'，目前支持的范围见下表
     *
     | businessName | iOS支持版本 | android 支持版本 | 含义 |
     | ---- | ---- | ---- | ---- |
     | web_merchant
     | api
     | live
     | merchant
     | zhongtai
     | local_life | 9.8.50 | 9.8.50
     | new_web | 9.8.50 | 9.8.50
     */
    businessName?:
        | 'new_web'
        | 'web_merchant'
        | 'api'
        | 'live'
        | 'merchant'
        | 'zhongtai'
        | 'local_life';
    /**
     * 响应数据类型
     */
    responseType?: 'string' | 'json' | 'obj';
    /**
     * 是否携带主站的公参，1携带
     */
    isAddCommonParameters?: 1 | 0;
    /**
     * 标记是否是上传请求
     */
    upload?: boolean;
    /**
     * 上传的文件路径只有upload为true时生效
     */
    localFilePath?: string;
    /**
     * 上传的fileKey,只有upload为true时生效
     */
    fileKey?: string;
    /**
     * 上传multi-part扩充参数，只有upload为true时生效
     */
    parts?: object;
}

/**
 * 发起网络请求
 * > [KDS文档](https://kds-doc.webdev.test.gifshow.com/kds-react/api/ks/03-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82.html)
 *
 * @typeParam T 响应报文类型
 *
 * @param requestParams 请求参数
 *
 | 字段 | 类型 | 是否必填 | 说明 |
 | ---- | ---- | ---- | ---- |
 | url | String | Y | url,可以是path |
 | method | String | Y | POST or GET post 或 get请求 |
 | params | object | N | 参数 |
 | headers | object | N | 自定义Header |
 | businessName | String | N | 默认api，目前支持的范围见下表 |
 | responseType | String | N | string, json or obj |
 | isAddCommonParameters | int | N | 是否携带主站的公参，1携带 |
 | upload | boolean | N | 标记是否是上传请求 |
 | localFilePath | String | N | 上传的文件路径只有upload为true时生效 |
 | fileKey | String | N | 上传的fileKey,只有upload为true时生效 |
 | parts | object | N | 上传multi-part扩充参数，只有upload为true时生效 |
 * @return 请求 Promise 对象
 *
 * ## Example
 * ```typescript
 // GET
 * const requestParams = {
 * "url":"网络请求的完整url或者path", // 这里写path，下面的businessName必须填
 * "method":"GET",   // GET代表get请求；POST代表post请求
 * "params": {   // 如果是GET请求，参数会追加到url里面；如果是POST请求，参数会放到body里面
 *	"paramsA":"valuesA",
 *  "paramsB":"valuesB",
 *  ...
 *},
 *  "headers":{
 *  	"Content-Type":"application/json",  // 不带字符集
 *    "Accept":"application/json",
 *    "User-Agent":"xxxxxx",
 *    ....
 *  },
 *  "businessName":"web_merchant", (可选)
 *  "responseType": "string", (可选)
 *  "isAddCommonParameters":  0 , (可选)  // 是否携带公参  0代表不携带公参   1 代表携带公参
 *}
 *
 * NativeModules.KSURCTNetworkInterface.request(requestParams).then((res) => {
 *  console.log(res)
 * }).cache((e) => {})
 *
 * // POST
 *  NativeModules.KSURCTNetworkInterface.request({
 *			upload: true,
 *			isAddCommonParams: 1,
 *			businessName: "api",
 *			url: "/rest/n/user/modify",
 *			localFilePath: filePath, // 本地文件路径
 * 			showProgress: true,
 *  		method: "POST",
 *			customUploadEventKey: "kds_upload_event",
 *			parts: {
 *				crc32: crc32
 *			}
 *		}).then((res) => {
 *			if (res) {
 * 				console.log(JSON.stringify(res))
 *			}
 *		}).catch(err => alert(err))
 ```
 */
export function request<T>(requestParams: IRequestParams): Promise<T> {
    return new Promise((resolve, reject) => {
        if (!NativeModules.KSURCTNetworkInterface) {
            reject(new Error('NativeModules.KSURCTNetworkInterface null'));
        }
        if (
            typeof NativeModules.KSURCTNetworkInterface.request !== 'function'
        ) {
            reject(
                new Error(
                    'NativeModules.KSURCTNetworkInterface.request not function',
                ),
            );
        }
        NativeModules.KSURCTNetworkInterface.request(
            requestParams as RequestParams,
        )
            .then((res) => {
                let resObj = res;
                if (typeof res === 'string') {
                    resObj = JSON.parse(res);
                }
                resolve(resObj);
            })
            .catch((err) => {
                reject(err);
            });
    });
}
