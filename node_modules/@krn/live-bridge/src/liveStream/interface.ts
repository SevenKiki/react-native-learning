/* eslint-disable max-lines */
import { IInitAPPProps } from '../common/interface';

/**
 * 直播 KRN 容器启动参数
 */
export interface IInitLiveAPPProps extends IInitAPPProps {
    /**
     * 直播间 id
     */
    liveStreamId: string;
    /**
     * 主播 id
     */
    anchorId: string;
    /**
     * 用户 id
     */
    uId: string;
    /**
     * 直播 id，业务不关心，bridge 调用时透传给 native
     */
    liveId: string;
    /**
     * 页面 id，业务不关心，bridge 调用时透传给 native
     */
    pageId: string;
    /**
     * JS是否拦截物理返回键，只有Android设备有效，1 拦截，0不拦截
     * 9.11.20 以及以上的版本支持该属性
     * 若 JS 拦截，Native 不再处理返回键，JS自己处理 Android 物理返回键的逻辑，包括页面关闭也需要 js 调用 closePage
     */
    interceptkeyback: 1 | 0;
}

export interface ICdnUrl {
    cdn?: string;
    url: string;
}

export interface IProfilePagePrefetchInfo {
    profilePageType: number;
}

/**
 * 直播用户数据结构
 */
export interface ILiveUserInfo {
    following?: boolean;
    defaultHead?: boolean;
    verified?: boolean;
    visitorBeFollowed?: boolean;
    headurls: ICdnUrl[];
    headurl: string;
    // eslint-disable-next-line camelcase
    user_text?: string;
    // eslint-disable-next-line camelcase
    user_sex?: string;
    isFavorited?: boolean;
    profilePagePrefetchInfo?: IProfilePagePrefetchInfo;
    // eslint-disable-next-line camelcase
    user_id: string; // 关注桥的调用 Android端只支持 string
    // eslint-disable-next-line camelcase
    user_name: string;
}

export interface IEnableDismissTouchOutside {
    enableDismissTouchOutside: boolean;
}

export interface IFetchResourcePath {
    // 资源类型（目前有 material 中台资源和 noble 贵族资源）
    type: string;
    // 图片名称
    resourceName: string;
    // 中台路径
    resPackId: string;
    // 中台图片领
    iconPath: string;
}

export interface IFollowUser {
    // 关注用户信息
    userInfo: ILiveUserInfo;
    // 关注栈信息
    followRefer: string;
    // 关注来源 init 类型，9.10.40新增参数
    followSource?: number;
}

/**
 * 直播间类型
 */
export enum ELiveType {
    VIDEO = 1,
    VOICE = 2,
    CHAT = 3,
    GAME = 4,
}

/**
 * 直播玩法:
 * PK、视频连线、连麦属于
 */
export enum ELiveScene {
    DEFAULT = 0,
    PK = 1,
    VIDEO_CHAT = 2,
    MIC_CHAT = 3,
}

/**
 * 连麦类型
 */
export enum EMicChatType {
    VOICE = 1,
    VIDEO = 2,
}

export interface IGetLiveSceneInfoResult {
    // 直播间类型
    liveType: ELiveType;
    // 直播间处于的场景(玩法)
    liveScene: ELiveScene;
    // 主播uid
    anchorUserId: string;
    // pk相关信息
    pkInfo?: {
        // 主播uid
        anchorUserId: string;
        // 对手uid
        opponentUserId: string;
    };
    // 连线
    lineChatInfo?: {
        // 直播uid
        anchorUserId: string;
        // 连线对象uid
        counterpartUserId: string;
    };
    // 连麦
    micChatInfo?: {
        // 连麦类型,int枚举
        micChatType: 1;
        anchorUserId: string;
        // 连麦嘉宾uid
        guestUserIds: string[];
    };
    // 聊天室
    voicePartyInfo?: {
        voicePartyId: string;
        // 嘉宾uid,数组
        guestUserIds: string[];
    };
    // 电商
    merchantInfo?: {
        merchantEntrance: true; // 是否开启卖货
        hasShopCar: true; // 是否有小黄车
    };
}

export interface INavigateToH5 {
    url: string;
    // 标记页面类型
    type: string;
    // 额外参数
    params?: object;
}

export interface IWalletResponse {
    // "快币送礼后的加密信息，用于直播等级业务计算积分"
    simpleMsg: string;
    // h5 送礼接口返回
    xZuan?: string;
    // h5 送礼接口返回
    withdrawAmount?: string;
    // h5 送礼接口返回
    ksCoin?: string;
    // h5 送礼接口返回
    kshell?: string;
    // h5 送礼接口返回
    version?: string;
}

export interface INotifySendGiftSuccessV2 {
    walletResponse: IWalletResponse;
}

export enum ELoggerType {
    CLICK = 'click',
    SHOW = 'show',
    TASK = 'task',
}

export interface ILoggerElementPackage {
    action?: number;
    action2?: string;
    name?: string;
    params?: string;
}

export interface ILoggerContentWrapper {
    liveVoicePartyPackage?: {
        selectedMicSeatUserId?: string;
        selectedMicSeatUserIndex?: number;
        serverMicStatus?: number;
    };
}

export interface ILoggerContentPackage {
    userPackage?: ILoggerUserPackage;
    // 可在此扩展其他数据
    moreInfoPackage?: { index?: string };
    /**
     * 支持版本 Android: 10.1.10+ iOS: 10.1.10+
     */
    giftPackage?: ILogGiftPackage;
    /**
     * 支持版本 Android: 10.1.10+ iOS: 10.1.10+
     */
    photoPackage?: ILogPhotoPackage;
}

export interface ILogGiftPackage {
    /**
     * 礼物类型
     */
    type?: number;
    /**
     * 礼物Id
     */
    identity?: string;
    /**
     * 礼物所在的位置
     */
    position?: number;
    /**
     * 魔法表情礼物的 id
     */
    magicFaceId?: number;
    /**
     * 礼物个数
     */
    totalCount?: number;
    /**
     * 是否为手绘礼物
     */
    isDrawingGift?: boolean;
    /**
     * 是否为背包礼物
     */
    isPacketGift?: boolean;
    /**
     * 是否为连送发送
     */
    isComboSend?: boolean;
    /**
     * 是否发送给主播
     */
    toAnchor?: boolean;
    /**
     * 礼物弹窗的来源
     */
    sourceType?: number;
    /**
     * 本地是否有该魔法礼物素材
     */
    isLocalHasMaterial?: boolean;
    /**
     * 本地礼物高清资源素材id集合，数组类型
     */
    localHighDefinitionMaterials?: string;
    /**
     * 送礼入口类型
     */
    giftEntryType?: number;
}

export interface ILogPhotoPackage {
    /**
     * 内容的类型
     */
    type?: number;
    /**
     * 视频位置id
     */
    index?: number;
    /**
     * 内容 id
     */
    identity?: string;
    /**
     * 作品作者的快手用户 id
     */
    authorId?: number;
    /**
     * 推荐后端的参数
     */
    expTag?: string;
    /**
     * 曝光id
     */
    llsid?: string;
    /**
     * 代替exp_tag的字段，内容包含exp_tag，author_id，photo_id/live_stream_id
     */
    serverExpTag?: string;
    /**
     * 作品作者的快手用户 id
     */
    sAuthorId?: string;
}

export interface ILoggerUserPackage {
    identity?: string;
    kwaiId?: string;
    index?: number;
    params?: string;
    promotionTag?: boolean;
    accountType?: number;
    avatarStatus?: string;
}

export interface ILoggerParam {
    // 埋点类型 click、show
    type: ELoggerType;
    contentPackage?: ILoggerContentPackage | object;
    elementPackage?: ILoggerElementPackage | object;
    contentWrapper?: ILoggerContentWrapper | object;
    /**
     * 支持版本 Android: 10.1.10+ iOS: 10.1.10+
     */
    resultPackage?: ILogResultPackage;
    /**
     * 公共参数 支持版本 Android: 10.1.10+ iOS: 10.1.10+
     */
    commonParams?: ILogCommonParams;
    /**
     * task埋点需要的参数 支持版本 Android: 10.1.10+ iOS: 10.1.10+
     */
    taskEventParams?: ILogTaskEventParams;
}

export interface ILogCommonParams {
    /**
     * 服务端返回的埋点信息,json格式  支持版本 Android: 10.1.10+ iOS: 10.1.10+
     */
    csLogCorrelateInfo?: object;
}

export interface ILogTaskEventParams {
    /**
     * task埋点的status
     */
    status: ELogTaskEventParams;
    /**
     * task埋点的action2
     */
    action2: string;
}

export const enum ELogTaskEventParams {
    UNKNOWN,
    START = 1,
    RETRY = 2,
    PAUSE = 3,
    RESUME = 4,
    PENDING = 5,
    PROCESSING = 6,
    SUCCESS = 7,
    FAIL = 8,
    CANCEL = 9,
    FINISH = 10,
}

export interface ILogResultPackage {
    /**
     * 返回码分组
     */
    domain?: number;
    /**
     * 返回码
     */
    code?: number;
    /**
     * 详细信息
     */
    message?: string;
    /**
     * 任务时长ms
     */
    timeCost?: number;
    /**
     * 自定义，可以为空
     */
    subdomain?: string;
}

export interface IToastParams {
    /**
     * 展示时长，仅android 支持，
     * 0: 展示时间较短; 1: 展示时间稍长
     * 默认为0 可不填
     */
    durationType?: 0 | 1;
    text: string;
}

/**
 * [打俩自定义 H5 容器](https://git.corp.kuaishou.com/wangzhibo03/livecomponentreadme/-/blob/master/webViewReadMe.md)
 */
export interface IOpenCustomH5Params {
    url: string;
    /**
     * 是否全屏 默认值 false
     */
    fullScreen?: boolean;
    /**
     * 竖屏下弹窗高度比例 默认值 0
     */
    portraitHeightRatio?: number;
    /**
     * 高度(竖屏下),竖屏下宽度默认是铺满屏幕，宽度不可定制
     */
    portraitHeightPixel?: number;
    /**
     * 宽度(横屏下)，横屏下高度默认是铺满屏幕，高度不可定制
     */
    landscapeWidthPixel?: number;
    /**
     * 主题样式(标题栏是否显示等)
     */
    layoutType?: number;
    /**
     * 是否开启打开页面动画
     */
    showAnimation?: boolean;
    /**
     * 是够开启关闭页面动画
     */
    dismissAnimtion?: boolean;
    /**
     * 打开关闭的动画样式
     */
    inOutAnimation?: string;
    /**
     * 蒙层暗度(0->1 透明->不透明)
     */
    dimAmount?: number;
    /**
     * 是否支持，手动下滑消失。
     */
    enablePanDown?: boolean;
    /**
     * 点击空白处是否消失
     */
    enableClickOutsideDismiss?: boolean;
    /**
     * 背景是否透明
     */
    transparent?: boolean;
    /**
     * 页面跟随键盘移动
     */
    enableKeyboardMove?: boolean;
    /**
     * 页面是否要顶部圆角
     */
    needCorner?: boolean;
    /**
     * 标题栏左侧按钮
     */
    actionBarLeftDrawableResId?: string;
    /**
     * 标题栏左侧按钮类型
     */
    actionBarLeftBtnType?: string;
    /**
     * 标题栏背景颜色
     */
    actionBarBgColor?: string;
    /**
     * 标题文案
     */
    title?: string;
    /**
     * 标题颜色
     */
    titleColor?: string;
    /**
     * web页面背景颜色
     */
    webViewBgColor?: string;
    /**
     * 是否展示正在加载的倒8View
     */
    enableLoading?: boolean;
    /**
     * 进度条颜色
     */
    progressBarColor?: string;
    /**
     * 隐藏左上角按钮
     */
    hideLeftTopBtn?: boolean;
    /**
     * topbar 按钮是否黑色
     */
    useBlackNavBtn?: boolean;
    /**
     * 页面加载失败，是否自动关闭页面(仅全屏场景下)
     */
    closeFullScreenWhenLoadError?: boolean;
    /**
     * dayNight模式
     */
    dayNightMode?: string;
}

export interface IOpenNonImmersiveH5Params {
    /**
     * 页面 url
     */
    targetUrl: string;
    /**
     * 页面高度
     */
    height?: number;
    /**
     * 页面高度占屏幕比例，优先级高于height
     */
    screenHeightRatio?: number;
}

export interface ILiveRoomInfoResult {
    /**
     * 1 表示成功
     */
    result: number;
    /**
     * 直播流ID
     */
    liveStreamId: string;
    /**
     * 主播ID
     */
    anchorUserId: string;
    /**
     * 0:旧版游戏直播间 1:新版游戏直播间
     */
    gameStyle: 0 | 1;
    /**
     * 互动游戏直播间 subType
     */
    subType: number;
}

export interface IProvideTreasureBoxParams {
    /**
     * 宝盒id
     */
    treasureBoxId: string;
}

export interface IProvideTreasureBoxResult {
    result: number;
    data: {
        /**
         * 直播间流 id
         */
        liveStreamId: string;
        treasureBoxId: string;
        bizType: number;
        redPackType: number;
        /**
         * 没有就不传
         */
        token: string;
        /**
         * 如果不是，就不传
         */
        isLuckyDog: number;
        grabScatterMillis: number;
    };
}

export interface IInjectCacheParams {
    /**
     * 存储的key
     * "推荐live_业务名(TreasureBox)_业务id(宝盒id)"
     */
    key: string;
    /**
     * 缓存过期时间，毫秒
     */
    expiredDuration?: number;
    /**
     * 存入的数据
     */
    data: object;
}

export interface IProvideCache {
    /**
     * 存储的key
     * "推荐live_业务名(TreasureBox)_业务id(宝盒id)"
     */
    key: string;
}

export interface IOpenLiveProfileCardParams {
    /**
     * 目标用户 id
     */
    targetUserId: string;
    /**
     * 打开profile页后是否背景变暗
     */
    isDimEnabled?: boolean;
    extraInfo?: {
        /**
         * 埋点上报用
         */
        profileOriginSource?: number;
        /**
         * 埋点上报用
         */
        followSource?: number;
        /**
         * 用户名,可选,用户可能是神秘人的必填
         */
        // eslint-disable-next-line camelcase
        user_name?: string;
        /**
         * 头像,可选,用户可能是神秘人的必填
         */
        headurls?: ICdnUrl[];
        /**
         * 可选，表示用户的身份信息，数据来自服务端，目前用于标识神秘人。用户可能有多个身份, 所以是个数组, 但目前客户端只会取第一个
         */
        roleInfos?: {
            /**
             * 身份类型，目前0表示正常身份，1表示神秘人
             */
            roleType: number;
        }[];
        /**
         * 关注接口里的额外参数。Android/iOS 10.1.10+支持
         */
        liveFollowExtParams?: object;
    };
}

export interface IMockEffectInfoParams {
    /**
     * 直播间 id
     */
    liveStreamId: string;
    /**
     * 业务类型，用于决定pbString的解析方式
     * 1: 使用LiveCommonEffectInfo结构进行解析
     */
    businessType: number;
    /**
     * 魔表 pd 内容 base64 编码后的字符串, 后台透传
     */
    pbString: string;
    /**
     * 业务信息，Map 结构，key和value都为String，会携带在渲染Task中用来做业务处理，例如渲染完成后路由跳转
     */
    bizExtraMap: object;
}

export interface IQueryWalletBalanceResult {
    /**
     * 快币余额
     */
    ksCoin: number;
    /**
     * 黄钻余额
     */
    xZuan: number;
    /**
     * 快贝余额
     */
    kshell: number;
}

export interface IBatchFetchResourceParams {
    /**
     * 0 : Android Singleton.get(FileManager::class.java).getDirInRoot（/storage/emulated/0/Android/data/com.smile.gifmaker/files） ios:root [NSBundle mainBundle].bundlePath
1 : Android Singleton.get(FileManager::class.java).getDirInPhoto （/storage/emulated/0/Android/data/com.smile.gifmaker/files） ios:未使用
2 : Android Singleton.get(FileManager::class.java).getDirInCache（/storage/emulated/0/Android/data/com.smile.gifmaker/cache） ios:CACHE 沙盒Library下面的Cache
3 : Android Singleton.get(FileManager::class.java).getDirInTmp（/storage/emulated/0/Android/data/com.smile.gifmaker/cache/.files） ios:Tmp NSTemporaryDirectory()
4 : Android Singleton.get(FileManager::class.java).getDirInPrivateCache（/data/user/0/com.smile.gifmaker/app_cache） ios:未使用
5 : Android Singleton.get(FileManager::class.java).getDirInPrivateRoot（/data/user/0/com.smile.gifmaker/files） ios:未使用
6 : 中台资源
7 : ios使用标识controlFiles 平台下载的资源，需要按照KSVersionedResourceType区分
     */
    type: number;
    /**
     * 每条数据对应的key值
     */
    key: string;
    /**
     * 文件子路径
     */
    subPath: string;
    /**
     * 文件名称
     */
    fileName: string;
}
/**
 * 简化版直播间用户信息(仅保留必要的UI信息)
 */
export interface ILiveDisplayUserInfo {
    // eslint-disable-next-line camelcase
    /**
     * 用户性别
     */
    // eslint-disable-next-line camelcase
    user_sex?: string;
    /**
     * 用户头像地址
     */
    headurls: ICdnUrl[];
    /**
     * 用户id
     */
    // eslint-disable-next-line camelcase
    user_id: string;
    /**
     * 用户昵称
     */
    // eslint-disable-next-line camelcase
    user_name: string;
    /**
     * 用户额外信息
     */
    extra: ILiveUserExtraInfo;
}

/**
 * 用户额外信息
 */
export interface ILiveUserExtraInfo {
    /**
     * 用户角色信息
     */
    roleInfos: ILiveUserRoleInfo[];
    /**
     * 用户勋章base64编码
     */
    userStateDisplaySegments: string;
}

export interface ILiveUserRoleInfo {
    /**
     * 用户角色类型
     */
    roleType: number;
    roleName: string;
    roleHeadUrls: ICdnUrl[];
}

/**
 * 发起重开一场PK的邀请的参数
 */
export interface IInvitePkOneMoreGameParams {
    /**
     * 本场PkId
     */
    pkId: string;

    /**
     * 重开来源
     * 1-从结束面板上发起的重开一局、
     * 2-惩罚阶段发起的重开一局、
     * 3-凝聚力PK发起的重开一局
     */
    source: number;

    /**
     * 重开的PK业务类型，
     * 1-普通PK
     * 2-复仇PK
     * 3-凝聚力PK
     */
    bizType: number;

    /**
     * 重开一场PK的额外参数
     */
    extraParams?: OneMoreGameExtParams;
}

export interface OneMoreGameExtParams {
    /**
     * 礼物id，如果有多个礼物，逗号分割
     */
    giftId?: string;
}

/**
 * 接受重开一场PK的参数
 */
export interface IAcceptPkOneMoreGameParams {
    /**
     * 本场PkId
     */
    pkId: string;

    /**
     * 重开来源
     * 1-从结束面板上发起的重开一局、
     * 2-惩罚阶段发起的重开一局、
     * 3-凝聚力PK发起的重开一局
     */
    source: number;

    /**
     * 重开的PK业务类型，
     * 1-普通PK
     * 2-复仇PK
     * 3-凝聚力PK
     */
    bizType: number;
}

/**
 * 拒绝重开一场PK的参数
 */
export interface IRejectPkOneMoreGameParams {
    /**
     * 本场PkId
     */
    pkId: string;

    /**
     * 重开来源
     * 1-从结束面板上发起的重开一局、
     * 2-惩罚阶段发起的重开一局、
     * 3-凝聚力PK发起的重开一局
     */
    source: number;

    /**
     * 重开的PK业务类型，
     * 1-普通PK
     * 2-复仇PK
     * 3-凝聚力PK
     */
    bizType: number;
}
