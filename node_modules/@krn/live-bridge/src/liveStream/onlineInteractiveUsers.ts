import {
    addEventListener,
    removeEventListener,
    subscribeChannel,
} from './subscribeChannel';
import { ILiveUserInfo, ILiveDisplayUserInfo } from './interface';

export interface OnlineUsersInfo {
    onlineUsers: ILiveDisplayUserInfo[];
}

const CHANNEL_MULTI_ONLINE_INTERACTIVE_USERS = 'onlineInteractiveUsers';

const onlineInteractiveUsersCallbacks = new Map<
    string,
    TOnlineInteractiveUsersCallback
>();

export type TOnlineInteractiveUsersCallback = (
    info: ILiveDisplayUserInfo[],
) => void;

const channelCallback = (data: any) => {
    if (typeof data === 'string') {
        data = JSON.parse(data);
    }
    const onlineUsersInfo: OnlineUsersInfo = data as OnlineUsersInfo;
    if (onlineUsersInfo && onlineUsersInfo.onlineUsers) {
        onlineInteractiveUsersCallbacks?.forEach((cb) => {
            cb(onlineUsersInfo.onlineUsers);
        });
    }
};

// 订阅多人互动框架在线人数
export async function subscribeOnlineInteractiveUsers(
    callback: TOnlineInteractiveUsersCallback,
): Promise<string> {
    if (callback == null) {
        throw new Error('callback must not be null');
    }
    const subscribeId = await subscribeChannel(
        CHANNEL_MULTI_ONLINE_INTERACTIVE_USERS,
        {},
    );
    onlineInteractiveUsersCallbacks.set(subscribeId, callback);
    addEventListener(CHANNEL_MULTI_ONLINE_INTERACTIVE_USERS, channelCallback);
    return subscribeId;
}

export async function unsubscribeOnlineInteractiveUsers(subscribeId) {
    if (subscribeId == null || subscribeId.length === 0) {
        throw new Error('subscribeId must not be null or empty');
    }
    onlineInteractiveUsersCallbacks.delete(subscribeId);
    if (onlineInteractiveUsersCallbacks.size === 0) {
        removeEventListener(CHANNEL_MULTI_ONLINE_INTERACTIVE_USERS);
    }
}
