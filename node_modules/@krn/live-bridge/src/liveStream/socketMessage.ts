// 直播长链接

import {
    EmitterSubscription,
    NativeEventEmitter,
    NativeModules,
} from 'react-native';
import { IInitLiveAPPProps } from '.';
import { getInitData } from '../init';
import { ELiveSocketMessageType } from './messageType';

const CHANNEL_SOCKET_MESSAGE = 'socketMessage';

export type TSocketMessageCallback = (data: Object) => void;

interface Subscriber {
    messageType: ELiveSocketMessageType;
    callback: TSocketMessageCallback;
}

const socketMessageCallbacks = new Map<
    ELiveSocketMessageType,
    Set<TSocketMessageCallback>
>();
const subscribers = new Map<string, Subscriber>();
const channelListeners = new Map<string, EmitterSubscription>();

/**
 * 订阅长链接信令消息 </br>
 * 支持版本: 9.10.40+ </br>
 * @param msgType   要订阅的信令类型
 * @param callback  接收信令消息的回调
 *
 * @returns 成功则返回 subscribeId（订阅ID），请在不再需要信令数据时调用 {@link unsubscribeSocketMessage} 方法进行反注册，否则会引起泄漏。
 * 一般可以在 component 销毁时注销该订阅。
 */
export async function subscribeSocketMessage(
    msgType: ELiveSocketMessageType,
    callback: TSocketMessageCallback,
): Promise<string> {
    if (callback == null) {
        throw new Error('callback must not be null');
    }

    // 订阅信令
    const subscribeId = await subscribeChannel(CHANNEL_SOCKET_MESSAGE, {
        messageType: msgType,
    });

    // 保存 subscriberId 和 msgType 的映射
    subscribers.set(subscribeId, { messageType: msgType, callback });

    // 注册 callback
    if (!socketMessageCallbacks.has(msgType)) {
        socketMessageCallbacks.set(msgType, new Set());
    }
    socketMessageCallbacks.get(msgType)?.add(callback);

    // 注册事件监听
    addEventListener(CHANNEL_SOCKET_MESSAGE);

    return subscribeId;
}

/**
 * 取消订阅长链接信令 </br>
 * 支持版本: 9.10.40+ </br>
 * @param subscribeId   订阅ID
 */
export async function unsubscribeSocketMessage(subscribeId: string) {
    if (subscribeId == null || subscribeId.length === 0) {
        throw new Error('subscribeId must not be null or empty');
    }

    const subscriber = subscribers.get(subscribeId);
    if (!subscriber) {
        throw new Error('subscribeId not found');
    }

    subscribers.delete(subscribeId);
    socketMessageCallbacks
        .get(subscriber.messageType)
        ?.delete(subscriber.callback);

    if (socketMessageCallbacks.get(subscriber.messageType)?.size === 0) {
        // 该类型消息已经没有人订阅了
        socketMessageCallbacks.delete(subscriber.messageType);
    }

    if (socketMessageCallbacks.size === 0) {
        // 长链接信令没有人订阅了
        removeEventListener(CHANNEL_SOCKET_MESSAGE);
    }

    unsubscribeChannel(subscribeId);
}

interface Message {
    messageType: number;
    message: object;
}

function addEventListener(channel: string) {
    // 避免重复注册
    if (channelListeners.has(channel)) {
        return;
    }

    // 通过 NativeEventEmitter 收取信令数据
    const eventEmitter = new NativeEventEmitter(NativeModules.LiveRnBridge);
    const eventListener = eventEmitter.addListener(
        // 订阅的 channel name
        CHANNEL_SOCKET_MESSAGE,

        // 接收 native 推送消息的 callback
        (data: Message) => {
            if (typeof data === 'string') {
                data = JSON.parse(data);
            }

            // 派发给对应的 callbacks
            const callbacks = socketMessageCallbacks.get(data.messageType);
            callbacks?.forEach((cb) => {
                cb(data.message);
            });
        },
    );

    channelListeners.set(channel, eventListener);
}

function removeEventListener(channel: string) {
    const listener = channelListeners.get(channel);
    listener?.remove();
    channelListeners.delete(channel);
}

function subscribeChannel(channel: string, params: object): Promise<string> {
    const { liveId, pageId } = getInitData() as IInitLiveAPPProps;
    if (typeof NativeModules?.LiveRnBridge?.subscribeChannel !== 'function') {
        throw new Error(
            'NativeModules.LiveRnBridge.subscribeChannel is not callable',
        );
    }

    return NativeModules.LiveRnBridge.subscribeChannel({
        // 订阅的 channel name
        channel,
        params,

        // 通用参数，用于定位直播间和页面
        containerParams: {
            liveId,
            pageId,
        },
    });
}

function unsubscribeChannel(subscribeId: string) {
    const { liveId, pageId } = getInitData() as IInitLiveAPPProps;
    if (typeof NativeModules?.LiveRnBridge?.subscribeChannel !== 'function') {
        throw new Error(
            'NativeModules.LiveRnBridge.unsubscribeChannel is not callable',
        );
    }

    NativeModules.LiveRnBridge.unsubscribeChannel({
        subscribeId,

        // 通用参数，用于定位直播间和页面
        containerParams: {
            liveId,
            pageId,
        },
    });
}
