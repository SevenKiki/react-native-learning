import { NativeModules } from 'react-native';
import { getInitData } from '../init';
import { IInitLiveAPPProps } from '../liveStream';

function parseResult<T>(result?: string | object | any): object {
    // 和客户端 @dengmin 约定如下逻辑
    let resultData;
    if (result === null) {
        resultData = {};
    } else if (typeof result === 'object') {
        resultData = result;
    } else {
        try {
            resultData = JSON.parse(result);
        } catch (e) {
            resultData = {};
        }
        if (typeof resultData !== 'object') {
            resultData = {};
        }
    }
    return resultData;
}

export function liveRnBridgeExecute<T extends object>(
    command: string,
    params: object,
): Promise<T> {
    const { liveId, pageId } = getInitData() as IInitLiveAPPProps;
    if (typeof NativeModules?.LiveRnBridge?.execute !== 'function') {
        return Promise.reject(
            new Error('NativeModules.LiveRnBridge.execute not function'),
        );
    }
    return new Promise((resolve, reject) => {
        NativeModules.LiveRnBridge.execute({
            command,
            params,
            containerParams: {
                liveId,
                pageId,
            },
        })
            .then((res: any) => {
                resolve(parseResult(res) as T);
            })
            .catch((e: Error) => {
                reject(e);
            });
    });
}
