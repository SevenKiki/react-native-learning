import { NativeEventEmitter, NativeModules, Platform } from 'react-native';
import { logError } from '../utils/logger';
export var ETheme;
(function (ETheme) {
    /**
     * 暗黑模式
     */
    ETheme["DARK"] = "dark";
    /**
     * 明亮模式
     */
    ETheme["LIGHT"] = "light";
})(ETheme || (ETheme = {}));
export var ELanguageType;
(function (ELanguageType) {
    /**
     * 简体中文
     */
    ELanguageType["ZH_HANS"] = "zh-Hans";
    /**
     * 繁体中文
     */
    ELanguageType["ZH_HANT"] = "zh-Hant";
    /**
     * 英语
     */
    ELanguageType["EN"] = "en";
})(ELanguageType || (ELanguageType = {}));
/**
 * 获取当前主题模式
 * > appVersion >= 9.7.20 </br>
 * > [KDS文档](https://kds-doc.webdev.test.gifshow.com/kds-react/api/ks/01-%E6%9A%97%E9%BB%91%E6%A8%A1%E5%BC%8F.html#ios-%E7%9B%91%E5%90%AC%E9%83%A8%E5%88%86)
 */
export function getTheme() {
    let theme = ETheme.LIGHT;
    try {
        theme = NativeModules.KSAppearance.getColorScheme();
    }
    catch (e) {
        // @ts-ignore
        logError('common', 'getTheme', e);
    }
    return theme;
}
/**
 * 监听 iOS 系统主题模式切换
 * > [KDS文档](https://kds.corp.kuaishou.com/kds-react/api/ks/01-%E6%9A%97%E9%BB%91%E6%A8%A1%E5%BC%8F.html#ios-%E7%9B%91%E5%90%AC%E9%83%A8%E5%88%86) </br>
 * > 这里要注意的是，在主站里面，Android不受系统暗黑模式切换控制，只受快手APP-设置-深色模式开关控制，所以Android不需要监听手机系统暗黑模式切换，进入RN页面已经确定了当前是否处于暗黑模式，所以只需要调用上面同步方法即可；但是iOS不可以，iOS有跟随系统的选项，所以iOS需要监听系统暗黑模式的切换，需要额外增加监听的代码.
 * @param listener 监听函数
 * @return 移除监听函数
 */
export function addIOSThemeChange(listener) {
    if (Platform.OS === 'ios') {
        if (typeof listener !== 'function') {
            logError('common', 'addIOSThemeChange', 'listener not function');
        }
        if (NativeModules.KSAppearance) {
            // @ts-ignore
            const eventEmitter = new NativeEventEmitter(NativeModules.KSAppearance);
            const colorListener = eventEmitter?.addListener('ksAppearanceChanged', ({ colorScheme }) => {
                listener?.(colorScheme);
            });
            return () => {
                colorListener?.remove();
            };
        }
    }
    return () => { };
}
export function getLanguage() {
    let lan = ELanguageType.ZH_HANS;
    try {
        lan = NativeModules.KSLanguage.getLanguage();
    }
    catch (e) {
        // @ts-ignore
        logError('common', 'getLanguage', e);
    }
    return lan;
}
export function getLocalizedString(key) {
    let localStr = '';
    try {
        localStr = NativeModules.KSLanguage.getLocalizedString(key);
    }
    catch (e) {
        // @ts-ignore
        logError('common', 'getLocalizedString', e);
    }
    return localStr;
}
