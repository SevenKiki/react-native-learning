import { NativeEventEmitter, NativeModules, } from 'react-native';
import { getInitData } from '../init';
const channelListeners = new Map();
export function subscribeChannel(channel, params) {
    const { liveId, pageId } = getInitData();
    if (typeof NativeModules?.LiveRnBridge?.subscribeChannel !== 'function') {
        throw new Error('NativeModules.LiveRnBridge.subscribeChannel is not callable');
    }
    return NativeModules.LiveRnBridge.subscribeChannel({
        // 订阅的 channel name
        channel,
        params,
        // 通用参数，用于定位直播间和页面
        containerParams: {
            liveId,
            pageId,
        },
    });
}
export function unsubscribeChannel(subscribeId) {
    const { liveId, pageId } = getInitData();
    if (typeof NativeModules?.LiveRnBridge?.subscribeChannel !== 'function') {
        throw new Error('NativeModules.LiveRnBridge.unsubscribeChannel is not callable');
    }
    NativeModules.LiveRnBridge.unsubscribeChannel({
        subscribeId,
        // 通用参数，用于定位直播间和页面
        containerParams: {
            liveId,
            pageId,
        },
    });
}
export function addEventListener(channel, callback) {
    // 避免重复注册
    if (channelListeners.has(channel)) {
        return;
    }
    const eventEmitter = new NativeEventEmitter(NativeModules.LiveRnBridge);
    const eventListener = eventEmitter.addListener(
    // 订阅的 channel name
    channel, 
    // 接收 native 推送消息的 callback
    (data) => {
        callback(data);
    });
    channelListeners.set(channel, eventListener);
}
export function removeEventListener(channel) {
    const listener = channelListeners.get(channel);
    listener?.remove();
    channelListeners.delete(channel);
}
