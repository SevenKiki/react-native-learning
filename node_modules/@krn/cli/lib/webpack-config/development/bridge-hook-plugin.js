"use strict";
const RuntimeGlobals = require('webpack/lib/RuntimeGlobals');
const RuntimeModule = require('webpack/lib/RuntimeModule');
// 兼容原来的 bridge hook 逻辑
class BridgeHookModule extends RuntimeModule {
    constructor() {
        super('BridgeHookModule');
    }
    generate() {
        return `
        var originInterceptModuleExecution = ${RuntimeGlobals.interceptModuleExecution};
        ${RuntimeGlobals.interceptModuleExecution} = [...originInterceptModuleExecution, function (execOptions) {
          const originFactory = execOptions.factory;
          execOptions.factory = function (__module, __modules_exports, __require) {
            ${RuntimeGlobals.global}.__d(function (_1, __require__, _2, _3, __module__) {
              originFactory(__module__, __module__.exports, __require__);
            }, __module, __require, execOptions.id);
          }
        }];
        `;
    }
}
class BridgeHookGlobalModule extends RuntimeModule {
    constructor() {
        super('BridgeHookGlobalModule');
    }
    generate() {
        return `var originStartup = ${RuntimeGlobals.startup};
        ${RuntimeGlobals.startup} = function () {
          ${RuntimeGlobals.global}.__d = function (factory, __module, __require, moduleId) {           
            factory(${RuntimeGlobals.global}, __require, null, null, __module);
          }
          return originStartup();
        }
        `;
    }
}
class BridgeHookModulePlugin {
    apply(compiler) {
        compiler.hooks.compilation.tap('BridgeHookModulePlugin', (compilation) => {
            compilation.hooks.runtimeRequirementInTree
                .for(RuntimeGlobals.requireScope)
                .tap('RuntimePlugin', (chunk, set) => {
                set.add(RuntimeGlobals.startupOnlyBefore);
                set.add(RuntimeGlobals.interceptModuleExecution);
                set.add(RuntimeGlobals.global);
                compilation.addRuntimeModule(chunk, new BridgeHookGlobalModule());
                compilation.addRuntimeModule(chunk, new BridgeHookModule());
                return true;
            });
        });
    }
}
module.exports = BridgeHookModulePlugin;
