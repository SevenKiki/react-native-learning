"use strict";
const path = require('path');
const { config } = require('@webpack4rn/build/lib/config');
const webpack = require('webpack');
const fs = require('fs');
const { merge } = require('webpack-merge');
const projectRoot = process.env.KRN_PROJECT_ROOT;
const workspaceContext = process.env.KRN_WORKSPACE_CONTEXT;
const bundleDirPath = process.env.KRN_BUNDLE_DIR_PATH;
const assetDestDirPath = process.env.KRN_BUNDLE_WEBPACK_ASSET_DIR_PATH;
const sourceMapFilename = process.env.KRN_SOURCE_MAP_FILE_NAME;
const platform = process.env.KRN_PLATFORM;
const filename = `index.${platform}.js`;
const webpackConfigPath = process.env.KRN_CONFIG_PATH;
const webpackVendorPath = require.resolve(`@webpack4rn/build/vendor/${platform}/manifest.json`);
class RenameBundlePlugin {
    apply(compiler) {
        compiler.hooks.done.tapAsync('RenameBundlePlugin', (stats, callback) => {
            if (!stats.hasErrors()) {
                fs.renameSync(path.resolve(projectRoot, bundleDirPath, filename), path.resolve(projectRoot, bundleDirPath, `index.${platform}.bundle`));
            }
            callback();
        });
    }
}
const customConfig = () => {
    try {
        return require(webpackConfigPath);
    }
    catch (err) {
        return {};
    }
};
module.exports = config(merge({
    mode: 'production',
    context: projectRoot,
    output: {
        path: path.resolve(projectRoot, bundleDirPath),
        filename: `index.${platform}.js`,
        sourceMapFilename,
    },
    devtool: 'source-map',
    plugins: [
        new webpack.DllReferencePlugin({
            manifest: path.resolve(webpackVendorPath),
            context: path.resolve(projectRoot, workspaceContext || './'),
        }),
        new RenameBundlePlugin(),
    ],
}, customConfig()), {
    assetDest: path.relative(bundleDirPath, assetDestDirPath),
});
