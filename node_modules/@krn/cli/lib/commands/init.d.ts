import { flags } from '@oclif/command';
import CustomCommand from './command';
declare enum FRAMEWORK {
    Vue = "Vue",
    React = "React"
}
export declare enum LANGUAGE {
    TYPESCRIPT = "TypeScript",
    JAVASCRIPT = "JavaScript",
    RNWeb = "RN-Web",
    KUAIYING = "ky-rn",
    LIBRARY = "library"
}
declare enum INSTALL_CMD {
    NPM = "npm",
    YARN = "yarn"
}
interface EntryMap {
    [key: string]: string;
}
type SchemeParams = {
    [key: string]: string;
};
export type KrnHooks = 'prebuild' | 'prepack' | 'postbuild' | 'failbuild';
export interface KrnConfig {
    projectName?: string;
    installCmd?: INSTALL_CMD;
    framework?: FRAMEWORK | '';
    language?: LANGUAGE;
    entry?: string | EntryMap;
    scheme?: string;
    schemeParams?: SchemeParams | string;
    frameworkBaseVersion?: string;
    hooks?: Record<KrnHooks, string>;
    workspace?: string;
    accurateTestIstanbul?: boolean;
    autoTestId?: boolean;
    ignoreBatchedBridgeRegisterCheck?: boolean;
    grammarCheckIngore?: string[];
}
export default class Init extends CustomCommand {
    static hidden: boolean;
    static description: string;
    static examples: string[];
    static args: {
        name: string;
    }[];
    static flags: {
        name: flags.IOptionFlag<string | undefined>;
        directory: flags.IOptionFlag<string | undefined>;
        template: flags.IOptionFlag<string | undefined>;
        'no-install': import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
    };
    private getFlags;
    private getArgs;
    private selectLanguage;
    protected selectInstallCmd(): Promise<INSTALL_CMD>;
    private copyTemplate;
    private replacePackageInfo;
    protected installDependencies(projectPath: string, cmd?: INSTALL_CMD): Promise<void>;
    private writeKrnConfig;
    run(): Promise<void>;
}
export {};
