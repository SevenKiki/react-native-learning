import { flags } from '@oclif/command';
import { KrnHooks } from './init';
import CustomCommand from './command';
declare enum BUILD_PLATFORM {
    IOS = "ios",
    ANDROID = "android"
}
export interface BusinessParams {
    platform: BUILD_PLATFORM;
    bundleId: string;
    version: number;
    entry: string;
    outputDirPath: string;
    bundleDirPath: string;
    bundleFilePath: string;
    tmpDirPath: string;
    internalPath: string;
    webpackAssetsDirPath: string;
    sourcemapPath: string;
    sourceMapFilename: string;
    componentNamesJsonFilePath: string;
    accurateTestDataFilePath: string;
    accurateTestCsvDataFilePath: string;
    bachedBridgeRegisterCheckFilePath: string;
    workspaceContext?: string;
}
export default class Build extends CustomCommand {
    static hidden: boolean;
    static description: string;
    static examples: string[];
    static flags: {
        platform: flags.IOptionFlag<string>;
        dev: flags.IOptionFlag<string>;
        minify: flags.IOptionFlag<string>;
        config: flags.IOptionFlag<string>;
        'reset-cache': import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        verbose: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        'use-webpack': import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        deploy: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        'deploy-scheme': flags.IOptionFlag<string>;
        'accurate-test-istanbul': import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        'auto-test-id': import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        version: import("@oclif/parser/lib/flags").IOptionFlag<number>;
        bundleId: flags.IOptionFlag<string>;
        upload: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        'ignore-size': import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
    };
    private getFlags;
    private selectPlatform;
    private inputVersion;
    private inputBundleId;
    private getKrnConfig;
    private getRegisterComponentNames;
    private getEntryFilePath;
    private ensureBusinessParams;
    protected buildBusinessBundle({ platform, bundleId, version, entry, outputDirPath, bundleDirPath, bundleFilePath, webpackAssetsDirPath, sourceMapFilename, sourcemapPath, workspaceContext, }: BusinessParams): Promise<any>;
    private handleBusinessBundle;
    private uploadProducts;
    private deployCDN;
    private runBuildBusinessBunlde;
    reportBuildInfo({ start, success, businessParams, bundleSize, bundleConfigFilePath, }: {
        start: number;
        success: boolean;
        businessParams?: BusinessParams;
        bundleSize?: number;
        bundleConfigFilePath?: string;
    }): Promise<void>;
    runHook(name: KrnHooks): Promise<void>;
    isAccurateTest(): boolean;
    isAutoTestId(): boolean;
    isNeedInsertBabelConfig(): boolean;
    isEnableBatchedBridgeRegisterCheck(): boolean;
    insertBabelConfig(businessParams: BusinessParams): Promise<void>;
    restoreBabelConfig(): void;
    isIntegratedWebpack(): boolean;
    run(): Promise<void>;
}
export {};
