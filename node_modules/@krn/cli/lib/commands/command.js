"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const path = require("path");
const cli_shared_1 = require("@krn/cli-shared");
const utils_1 = require("../utils");
const fs = require("fs-extra");
const child_process_1 = require("child_process");
class CustomCommand extends command_1.Command {
    constructor() {
        super(...arguments);
        this.version = '';
    }
    async run() {
        const version = fs.readJSONSync(path.resolve(utils_1.rootDir, 'package.json'))
            .version;
        this.version = version;
        utils_1.Logger.log(cli_shared_1.isInstalledGlobally ? '[global]当前CLI版本' : '当前CLI版本', 'v' + version);
        return Promise.resolve();
    }
    async runAnalytics(_a) {
        var { id = this.id, CLIVersion = this.config.version } = _a, other = tslib_1.__rest(_a, ["id", "CLIVersion"]);
        if (id) {
            let userName = '';
            try {
                userName = (0, child_process_1.execSync)('git config  --get user.email')
                    .toString('utf8')
                    .trim()
                    .split('@')[0];
            }
            catch (_b) { }
            cli_shared_1.weblog.sendImmediately('CLICK', {
                action: id.toUpperCase(),
                params: Object.assign(Object.assign({ CLIVersion }, other), { userName, isGlobal: cli_shared_1.isInstalledGlobally }),
            });
        }
    }
}
exports.default = CustomCommand;
CustomCommand.hidden = true;
