"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LANGUAGE = void 0;
const command_1 = require("@oclif/command");
const path = require("path");
const inquirer = require("inquirer");
const fs = require("fs-extra");
const utils_1 = require("../utils");
const chalk = require("chalk");
const Listr = require("listr");
const command_2 = require("./command");
const child_process_1 = require("child_process");
var FRAMEWORK;
(function (FRAMEWORK) {
    FRAMEWORK["Vue"] = "Vue";
    FRAMEWORK["React"] = "React";
})(FRAMEWORK || (FRAMEWORK = {}));
var LANGUAGE;
(function (LANGUAGE) {
    LANGUAGE["TYPESCRIPT"] = "TypeScript";
    LANGUAGE["JAVASCRIPT"] = "JavaScript";
    LANGUAGE["RNWeb"] = "RN-Web";
    LANGUAGE["KUAIYING"] = "ky-rn";
    LANGUAGE["LIBRARY"] = "library";
})(LANGUAGE = exports.LANGUAGE || (exports.LANGUAGE = {}));
var INSTALL_CMD;
(function (INSTALL_CMD) {
    INSTALL_CMD["NPM"] = "npm";
    INSTALL_CMD["YARN"] = "yarn";
})(INSTALL_CMD || (INSTALL_CMD = {}));
class Init extends command_2.default {
    getFlags() {
        const { flags } = this.parse(Init);
        return flags;
    }
    getArgs() {
        const { args } = this.parse(Init);
        return args;
    }
    async selectLanguage() {
        const responses = await inquirer.prompt({
            name: 'language',
            message: '请选择模板',
            type: 'list',
            choices: [
                { name: LANGUAGE.TYPESCRIPT, value: LANGUAGE.TYPESCRIPT },
                { name: LANGUAGE.JAVASCRIPT, value: LANGUAGE.JAVASCRIPT },
                { name: 'Library（开发 npm 库）', value: LANGUAGE.LIBRARY },
                {
                    name: 'React-Native-To-Web（探索实验中)',
                    value: LANGUAGE.RNWeb,
                },
                { name: '快影', value: LANGUAGE.KUAIYING },
            ],
        });
        return responses.language;
    }
    async selectInstallCmd() {
        const recommendStr = '(推荐使用)';
        const responses = await inquirer.prompt({
            name: 'installCmd',
            message: '请选择NPM包管理工具',
            type: 'list',
            choices: [
                { name: INSTALL_CMD.YARN + recommendStr },
                { name: INSTALL_CMD.NPM },
            ],
        });
        return responses.installCmd.replace(recommendStr, '');
    }
    async copyTemplate(npmTemplate, language, projectPath) {
        const packageName = npmTemplate || `@krn/${language.toLowerCase()}-template`;
        try {
            const { stdout } = await (0, utils_1.execAsync)(`npm pack ${packageName} --registry=https://npm.corp.kuaishou.com`, {
                cwd: projectPath,
            });
            const zipPath = path.resolve(projectPath, stdout.replace(/\n/g, ''));
            await (0, utils_1.unzipTgz)({
                path: zipPath,
                destPath: projectPath,
            });
            const packagePath = path.resolve(projectPath, 'package');
            const gitIgnoreFilePath = path.resolve(projectPath, '.gitignore');
            await fs.copy(packagePath, projectPath);
            await fs.writeFileSync(gitIgnoreFilePath, `*-debug.log\n*-error.log\nnode_modules`);
            fs.removeSync(packagePath);
            fs.removeSync(zipPath);
        }
        catch (error) {
            return Promise.reject(error);
        }
    }
    async replacePackageInfo(projectPath, projectName) {
        const packageJsonPath = path.resolve(projectPath, 'package.json');
        const packageJson = require(packageJsonPath);
        packageJson.name = projectName;
        packageJson.version = '0.0.1';
        [
            'contributors',
            'keywords',
            'bugs',
            'repository',
            'homepage',
            'description',
            'gitHead',
            'scripts',
        ].forEach((key) => {
            if (key === 'scripts') {
                delete packageJson.scripts['pre-publish'];
            }
            else {
                delete packageJson[key];
            }
        });
        await (0, utils_1.writeJsonFile)(packageJsonPath, packageJson);
        const customInitTemplate = path.join(projectPath, '.init-template.js');
        if (fs.existsSync(customInitTemplate)) {
            try {
                await (0, utils_1.execAsync)('node .init-template.js', {
                    cwd: projectPath,
                });
                fs.rmSync(customInitTemplate);
            }
            catch (error) {
                utils_1.Logger.error('执行自定义初始化脚本失败', error.toString());
            }
        }
        return true;
    }
    installDependencies(projectPath, cmd) {
        return new Promise((resolve, reject) => {
            if (!cmd) {
                resolve();
            }
            (0, child_process_1.exec)(`${cmd} install`, { cwd: projectPath }, (error, stadout, staderr) => {
                if (staderr && error) {
                    reject(new Error(staderr));
                }
                else {
                    resolve();
                }
            });
        });
    }
    writeKrnConfig(projectPath, config) {
        const krnConfigPath = path.resolve(projectPath, 'krn.config.json');
        const krnConfig = fs.existsSync(krnConfigPath)
            ? require(krnConfigPath)
            : {};
        return (0, utils_1.writeJsonFile)(krnConfigPath, Object.assign(Object.assign({}, krnConfig), config));
    }
    async run() {
        await super.run();
        const config = {};
        const args = this.getArgs();
        const flags = this.getFlags();
        const directory = args.directory || process.cwd();
        let projectName = flags.name || args.name || '';
        // 创建工程
        const projectPath = projectName
            ? path.resolve(directory, projectName)
            : directory;
        if (fs.existsSync(projectPath) || !projectName) {
            projectName = path.basename(projectPath);
        }
        if (!fs.existsSync(projectPath)) {
            (0, utils_1.rmAndMkdir)(projectPath);
        }
        const customTemplate = flags.template || args.template;
        let language = LANGUAGE.TYPESCRIPT;
        if (!customTemplate) {
            language = await this.selectLanguage();
        }
        const installCmd = flags['no-install']
            ? undefined
            : await this.selectInstallCmd();
        this.runAnalytics({
            id: this.id,
            projectName,
            installCmd,
            CLIVersion: this.config.version,
        });
        config.projectName = projectName;
        config.installCmd = installCmd;
        config.framework = FRAMEWORK.React;
        config.language = language;
        // 初始化项目
        try {
            utils_1.Logger.log('🚀🚀🚀 初始化项目中...\n');
            await new Listr([
                {
                    title: '下载模板代码',
                    task: () => this.copyTemplate(customTemplate, language, projectPath),
                },
                {
                    title: '正在配置项目',
                    task: () => Promise.all([
                        this.replacePackageInfo(projectPath, projectName),
                        this.writeKrnConfig(projectPath, config),
                    ]),
                },
                {
                    title: '安装依赖（大约需要1min）\n',
                    task: () => this.installDependencies(projectPath, installCmd),
                },
            ]).run();
            const targetDir = path.relative(process.cwd(), projectPath);
            const strongStr = projectName
                ? `cd ./${targetDir} && ${installCmd || 'yarn'} start`
                : `${installCmd || 'yarn'} start`;
            utils_1.Logger.log(`${projectPath} 已创建，请执行 ${chalk.green(strongStr)}`);
        }
        catch (error) {
            utils_1.Logger.log('Oops~创建失败');
            return Promise.reject(error);
        }
    }
}
exports.default = Init;
Init.hidden = false;
Init.description = '初始化项目命令';
Init.examples = [`krn init Demo`];
Init.args = [{ name: 'name' }, { name: 'directory' }];
Init.flags = {
    name: command_1.flags.string({
        helpValue: 'KRNDemo',
        description: '项目名称',
        required: false,
    }),
    directory: command_1.flags.string({
        description: '项目路径，不包括项目名称',
        required: false,
    }),
    template: command_1.flags.string({
        helpValue: '@krn/foo-template',
        description: '自定义模板，请上传模板代码到@krn/<name>-template',
        required: false,
    }),
    'no-install': command_1.flags.boolean({
        description: '只初始化模板，不安装依赖',
        required: false,
        default: false,
    }),
};
