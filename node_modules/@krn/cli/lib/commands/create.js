"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBundle = exports.createBundleTemplate = void 0;
const path = require("path");
const fs = require("fs-extra");
const init_1 = require("./init");
const prettier = require("prettier");
const inquirer = require("inquirer");
const utils_1 = require("../utils");
const lodash_1 = require("lodash");
const command_1 = require("./command");
const createBundleTemplate = (bundleId) => `
    import React from 'react';
    import { View, Text, StyleSheet, AppRegistry } from 'react-native';

    const styles = StyleSheet.create({
      container: {
          flex: 1,
          justifyContent: 'center',
          flexDirection: 'column',
          alignItems: 'center',
      },
    });

    const App = () => {
        return (
            <View style={styles.container}>
                <Text>Hello App</Text>
            </View>
        );
    };

    AppRegistry.registerComponent('${bundleId}', () => App);
`;
exports.createBundleTemplate = createBundleTemplate;
const createBundle = async ({ cwd, bundleDir = './src', bundleId, language, }) => {
    try {
        if (![init_1.LANGUAGE.JAVASCRIPT, init_1.LANGUAGE.TYPESCRIPT].includes(language)) {
            return Promise.reject(new Error('仅支持Typescript和Javascript模板'));
        }
        const extnames = {
            [init_1.LANGUAGE.TYPESCRIPT]: '.tsx',
            [init_1.LANGUAGE.RNWeb]: '.tsx',
            [init_1.LANGUAGE.JAVASCRIPT]: '.js',
            [init_1.LANGUAGE.KUAIYING]: '.tsx',
            [init_1.LANGUAGE.LIBRARY]: '.tsx',
        };
        const bunnleDirPath = path.resolve(cwd, bundleDir, bundleId);
        const bundleEntryFilePath = path.resolve(bunnleDirPath, 'index' + extnames[language]);
        const newEntryFile = './' + path.relative(cwd, bundleEntryFilePath);
        if (fs.existsSync(bunnleDirPath)) {
            return Promise.reject(new Error('bundle已存在'));
        }
        (0, utils_1.rmAndMkdir)(bunnleDirPath);
        await fs.writeFile(bundleEntryFilePath, prettier.format((0, exports.createBundleTemplate)(bundleId), {
            parser: 'babel',
            tabWidth: 4,
            singleQuote: true,
        }));
        return {
            entryFile: newEntryFile,
        };
    }
    catch (error) {
        return Promise.reject(error);
    }
};
exports.createBundle = createBundle;
class Create extends command_1.default {
    getArgs() {
        const { args } = this.parse(Create);
        return args;
    }
    async inputBundleId() {
        const responses = await inquirer.prompt({
            name: 'bundleId',
            message: '请输入BundleId',
            type: 'input',
        });
        return responses.bundleId;
    }
    async inputBundleDir() {
        const responses = await inquirer.prompt({
            name: 'bundleDir',
            message: '请输入BundleId的目录位置',
            type: 'input',
            default: './src',
        });
        return responses.bundleDir;
    }
    async run() {
        try {
            await super.run();
            const args = this.getArgs();
            const bundleId = args.bundleId || (await this.inputBundleId());
            const bundleDir = await this.inputBundleDir();
            const krnConfigPath = path.resolve('./krn.config.json');
            const krnConfig = fs.existsSync(krnConfigPath)
                ? fs.readJSONSync(krnConfigPath)
                : {};
            const language = krnConfig.language || init_1.LANGUAGE.JAVASCRIPT;
            if ((0, lodash_1.isString)(krnConfig.entry)) {
                utils_1.Logger.warn('支持多Bundle工程，可参考这个指南', 'https://docs.corp.kuaishou.com/k/home/VXCtXsC0-Nzg/fcADRafUY14T982kqy9ZEcpzx#section=h.bmayphp5ilv5');
                return Promise.reject(new Error('单bundle工程暂不支持新建bundle'));
            }
            const { entryFile } = await (0, exports.createBundle)({
                cwd: process.cwd(),
                bundleId,
                bundleDir,
                language,
            });
            if ((0, lodash_1.isUndefined)(krnConfig.entry)) {
                krnConfig.entry = {};
            }
            krnConfig.entry[bundleId] = entryFile;
            await (0, utils_1.writeJsonFile)(krnConfigPath, krnConfig);
            utils_1.Logger.log('bundle创建成功，目录位置:', bundleDir);
        }
        catch (error) {
            utils_1.Logger.log('Oops~创建bundle失败');
            return Promise.reject(error);
        }
    }
}
exports.default = Create;
Create.hidden = false;
Create.description = '创建Bundle';
Create.args = [{ name: 'bundleId' }];
