"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReactNativeCommunityCliToolsVersion = void 0;
const base_1 = require("./base");
const fs = require("fs-extra");
const path = require("path");
class ReactNativeCommunityCliToolsVersion extends base_1.Symptom {
    constructor() {
        super(...arguments);
        this.desc = '@react-native-community/cli-tools 版本';
        this.advice = '请设置 package.json 中 resolutions 字段的 @react-native-community/cli-tools 为 4.13.0，否则可能本地依赖会安装失败或打包失败';
        this.level = 'error';
    }
    async check() {
        var _a;
        const packageJson = fs.readJSONSync(path.resolve('package.json'));
        return (((_a = packageJson.resolutions) === null || _a === void 0 ? void 0 : _a['@react-native-community/cli-tools']) ===
            '4.13.0');
    }
    async checkWithInstallErrorMessage(msg) {
        return !msg.includes('Couldn\'t find any versions for "@react-native-community/cli-tools"');
    }
    async fix() {
        const packageJson = fs.readJSONSync(path.resolve('package.json'));
        if (!packageJson.resolutions) {
            packageJson.resolutions = {};
        }
        packageJson.resolutions['@react-native-community/cli-tools'] = '4.13.0';
        fs.writeJsonSync('./package.json', packageJson, {
            spaces: '    ',
        });
        return true;
    }
}
exports.ReactNativeCommunityCliToolsVersion = ReactNativeCommunityCliToolsVersion;
const reactNativeCommunityCliToolsVersion = new ReactNativeCommunityCliToolsVersion();
exports.default = reactNativeCommunityCliToolsVersion;
