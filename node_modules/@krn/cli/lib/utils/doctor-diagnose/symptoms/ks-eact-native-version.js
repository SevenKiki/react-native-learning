"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KsReactNativeVersion = void 0;
const base_1 = require("./base");
const fs = require("fs-extra");
const path = require("path");
const exec_async_1 = require("../../exec-async");
const logger_1 = require("../../logger");
class KsReactNativeVersion extends base_1.Symptom {
    constructor() {
        super(...arguments);
        this.desc = '使用快手 react native 版本';
        this.ksVersion = '0.62.2-ks.6';
        this.advice = '请将 react native 版本升级至 0.62.2-ks.6，否则可能导致 keep 打包后功能运行出现异常';
        this.level = 'error';
    }
    async getKsNewVersion() {
        try {
            const { stdout } = await (0, exec_async_1.execAsync)(`npm view react-native@ks version --registry=https://npm.corp.kuaishou.com`);
            const newVersion = stdout.trim();
            this.ksVersion = newVersion;
            this.advice = `请将 react native 版本升级至 ${newVersion}，否则可能导致 keep 打包后功能运行出现异常`;
        }
        catch (err) {
            logger_1.Logger.error(`获取 react-native ks 版本出错`, err);
        }
    }
    async check() {
        var _a, _b, _c;
        await this.getKsNewVersion();
        const packageJson = fs.readJSONSync(path.resolve('package.json'));
        const { ksVersion } = this;
        return ((((_a = packageJson.dependencies) === null || _a === void 0 ? void 0 : _a['react-native']) || '').indexOf(ksVersion) !== -1 &&
            (!((_b = packageJson.resolutions) === null || _b === void 0 ? void 0 : _b['react-native']) ||
                (((_c = packageJson.resolutions) === null || _c === void 0 ? void 0 : _c['react-native']) || '').indexOf(ksVersion) !== -1));
    }
    async fix() {
        var _a;
        const { ksVersion } = this;
        const packageJson = fs.readJSONSync(path.resolve('package.json'));
        packageJson.dependencies['react-native'] = ksVersion;
        if ((_a = packageJson.resolutions) === null || _a === void 0 ? void 0 : _a['react-native']) {
            packageJson.resolutions['react-native'] = ksVersion;
        }
        fs.writeJsonSync('./package.json', packageJson, {
            spaces: '    ',
        });
        return true;
    }
}
exports.KsReactNativeVersion = KsReactNativeVersion;
const ksReactNativeVersion = new KsReactNativeVersion();
exports.default = ksReactNativeVersion;
