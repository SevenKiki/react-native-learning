"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReactNativeCommunityCliDebuggerUi = void 0;
const utils_1 = require("./../utils");
const base_1 = require("./base");
const fs = require("fs-extra");
class ReactNativeCommunityCliDebuggerUi extends base_1.Symptom {
    constructor() {
        super(...arguments);
        this.desc = '@react-native-community/cli-debugger-ui 依赖';
        this.advice = '@react-native-community/cli-debugger-ui 依赖的 integrity 存在问题， 可能导致 CI/CD 失败';
        this.level = 'error';
    }
    async check() {
        const filename = (0, utils_1.searchFileUntilRoot)('yarn.lock');
        if (!filename) {
            return true;
        }
        const content = fs.readFileSync(filename, {
            encoding: 'utf-8',
        });
        return !(content.includes('sha512-96LuabiEE8JFEQv3JFHqzcR46FA3ctAZ2bu7kP4rYFaMMbSaHpP06PiJB1BgOPNGe46Vtke2Hnf0AWg9hx70TA==') ||
            content.includes('sha512-WPZWNXCoKFMpJmDbOgXxWp2Fpnki5cKsCzAzOQVIZnLeN75tEVBR2+tnae7nG/uIbxIMG9LqB4l6Q5zuzF1glA=='));
    }
    async checkWithInstallErrorMessage(msg) {
        return !msg.includes('Integrity check failed for "@react-native-community/cli-debugger-ui"');
    }
    async fix() {
        const filename = (0, utils_1.searchFileUntilRoot)('yarn.lock');
        if (!filename) {
            return true;
        }
        const content = fs.readFileSync(filename, {
            encoding: 'utf-8',
        });
        fs.writeFileSync(filename, content.replace(/\"@react-native-community\/cli-debugger-ui@\^4.13.1\":(.|\n)*?serve-static\s\"\^1.13.1\"/, ''));
        return true;
    }
}
exports.ReactNativeCommunityCliDebuggerUi = ReactNativeCommunityCliDebuggerUi;
const reactNativeCommunityCliDebuggerUi = new ReactNativeCommunityCliDebuggerUi();
exports.default = reactNativeCommunityCliDebuggerUi;
