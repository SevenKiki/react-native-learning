"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReactNativeVersion = void 0;
const base_1 = require("./base");
const fs = require("fs-extra");
const path = require("path");
class ReactNativeVersion extends base_1.Symptom {
    constructor() {
        super(...arguments);
        this.desc = 'react native 版本';
        this.advice = '请将 react native 版本更改至 0.62.2，否则打包时会将 react-native 打包进去，导致包体积变大';
        this.level = 'error';
    }
    async check() {
        var _a, _b, _c;
        const packageJson = fs.readJSONSync(path.resolve('package.json'));
        return (/0\.62\.2$/.test(((_a = packageJson.dependencies) === null || _a === void 0 ? void 0 : _a['react-native']) || '') &&
            (!((_b = packageJson.resolutions) === null || _b === void 0 ? void 0 : _b['react-native']) ||
                /0\.62\.2$/.test(((_c = packageJson.resolutions) === null || _c === void 0 ? void 0 : _c['react-native']) || '')));
    }
    async fix() {
        var _a;
        const packageJson = fs.readJSONSync(path.resolve('package.json'));
        packageJson.dependencies['react-native'] = '0.62.2';
        if ((_a = packageJson.resolutions) === null || _a === void 0 ? void 0 : _a['react-native']) {
            packageJson.resolutions['react-native'] = '0.62.2';
        }
        fs.writeJsonSync('./package.json', packageJson, {
            spaces: '    ',
        });
        return true;
    }
}
exports.ReactNativeVersion = ReactNativeVersion;
const reactNativeVersion = new ReactNativeVersion();
exports.default = reactNativeVersion;
