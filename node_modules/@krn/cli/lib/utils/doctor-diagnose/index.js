"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.diagnoseWithBuildErrorMessage = exports.diagnose = void 0;
const yarn_lock_1 = require("./symptoms/yarn-lock");
const yarn_lock_ignore_1 = require("./symptoms/yarn-lock-ignore");
const react_native_community_cli_tools_version_1 = require("./symptoms/react-native-community-cli-tools-version");
const react_native_community_cli_debugger_ui_1 = require("./symptoms/react-native-community-cli-debugger-ui");
const metro_react_native_babel_preset_version_1 = require("./symptoms/metro-react-native-babel-preset-version");
const utils_1 = require("./utils");
const logger_1 = require("../logger");
const Listr = require("listr");
const react_native_version_1 = require("./symptoms/react-native-version");
const ks_eact_native_version_1 = require("./symptoms/ks-eact-native-version");
const diagnoseLocal = async (fixed) => {
    const symptoms = [
        yarn_lock_1.default,
        yarn_lock_ignore_1.default,
        ks_eact_native_version_1.default,
        react_native_community_cli_tools_version_1.default,
        react_native_community_cli_debugger_ui_1.default,
        metro_react_native_babel_preset_version_1.default,
    ];
    logger_1.Logger.log('诊断中...');
    const errors = [];
    await new Listr(symptoms.map((symptom) => {
        return {
            title: symptom.desc,
            task: async () => {
                try {
                    const checked = await symptom.check();
                    if (checked === false) {
                        errors.push(symptom);
                        return Promise.reject(new Error(symptom.advice));
                    }
                    return true;
                }
                catch (err) {
                    return true;
                }
            },
        };
    }), {
        concurrent: true,
        exitOnError: false,
    })
        .run()
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        .catch(() => { });
    if (!errors.length) {
        logger_1.Logger.log('🚀🚀🚀 诊断完成，全部正常');
        return;
    }
    if (fixed) {
        logger_1.Logger.log('修复中...');
        await new Listr(errors.map((symptom) => {
            return {
                title: symptom.desc,
                task: async () => {
                    try {
                        const fixed = await symptom.fix();
                        if (fixed === false) {
                            return Promise.reject(new Error('暂时无法修复，请参考诊断建议手动修复'));
                        }
                        return true;
                    }
                    catch (err) {
                        return true;
                    }
                },
            };
        }), {
            concurrent: true,
        })
            .run()
            // eslint-disable-next-line @typescript-eslint/no-empty-function
            .catch(() => { });
        logger_1.Logger.log('🚀🚀🚀 修复完成，如果发现 package.json 或 yarn.lock 文件有更新，请运行 yarn 命令重新安装依赖');
        logger_1.Logger.log('参考常见问题文档：https://docs.corp.kuaishou.com/d/home/fcADu59zi4Aw00EKR8_qXX1G6');
    }
    else {
        logger_1.Logger.log('请手动运行 krn doctor --fix 进行修复');
        logger_1.Logger.log('参考常见问题文档：http://ksurl.cn/7I9SswCn');
    }
};
const diagnoseCIOrMonitor = async (fixed) => {
    const normalSymptoms = [react_native_version_1.default]; // 修复 react-native 为官方版本
    logger_1.Logger.log('诊断中...');
    const errors = [];
    await new Listr([
        ...normalSymptoms.map((symptom) => {
            return {
                title: symptom.desc,
                task: async () => {
                    try {
                        const checked = await symptom.check();
                        if (checked === false) {
                            errors.push(symptom);
                            return Promise.reject(new Error(symptom.advice));
                        }
                        return true;
                    }
                    catch (err) {
                        return true;
                    }
                },
            };
        }),
    ], {
        concurrent: true,
    })
        .run()
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        .catch(() => { });
    if (!errors.length) {
        logger_1.Logger.log('🚀🚀🚀 诊断完成，全部正常');
        return;
    }
    if (fixed) {
        logger_1.Logger.log('修复中...');
        await new Listr(errors.map((symptom) => {
            return {
                title: symptom.desc,
                task: async () => {
                    try {
                        const fixed = await symptom.fix();
                        if (fixed === false) {
                            return Promise.reject(new Error('暂时无法修复，请参考诊断建议手动修复，或参考常见问题文档：http://ksurl.cn/7I9SswCn'));
                        }
                        return true;
                    }
                    catch (err) {
                        return true;
                    }
                },
            };
        }), {
            concurrent: true,
            exitOnError: false,
        })
            .run()
            // eslint-disable-next-line @typescript-eslint/no-empty-function
            .catch(() => { });
        logger_1.Logger.log('🚀🚀🚀 修复完成');
    }
    else {
        logger_1.Logger.log('参考常见问题文档：http://ksurl.cn/7I9SswCn');
    }
};
const diagnose = async (fixed) => {
    const env = (0, utils_1.getEnv)();
    switch (env) {
        case 'local': {
            await diagnoseLocal(fixed);
            break;
        }
        case 'ci':
        case 'monitor': {
            await diagnoseCIOrMonitor(fixed);
            break;
        }
    }
};
exports.diagnose = diagnose;
const diagnoseWithBuildErrorMessage = async (errorMessage) => {
    const buildSymptoms = [metro_react_native_babel_preset_version_1.default];
    let advice = '';
    for (const symptom of buildSymptoms) {
        const checked = await symptom.checkWithBuildErrorMessage(errorMessage);
        if (checked === false) {
            advice = symptom.advice;
        }
    }
    if (advice) {
        logger_1.Logger.log(`【参考修改建议】：${advice}`);
    }
    logger_1.Logger.log(`【打包常见问题参考文档】：https://docs.corp.kuaishou.com/d/home/fcADu59zi4Aw00EKR8_qXX1G6`);
};
exports.diagnoseWithBuildErrorMessage = diagnoseWithBuildErrorMessage;
