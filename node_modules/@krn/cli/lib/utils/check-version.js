"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkNewVersion = void 0;
const logger_1 = require("./logger");
const exec_async_1 = require("./exec-async");
const path = require("path");
const fs = require("fs-extra");
const chalk = require("chalk");
const boxen = require("boxen");
const cli_shared_1 = require("@krn/cli-shared");
const net = require("net");
function currentVersion() {
    let cache = null;
    let root = null;
    // @ts-ignore
    require.main.paths.some(function (p) {
        const parts = p.split('/');
        parts.pop();
        root = path.join(parts.join('/'), 'package.json');
        return fs.existsSync(root);
    });
    cache = cache || root;
    return require(cache).version;
}
async function isPortReachable(port, { host, timeout = 1000, } = {}) {
    if (typeof host !== 'string') {
        throw new TypeError('Specify a `host`');
    }
    const promise = new Promise((resolve, reject) => {
        const socket = new net.Socket();
        const onError = () => {
            socket.destroy();
            reject();
        };
        socket.setTimeout(timeout);
        socket.once('error', onError);
        socket.once('timeout', onError);
        socket.connect(port, host, () => {
            socket.end();
            resolve();
        });
    });
    try {
        await promise;
        return true;
    }
    catch (_a) {
        return false;
    }
}
const checkNewVersion = async () => {
    logger_1.Logger.loading('检测 CLI 的版本');
    const isReachable = await isPortReachable(443, {
        host: 'npm.corp.kuaishou.com',
    });
    if (!isReachable) {
        logger_1.Logger.stop();
        logger_1.Logger.warn('无法连接内网NPM，请及时开启VPN或检测网络');
        return;
    }
    try {
        const { stdout } = await (0, exec_async_1.execAsync)(`npm view @krn/cli version --registry=https://npm.corp.kuaishou.com`);
        logger_1.Logger.stop();
        const newVersion = stdout.trim();
        if (newVersion !== currentVersion().trim()) {
            const options = {
                title: `发现新版本: ${chalk.cyan(newVersion)}`,
                titleAlignment: 'center',
                borderColor: 'yellow',
                padding: 1,
                margin: 1,
            };
            cli_shared_1.isInstalledGlobally
                ? console.log(boxen(`执行 ${chalk.cyan('krn update')}`, options))
                : console.log(boxen(`在项目目录中执行 ${chalk.cyan('yarn add -D @krn/cli')} 更新版本`, options));
        }
    }
    catch (err) {
        logger_1.Logger.stop();
        logger_1.Logger.error('检测 CLI 版本失败，跳过检查', err);
    }
};
exports.checkNewVersion = checkNewVersion;
