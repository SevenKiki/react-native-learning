"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable unicorn/prefer-module */
const core_1 = require("@oclif/core");
const path = require("path");
const fs = require("fs-extra");
const utils_1 = require("../utils");
const listr2_1 = require("listr2");
const deps = [
    {
        name: '@babel/runtime',
        version: '^7.17.2',
        lock: true,
    },
    {
        name: '@ks/weblogger',
        version: '^3.9.47',
        lock: true,
    },
    {
        name: '@kds/react-native-svg',
        version: '^12.1.9',
        lock: true,
    },
    {
        name: 'react-native-gesture-handler',
        version: '^1.10.3',
        lock: true,
    },
    {
        name: 'lodash-es',
        version: '^4.17.21',
    },
    {
        name: '@krn/cli',
        version: '^0.15.0',
        dev: true,
    },
    {
        name: 'babel-plugin-module-resolver',
        version: '^4.1.0',
        dev: true,
    },
    {
        name: 'circular-dependency-plugin',
        version: '^5.2.2',
        dev: true,
    },
    {
        name: '@krn/inline-require-webpack-plugin',
        version: '^0.3.0',
        dev: true,
    },
];
class Install extends core_1.Command {
    isUsedI18n() {
        const metroConfigPath = path.resolve('metro.config.js');
        if (!fs.existsSync(metroConfigPath)) {
            return false;
        }
        const metroConfig = fs.readFileSync(metroConfigPath, 'utf8');
        return metroConfig.includes('@kds/ks-i18n/babel');
    }
    async installBabel() {
        const babelConfigPath = path.join(__dirname, '..', 'appends', 'babel-webpack.config.js');
        fs.copyFileSync(babelConfigPath, path.resolve('babel-webpack.config.js'));
    }
    async installWebpack() {
        let webpackConfig = `const CircularDependencyPlugin = require('circular-dependency-plugin');
const {
    InlineRequireWebpackPlugin,
} = require('@krn/inline-require-webpack-plugin');
module.exports = {
    // ...
    plugins: [
        new CircularDependencyPlugin({
            exclude: /node_modules/,
            failOnError: true, // 出现循环依赖时打包失败
            cwd: __dirname,
        }),
        new InlineRequireWebpackPlugin(), // 开启 metro 中的 inlineRequire
    ],
    optimization: {
        concatenateModules: false, // 禁止合并模块，配合 inlineRequire 使用
    },
    resolve: {
        exportsFields: [],
    },
};
`;
        if (this.isUsedI18n()) {
            webpackConfig = `const CircularDependencyPlugin = require('circular-dependency-plugin');
const {
    InlineRequireWebpackPlugin,
} = require('@krn/inline-require-webpack-plugin');
const i18nBabel = require('@kds/ks-i18n/babel');

i18nBabel.compile({
    src: './src/**/*.{js,jsx,ts,tsx}',
});

module.exports = {
    // ...
    plugins: [
        new CircularDependencyPlugin({
            exclude: /node_modules/,
            failOnError: true, // 出现循环依赖时打包失败
            cwd: __dirname,
        }),
        new InlineRequireWebpackPlugin(), // 开启 metro 中的 inlineRequire
    ],
    optimization: {
        concatenateModules: false, // 禁止合并模块，配合 inlineRequire 使用
    },
    resolve: {
        exportsFields: [],
    },
};
`;
        }
        fs.writeFileSync(path.resolve('webpack.config.js'), webpackConfig);
    }
    async installScripts() {
        const pkgPath = path.resolve('package.json');
        if (!fs.existsSync(pkgPath)) {
            return;
        }
        const pkg = fs.readJsonSync(pkgPath);
        pkg.scripts = pkg.scripts || {};
        const originScript = pkg.scripts.postinstall || '';
        if (originScript && originScript.includes('krn-webpack patch')) {
            return;
        }
        pkg.scripts.postinstall = originScript ? `${originScript} && krn-webpack patch` : 'krn-webpack patch';
        fs.writeJSONSync(pkgPath, pkg, { spaces: 4 });
    }
    async installDeps() {
        const pkgPath = path.resolve('package.json');
        if (!fs.existsSync(pkgPath)) {
            return;
        }
        const pkg = fs.readJsonSync(pkgPath);
        for (const { name, version, dev, lock } of deps) {
            if (!pkg.dependencies) {
                pkg.dependencies = {};
            }
            if (!pkg.devDependencies) {
                pkg.devDependencies = {};
            }
            if (dev) {
                if (pkg.dependencies[name]) {
                    delete pkg.dependencies[name];
                }
                pkg.devDependencies[name] = version;
            }
            else {
                if (pkg.devDependencies[name]) {
                    delete pkg.devDependencies[name];
                }
                pkg.dependencies[name] = version;
            }
            if (lock) {
                pkg.resolutions = pkg.resolutions || {};
                pkg.resolutions[name] = version;
            }
        }
        fs.writeJSONSync(pkgPath, pkg, { spaces: 4 });
        try {
            await (0, utils_1.execAsync)('yarn', {
                cwd: process.cwd(),
            });
        }
        catch (error) {
            throw new Error(`${error}`);
        }
    }
    getKrnConfig() {
        const krnConfigPath = path.resolve('krn.config.json');
        if (fs.existsSync(krnConfigPath)) {
            const krnConfig = fs.readJsonSync(krnConfigPath);
            return krnConfig;
        }
        return null;
    }
    installKrnConfig(bundleIds) {
        const krnConfig = this.getKrnConfig();
        const krnConfigPath = path.resolve('krn.config.json');
        if (krnConfig) {
            // eslint-disable-next-line no-negated-condition
            krnConfig.useWebpack = !bundleIds ? true : bundleIds === null || bundleIds === void 0 ? void 0 : bundleIds.reduce((acc, cur) => {
                acc[cur] = true;
                return acc;
            }, {});
            fs.writeJSONSync(krnConfigPath, krnConfig, { spaces: 4 });
            return;
        }
        throw new Error('未找到 krn.config.json 文件');
    }
    async run() {
        await new listr2_1.Listr([
            {
                title: '选择 bundleId',
                task: async (ctx, task) => {
                    const krnConfig = this.getKrnConfig();
                    if (!krnConfig) {
                        throw new Error('未找到 krn.config.json 文件');
                    }
                    const { entry } = krnConfig;
                    if (!entry) {
                        throw new Error('krn.config.json 未找到 entry 字段');
                    }
                    if (typeof entry === 'string') {
                        task.title = '未发现多个 bundleId，跳过';
                        return;
                    }
                    try {
                        ctx.bundleId = await task.prompt({
                            type: 'MultiSelect',
                            message: '请选择要集成 webpack 打包的 bundleId，可以多选，按空格选择，按回车确认',
                            choices: Object.keys(entry).map(key => {
                                return {
                                    name: key,
                                    value: key,
                                };
                            }),
                        });
                    }
                    catch {
                        throw new Error('请选择 bundleId');
                    }
                },
            },
            {
                title: '更新 krn 配置文件',
                task: async (ctx) => {
                    try {
                        await this.installKrnConfig(ctx.bundleId);
                    }
                    catch (error) {
                        throw new Error(`${error}`);
                    }
                },
            },
            {
                title: '升级 babel 配置',
                task: async () => {
                    try {
                        await this.installBabel();
                    }
                    catch (error) {
                        throw new Error(`升级 babel 配置 失败: ${error}`);
                    }
                },
            },
            {
                title: '添加 webpack 配置',
                task: async () => {
                    try {
                        await this.installWebpack();
                    }
                    catch (error) {
                        throw new Error(`添加 webpack 配置 失败: ${error}`);
                    }
                },
            },
            {
                title: '添加 script 配置',
                task: async () => {
                    try {
                        await this.installScripts();
                    }
                    catch (error) {
                        throw new Error(`添加 script 配置 失败: ${error}`);
                    }
                },
            },
            {
                title: '安装依赖，可能需要一段时间',
                task: async () => {
                    try {
                        await this.installDeps();
                    }
                    catch (error) {
                        throw new Error(`安装依赖 失败: ${error}`);
                    }
                },
            },
        ], {
            concurrent: false,
            exitOnError: true,
        }).run();
        this.log('安装完成，请查看代码改动，如果确认不会用到的依赖可以手动删除');
    }
}
exports.default = Install;
Install.description = '安装 KRN webpack 打包环境';
Install.examples = [
    `$ krn-webpack install
`,
];
