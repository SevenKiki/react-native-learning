"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processModuleFilterUseDependencies = exports.createModuleIdFactory = void 0;
const path = require("path");
const md5 = require("md5");
const commondir = require("commondir");
const pathSep = path.sep;
const preValueof = String.prototype.valueOf;
String.prototype.valueOf = function () {
    // @ts-ignore
    return this.__KRN_MODULE_ID__ || preValueof.call(this);
};
const createModuleIdFactory = () => {
    const projectRoot = process.cwd();
    const fileToIdMap = new Map();
    let nextId = 0;
    return (path) => {
        let modulePath = '';
        // 替换绝对路径，转换为相对路，如:
        // /{User}/{username}/{userdir}/node_modules/{filename}.js -> node_modules/${filename}.js
        // 考虑monorepo的情况，node_modules和React-Native工程可能不在一个目录下（比如依赖提升的情况），但node_modules一定是在React-Native工程里或顶层目录
        const nodeModulesDir = commondir([path, projectRoot]);
        if (path.indexOf(nodeModulesDir) === 0) {
            modulePath = path.substr(nodeModulesDir.length + 1);
        }
        // 最后在将斜杠替换为空串或下划线
        const regExp = new RegExp(pathSep === '\\' ? '\\\\' : pathSep, 'gm');
        const modulePathMd5 = md5(modulePath.replace(regExp, '_'));
        // 保留moduleId，生成sourcemap时会根据这个id进行sort排序。
        let id = fileToIdMap.get(path);
        if (typeof id !== 'number') {
            id = nextId++;
            fileToIdMap.set(path, id);
        }
        const str = new String(modulePathMd5);
        // @ts-ignore
        str.__KRN_MODULE_ID__ = id;
        return str;
    };
};
exports.createModuleIdFactory = createModuleIdFactory;
const processModuleFilterUseDependencies = (coreDependencies = require('../config/core-dependencies.json')) => {
    return (module) => {
        const projectRoot = process.cwd();
        // 考虑monorepo的情况，node_modules和React-Native工程可能不在一个目录下（比如依赖提升的情况），但node_modules一定是在React-Native工程里或顶层目录
        const nodeModulesDir = commondir([module.path, projectRoot]);
        const moduleId = module.path.substr(nodeModulesDir.length + 1);
        const LOG_TYPES = {
            core: '[core dependencies]:',
            business: '[business dependencies]:',
            preludeIgnored: '[__prelude__ dependencies ignored]:',
            preludeDevBuild: '[__prelude__ dependencies for dev]:',
            coreIgnored: '[core dependencies ignored]:',
        };
        // log的作用是build基础包时可以生成依赖
        if (process.env.KRN_ENV === 'CORE') {
            console.log(LOG_TYPES.core, moduleId);
            return true;
        }
        // path为__prelude__的一些模块，dev 为 true 的时候会打包进去，因为需要指定 __DEV__ 等变量，为 false 时会忽略
        const isDevBuild = process.env.KRN_DEV_BUILD_MODE === 'true';
        if (module.path.indexOf('__prelude__') >= 0) {
            console.log(isDevBuild
                ? LOG_TYPES.preludeDevBuild
                : LOG_TYPES.preludeIgnored, module.path);
            return isDevBuild;
        }
        if (coreDependencies.some((v) => v === moduleId)) {
            console.log(LOG_TYPES.coreIgnored, module.path);
            return false;
        }
        console.log(LOG_TYPES.business, module.path);
        // 其他就是应用代码
        return true;
    };
};
exports.processModuleFilterUseDependencies = processModuleFilterUseDependencies;
