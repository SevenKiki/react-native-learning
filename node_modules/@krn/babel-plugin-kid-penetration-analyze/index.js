var weblog = require('@krn/cli-shared').weblog;
var KID_COMPONENTS = 'kid-components';
var ICON = 'icon';
var FONT = 'font';
var COLOR = 'color';
var EXCLUDE = 'exclude';
// 具备kid属性的组件
var KidComponents = [
    'KidButton',
    'KidLinearGradientButton',
    'KidSwitchButton',
    'KidTextBubble',
    'KidNetError',
    'KidLetterIndexes',
    'KidTabView',
    'KidAvatar',
    'KidBadgeView',
    'KidPageIndicatorControl',
];
var getImportedType = function (name) {
    if (KidComponents.indexOf(name) !== -1) {
        return KID_COMPONENTS;
    } else if (name === 'KidIcon') {
        return ICON;
    } else if (name === 'useKidFont' || name === 'getKidFont') {
        return FONT;
    } else if (name === 'useKidColor' || name === 'getKidColor') {
        return COLOR;
    } else {
        return EXCLUDE;
    }
};
module.exports = function (_a) {
    var t = _a.types;
    return {
        pre: function () {
            // 组件渗透率 分子 分母
            this.widgetUseCount = 0;
            this.widgetBaseCount = 0;
            // 图标渗透率 分子 分母
            this.iconUseCount = 0;
            this.iconBaseCount = 0;
            // 颜色渗透率 分子 分母
            this.colorUseCount = 0;
            this.colorBaseCount = 0;
            // 字体渗透率 分子 分母
            this.fontUseCount = 0;
            this.fontBaseCount = 0;
        },
        visitor: {
            Program: function (programePath, state) {
                var filename = state.file.opts.filename;
                if (filename.indexOf('node_modules') !== -1) {
                    return;
                }
                //通用
                state.hasRecordedPath = new Set();
                // 组件渗透率: numberOfKidUsageComponents / numberOfComponents
                state.importComponents = [];
                // 可以使用kid属性的组件出现的总次数
                state.numberOfComponents = 0;
                // 使用了kid属性的组件出现的总次数
                state.numberOfKidUsageComponents = 0;
                // 图标渗透率: numberOfKidIcon / numberOfIcon
                state.kidIconLocal = '';
                // 功能为图标的组件出现的总次数
                state.numberOfIcon = 0;
                // KidIcon出现的总次数
                state.numberOfKidIcon = 0;
                // 颜色渗透率: numberOfUKC / numberOfColors
                state.isImportUKC = false;
                // 颜色的使用次数
                state.numberOfColors = 0;
                // 颜色变量
                state.colorVariables = [];
                // useKidColor的使用次数
                state.numberOfUKC = 0;
                // 字体渗透率 numberOfUKF / numberOfFonts
                state.isImportUKF = false;
                // 字体属性的使用次数
                state.numberOfFonts = 0;
                // 字体变量
                state.fontVariables = [];
                // useKidFont的使用次数
                state.numberOfUKF = 0;
                programePath.traverse({
                    ImportDeclaration: function (path) {
                        var _a;
                        // 重复扫描，return
                        if (state.hasRecordedPath.has(path)) {
                            return;
                        }
                        state.hasRecordedPath.add(path);
                        var source =
                            (_a = path.get('source').node) === null ||
                            _a === void 0
                                ? void 0
                                : _a.value;
                        if (source.indexOf('@kid-ui/krn') === -1) {
                            return;
                        }
                        // 组件本名
                        var componentsImported = path
                            .get('specifiers')
                            .map(function (s) {
                                var _a, _b;
                                return (_b =
                                    (_a = s.get('imported')) === null ||
                                    _a === void 0
                                        ? void 0
                                        : _a.node) === null || _b === void 0
                                    ? void 0
                                    : _b.name;
                            });
                        // 组件别名
                        var componentsLocal = path
                            .get('specifiers')
                            .map(function (s) {
                                var _a, _b;
                                return (_b =
                                    (_a = s.get('local')) === null ||
                                    _a === void 0
                                        ? void 0
                                        : _a.node) === null || _b === void 0
                                    ? void 0
                                    : _b.name;
                            });
                        componentsImported.map(function (item, index) {
                            var type = getImportedType(item);
                            switch (type) {
                                case KID_COMPONENTS:
                                    state.importComponents.push(
                                        componentsLocal[index],
                                    );
                                    break;
                                case ICON:
                                    state.kidIconLocal = componentsLocal[index];
                                    break;
                                case COLOR:
                                    state.isImportUKC = true;
                                    break;
                                case FONT:
                                    state.isImportUKF = true;
                                    break;
                            }
                        });
                    },
                    VariableDeclarator: function (path) {
                        var _a, _b, _c, _d, _e, _f, _g;
                        // 重复扫描，return
                        if (state.hasRecordedPath.has(path)) {
                            return;
                        }
                        state.hasRecordedPath.add(path);
                        if (!state.isImportUKC && !state.isImportUKF) {
                            return;
                        }
                        var variableName =
                            (_b =
                                (_a = path.get('id')) === null || _a === void 0
                                    ? void 0
                                    : _a.node) === null || _b === void 0
                                ? void 0
                                : _b.name;
                        var initType =
                            (_d =
                                (_c = path.get('init')) === null ||
                                _c === void 0
                                    ? void 0
                                    : _c.node) === null || _d === void 0
                                ? void 0
                                : _d.type;
                        if (initType === 'CallExpression') {
                            var initFunctionName =
                                ((_g =
                                    (_f =
                                        (_e = path.get('init')) === null ||
                                        _e === void 0
                                            ? void 0
                                            : _e.node) === null || _f === void 0
                                        ? void 0
                                        : _f.callee) === null || _g === void 0
                                    ? void 0
                                    : _g.name) || '';
                            var colors = ['useKidColor', 'getKidColor'];
                            var fonts = ['useKidFont', 'getKidFont'];
                            if (colors.indexOf(initFunctionName) !== -1) {
                                state.colorVariables.push(variableName);
                            } else if (fonts.indexOf(initFunctionName) !== -1) {
                                state.fontVariables.push(variableName);
                            } else {
                                return;
                            }
                        } else {
                            return;
                        }
                    },
                    JSXOpeningElement: function (outerPath) {
                        var _a, _b, _c, _d, _e, _f, _g;
                        // 重复扫描，return
                        if (state.hasRecordedPath.has(outerPath)) {
                            return;
                        }
                        state.hasRecordedPath.add(outerPath);
                        var nameType =
                            (_b =
                                (_a = outerPath.get('name')) === null ||
                                _a === void 0
                                    ? void 0
                                    : _a.node) === null || _b === void 0
                                ? void 0
                                : _b.type;
                        if (nameType !== 'JSXIdentifier') {
                            return;
                        }
                        var component =
                            (_d =
                                (_c = outerPath.get('name')) === null ||
                                _c === void 0
                                    ? void 0
                                    : _c.node) === null || _d === void 0
                                ? void 0
                                : _d.name;
                        var isKidComponents =
                            state.importComponents.indexOf(component) !== -1;
                        var isIconComponents =
                            ((_f =
                                (_e =
                                    component === null || component === void 0
                                        ? void 0
                                        : component.toLowerCase()) === null ||
                                _e === void 0
                                    ? void 0
                                    : _e.indexOf) === null || _f === void 0
                                ? void 0
                                : _f.call(_e, 'icon')) !== -1;
                        if (!isKidComponents && !isIconComponents) {
                            return;
                        }
                        if (isIconComponents) {
                            state.numberOfIcon++;
                            var index =
                                (_g =
                                    component === null || component === void 0
                                        ? void 0
                                        : component.toLowerCase()) === null ||
                                _g === void 0
                                    ? void 0
                                    : _g.indexOf('kid');
                            if (typeof index === 'number' && index !== -1) {
                                state.numberOfKidIcon++;
                            }
                        }
                        if (isKidComponents) {
                            state.numberOfComponents++;
                            outerPath.traverse({
                                JSXAttribute: function (innerPath) {
                                    var _a, _b;
                                    // 重复扫描，return
                                    if (state.hasRecordedPath.has(innerPath)) {
                                        return;
                                    }
                                    state.hasRecordedPath.add(innerPath);
                                    var attributeName =
                                        (_b =
                                            (_a = innerPath.get('name')) ===
                                                null || _a === void 0
                                                ? void 0
                                                : _a.node) === null ||
                                        _b === void 0
                                            ? void 0
                                            : _b.name;
                                    if (attributeName === 'kid') {
                                        state.numberOfKidUsageComponents++;
                                    } else {
                                        return;
                                    }
                                },
                            });
                        }
                    },
                    JSXAttribute: function (outerPath) {
                        var _a, _b, _c, _d, _e, _f, _g, _h;
                        // 重复扫描，return
                        if (state.hasRecordedPath.has(outerPath)) {
                            return;
                        }
                        state.hasRecordedPath.add(outerPath);
                        var attributeName =
                            (_b =
                                (_a = outerPath.get('name')) === null ||
                                _a === void 0
                                    ? void 0
                                    : _a.node) === null || _b === void 0
                                ? void 0
                                : _b.name;
                        var type =
                            (_d =
                                (_c = outerPath.get('value')) === null ||
                                _c === void 0
                                    ? void 0
                                    : _c.node) === null || _d === void 0
                                ? void 0
                                : _d.type;
                        if (
                            ((_f =
                                (_e =
                                    attributeName === null ||
                                    attributeName === void 0
                                        ? void 0
                                        : attributeName.toLowerCase()) ===
                                    null || _e === void 0
                                    ? void 0
                                    : _e.indexOf) === null || _f === void 0
                                ? void 0
                                : _f.call(_e, 'color')) !== -1
                        ) {
                            state.numberOfColors++;
                            if (
                                ((_h =
                                    (_g =
                                        attributeName === null ||
                                        attributeName === void 0
                                            ? void 0
                                            : attributeName.toLowerCase()) ===
                                        null || _g === void 0
                                        ? void 0
                                        : _g.indexOf) === null || _h === void 0
                                    ? void 0
                                    : _h.call(_g, 'kidcolor')) !== -1
                            ) {
                                state.numberOfUKC++;
                            }
                            if (type === 'JSXExpressionContainer') {
                                outerPath.traverse({
                                    JSXExpressionContainer: function (
                                        innerPath,
                                    ) {
                                        var _a, _b, _c, _d, _e, _f, _g, _h;
                                        // 重复扫描，return
                                        if (
                                            state.hasRecordedPath.has(innerPath)
                                        ) {
                                            return;
                                        }
                                        state.hasRecordedPath.add(innerPath);
                                        var expressType =
                                            (_b =
                                                (_a = innerPath.get(
                                                    'expression',
                                                )) === null || _a === void 0
                                                    ? void 0
                                                    : _a.node) === null ||
                                            _b === void 0
                                                ? void 0
                                                : _b.type;
                                        if (expressType === 'Identifier') {
                                            var expressionName =
                                                (_d =
                                                    (_c = innerPath.get(
                                                        'expression',
                                                    )) === null || _c === void 0
                                                        ? void 0
                                                        : _c.node) === null ||
                                                _d === void 0
                                                    ? void 0
                                                    : _d.name;
                                            if (
                                                state.colorVariables.indexOf(
                                                    expressionName,
                                                ) !== -1
                                            ) {
                                                state.numberOfUKC++;
                                            }
                                        } else if (
                                            expressType === 'CallExpression'
                                        ) {
                                            if (
                                                ((_h =
                                                    (_g =
                                                        (_f =
                                                            (_e = innerPath.get(
                                                                'expression',
                                                            )) === null ||
                                                            _e === void 0
                                                                ? void 0
                                                                : _e.node) ===
                                                            null ||
                                                        _f === void 0
                                                            ? void 0
                                                            : _f.callee) ===
                                                        null || _g === void 0
                                                        ? void 0
                                                        : _g.name) === null ||
                                                _h === void 0
                                                    ? void 0
                                                    : _h.indexOf('kid')) !== -1
                                            ) {
                                                state.numberOfUKC++;
                                            } else {
                                                return;
                                            }
                                        } else {
                                            return;
                                        }
                                    },
                                });
                            }
                        } else {
                            return;
                        }
                    },
                    Property: function (path) {
                        var _a,
                            _b,
                            _c,
                            _d,
                            _e,
                            _f,
                            _g,
                            _h,
                            _j,
                            _k,
                            _l,
                            _m,
                            _o,
                            _p,
                            _q,
                            _r,
                            _s,
                            _t;
                        // 重复扫描，return
                        if (state.hasRecordedPath.has(path)) {
                            return;
                        }
                        state.hasRecordedPath.add(path);
                        var keyType =
                            (_b =
                                (_a = path.get('key')) === null || _a === void 0
                                    ? void 0
                                    : _a.node) === null || _b === void 0
                                ? void 0
                                : _b.type;
                        if (keyType !== 'Identifier') {
                            return;
                        }
                        var key =
                            ((_d =
                                (_c = path.get('key')) === null || _c === void 0
                                    ? void 0
                                    : _c.node) === null || _d === void 0
                                ? void 0
                                : _d.name) || '';
                        var valueType =
                            (_f =
                                (_e = path.get('value')) === null ||
                                _e === void 0
                                    ? void 0
                                    : _e.node) === null || _f === void 0
                                ? void 0
                                : _f.type;
                        var isColorAttribute =
                            ((_h =
                                (_g =
                                    key === null || key === void 0
                                        ? void 0
                                        : key.toLowerCase()) === null ||
                                _g === void 0
                                    ? void 0
                                    : _g.indexOf) === null || _h === void 0
                                ? void 0
                                : _h.call(_g, 'color')) !== -1;
                        var isFontAttribute = key === 'fontSize';
                        if (!isColorAttribute && !isFontAttribute) {
                            return;
                        }
                        // 颜色
                        if (isColorAttribute) {
                            state.numberOfColors++;
                            if (valueType === 'Identifier') {
                                var variableName =
                                    (_j = path.get('value').node) === null ||
                                    _j === void 0
                                        ? void 0
                                        : _j.name;
                                if (
                                    state.colorVariables.indexOf(
                                        variableName,
                                    ) !== -1
                                ) {
                                    state.numberOfUKC++;
                                }
                            } else if (valueType === 'CallExpression') {
                                if (
                                    ((_p =
                                        (_o =
                                            (_m =
                                                (_l =
                                                    (_k = path.get('value')) ===
                                                        null || _k === void 0
                                                        ? void 0
                                                        : _k.node) === null ||
                                                _l === void 0
                                                    ? void 0
                                                    : _l.callee) === null ||
                                            _m === void 0
                                                ? void 0
                                                : _m.name) === null ||
                                        _o === void 0
                                            ? void 0
                                            : _o.toLowerCase()) === null ||
                                    _p === void 0
                                        ? void 0
                                        : _p.indexOf('kid')) !== -1
                                ) {
                                    state.numberOfUKC++;
                                } else {
                                    return;
                                }
                            } else {
                                return;
                            }
                        }
                        // 字体
                        if (isFontAttribute) {
                            state.numberOfFonts++;
                            if (valueType === 'MemberExpression') {
                                var object =
                                    (_r =
                                        (_q = path.get('value')) === null ||
                                        _q === void 0
                                            ? void 0
                                            : _q.node) === null || _r === void 0
                                        ? void 0
                                        : _r.object;
                                var objectType =
                                    object === null || object === void 0
                                        ? void 0
                                        : object.type;
                                if (objectType === 'Identifier') {
                                    var variableName = object.name;
                                    if (
                                        state.fontVariables.indexOf(
                                            variableName,
                                        ) !== -1
                                    ) {
                                        state.numberOfUKF++;
                                    }
                                } else if (objectType === 'CallExpression') {
                                    if (
                                        ((_t =
                                            (_s =
                                                object === null ||
                                                object === void 0
                                                    ? void 0
                                                    : object.callee) === null ||
                                            _s === void 0
                                                ? void 0
                                                : _s.name) === null ||
                                        _t === void 0
                                            ? void 0
                                            : _t
                                                  .toLowerCase()
                                                  .indexOf('kid')) !== -1
                                    ) {
                                        state.numberOfUKF++;
                                    } else {
                                        return;
                                    }
                                } else {
                                    return;
                                }
                            } else {
                                return;
                            }
                        }
                    },
                });
                this.widgetBaseCount = state.numberOfComponents;
                this.widgetUseCount = state.numberOfKidUsageComponents;
                this.iconBaseCount = state.numberOfIcon;
                this.iconUseCount = state.numberOfKidIcon;
                this.colorBaseCount = state.numberOfColors;
                this.colorUseCount = state.numberOfUKC;
                this.fontBaseCount = state.numberOfFonts;
                this.fontUseCount = state.numberOfUKF;
            },
        },
        post: function () {
            // 此处上报埋点
            // 上报的params包括：
            // page: bundleId
            // widgetBaseCount: 组件渗透率分母
            // widgetUseCount: 组件渗透率分子
            // iconBaseCount: 图标渗透率分母
            // iconUseCount: 图标渗透率分子
            // colorBaseCount: 颜色渗透率分母
            // colorUseCount: 颜色渗透率分子
            // fontBaseCount: 字体渗透率分母
            // fontUseCount: 字体渗透率分子
            weblog.sendImmediately('CLICK', {
                action: 'KID_PENETRATION_ANALYZE',
                params: {
                    page: this.opts.bundleId || 'local',
                    widget_base_count: this.widgetBaseCount,
                    widget_use_count: this.widgetUseCount,
                    icon_base_count: this.iconBaseCount,
                    icon_use_count: this.iconUseCount,
                    color_base_count: this.colorBaseCount,
                    color_use_count: this.colorUseCount,
                    font_base_count: this.fontBaseCount,
                    font_use_count: this.fontUseCount,
                },
            });
        },
    };
};
