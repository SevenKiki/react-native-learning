const fs = require('fs');
module.exports = function () {
    return {
        name: 'react-native-get-component-names',
        pre() {
            this.componentNames = [];
            this.throwError = false;
        },
        visitor: {
            Program(programePath, state) {
                const filename = state.file.opts.filename;
                if (filename.indexOf('node_modules') !== -1) {
                    return;
                }
                const componentNames = this.componentNames;
                // eslint-disable-next-line @typescript-eslint/no-this-alias
                const self = this;
                //通用
                state.hasRecordedPath = new Set();
                programePath.traverse({
                    ImportDeclaration(outerPath) {
                        if (state.hasRecordedPath.has(outerPath)) {
                            return;
                        }
                        state.hasRecordedPath.add(outerPath);

                        const source = outerPath.get('source').node.value;

                        if (source !== 'react-native') {
                            return;
                        }

                        //Animated部分
                        if (source === 'react-native') {
                            outerPath.traverse({
                                ImportSpecifier(innerPath) {
                                    if (state.hasRecordedPath.has(innerPath)) {
                                        return;
                                    }
                                    state.hasRecordedPath.add(innerPath);

                                    const importedName = innerPath.get(
                                        'imported',
                                    ).node.name;
                                    if (importedName === 'AppRegistry') {
                                        state.IsImportAppRegistry = true;
                                        if (
                                            innerPath.get('local') &&
                                            innerPath.get('local').node.name
                                        ) {
                                            state.importAppRegistryAlias = innerPath.get(
                                                'local',
                                            ).node.name;
                                        }
                                    }
                                },
                            });
                        }
                    },

                    CallExpression(outerPath) {
                        if (state.hasRecordedPath.has(outerPath)) {
                            return;
                        }
                        state.hasRecordedPath.add(outerPath);

                        if (!state.IsImportAppRegistry) {
                            return;
                        }

                        if (
                            outerPath.get('callee').node.type ===
                            'MemberExpression'
                        ) {
                            outerPath.traverse({
                                MemberExpression(innerPath) {
                                    if (state.hasRecordedPath.has(innerPath)) {
                                        return;
                                    }
                                    state.hasRecordedPath.add(innerPath);

                                    const objectName =
                                        (innerPath.get('object') &&
                                            innerPath.get('object').node
                                                .name) ||
                                        '';
                                    const propertyName =
                                        (innerPath.get('property') &&
                                            innerPath.get('property').node
                                                .name) ||
                                        '';
                                    if (
                                        (objectName === 'AppRegistry' ||
                                            objectName ===
                                                state.importAppRegistryAlias) &&
                                        propertyName === 'registerComponent'
                                    ) {
                                        const args = outerPath.get('arguments');
                                        if (args.length) {
                                            const node = args[0].node;
                                            if (node.type === 'StringLiteral') {
                                                componentNames.push(node.value);
                                            } else {
                                                self.throwError = true;
                                                console.error(
                                                    '调用 AppRegistry.registerComponent 时，componentName 必须为字符串，不能是变量等形式',
                                                );
                                            }
                                        }
                                    }
                                },
                            });
                        }
                    },
                });
            },
        },
        post() {
            const output = this.opts.outputFilePath;
            if (this.componentNames.length && output) {
                let oldComponentNames = {
                    throwError: false,
                    list: [],
                };
                if (fs.existsSync(output)) {
                    oldComponentNames = JSON.parse(
                        fs.readFileSync(output, 'utf8'),
                    );
                }
                const newComponentNames = {
                    throwError: oldComponentNames.throwError || this.throwError,
                    list: Array.from(
                        new Set([
                            ...oldComponentNames.list,
                            ...this.componentNames,
                        ]),
                    ),
                };
                fs.writeFileSync(output, JSON.stringify(newComponentNames));
            }
        },
    };
};
