"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.versionCompare = exports.VersionIs = void 0;
/* eslint-disable @typescript-eslint/ban-ts-comment */
const path = require("path");
const lodash_1 = require("lodash");
const metro_serializer_1 = require("@krn/metro-serializer");
const cli_shared_1 = require("@krn/cli-shared");
const url = require("url");
const qs = require("querystring");
var VersionIs;
(function (VersionIs) {
    VersionIs[VersionIs["LessThan"] = -1] = "LessThan";
    VersionIs[VersionIs["EqualTo"] = 0] = "EqualTo";
    VersionIs[VersionIs["GreaterThan"] = 1] = "GreaterThan";
})(VersionIs = exports.VersionIs || (exports.VersionIs = {}));
/**
 * Compare two versions quickly.
 * @param current Is this version greater, equal to, or less than the other?
 * @param other The version to compare against the current version
 * @return 1 if current is greater than other, 0 if they are equal or equivalent, and -1 if current is less than other
 */
function versionCompare(current, other) {
    const cp = String(current).split('.');
    const op = String(other).split('.');
    for (let depth = 0; depth < Math.min(cp.length, op.length); depth++) {
        const cn = Number(cp[depth]);
        const on = Number(op[depth]);
        if (cn > on)
            return VersionIs.GreaterThan;
        if (on > cn)
            return VersionIs.LessThan;
        if (!isNaN(cn) && isNaN(on))
            return VersionIs.GreaterThan;
        if (isNaN(cn) && !isNaN(on))
            return VersionIs.LessThan;
    }
    return VersionIs.EqualTo;
}
exports.versionCompare = versionCompare;
const runCommand = (command, args) => {
    const cp = require('child_process');
    return new Promise((resolve, reject) => {
        const executedCommand = cp.spawn(command, args, {
            stdio: 'inherit',
            shell: true,
        });
        executedCommand.on('error', (error) => {
            reject(error);
        });
        executedCommand.on('exit', (code) => {
            if (code === 0) {
                resolve();
            }
            else {
                reject();
            }
        });
    });
};
const installDependencies = (packageManager, packageName) => {
    return new Promise((resolve) => {
        const installOptions = [
            packageManager === 'yarn' ? 'add' : 'install',
            '-D',
        ];
        cli_shared_1.Logger.warn(`We will use "${packageManager}" to install the ${packageName} via "${packageManager} ${installOptions.join(' ')} ${packageName}".`);
        runCommand(packageManager, installOptions.concat(packageName))
            .then(resolve)
            .catch((error) => {
            cli_shared_1.Logger.error(error);
            process.exitCode = 1;
        });
    });
};
const localRequireResolve = function (path) {
    return require.resolve(path, {
        paths: [process.cwd()],
    });
};
const isOutDateCli = () => {
    const localCLIPkgPath = localRequireResolve('@krn/cli/package.json');
    if (!localCLIPkgPath) {
        return true;
    }
    const currentVersion = process.env.KRN_CLI_VERSION || '0.0.0';
    const localPkg = require(localCLIPkgPath);
    return (versionCompare(currentVersion, localPkg.version) ===
        VersionIs.GreaterThan);
};
const getHookJsPath = (packageManager, isDevtoolsEnabled) => {
    return async (hookPath) => {
        if (!isDevtoolsEnabled) {
            return '';
        }
        // 找不到local依赖，可能是业务工程内的cli版本过低
        try {
            if (isOutDateCli()) {
                throw new Error('请更新CLI到最新版本');
            }
            return localRequireResolve(hookPath);
        }
        catch (error) {
            try {
                await installDependencies(packageManager, `@krn/cli@^${process.env.KRN_CLI_VERSION}`);
                return localRequireResolve(hookPath);
            }
            catch (error) {
                cli_shared_1.Logger.warn('请更新CLI到最新版本');
                return '';
            }
        }
    };
};
const getCheckGlobalJsPath = (path) => {
    // 找不到local依赖，可能是业务工程内的cli版本过低
    try {
        return localRequireResolve(path);
    }
    catch (error) {
        cli_shared_1.Logger.warn('请更新CLI到最新版本');
        return '';
    }
};
// require.resolve只支持commonjs?
module.exports = (async () => {
    var _a, _b;
    const projectRoot = process.env.KRN_PROJECT_ROOT;
    const packageManager = process.env.KRN_PACKAGE_MANAGER;
    const isDebug = process.env.KRN_ENV === 'DEBUG';
    const isDevtoolsEnabled = process.env.KRN_DEVTOOLS_ENABLED === 'enabled';
    const isCheckGlobalEnabled = process.env.KRN_CHECK_GLOBAL_ENABLED === 'enabled';
    const metroConfigPath = process.env.KRN_CONFIG_PATH;
    const Resolver = require(localRequireResolve('metro-resolver'));
    const localMetroConfig = await require(metroConfigPath);
    const { createModuleIdFactory, processModuleFilter, getModulesRunBeforeMainModule, } = (localMetroConfig === null || localMetroConfig === void 0 ? void 0 : localMetroConfig.serializer) || {};
    const resolveRequest = (_a = localMetroConfig.resolver) === null || _a === void 0 ? void 0 : _a.resolveRequest;
    const enhanceMiddleware = (_b = localMetroConfig.server) === null || _b === void 0 ? void 0 : _b.enhanceMiddleware;
    const _getHookJsPath = getHookJsPath(packageManager, isDevtoolsEnabled);
    const devtoolsConnectScriptPath = await _getHookJsPath('@krn/metro-config/dist/devtools-connect');
    let injectedDevtoolsConnectScriptPath = '';
    const bridgeHookScriptPath = await _getHookJsPath('@krn/metro-config/dist/bridge-hook');
    const checkGlobalScriptPath = isCheckGlobalEnabled
        ? await getCheckGlobalJsPath('@krn/metro-config/dist/check-global')
        : '';
    const rnPatchScriptPath = isDebug
        ? await getHookJsPath(packageManager, true)('@krn/metro-config/dist/rn-patch')
        : '';
    const cliVersion = process.env.KRN_CLI_VERSION;
    const devBundleId = process.env.KRN_DEV_BUNDLE_ID;
    if (isDevtoolsEnabled && devtoolsConnectScriptPath) {
        injectedDevtoolsConnectScriptPath = devtoolsConnectScriptPath;
    }
    const devConfig = {
        resolver: {
            resolveRequest: (context, realModuleName, platform, moduleName) => {
                const entry = process.env.KRN_ENTRY;
                const isRoot = context.projectRoot ===
                    path.resolve(context.originModulePath);
                //  @react-native-community/cli的`start`不支持自定义entry，这里通过拦截resolve实现
                if (isRoot && realModuleName === './index' && entry) {
                    return {
                        filePath: path.resolve(process.cwd(), entry),
                        type: 'sourceFile',
                    };
                }
                if (resolveRequest) {
                    return resolveRequest(context, realModuleName, platform, moduleName);
                }
                else {
                    // 其他情况，删除自定义resolveRequest，走默认的resolver
                    const clearContext = Object.assign(Object.assign({}, context), { resolveRequest: undefined });
                    return Resolver.resolve(clearContext, moduleName, platform);
                }
            },
        },
        server: {
            enhanceMiddleware: (Middleware, Server) => {
                const oldBuildGraphForEntries = Server._bundler.buildGraphForEntries;
                // 多entry的支持
                Server._bundler.buildGraphForEntries = (entryFiles, ...rest) => {
                    if (injectedDevtoolsConnectScriptPath) {
                        entryFiles.unshift(injectedDevtoolsConnectScriptPath);
                    }
                    if (checkGlobalScriptPath) {
                        entryFiles.unshift(checkGlobalScriptPath);
                    }
                    if (rnPatchScriptPath) {
                        entryFiles.unshift(rnPatchScriptPath);
                    }
                    return oldBuildGraphForEntries.call(Server._bundler, entryFiles, ...rest);
                };
                if (enhanceMiddleware) {
                    return enhanceMiddleware(Middleware, Server);
                }
                // 上报每次 bundle 处理打包时间
                const reportBuildTime = (start, platform) => {
                    try {
                        cli_shared_1.weblog.sendImmediately('CLICK', {
                            action: `BUILD_TIME`,
                            params: {
                                time: Date.now() - start,
                                page: devBundleId,
                                CLIVersion: cliVersion,
                                buildNum: 1,
                                platform,
                            },
                        });
                    }
                    catch (err) {
                        cli_shared_1.Logger.error('上报构建时间出错');
                    }
                };
                const newMiddleware = async (req, res, next) => {
                    var _a, _b;
                    const urlObj = url.parse(req.url, true);
                    const isBundleRequest = (urlObj.pathname || '').match(/\.bundle$/);
                    // 开启 v3 开发者工具 debug 调试的时候，如果是 IOS 平台，且是 bundle 请求，则加上 inlineSourceMap
                    if (isDevtoolsEnabled &&
                        isBundleRequest &&
                        ((_a = urlObj.query) === null || _a === void 0 ? void 0 : _a.platform) === 'ios') {
                        urlObj.query.inlineSourceMap = 'true';
                        req.url = `${urlObj.pathname}?${qs.stringify(urlObj.query)}`;
                    }
                    const start = Date.now();
                    await Server._processRequest(req, res, next).catch(next);
                    if (isBundleRequest) {
                        const { platform } = qs.parse(((_b = urlObj.search) === null || _b === void 0 ? void 0 : _b.slice(1)) || '');
                        platform && reportBuildTime(start, platform);
                    }
                };
                return newMiddleware;
            },
        },
        serializer: {
            getModulesRunBeforeMainModule: (entryFilePath) => {
                if (getModulesRunBeforeMainModule) {
                    cli_shared_1.Logger.warn('自定义getModulesRunBeforeMainModule，可能导致devtools无法使用，请谨慎使用这个API.');
                    return getModulesRunBeforeMainModule(entryFilePath);
                }
                const mainModules = [
                    localRequireResolve('react-native/Libraries/Core/InitializeCore'),
                ];
                // 注入 devtools connect 代码
                if (injectedDevtoolsConnectScriptPath) {
                    mainModules.push(injectedDevtoolsConnectScriptPath);
                }
                // 注入global变量检测代码
                if (checkGlobalScriptPath) {
                    mainModules.push(checkGlobalScriptPath);
                }
                // 注入rn-patch代码
                if (rnPatchScriptPath) {
                    mainModules.push(rnPatchScriptPath);
                }
                mainModules.push(entryFilePath);
                return mainModules;
            },
            getPolyfills: () => {
                const rnPolyfills = require(localRequireResolve('react-native/rn-get-polyfills.js'))();
                const polyfills = [];
                if (bridgeHookScriptPath) {
                    polyfills.push(bridgeHookScriptPath);
                }
                return polyfills.concat(rnPolyfills);
            },
        },
    };
    const buildConfig = {
        serializer: {
            createModuleIdFactory: () => {
                if (createModuleIdFactory) {
                    cli_shared_1.Logger.warn('自定义createModuleIdFactory，可能导致构建分包异常，请谨慎使用这个API.');
                    return createModuleIdFactory();
                }
                return (0, metro_serializer_1.createModuleIdFactory)();
            },
            processModuleFilter: (module) => {
                if (processModuleFilter) {
                    cli_shared_1.Logger.warn('自定义processModuleFilter，可能导致构建分包异常，请谨慎使用这个API.');
                    return processModuleFilter(module);
                }
                return (0, metro_serializer_1.processModuleFilterUseDependencies)()(module);
            },
        },
    };
    const customMetroConfig = isDebug ? devConfig : buildConfig;
    return (0, lodash_1.merge)({
        projectRoot,
        resolver: {
            assetExts: [
                // Image formats
                'bmp',
                'gif',
                'jpg',
                'jpeg',
                'png',
                'psd',
                'svg',
                'webp',
                'm4v',
                'mov',
                'mp4',
                'mpeg',
                'mpg',
                'webm',
                'aac',
                'aiff',
                'caf',
                'm4a',
                'mp3',
                'wav',
                'html',
                'pdf',
                'yaml',
                'yml',
                'otf',
                'ttf',
                'zip',
            ],
            sourceExts: ['js', 'jsx', 'json', 'ts', 'tsx'],
        },
    }, localMetroConfig, customMetroConfig);
})();
