const md5 = require('md5');

const getNodeLevel = (path) => {
    if (!path) {
        return 0;
    }
    const node = path.node;
    if ((node && node.type === 'JSXElement') || node.type === 'JSXFragment') {
        return getNodeLevel(path.parentPath) + 1;
    }
    return 0;
};

const getNodeIndex = (path) => {
    if (!path) {
        return -1;
    }
    const parentPath = path.parentPath;
    if (!parentPath) {
        return -1;
    }
    const parentNode = parentPath.node;
    const node = path.node;
    if (
        (parentNode && parentNode.type === 'JSXElement') ||
        parentNode.type === 'JSXFragment'
    ) {
        const { children = [] } = parentNode;
        const index = children
            .filter(
                (child) =>
                    child.type === 'JSXElement' || child.type === 'JSXFragment',
            )
            .findIndex((child) => child === node);
        return index + getNodeIndex(path.parentPath);
    }
    return -1;
};

// 生成 testID
const makeTestId = ({ nodePath, filename, tagName, testIDs }) => {
    const relativePath = require('path').relative(process.cwd(), filename);
    const nodeLevel = getNodeLevel(nodePath);
    const node = nodePath.node;
    const openingElement = node.openingElement;
    const attributes = openingElement.attributes;
    const factors = [relativePath, nodeLevel, tagName];

    // 获取属性列表的因子
    const getAttributeFactors = (value) => {
        const result = [];
        if (value !== null && typeof value === 'object') {
            // 过滤掉不需要的属性
            const skipKeys = [
                'loc',
                'start',
                'end',
                'leadingComments',
                'innerComments',
                'trailingComments',
                'extra',
            ];
            for (const key in value) {
                if (skipKeys.includes(key)) {
                    continue;
                }
                result.push(key);
                result.push(...getAttributeFactors(value[key]));
            }
        } else if (Array.isArray(value)) {
            value.forEach((item) => {
                result.push(...getAttributeFactors(item));
            });
        } else if (value === null) {
            result.push('null');
        } else {
            const baseType = typeof value;
            switch (baseType) {
                case 'undefined':
                case 'string':
                case 'number':
                case 'boolean': {
                    result.push(value);
                    break;
                }
                default: {
                    result.push(value.toString ? value.toString() : '');
                }
            }
        }
        return result;
    };

    if (attributes && attributes.length) {
        attributes.forEach((attr) => {
            if (attr && typeof attr.name === 'object') {
                factors.push(attr.name.name);
            }
            const value = attr.value;
            factors.push(...getAttributeFactors(value));
        });
    }

    let testID = md5(JSON.stringify(factors));

    if (testIDs.has(testID)) {
        // 如果 testID 重复，添加节点索引
        const index = getNodeIndex(nodePath);
        factors.push(index);
        testID = md5(JSON.stringify(factors));
    }

    testIDs.add(testID);

    return testID;
};

const checkForAttribute = (name, attributes) =>
    attributes.some(
        (attr) =>
            attr && typeof attr.name === 'object' && attr.name.name === name,
    );

const getComponentName = (path) => {
    const node = path.node;

    const getMemberExpressionName = (memberExpression) => {
        if (memberExpression.object) {
            return `${getMemberExpressionName(memberExpression.object)}.${
                memberExpression.property.name
            }`;
        }
        return memberExpression.name;
    };

    if (node && node.type === 'JSXElement') {
        const openingElement = node.openingElement;
        if (openingElement && openingElement.type === 'JSXOpeningElement') {
            const name = openingElement.name;
            switch (name.type) {
                case 'JSXIdentifier': {
                    return name.name;
                }
                case 'JSXMemberExpression': {
                    return getMemberExpressionName(name);
                }
            }
        }
    }
    return '';
};

const nameComps = [
    'ActivityIndicator',
    'Button',
    'DrawerLayoutAndroid',
    'FlatList',
    'Image',
    'KwaiImage',
    'ImageBackground',
    'InputAccessoryView',
    'KeyboardAvoidingView',
    'Modal',
    'Pressable',
    'RefreshControl',
    'SafeAreaView',
    'ScrollView',
    'SectionList',
    'StatusBar',
    'Switch',
    'Text',
    'TextInput',
    'TouchableHighlight',
    'TouchableNativeFeedback',
    'TouchableOpacity',
    'TouchableWithoutFeedback',
    'View',
    'VirtualizedList',
];

module.exports = function (_ref) {
    const t = _ref.types;

    return {
        visitor: {
            JSXElement: {
                enter(path, state) {
                    const filename = state.file.opts.filename;

                    const testIDs = state.file.opts.testIDs || new Set();

                    if (!state.file.opts.testIDs) {
                        state.file.opts.testIDs = testIDs;
                    }

                    try {
                        const hasTestId = checkForAttribute(
                            'testID',
                            path.node.openingElement.attributes,
                        );
                        const hasLabel = checkForAttribute(
                            'accessibilityLabel',
                            path.node.openingElement.attributes,
                        );
                        if (hasTestId && hasLabel) {
                            return;
                        }
                        const nameComp = getComponentName(path);
                        const lastNameComp = nameComp.split('.').pop();
                        if (nameComps.indexOf(lastNameComp) === -1) {
                            return;
                        }
                        const testID = t.stringLiteral(
                            makeTestId({
                                nodePath: path,
                                filename,
                                tagName: nameComp,
                                testIDs,
                            }),
                        );
                        if (!hasTestId) {
                            const testIdProp = t.jSXAttribute(
                                t.jSXIdentifier('testID'),
                                testID,
                            );
                            path.node.openingElement.attributes.push(
                                testIdProp,
                            );
                        }
                        if (!hasLabel) {
                            const labelProp = t.jSXAttribute(
                                t.jSXIdentifier('accessibilityLabel'),
                                testID,
                            );
                            path.node.openingElement.attributes.push(labelProp);
                        }
                    } catch (err) {
                        console.log('插入 testId 出错：', err);
                    }
                },
            },
        },
    };
};
