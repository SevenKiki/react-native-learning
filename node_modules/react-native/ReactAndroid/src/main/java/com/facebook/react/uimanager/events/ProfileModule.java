/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

package com.facebook.react.uimanager.events;

import com.facebook.infer.annotation.Assertions;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.module.annotations.ReactModule;

import java.util.ArrayList;

@ReactModule(name = ProfileModule.MODULE_NAME)
public class ProfileModule extends ReactContextBaseJavaModule {
  public static final String MODULE_NAME = "ProfileModule";

  private final ArrayList<EventDispatcherListener> mListeners = new ArrayList<>();

  public static void dispatchEvent(ReactContext reactContext, Event event) {
    if (reactContext != null) {
      final ProfileModule profileModule = reactContext.getNativeModule(ProfileModule.class);
      if (profileModule != null) {
        profileModule.dispatchEvent(event);
      }
    }
  }

  public ProfileModule(ReactApplicationContext reactContext) {
    super(reactContext);
  }

  /** Sends the given Event to JS, coalescing eligible events if JS is backed up. */
  public void dispatchEvent(Event event) {
    Assertions.assertCondition(event.isInitialized(), "Dispatched event hasn't been initialized");

    for (EventDispatcherListener listener : mListeners) {
      listener.onEventDispatch(event);
    }
  }

  /** Add a listener to this EventDispatcher. */
  public void addListener(EventDispatcherListener listener) {
    mListeners.add(listener);
  }

  /** Remove a listener from this EventDispatcher. */
  public void removeListener(EventDispatcherListener listener) {
    mListeners.remove(listener);
  }

  @Override
  public String getName() {
    return MODULE_NAME;
  }
}
