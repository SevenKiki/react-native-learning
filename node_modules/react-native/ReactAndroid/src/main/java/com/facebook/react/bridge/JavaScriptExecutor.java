/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

package com.facebook.react.bridge;

import com.facebook.hermes.reactexecutor.HermesExecutor;
import com.facebook.jni.HybridData;
import com.facebook.proguard.annotations.DoNotStrip;
import com.facebook.react.jscexecutor.JSCExecutor;
import com.facebook.v8.liteexecutor.V8LiteExecutor;
import com.facebook.v8.reactexecutor.V8Executor;

@DoNotStrip
public abstract class JavaScriptExecutor {
  public enum Type { JSC, HERMES, V8, V8_LITE, UNKNOWN }
  private final HybridData mHybridData;

  protected JavaScriptExecutor(HybridData hybridData) {
    mHybridData = hybridData;
  }

  /**
   * Close this executor and cleanup any resources that it was using. No further calls are expected
   * after this. TODO mhorowitz: This may no longer be used; check and delete if possible.
   */
  public void close() {
    mHybridData.resetNative();
  }

  // TODO: refactor into XXXCodeCacheConfig to archive more elegant structure
  public Type getType() {
    if (this instanceof V8Executor) {
      return Type.V8;
    } else if (this instanceof V8LiteExecutor) {
      return Type.V8_LITE;
    } else if (this instanceof JSCExecutor) {
      return Type.JSC;
    } else if (this instanceof HermesExecutor) {
      return Type.HERMES;
    } else {
      return Type.UNKNOWN;
    }
  }

  public static boolean supportCodeCache(Type type) {
    switch (type) {
      case V8:
        return V8Executor.supportCodeCache();
      case V8_LITE:
        return V8LiteExecutor.supportCodeCache();
      default:
        return false;
    }
  }

  public static int getCachedDataVersion(Type type) {
    switch (type) {
      case V8:
        return V8Executor.getCachedDataVersion();
      case V8_LITE:
        return V8LiteExecutor.getCachedDataVersion();
      default:
        return -1;
    }
  }

  public static int getRuntimeVersion(Type type) {
    switch (type) {
      case V8:
        return V8Executor.getRuntimeVersion();
      case V8_LITE:
        return V8LiteExecutor.getRuntimeVersion();
      default:
        return -1;
    }
  }

  public static boolean isValidCodeCacheVersion(Type type, int cachedDataVersion, int runtimeVersion) {
    switch (type) {
      case V8:
        return V8Executor.isValidCodeCacheVersion(cachedDataVersion, runtimeVersion);
      case V8_LITE:
        return V8LiteExecutor.isValidCodeCacheVersion(cachedDataVersion, runtimeVersion);
      default:
        return false;
    }
  }

  /** Returns the name of the executor, identifying the underlying runtime. */
  public abstract String getName();
}
