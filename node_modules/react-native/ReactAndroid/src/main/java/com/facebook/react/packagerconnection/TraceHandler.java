//*** licence placeholder ***//

package com.facebook.react.packagerconnection;

import android.text.TextUtils;
import android.util.Base64;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.facebook.react.bridge.DebuggableJavaScriptExecutor;
import com.facebook.react.bridge.JavaScriptExecutorFactory;
import com.facebook.react.devsupport.ReactInstanceManagerDevHelper;
import java.io.File;
import java.io.FileInputStream;
import java.nio.ByteBuffer;
import java.util.Date;
import org.json.JSONObject;

public class TraceHandler extends RequestOnlyHandler {

  public static final String TRACE_TAG = "downloadTrace";

  private final ReactInstanceManagerDevHelper mReactInstanceManagerDevHelper;

  public TraceHandler(@NonNull ReactInstanceManagerDevHelper reactInstanceManagerDevHelper) {
    mReactInstanceManagerDevHelper = reactInstanceManagerDevHelper;
  }

  @Override
  public void onRequest(@Nullable Object params, Responder responder) {
    try {
      JavaScriptExecutorFactory javaScriptExecutorFactory = mReactInstanceManagerDevHelper
          .getJavaScriptExecutorFactory();
      if (javaScriptExecutorFactory instanceof DebuggableJavaScriptExecutor) {
        String traceFilePath = ((DebuggableJavaScriptExecutor) javaScriptExecutorFactory)
            .getTraceFilePath();
        if (!TextUtils.isEmpty(traceFilePath)) {
          String lastModified = new Date(new File(traceFilePath).lastModified())
              .toString();
          try (FileInputStream fileInputStream = new FileInputStream(traceFilePath)) {
            int filesize = fileInputStream.available();
            if (filesize <= 0) {
              throw new Exception("trace file size " + filesize);
            }
            ByteBuffer byteBuffer = ByteBuffer.allocate(filesize);
            int readSize = fileInputStream.read(byteBuffer.array());
            if (readSize != filesize) {
              throw new Exception("read size does not match file size");
            }

            JSONObject result = new JSONObject();
            result.put("tag", TRACE_TAG);
            result.put("content",
                Base64.encodeToString(byteBuffer.array(), 0, readSize, Base64.DEFAULT));
            result.put("message",
                "JS engine " + javaScriptExecutorFactory.getClass().getName());
            result.put("lastModified", lastModified);
            responder.respond(result, TRACE_TAG);
          } catch (Exception e) {
            responder.error(e.toString(), TRACE_TAG);
          }
        } else {
          throw new Exception("trace file path empty");
        }
      } else {
        throw new Exception(
            "JS engine " + javaScriptExecutorFactory.getClass().getName()
                + " do not support tracing");
      }
    } catch (Exception e) {
      responder.error(e.toString(), TRACE_TAG);
    }
  }
}
