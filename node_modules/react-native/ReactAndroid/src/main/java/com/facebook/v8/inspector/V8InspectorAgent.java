package com.facebook.v8.inspector;

import com.facebook.soloader.SoLoader;
import android.util.Log;
import java.util.HashMap;
import com.facebook.v8.reactexecutor.V8Executor;
import com.facebook.proguard.annotations.DoNotStrip;

public class V8InspectorAgent {
  static private final String TAG = "V8Inspector";

  private long mNative = 0;
  private HashMap<Long, V8Inspector> mInspectors;

  private static V8InspectorAgent sInstance;

  private static boolean mEnabled = true;

  public static void setEnabled(boolean enabled) {
    mEnabled = enabled;
  }

  public static synchronized V8InspectorAgent getInstance() {
    if (!mEnabled)
      return null;

    if (sInstance == null) {
      sInstance = new V8InspectorAgent();
    }
    return sInstance;
  }

  public V8InspectorAgent() {
    try {
      SoLoader.loadLibrary("v8-inspector");
    } catch (Throwable e) {
      Log.w(TAG, "Unable to startup v8 inspector agent, just ignore...");
      return;
    }

    mNative = nativeCreate();
    V8Executor.registerV8RuntimeLifecircleListener(mNative);
    mInspectors = new HashMap<Long, V8Inspector>();
  }

  public void destroy() {
    if (mNative != 0) {
      V8Executor.unregisterV8RuntimeLifecircleListener(mNative);
      nativeDestroy(mNative);
    }
  }

  protected void finalize() {
    destroy();
  }

  @DoNotStrip
  private void onV8RuntimeCreated(long runtime) {
    synchronized(this) {
      if (mInspectors.containsKey(runtime))
        return;

      V8Inspector inspector = new V8Inspector(runtime);
      mInspectors.put(runtime, inspector);
    }
  }

  @DoNotStrip
  private void onV8RuntimeDestroyed(long runtime) {
    synchronized(this) {
      if (!mInspectors.containsKey(runtime))
        return;
      V8Inspector inspector = mInspectors.get(runtime);
      inspector.destroy();
      mInspectors.remove(runtime);
    }
  }

  private native long nativeCreate();
  private native void nativeDestroy(long agent);
};
