#include "V8Inspector.h"

#include <string>
#include <random>
#include <sstream>
#include <android/log.h>

namespace {

static jlong Create(JNIEnv* env, jobject java_peer, jlong runtime) {
  return reinterpret_cast<jlong>(new V8Inspector(env,
      java_peer,
      reinterpret_cast<facebook::V8Runtime*>(runtime)));
}

static void Destroy(JNIEnv* env, jobject java_peer, jlong inspector) {
  delete reinterpret_cast<V8Inspector*>(inspector);
}

static void DispatchMessage(JNIEnv* env,
                            jobject java_peer,
                            jlong inspector,
                            jstring msg) {
  size_t length = env->GetStringLength(msg);
  jboolean is_copy = false;
  const uint16_t* data = env->GetStringChars(msg, &is_copy);
  reinterpret_cast<V8Inspector*>(inspector)->DispatchMessage(data, length);
  env->ReleaseStringChars(msg, data);
}

static void ResetSession(JNIEnv* env, jobject java_peer, jlong inspector) {
  reinterpret_cast<V8Inspector*>(inspector)->ResetSession();
}

static jmethodID g_sendResponseMethodID = nullptr;

static jmethodID g_sendNotificationMethodID = nullptr;

static jmethodID g_runMessageLoopOnPauseMethodID = nullptr;

static jmethodID g_quitMessageLoopOnPauseMethodID = nullptr;

static jmethodID g_startInspectorMethodID = nullptr;

static jmethodID g_stopInspectorMethodID = nullptr;

}


V8Inspector::V8Inspector(JNIEnv* env, jobject java_peer, facebook::V8Runtime* runtime) {
  env->GetJavaVM(&vm_);
  env_ = env;
  java_peer_ = env_->NewGlobalRef(java_peer);
  runtime_ = runtime;

  v8::HandleScope scope(runtime_->GetIsolate());
  InjectApi();
  inspector_ = v8_inspector::V8Inspector::create(runtime_->GetIsolate(), this);
  inspector_->contextCreated(
      v8_inspector::V8ContextInfo(runtime_->GetContext(),
                                  1,
                                  v8_inspector::StringView()));
}

V8Inspector::~V8Inspector() {
  v8::HandleScope scope(runtime_->GetIsolate());
  v8::Local<v8::Context> context = runtime_->GetContext();
  inspector_->contextDestroyed(context);
  session_ = nullptr;
  inspector_ = nullptr;
  env_->DeleteGlobalRef(java_peer_);
}

void V8Inspector::DispatchMessage(const uint16_t* data, size_t length) {
  if (!session_)
    session_ = inspector_->connect(1, this, v8_inspector::StringView());
  session_->dispatchProtocolMessage(v8_inspector::StringView(data, length));
}

void V8Inspector::ResetSession() {
  if (session_)
    session_ = nullptr;
}

bool V8Inspector::RegisterJNI(JNIEnv* env) {
  jclass clazz = env->FindClass("com/facebook/v8/inspector/V8Inspector");
  if (!clazz)
    return false;

  JNINativeMethod methods[] = {
    { "nativeCreate", "(J)J", (void*)::Create },
    { "nativeDestroy", "(J)V", (void*)::Destroy },
    { "nativeDispatchMessage", "(JLjava/lang/String;)V", (void*)::DispatchMessage },
    { "nativeResetSession", "(J)V", (void*)::ResetSession },
  };

  if (env->RegisterNatives(clazz, methods, sizeof(methods) / sizeof(methods[0])) < 0) {
    return false;
  }

  g_sendResponseMethodID = env->GetMethodID(clazz, "sendResponse", "(Ljava/lang/String;)V");
  if (g_sendResponseMethodID == nullptr)
    return false;

  g_sendNotificationMethodID = env->GetMethodID(clazz, "sendNotification", "(Ljava/lang/String;)V");
  if (g_sendNotificationMethodID == nullptr)
    return false;

  g_runMessageLoopOnPauseMethodID = env->GetMethodID(clazz, "runMessageLoopOnPause", "()V");
  if (g_runMessageLoopOnPauseMethodID == nullptr)
    return false;

  g_quitMessageLoopOnPauseMethodID = env->GetMethodID(clazz, "quitMessageLoopOnPause", "()V");
  if (g_quitMessageLoopOnPauseMethodID == nullptr)
    return false;

  g_startInspectorMethodID = env->GetMethodID(clazz,
                                              "startInspector",
                                              "(Ljava/lang/String;Ljava/lang/String;)V");
  if (g_startInspectorMethodID == nullptr)
    return false;

  g_stopInspectorMethodID = env->GetMethodID(clazz, "stopInspector", "()V");
  if (g_stopInspectorMethodID == nullptr)
    return false;

  return true;
}

void V8Inspector::sendResponse(int callId,
                               std::unique_ptr<v8_inspector::StringBuffer> message) {
  v8_inspector::StringView sv = message->string();

  if (sv.is8Bit()) {
    return;
  }

  JNIEnv* env = nullptr;
  if (vm_->AttachCurrentThread(&env, nullptr) < 0)
    return;

  if (env->PushLocalFrame(16) < 0)
    return;

  jobject java_peer = env->NewLocalRef(java_peer_);

  jstring msg = env->NewString(sv.characters16(), sv.length());
  env->CallVoidMethod(java_peer,
                      g_sendResponseMethodID,
                      msg);
  env->DeleteLocalRef(java_peer);
  env->PopLocalFrame(nullptr);
}

void V8Inspector::sendNotification(std::unique_ptr<v8_inspector::StringBuffer> message) {
  v8_inspector::StringView sv = message->string();
  if (sv.is8Bit()) {
    return;
  }

  JNIEnv* env = nullptr;
  if (vm_->AttachCurrentThread(&env, nullptr) < 0)
    return;
  
  if (env->PushLocalFrame(16) < 0)
    return;
  
  jobject java_peer = env->NewLocalRef(java_peer_);
  
  jstring msg = env->NewString(sv.characters16(), sv.length());
  env->CallVoidMethod(java_peer,
                      g_sendNotificationMethodID,
                      msg);
  env->DeleteLocalRef(java_peer);
  env->PopLocalFrame(nullptr);
}

void V8Inspector::flushProtocolNotifications() {
}

void V8Inspector::runMessageLoopOnPause(int contextGroupId) {
  JNIEnv* env = nullptr;
  if (vm_->AttachCurrentThread(&env, nullptr) < 0)
    return;

  if (env->PushLocalFrame(16) < 0)
    return;

  jobject java_peer = env->NewLocalRef(java_peer_);

  env->CallVoidMethod(java_peer,
                      g_runMessageLoopOnPauseMethodID);
  env->DeleteLocalRef(java_peer);
}

void V8Inspector::quitMessageLoopOnPause() {
  JNIEnv* env = nullptr;
  if (vm_->AttachCurrentThread(&env, nullptr) < 0)
    return;

  if (env->PushLocalFrame(16) < 0)   
    return;

  jobject java_peer = env->NewLocalRef(java_peer_);

  env->CallVoidMethod(java_peer,
                      g_quitMessageLoopOnPauseMethodID);
  env->DeleteLocalRef(java_peer);
}

void V8Inspector::StartInspector(const char* url, const char* uuid) {
  JNIEnv* env = nullptr;
  if (vm_->AttachCurrentThread(&env, nullptr) < 0)
    return;

  if (env->PushLocalFrame(16) < 0)
    return;

  jobject java_peer = env->NewLocalRef(java_peer_);
  jstring j_url = env->NewStringUTF(url);
  jstring j_uuid = env->NewStringUTF(uuid);
  env->CallVoidMethod(java_peer,
                      g_startInspectorMethodID,
                      j_url,
                      j_uuid);
  env->DeleteLocalRef(j_url);
  env->DeleteLocalRef(j_uuid);
  env->DeleteLocalRef(java_peer);
}

void V8Inspector::StopInspector() {
  JNIEnv* env = nullptr;
  if (vm_->AttachCurrentThread(&env, nullptr) < 0)
    return;

  if (env->PushLocalFrame(16) < 0)
    return;

  jobject java_peer = env->NewLocalRef(java_peer_);
  env->CallVoidMethod(java_peer,
                      g_stopInspectorMethodID);
  env->DeleteLocalRef(java_peer);
}

static std::string GetUUID() {
  static std::random_device rd;
  static std::uniform_int_distribution<uint64_t> dist(0ULL, 0xFFFFFFFFFFFFFFFFULL);
  uint64_t ab = dist(rd);
  uint64_t cd = dist(rd);
  uint32_t a, b, c, d;
  std::stringstream ss;
  ab = ( ab & 0xFFFFFFFFFFFF0FFFULL ) | 0x0000000000004000ULL;
  cd = ( cd & 0x3FFFFFFFFFFFFFFFULL ) | 0x8000000000000000ULL;
  a  = ( ab >> 32U );
  b  = ( ab & 0xFFFFFFFFU);
  c  = ( cd >> 32U );
  d  = ( cd & 0xFFFFFFFFU);
  ss << std::hex << std::nouppercase << std::setfill('0');
  ss << std::setw(8) << (a) << '-';
  ss << std::setw(4) << (b >> 16U) << '-';
  ss << std::setw(4) << (b & 0xFFFFU) << '-';
  ss << std::setw(4) << (c >> 16U) << '-';
  ss << std::setw(4) << (c & 0xFFFFU);
  ss << std::setw(8) << d;

  return ss.str();
}

static void V8_StartInspector(const v8::FunctionCallbackInfo<v8::Value>& info) {
  v8::HandleScope scope(info.GetIsolate());
  V8Inspector* inspector = (V8Inspector*)info.Data().As<v8::External>()->Value();
  v8::Local<v8::Value> arg0 = info[0];
  v8::Local<v8::String> url = arg0.As<v8::String>();

  char buffer[2048];
  int len = url->WriteUtf8(info.GetIsolate(), buffer, 2048);
  if (len == 2048 && buffer[2047] != 0)
    return;

  std::string uuid = GetUUID();
  info.GetReturnValue().Set(v8::String::NewFromUtf8(
      info.GetIsolate(),
      uuid.c_str(),
      v8::NewStringType::kNormal,
      uuid.length()).ToLocalChecked());

  inspector->StartInspector(buffer, uuid.c_str());
}

static void V8_StopInspector(const v8::FunctionCallbackInfo<v8::Value>& info) {
  v8::HandleScope scope(info.GetIsolate());

  V8Inspector* inspector = (V8Inspector*)info.Data().As<v8::External>()->Value();

  inspector->StopInspector();
}

void V8Inspector::InjectApi() {
  v8::Isolate* isolate = runtime_->GetIsolate();
  v8::Local<v8::Context> context = runtime_->GetContext();
  v8::Local<v8::Object> global = context->Global();

  v8::Local<v8::Function> start_insector_func =
      v8::Function::New(context,
                        V8_StartInspector,
                        v8::External::New(isolate, this)).ToLocalChecked();

  global->DefineOwnProperty(context,
                            v8::String::NewFromUtf8(isolate, "__startInspector").ToLocalChecked(),
                            start_insector_func,
                            v8::PropertyAttribute(v8::PropertyAttribute::ReadOnly |
                                                  v8::PropertyAttribute::DontEnum |
                                                  v8::PropertyAttribute::DontDelete)).ToChecked();

  v8::Local<v8::Function> stop_inspector_func =
      v8::Function::New(context,
                        V8_StopInspector,
                        v8::External::New(isolate, this)).ToLocalChecked();

  global->DefineOwnProperty(context,
                            v8::String::NewFromUtf8(isolate, "__stopInspector").ToLocalChecked(),
                            stop_inspector_func,
                            v8::PropertyAttribute(v8::PropertyAttribute::ReadOnly |
                                                  v8::PropertyAttribute::DontEnum |
                                                  v8::PropertyAttribute::DontDelete)).ToChecked();
}
