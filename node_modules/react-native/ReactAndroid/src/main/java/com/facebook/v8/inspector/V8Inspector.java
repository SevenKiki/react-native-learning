package com.facebook.v8.inspector;

import android.os.Handler;
import android.os.Looper;
import java.util.concurrent.TimeUnit;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.WebSocket;
import okhttp3.WebSocketListener;
import okio.ByteString;
import com.facebook.proguard.annotations.DoNotStrip;

public class V8Inspector extends WebSocketListener {

  static private final String FRONTEND = "ws://localhost:38989/debugger-proxy?role=android_client";
  static private final int RETRY_INTERVAL = 5000;

  private long mNative;
  private Handler mHandler;
  private TaskQueue mTaskQueue;
  private boolean mDestroyed = false;

  OkHttpClient mHttpClient;
  WebSocket mWebSocket;
  String mHost;

  public V8Inspector(long runtime) {
    mNative = nativeCreate(runtime);
    mHandler = new Handler();
    mTaskQueue = new TaskQueue(mHandler, RETRY_INTERVAL, new Runnable() {
      @Override
      public void run() {
        connectIfNeeded();
      }
    });

    mHttpClient = new OkHttpClient.Builder()
                      .connectTimeout(10, TimeUnit.SECONDS)
                      .writeTimeout(10, TimeUnit.SECONDS)
                      .readTimeout(0, TimeUnit.MINUTES) // Disable timeouts for read
                      .build();
  }

  public void destroy() {
    if (mNative == 0)
      return;

    mTaskQueue.destroy();
    mHttpClient.dispatcher().executorService().shutdown();
    nativeDestroy(mNative);
  }

  private void resetSession() {
    if (mNative == 0)
      return;
    nativeResetSession(mNative);
  }

  private void dispatchMessage(String msg) {
    if (mNative == 0)
      return;
    nativeDispatchMessage(mNative, msg);
  }

  private void connectIfNeeded() {
    if (mDestroyed)
      return;

    if (mWebSocket != null)
      return;

    if (mHost == null)
      return;

    connect();
  }

  private void connect() {
    try {
      Request request = new Request.Builder().url(mHost).build();
      mWebSocket = mHttpClient.newWebSocket(request, this); 
    } catch (Exception e) {
    }
  }

  @DoNotStrip
  private void sendResponse(String msg) {
    if (mWebSocket == null)
      return;
    mWebSocket.send(msg);
  }

  @DoNotStrip
  private void sendNotification(String msg) {
    mTaskQueue.post(new Runnable() {
      @Override
      public void run() {
        if (mWebSocket == null)
          return;
        mWebSocket.send(msg);
      }
    });
  }

  @DoNotStrip
  private void runMessageLoopOnPause() {
    mTaskQueue.loop();
  }

  @DoNotStrip
  private void quitMessageLoopOnPause() {
    mTaskQueue.cancelLoop();
  }

  @DoNotStrip
  private void startInspector(String url, String uuid) {
    mHost = url + "/debugger-proxy?role=android_client&uuid=" + uuid;
  }

  @DoNotStrip
  private void stopInspector() {
    mHost = null;
    if (mWebSocket != null) {
      mWebSocket.close(1001, "");
      mWebSocket = null;
    }
    resetSession();
  }

  @Override
  public void onOpen(WebSocket webSocket, Response response) {
  }

  @Override
  public void onClosing(WebSocket websocket, int code, String reason) {
  }

  @Override
  public void onClosed(WebSocket webSocket, int code, String reason) {
    mTaskQueue.post(new Runnable() {
      @Override
      public void run() {
        resetSession();
        mWebSocket = null;
      }
    });
  }

  @Override
  public void onFailure(WebSocket webSocket, Throwable t, Response response) {
    mTaskQueue.post(new Runnable() {
      @Override
      public void run() {
        resetSession();
        mWebSocket = null;
      }
    });
  }

  @Override
  public void onMessage(WebSocket webSocket, String text) {
    mTaskQueue.post(new Runnable() {
      @Override
      public void run() {
        if ("chrome_socket_closed".equals(text)) {
          resetSession();
          return;
        }
        dispatchMessage(text);
      }
    });
  }

  private native long nativeCreate(long runtime);
  private native void nativeDestroy(long inspector);
  private native void nativeDispatchMessage(long inspector, String msg);
  private native void nativeResetSession(long inspector);
};
