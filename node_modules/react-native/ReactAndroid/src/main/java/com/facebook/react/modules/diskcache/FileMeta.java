//*** licence placeholder ***//

package com.facebook.react.modules.diskcache;

import java.nio.ByteBuffer;

public class FileMeta {

  public static final int SIZE = 8 + 4 + 4 + 4 + 4 + 4 + 4;
  public static final long MAGIC = 0x12345678L;

  private FileMeta() {
    this.serialVersionUID = MAGIC;
    this.flags = 0;
    this.crc32 = 0;
    this.dataSize = 0;
    this.cachedDataVersion = 0;
    this.v8Version = 0;
    this.encoding = 0;
  }

  private FileMeta(int flags, int crc32, int dataSize, int cachedDataVersion, int v8Version,
      int encoding) {
    this.serialVersionUID = MAGIC;
    this.flags = flags;
    this.crc32 = crc32;
    this.dataSize = dataSize;
    this.cachedDataVersion = cachedDataVersion;
    this.v8Version = v8Version;
    this.encoding = encoding;
  }

  public long getSerialVersionUID() {
    return serialVersionUID;
  }

  public int getFlags() {
    return flags;
  }

  public int getCrc32() {
    return crc32;
  }

  public int getDataSize() {
    return dataSize;
  }

  public int getCachedDataVersion() {
    return cachedDataVersion;
  }

  public int getV8Version() {
    return v8Version;
  }

  public int getEncoding() {
    return encoding;
  }

  // magic number
  private long serialVersionUID;

  // (optional)文件标志位
  private int flags;

  // (optional)完整性校验
  private int crc32;

  // 计算offset取用户数据
  private int dataSize;

  // key length
//  private int keyLength;

  // (optional)key
//  private String key;

  // V8特性，用于表示是否可用cache
  private int cachedDataVersion;

  // V8版本
  private int v8Version;

  // codecache编码方式
  private int encoding;

  public byte[] serialize() {
    ByteBuffer byteBuffer = ByteBuffer.allocate(SIZE);
    byteBuffer.putLong(serialVersionUID);
    byteBuffer.putInt(flags);
    byteBuffer.putInt(crc32);
    byteBuffer.putInt(dataSize);
    byteBuffer.putInt(cachedDataVersion);
    byteBuffer.putInt(v8Version);
    byteBuffer.putInt(encoding);
    return byteBuffer.array();
  }

  public static FileMeta deserialize(byte[] data) {
    FileMeta fileMeta = new FileMeta();
    ByteBuffer byteBuffer = ByteBuffer.wrap(data);
    fileMeta.serialVersionUID = byteBuffer.getLong();
    fileMeta.flags = byteBuffer.getInt();
    fileMeta.crc32 = byteBuffer.getInt();
    fileMeta.dataSize = byteBuffer.getInt();
    fileMeta.cachedDataVersion = byteBuffer.getInt();
    fileMeta.v8Version = byteBuffer.getInt();
    fileMeta.encoding = byteBuffer.getInt();
    return fileMeta;
  }

  public static FileMeta createStub(int crc32, int dataSize) {
    FileMeta.Builder builder = new FileMeta.Builder();
    builder.setFlags(3);
    builder.setCrc32(crc32);
    builder.setDataSize(dataSize);
    builder.setCachedDataVersion(1);
    builder.setV8Version(4);
    builder.setEncoding(2);
    return builder.build();
  }

  public boolean testEquals(final FileMeta fileMeta) {
    return fileMeta.getDataSize() == getDataSize() &&
        fileMeta.getCrc32() == getCrc32() &&
        fileMeta.getCachedDataVersion() == getCachedDataVersion() &&
        fileMeta.getEncoding() == getEncoding() &&
        fileMeta.getFlags() == getFlags() &&
        fileMeta.getSerialVersionUID() == getSerialVersionUID() &&
        fileMeta.getV8Version() == getV8Version();
  }

  public static class Builder {

    private int flags;
    private int crc32;
    private int dataSize;
    private int cachedDataVersion;
    private int v8Version;
    private int encoding;

    public FileMeta.Builder setFlags(int flags) {
      this.flags = flags;
      return this;
    }

    public FileMeta.Builder setCrc32(int crc32) {
      this.crc32 = crc32;
      return this;
    }

    public FileMeta.Builder setDataSize(int dataSize) {
      this.dataSize = dataSize;
      return this;
    }

    public FileMeta.Builder setCachedDataVersion(int cachedDataVersion) {
      this.cachedDataVersion = cachedDataVersion;
      return this;
    }

    public FileMeta.Builder setV8Version(int v8Version) {
      this.v8Version = v8Version;
      return this;
    }

    public FileMeta.Builder setEncoding(int encoding) {
      this.encoding = encoding;
      return this;
    }

    public FileMeta build() {
      return new FileMeta(flags, crc32, dataSize, cachedDataVersion, v8Version, encoding);
    }
  }
}
