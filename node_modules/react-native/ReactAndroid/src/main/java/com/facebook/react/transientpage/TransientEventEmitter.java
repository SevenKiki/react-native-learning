package com.facebook.react.transientpage;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.facebook.react.bridge.CatalystInstance;
import com.facebook.react.bridge.JSIModuleType;
import com.facebook.react.bridge.JavaScriptModule;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.modules.core.DeviceEventManagerModule;
import com.facebook.react.turbomodule.core.TurboModuleManager;
import com.facebook.react.uimanager.events.RCTEventEmitter;

public class TransientEventEmitter implements RCTEventEmitter,
    DeviceEventManagerModule.RCTDeviceEventEmitter, JavaScriptModule {
  private final CatalystInstance mCatalystInstance;
  private final Class<? extends JavaScriptModule> mModuleInterface;

  public TransientEventEmitter(
    CatalystInstance catalystInstance, Class<? extends JavaScriptModule> moduleInterface) {
    mCatalystInstance = catalystInstance;
    mModuleInterface = moduleInterface;
  }

  @Override
  public void receiveEvent(int targetTag, String eventName, @Nullable WritableMap event) {
    if (getTransientPageModule() != null && getTransientPageModule().isActive()) {
      WritableNativeArray args = new WritableNativeArray();
      args.pushInt(targetTag);
      args.pushString(eventName);
      args.pushMap(event);
      getTurboBridge().callFunction("receiveEvent", args);
    } else {
      getRCTEventEmitter().receiveEvent(targetTag, eventName, event);
    }
  }

  @Override
  public void receiveTouches(String eventName, WritableArray touches, WritableArray changedIndices) {
    if (getTransientPageModule() != null && getTransientPageModule().isActive()) {
      WritableNativeArray args = new WritableNativeArray();
      args.pushString(eventName);
      args.pushArray(touches);
      args.pushArray(changedIndices);
      getTurboBridge().callFunction("receiveTouches", args);
    } else {
      getRCTEventEmitter().receiveTouches(eventName, touches, changedIndices);
    }
  }

  @Override
  public void emit(@NonNull String eventName, @Nullable Object data) {
    if (getTransientPageModule() != null && getTransientPageModule().isActive()) {
      WritableNativeArray args = new WritableNativeArray();
      pushJavaObject(args, data);
      getTurboBridge().callFunction("emit", args);
    } else {
      getRCTDeviceEventEmitter().emit(eventName, data);
    }
  }

  private TurboModuleManager getTurboBridge() {
    return (TurboModuleManager) mCatalystInstance.getJSIModule(JSIModuleType.TurboModuleManager);
  }

  private TransientPageModule getTransientPageModule() {
    return mCatalystInstance.getNativeModule(TransientPageModule.class);
  }

  private RCTEventEmitter getRCTEventEmitter() {
    return mCatalystInstance.getJSModule(RCTEventEmitter.class);
  }

  private DeviceEventManagerModule.RCTDeviceEventEmitter getRCTDeviceEventEmitter() {
    return mCatalystInstance.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class);
  }

  private static WritableNativeArray pushJavaObject(WritableNativeArray array, Object argument) {
      if (argument == null) {
        array.pushNull();
      }

    if (argument instanceof ReadableArray) {
      array.pushArray((ReadableArray) argument);
    } else if (argument instanceof ReadableMap) {
      array.pushMap((ReadableMap) argument);
    } else if (argument instanceof Boolean) {
      array.pushBoolean(((Boolean) argument).booleanValue());
    } else if (argument instanceof Integer) {
      array.pushDouble(((Integer) argument).doubleValue());
    } else if (argument instanceof Double) {
      array.pushDouble(((Double) argument).doubleValue());
    } else if (argument instanceof Float) {
      array.pushDouble(((Float) argument).doubleValue());
    } else if (argument instanceof String) {
      array.pushString(argument.toString());
    } else {
      throw new RuntimeException("Cannot convert argument of type " + argument.getClass());
    }

    return array;
  }

}
