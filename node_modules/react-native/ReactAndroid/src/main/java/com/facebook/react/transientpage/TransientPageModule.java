package com.facebook.react.transientpage;

import java.util.Map;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReactModuleWithSpec;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.module.annotations.ReactModule;
import com.facebook.react.modules.network.NetworkingModule;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;
import com.facebook.react.uimanager.DisplayMetricsHolder;
import com.facebook.react.uimanager.UIManagerModule;

@ReactModule(name = TransientPageModule.NAME)
public class TransientPageModule extends ReactContextBaseJavaModule
  implements ReactModuleWithSpec, TurboModule {

  public enum STATE {
    ACTIVE,
    INACTIVE
  }

  public static final String NAME = "TransientPageModule";
  private STATE mState = STATE.INACTIVE;

  private NetworkingModule mNetworkingModule;
  private int mRootTag = -1;
  private ReadableArray mMountTags = null;

  protected float mFontScale;

  @NonNull
  @Override
  public String getName() {
    return NAME;
  }

  public STATE getState() {
    return mState;
  }

  public TransientPageModule(ReactApplicationContext reactApplicationContext) {
    super(reactApplicationContext);
    mFontScale = reactApplicationContext.getResources().getConfiguration().fontScale;
  }

  @ReactMethod
  public void onLoad() {
    mState = STATE.ACTIVE;
  }

  @ReactMethod
  public void onHide() {
    mState = STATE.INACTIVE;
  }

  public boolean isActive() {
    return mState == STATE.ACTIVE;
  }

  @ReactMethod
  public double getWindowWidth() {
    Map<String, Map<String, Object>> displayMetrics =
      DisplayMetricsHolder.getDisplayMetricsMap(mFontScale);
    Map<String, Object> windowPhysicalPixels = displayMetrics.get("windowPhysicalPixels");
    return (int) windowPhysicalPixels.get("width") / (float) windowPhysicalPixels.get("scale");
  }

  @ReactMethod
  public void markRootTags(double rootTag, ReadableArray mountTags) {
    mRootTag = (int) rootTag;
    mMountTags = mountTags;
  }

  @ReactMethod
  public String resolveAssetSource(ReadableMap source) {
    return "";
  }

  @ReactMethod
  public void clearRootView() {
    if (isActive() && mRootTag != -1 && mMountTags.size() > 0) {
      getUIManager().getUIImplementation().removeChildren(mRootTag, mMountTags);
    }
    onHide();
  }

  @ReactMethod
  public void updateView(final double tag, final String className, final ReadableMap props) {
    if (isActive()) {
      getUIManager().updateView((int) tag, className, props);
    }
  }

  @ReactMethod
  public void dispatchViewManagerCommand(double reactTag, final String commandId,
    @Nullable ReadableArray commandArgs) {
    if (isActive()) {
      getUIManager().dispatchViewManagerStringCommand(reactTag, commandId, commandArgs);
    }
  }

  @ReactMethod
  public void dispatchViewManagerCommand(double reactTag, final int commandId,
    @Nullable ReadableArray commandArgs) {
    if (isActive()) {
      getUIManager().dispatchViewManagerCommand((int) reactTag, commandId, commandArgs);
    }
  }

  @ReactMethod
  public void createView(double tag, String className, double rootViewTag, ReadableMap props) {
    if (isActive()) {
      getUIManager().createView((int) tag, className, (int) rootViewTag, props);
    }
  }

  @ReactMethod
  public void setChildren(double viewTag, ReadableArray childrenTags) {
    if (isActive()) {
      getUIManager().setChildren((int) viewTag, childrenTags);
    }
  }

  @ReactMethod
  public void manageChildren(
    double viewTag,
    @Nullable ReadableArray moveFrom,
    @Nullable ReadableArray moveTo,
    @Nullable ReadableArray addChildTags,
    @Nullable ReadableArray addAtIndices,
    @Nullable ReadableArray removeFrom) {
    if (isActive()) {
      getUIManager()
        .manageChildren((int) viewTag, moveFrom, moveTo, addChildTags, addAtIndices, removeFrom);
    }
  }

  @ReactMethod
  public void invalidateView() {
    if (isActive()) {
      getUIManager().onBatchComplete();
    }
  }

  @ReactMethod
  public void sendRequest(
    String method,
    String url,
    double requestIdAsDouble,
    ReadableArray headers,
    ReadableMap data,
    String responseType,
    boolean useIncrementalUpdates,
    double timeoutAsDouble,
    boolean withCredentials) {
    if (isActive()) {
      getNetworking().sendRequest(method, url, requestIdAsDouble, headers, data, responseType,
        useIncrementalUpdates, timeoutAsDouble, withCredentials);
    }
  }

  @Override
  public void onCatalystInstanceDestroy() {
    super.onCatalystInstanceDestroy();
    onHide();
  }

  private UIManagerModule getUIManager() {
    return getReactApplicationContext().getNativeModule(UIManagerModule.class);
  }

  private NetworkingModule getNetworking() {
    if (mNetworkingModule == null) {
      mNetworkingModule = getReactApplicationContext().getNativeModule(NetworkingModule.class);
    }
    return mNetworkingModule;
  }
}
