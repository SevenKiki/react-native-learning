package com.facebook.react.views.deractors;

import java.util.Arrays;

import android.content.Context;
import android.view.View;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.uimanager.FloatUtil;
import com.facebook.react.uimanager.PixelUtil;
import com.facebook.react.uimanager.Spacing;
import com.facebook.react.uimanager.ViewManager;
import com.facebook.react.views.view.ReactViewManager;
import com.facebook.yoga.YogaConstants;

public class BackgroundDecorViewManager extends ReactViewManager {
  public class BorderRadiusParams {
    boolean mHasBorderRadiusParams;
    public float mBorderRadius = YogaConstants.UNDEFINED;
    private @Nullable
    float[] mBorderCornerRadii = null;
  }

  public class BorderStyleParams {
    boolean mHasBorderStyleParams;
    public String mBorderStyle;
  }

  public class BorderWidthParams {
    boolean mHasBorderWidthParams;
    public int mPosition;
    public float mWidth;
  }

  public class BorderColorParams {
    boolean mHasColorParams;
    public int mPosition;
    public float mRgb;
    public float mAlpha;
  }

  private BorderRadiusParams mBorderRadiusParams;
  private BorderStyleParams mBorderStyleParams;
  private BorderWidthParams mBorderWidthParams;
  private BorderColorParams mBorderColorParams;
  private static final int[] SPACING_TYPES = {
    Spacing.ALL,
    Spacing.LEFT,
    Spacing.RIGHT,
    Spacing.TOP,
    Spacing.BOTTOM,
    Spacing.START,
    Spacing.END,
  };

  boolean mHasBackgroundImage;
  @Nullable
  ReadableArray mTransformMatrix;
  boolean mHasTransform;
  float mRotation = -1;
  boolean mHasRotation;
  float mScaleX = -1;
  boolean mHasScaleX;
  float mScaleY = -1;
  boolean mHasScaleY;
  float mTranslateX = -1;
  boolean mHasTranslateX;
  float mTranslateY = -1;
  boolean mHasTranslateY;
  float mOpacity = 1.0f;
  boolean mHasOpacity;
  float mZIndex = 0;
  boolean mHasZIndex;

  public void setBorderRadiusParams(View view, int index, float borderRadius) {
    if (!YogaConstants.isUndefined(borderRadius) && borderRadius < 0) {
      borderRadius = YogaConstants.UNDEFINED;
    }
    if (!YogaConstants.isUndefined(borderRadius)) {
      borderRadius = PixelUtil.toPixelFromDIP(borderRadius);
    }

    if (BackgroundDecorView.fromView(view) != null) {
      if (index == 0) {
        BackgroundDecorView.fromView(view).setBorderRadius(borderRadius);
      } else {
        BackgroundDecorView.fromView(view).setBorderRadius(borderRadius, index - 1);
      }
    }

    if (mBorderRadiusParams == null) {
      mBorderRadiusParams = new BorderRadiusParams();
    }

    if (index == 0) {
      if (!FloatUtil.floatsEqual(mBorderRadiusParams.mBorderRadius, borderRadius)) {
        mBorderRadiusParams.mBorderRadius = borderRadius;
        mBorderRadiusParams.mHasBorderRadiusParams = true;
        mBorderRadiusParams.mBorderCornerRadii = null;
      }
    } else {
      if (mBorderRadiusParams.mBorderCornerRadii == null) {
        mBorderRadiusParams.mBorderCornerRadii = new float[8];
        Arrays.fill(mBorderRadiusParams.mBorderCornerRadii, YogaConstants.UNDEFINED);
      }

      if (!FloatUtil.floatsEqual(mBorderRadiusParams.mBorderCornerRadii[index - 1], borderRadius)) {
        mBorderRadiusParams.mBorderCornerRadii[index - 1] = borderRadius;
        mBorderRadiusParams.mHasBorderRadiusParams = true;
      }
    }
  }

  public void setBorderStyleParams(View view, String borderStyle) {
    if (BackgroundDecorView.fromView(view) != null) {
      BackgroundDecorView.fromView(view).setBorderStyle(borderStyle);
    }

    if (mBorderStyleParams == null) {
      mBorderStyleParams = new BorderStyleParams();
    }
    mBorderStyleParams.mBorderStyle = borderStyle;
    mBorderStyleParams.mHasBorderStyleParams = true;
  }

  public void setBorderWidthParams(View view, int index, float width) {
    if (!YogaConstants.isUndefined(width) && width < 0) {
      width = YogaConstants.UNDEFINED;
    }

    if (!YogaConstants.isUndefined(width)) {
      width = PixelUtil.toPixelFromDIP(width);
    }

    if (BackgroundDecorView.fromView(view) != null) {
      BackgroundDecorView.fromView(view).setBorderWidth(SPACING_TYPES[index], width);
    }

    if (mBorderWidthParams == null) {
      mBorderWidthParams = new BorderWidthParams();
    }
    mBorderWidthParams.mPosition = SPACING_TYPES[index];
    mBorderWidthParams.mWidth = width;
    mBorderWidthParams.mHasBorderWidthParams = true;
  }

  public void setBorderColorParams(View view, int index, Integer color) {
    float rgbComponent =
      color == null ? YogaConstants.UNDEFINED : (float) ((int) color & 0x00FFFFFF);
    float alphaComponent = color == null ? YogaConstants.UNDEFINED : (float) ((int) color >>> 24);

    if (BackgroundDecorView.fromView(view) != null) {
      BackgroundDecorView.fromView(view).setBorderColor(SPACING_TYPES[index],
          rgbComponent, alphaComponent);
    }

    if (mBorderColorParams == null) {
      mBorderColorParams = new BorderColorParams();
    }
    mBorderColorParams.mPosition = SPACING_TYPES[index];
    mBorderColorParams.mRgb = rgbComponent;
    mBorderColorParams.mAlpha = alphaComponent;
    mBorderColorParams.mHasColorParams = true;
  }

  public void setBackgroundTransform(ReadableArray matrix) {
    mTransformMatrix = matrix;
    mHasTransform = true;
  }

  public void setBackgroundRotation(float rotation) {
    mRotation = rotation;
    mHasRotation = true;
  }

  public void setBackgroundScaleX(float scaleX) {
    mScaleX = scaleX;
    mHasScaleX = true;
  }

  public void setBackgroundScaleY(float scaleY) {
    mScaleY = scaleY;
    mHasScaleY = true;
  }

  public void setBackgroundTranslateX(float translateX) {
    mTranslateX = translateX;
    mHasTranslateX = true;
  }

  public void setBackgroundTranslateY(float translateY) {
    mTranslateY = translateY;
    mHasTranslateY = true;
  }

  public void setBackgroundOpacity(float opacity) {
    mOpacity = opacity;
    mHasOpacity = true;
  }

  public void setBackgroundZIndex(float zIndex) {
    mZIndex = zIndex;
    mHasZIndex = true;
  }

  public void setBackgroundImage(View view, @Nullable ReadableArray sources,
      ViewManager imageManager) {
    if (sources == null || sources.size() == 0) {
      if (BackgroundDecorView.fromView(view) != null) {
        BackgroundDecorView.fromView(view).release();
      }
      mHasBackgroundImage = false;
      return;
    }

    BackgroundDecorView decorView = BackgroundDecorView.fromView(view);
    if (decorView == null) {
      decorView =
        createBackgroundDecorView(view.getContext(), imageManager);
      decorView.bindDecorViewToParent(view);
    }

    decorView.setBackgroundParams(sources);
    initBackgroundDecoViewBorderParams(decorView);
    mHasBackgroundImage = true;
  }

  public void initBackgroundDecoViewBorderParams(BackgroundDecorView view) {
    if (mBorderRadiusParams != null && mBorderRadiusParams.mHasBorderRadiusParams) {
      if (mBorderRadiusParams.mBorderCornerRadii!=null) {
        view.setBorderRadius(mBorderRadiusParams.mBorderCornerRadii);
      } else {
        view.setBorderRadius(mBorderRadiusParams.mBorderRadius);
      }
    }

    if (mBorderStyleParams != null && mBorderStyleParams.mHasBorderStyleParams) {
      view.setBorderStyle(mBorderStyleParams.mBorderStyle);
    }

    if (mBorderWidthParams != null && mBorderWidthParams.mHasBorderWidthParams) {
      view.setBorderWidth(mBorderWidthParams.mPosition, mBorderWidthParams.mWidth);
    }
    if (mBorderColorParams != null && mBorderColorParams.mHasColorParams) {
      view.setBorderColor(mBorderColorParams.mPosition, mBorderColorParams.mRgb,
        mBorderColorParams.mAlpha);
    }
  }

  public static BackgroundDecorView createBackgroundDecorView(@NonNull Context context,
      ViewManager imageManager) {
    return new BackgroundDecorView(context, imageManager);
  }
}
