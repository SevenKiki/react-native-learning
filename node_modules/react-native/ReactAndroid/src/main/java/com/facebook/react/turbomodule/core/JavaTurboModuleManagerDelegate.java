/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

package com.facebook.react.turbomodule.core;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import androidx.annotation.VisibleForTesting;

import com.facebook.jni.HybridData;
import com.facebook.proguard.annotations.DoNotStrip;
import com.facebook.react.ReactPackage;
import com.facebook.react.TurboReactPackage;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactMarker;
import com.facebook.react.bridge.ReactMarkerConstants;
import com.facebook.react.module.model.MethodDescriptor;
import com.facebook.react.module.model.ReactModuleInfo;

/**
 * This class is responsible for creating all the TurboModules for the RNTester app.
 */
@DoNotStrip
public class JavaTurboModuleManagerDelegate extends ReactPackageTurboModuleManagerDelegate {
  protected native HybridData initHybrid();

  @VisibleForTesting
  native boolean canCreateTurboModule(String moduleName);

  native void registerModules(final String moduleName, int argCount, final String funcName,
    int kind, final String sign);

  public JavaTurboModuleManagerDelegate(
    ReactApplicationContext context, List<ReactPackage> packages) {
    super(context, packages);
    ReactMarker.logTMMMarker(ReactMarkerConstants.registerModulesStart.name(), null, null, 0);
    Set<String> moduleNames = new HashSet<>();
    for (TurboReactPackage reactPackage : mPackages) {
      for (ReactModuleInfo moduleInfo :
        reactPackage.getReactModuleInfoProvider().getReactModuleInfos().values()) {

        if (moduleInfo.isTurboModule()) {
          if (moduleNames.contains(moduleInfo.name())) {
            throw new IllegalArgumentException(
              "TurboModule " + moduleInfo.name() + " already existed");
          }
          final List<MethodDescriptor> methods = moduleInfo.methodProvider().getMethodInfo();
          for (MethodDescriptor md : methods) {
            registerModules(moduleInfo.name(), md.argCount, md.name, md.retKind.ordinal(),
              md.signature);
          }
          moduleNames.add(moduleInfo.name());
        }
      }
    }
    ReactMarker.logTMMMarker(ReactMarkerConstants.registerModulesEnd.name(), null, null, 0);
  }
}
