package com.facebook.react.views.deractors;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.config.ReactFeatureFlags;
import com.facebook.react.module.annotations.ReactModule;
import com.facebook.react.uimanager.PixelUtil;
import com.facebook.react.uimanager.ThemedReactContext;
import com.facebook.react.uimanager.UIManagerModule;
import com.facebook.react.uimanager.ViewManager;
import com.facebook.react.uimanager.ViewProps;
import com.facebook.react.uimanager.annotations.ReactProp;
import com.facebook.react.uimanager.annotations.ReactPropGroup;
import com.facebook.react.views.scroll.FpsListener;
import com.facebook.react.views.scroll.ReactHorizontalScrollView;
import com.facebook.react.views.scroll.ReactHorizontalScrollViewManager;
import com.facebook.yoga.YogaConstants;

@ReactModule(name = KdsHorizontalScrollViewManager.REACT_CLASS)
public class KdsHorizontalScrollViewManager extends ReactHorizontalScrollViewManager {

  private static final String TAG = "KdsHorizontalScrollViewManager";
  public static final String REACT_CLASS = "KDSHorizontalScrollView";

  private ViewManager mImageManager = null;

  public KdsHorizontalScrollViewManager() {
    super(null);
  }

  public KdsHorizontalScrollViewManager(@Nullable FpsListener fpsListener) {
    super(fpsListener);
  }

  @Override
  public String getName() {
    return REACT_CLASS;
  }

  @Override
  public KdsHorizontalScrollView createViewInstance(ThemedReactContext context) {
    return new KdsHorizontalScrollView(context);
  }

  @ReactPropGroup(
    names = {
      ViewProps.BORDER_RADIUS,
      ViewProps.BORDER_TOP_LEFT_RADIUS,
      ViewProps.BORDER_TOP_RIGHT_RADIUS,
      ViewProps.BORDER_BOTTOM_RIGHT_RADIUS,
      ViewProps.BORDER_BOTTOM_LEFT_RADIUS
    },
    defaultFloat = YogaConstants.UNDEFINED)
  public void setBorderRadius(KdsHorizontalScrollView view, int index, float borderRadius) {
    super.setBorderRadius(view, index, borderRadius);
    view.getBackgroundDecorViewManager().setBorderRadiusParams(view, index, borderRadius);
  }

  @ReactProp(name = "borderStyle")
  public void setBorderStyle(KdsHorizontalScrollView view, @Nullable String borderStyle) {
    super.setBorderStyle(view, borderStyle);
    view.getBackgroundDecorViewManager().setBorderStyleParams(view, borderStyle);
  }

  @ReactPropGroup(
    names = {
      ViewProps.BORDER_WIDTH,
      ViewProps.BORDER_LEFT_WIDTH,
      ViewProps.BORDER_RIGHT_WIDTH,
      ViewProps.BORDER_TOP_WIDTH,
      ViewProps.BORDER_BOTTOM_WIDTH,
    },
    defaultFloat = YogaConstants.UNDEFINED)
  public void setBorderWidth(KdsHorizontalScrollView view, int index, float width) {
    super.setBorderWidth(view, index, width);
    view.getBackgroundDecorViewManager().setBorderWidthParams(view, index, width);
  }

  @ReactPropGroup(
    names = {
      ViewProps.BORDER_COLOR,
      ViewProps.BORDER_LEFT_COLOR,
      ViewProps.BORDER_RIGHT_COLOR,
      ViewProps.BORDER_TOP_COLOR,
      ViewProps.BORDER_BOTTOM_COLOR
    },
    customType = "Color")
  public void setBorderColor(KdsHorizontalScrollView view, int index, Integer color) {
    super.setBorderColor(view, index, color);
    view.getBackgroundDecorViewManager().setBorderColorParams(view, index, color);
  }

  @ReactProp(name = ViewProps.TRANSFORM)
  public void setTransform(@NonNull KdsHorizontalScrollView view, @Nullable ReadableArray matrix) {
    view.getBackgroundDecorViewManager().setBackgroundTransform(matrix);
  }

  @ReactProp(name = ViewProps.ROTATION)
  public void setRotation(@NonNull KdsHorizontalScrollView view, float rotation) {
    view.getBackgroundDecorViewManager().setBackgroundRotation(rotation);
  }

  @ReactProp(name = ViewProps.SCALE_X, defaultFloat = 1f)
  public void setScaleX(@NonNull KdsHorizontalScrollView view, float scaleX) {
    view.getBackgroundDecorViewManager().setBackgroundScaleX(scaleX);
  }

  @ReactProp(name = ViewProps.SCALE_Y, defaultFloat = 1f)
  public void setScaleY(@NonNull KdsHorizontalScrollView view, float scaleY) {
    view.getBackgroundDecorViewManager().setBackgroundScaleY(scaleY);
  }

  @ReactProp(name = ViewProps.TRANSLATE_X, defaultFloat = 0f)
  public void setTranslateX(@NonNull KdsHorizontalScrollView view, float translateX) {
    view.getBackgroundDecorViewManager().setBackgroundTranslateX(translateX);
  }

  @ReactProp(name = ViewProps.TRANSLATE_Y, defaultFloat = 0f)
  public void setTranslateY(@NonNull KdsHorizontalScrollView view, float translateY) {
    view.getBackgroundDecorViewManager().setBackgroundTranslateY(translateY);
  }

  @ReactProp(name = ViewProps.OPACITY, defaultFloat = 1.f)
  public void setOpacity(@NonNull KdsHorizontalScrollView view, float opacity) {
    view.getBackgroundDecorViewManager().setBackgroundOpacity(opacity);
  }

  @ReactProp(name = ViewProps.Z_INDEX)
  public void setZIndex(@NonNull KdsHorizontalScrollView view, float zIndex) {
    view.getBackgroundDecorViewManager().setBackgroundZIndex(zIndex);
  }

  @ReactProp(name = "backgroundImage")
  public void setBackgroundImage(KdsHorizontalScrollView view, @Nullable ReadableArray sources) {
    if (!ReactFeatureFlags.enableBackgroundDecorView) {
      return;
    }
    Log.d(TAG, "setBackgroundImage sources = " + sources);
    if (mImageManager == null && view.getContext() != null) {
      mImageManager =
        ((ReactContext) view.getContext()).getNativeModule(UIManagerModule.class)
          .getUIImplementation()
          .resolveViewManager(BackgroundReactImageManager.REACT_CLASS);
    }
    view.getBackgroundDecorViewManager().setBackgroundImage(view, sources, mImageManager);
  }

  @Override
  protected void onAfterUpdateTransaction(
    @NonNull ReactHorizontalScrollView view) {
    super.onAfterUpdateTransaction(view);
    if (view instanceof KdsHorizontalScrollView) {
      KdsHorizontalScrollView kdsView = (KdsHorizontalScrollView) view;
      // transform
      if (kdsView.getBackgroundDecorViewManager().mHasTransform) {
        super.setTransform(view, null);
        if (kdsView.getBackgroundDecorViewManager().mHasBackgroundImage) {
          if (BackgroundDecorView.fromView(view) != null) {
            kdsView.getBackgroundDecorViewManager().setTransform(BackgroundDecorView.fromView(view),
              kdsView.getBackgroundDecorViewManager().mTransformMatrix);
          }
        } else {
          super.setTransform(view, kdsView.getBackgroundDecorViewManager().mTransformMatrix);
        }
      }
      // rotation
      if (kdsView.getBackgroundDecorViewManager().mHasRotation) {
        super.setRotation(view, 0);
        if (kdsView.getBackgroundDecorViewManager().mHasBackgroundImage) {
          if (BackgroundDecorView.fromView(view) != null) {
            kdsView.getBackgroundDecorViewManager().setRotation(BackgroundDecorView.fromView(view),
              kdsView.getBackgroundDecorViewManager().mRotation);
          }
        } else {
          super.setRotation(view, kdsView.getBackgroundDecorViewManager().mRotation);
        }
      }
      // scaleX
      if (kdsView.getBackgroundDecorViewManager().mHasScaleX) {
        super.setScaleX(view, 1);
        if (kdsView.getBackgroundDecorViewManager().mHasBackgroundImage) {
          if (BackgroundDecorView.fromView(view) != null) {
            kdsView.getBackgroundDecorViewManager().setScaleX(BackgroundDecorView.fromView(view),
              kdsView.getBackgroundDecorViewManager().mScaleX);
          }
        } else {
          super.setScaleX(view, kdsView.getBackgroundDecorViewManager().mScaleX);
        }
      }
      // scaleY
      if (kdsView.getBackgroundDecorViewManager().mHasScaleY) {
        super.setScaleY(view, 1);
        if (kdsView.getBackgroundDecorViewManager().mHasBackgroundImage) {
          if (BackgroundDecorView.fromView(view) != null) {
            kdsView.getBackgroundDecorViewManager().setScaleY(BackgroundDecorView.fromView(view),
              kdsView.getBackgroundDecorViewManager().mScaleY);
          }
        } else {
          super.setScaleY(view, kdsView.getBackgroundDecorViewManager().mScaleY);
        }
      }
      // translateX
      if (kdsView.getBackgroundDecorViewManager().mHasTranslateX) {
        super.setTranslateX(view, PixelUtil.toPixelFromDIP(0));
        if (kdsView.getBackgroundDecorViewManager().mHasBackgroundImage) {
          if (BackgroundDecorView.fromView(view) != null) {
            kdsView.getBackgroundDecorViewManager().setTranslateX(BackgroundDecorView.fromView(view),
              kdsView.getBackgroundDecorViewManager().mTranslateX);
          }
        } else {
          super.setTranslateX(view, kdsView.getBackgroundDecorViewManager().mTranslateX);
        }
      }
      // translateY
      if (kdsView.getBackgroundDecorViewManager().mHasTranslateY) {
        super.setTranslateY(view, PixelUtil.toPixelFromDIP(0));
        if (kdsView.getBackgroundDecorViewManager().mHasBackgroundImage) {
          if (BackgroundDecorView.fromView(view) != null) {
            kdsView.getBackgroundDecorViewManager()
              .setTranslateY(BackgroundDecorView.fromView(view),
                kdsView.getBackgroundDecorViewManager().mTranslateY);
          }
        } else {
          super.setTranslateY(view, kdsView.getBackgroundDecorViewManager().mTranslateY);
        }
      }
      //zIndex
      if (kdsView.getBackgroundDecorViewManager().mHasZIndex) {
        if (kdsView.getBackgroundDecorViewManager().mHasBackgroundImage) {
          if (BackgroundDecorView.fromView(view) != null) {
            kdsView.getBackgroundDecorViewManager().setZIndex(BackgroundDecorView.fromView(view),
              kdsView.getBackgroundDecorViewManager().mZIndex);
          }
        } else {
          super.setZIndex(view, kdsView.getBackgroundDecorViewManager().mZIndex);
        }
      }
      //opacity
      if (kdsView.getBackgroundDecorViewManager().mHasOpacity) {
        super.setOpacity(view, 1);
        if (kdsView.getBackgroundDecorViewManager().mHasBackgroundImage) {
          if (BackgroundDecorView.fromView(view) != null) {
            kdsView.getBackgroundDecorViewManager().setOpacity(BackgroundDecorView.fromView(view),
              kdsView.getBackgroundDecorViewManager().mOpacity);
          }
        } else {
          super.setOpacity(view, kdsView.getBackgroundDecorViewManager().mOpacity);
        }
      }
    }
  }
}
