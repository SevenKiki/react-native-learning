/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the LICENSE
 * file in the root directory of this source tree.
 */
#include <V8ExecutorFactory.h>
#include <fbjni/fbjni.h>
#include <folly/Memory.h>
#include <jni.h>
#include <react/jni/JReactMarker.h>
#include <react/jni/JSLogging.h>
#include <react/jni/JavaScriptExecutorHolder.h>

#include "V8Runtime.h"

namespace facebook {
namespace react {

static void installBindings(jsi::Runtime &runtime) {
  react::Logger androidLogger =
      static_cast<void (*)(const std::string &, unsigned int)>(
          &reactAndroidLoggingHook);
  react::bindNativeLogger(runtime, androidLogger);
}

class V8ExecutorHolder
    : public jni::HybridClass<V8ExecutorHolder, JavaScriptExecutorHolder> {
 public:
  static constexpr auto kJavaDescriptor =
      "Lcom/facebook/v8/reactexecutor/V8Executor;";

  static jni::local_ref<jhybriddata> initHybrid(
      jni::alias_ref<jclass>,
      const std::string &timezoneId,
      const std::string &traceFilename,
      jboolean enableStartupTrace) {
    JReactMarker::setLogPerfMarkerIfNeeded();

    return makeCxxInstance(folly::make_unique<V8ExecutorFactory>(
        installBindings,
        JSIExecutor::defaultTimeoutInvoker,
        timezoneId,
        traceFilename,
        enableStartupTrace));
  }

  static void startTracing(
      jni::alias_ref<jclass>,
      const std::string &categories) {
    V8Runtime::startTracing(categories);
  }

  static void stopTracing(jni::alias_ref<jclass>) {
    V8Runtime::stopTracing();
  }

  static int getCachedDataVersion(jni::alias_ref<jclass>) {
    return V8Runtime::getCachedDataVersion();
  }

  static int getV8Version(jni::alias_ref<jclass>) {
    return V8Runtime::getV8Version();
  }

  static void registerV8RuntimeLifecircleListener(jni::alias_ref<jclass>, jlong listener) {
    V8Runtime::RegisterLifecircleListener(
        reinterpret_cast<V8RuntimeLifecircleListener*>(listener));
  }

  static void unregisterV8RuntimeLifecircleListener(jni::alias_ref<jclass>, jlong listener) {
    V8Runtime::UnregisterLifecircleListener(
        reinterpret_cast<V8RuntimeLifecircleListener*>(listener));
  }

  static void registerNatives() {
    registerHybrid({
        makeNativeMethod("initHybrid", V8ExecutorHolder::initHybrid),
        makeNativeMethod("jniStartTracing", V8ExecutorHolder::startTracing),
        makeNativeMethod("jniStopTracing", V8ExecutorHolder::stopTracing),
        makeNativeMethod(
            "jniGetCachedDataVersion", V8ExecutorHolder::getCachedDataVersion),
        makeNativeMethod("jniGetV8Version", V8ExecutorHolder::getV8Version),
        makeNativeMethod("jniRegisterV8RuntimeLifecircleListener",
                         V8ExecutorHolder::registerV8RuntimeLifecircleListener),
        makeNativeMethod("jniUnregisterV8RuntimeLifecircleListener",
                         V8ExecutorHolder::unregisterV8RuntimeLifecircleListener),
    });
  }

 private:
  friend HybridBase;
  using HybridBase::HybridBase;
};

} // namespace react
} // namespace facebook

JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved) {
  return facebook::jni::initialize(
      vm, [] { facebook::react::V8ExecutorHolder::registerNatives(); });
}
