package com.facebook.react.uimanager;

import com.facebook.react.bridge.Dynamic;
import java.util.List;
import java.util.Map;

import android.view.View;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.module.annotations.ReactModule;
import com.facebook.react.uimanager.debug.NotThreadSafeViewHierarchyUpdateDebugListener;
import com.facebook.react.uimanager.events.EventDispatcher;

@ReactModule(name = NativeUIManagerSpec.LIB_UIMANAGER)
public class UIManagerBridgeModule extends UIManagerModule {
  private final UIManagerImpl mDelegate;

  @SuppressWarnings("deprecated")
  public UIManagerBridgeModule(
    ReactApplicationContext reactContext,
    UIManagerModule.ViewManagerResolver viewManagerResolver,
    int minTimeLeftInFrameForNonBatchedOperationMs) {
    this(
      reactContext,
      viewManagerResolver,
      new UIImplementationProvider(),
      minTimeLeftInFrameForNonBatchedOperationMs);
  }

  @SuppressWarnings("deprecated")
  public UIManagerBridgeModule(
    ReactApplicationContext reactContext,
    List<ViewManager> viewManagersList,
    int minTimeLeftInFrameForNonBatchedOperationMs) {
    this(
      reactContext,
      viewManagersList,
      new UIImplementationProvider(),
      minTimeLeftInFrameForNonBatchedOperationMs);
  }

  @Deprecated
  public UIManagerBridgeModule(
    ReactApplicationContext reactContext,
    UIManagerModule.ViewManagerResolver viewManagerResolver,
    UIImplementationProvider uiImplementationProvider,
    int minTimeLeftInFrameForNonBatchedOperationMs) {
    super(reactContext);
    mDelegate = new UIManagerImpl(reactContext, viewManagerResolver,
      minTimeLeftInFrameForNonBatchedOperationMs) {
      @Override
      public ReactApplicationContext getReactApplicationContext() {
        return UIManagerBridgeModule.this.getReactApplicationContext();
      }

      @Override
      public UIManagerModule asUIManagerModule() {
        return UIManagerBridgeModule.this;
      }
    };
  }

  @Deprecated
  public UIManagerBridgeModule(
    ReactApplicationContext reactContext,
    List<ViewManager> viewManagersList,
    UIImplementationProvider uiImplementationProvider,
    int minTimeLeftInFrameForNonBatchedOperationMs) {
    super(reactContext);
    mDelegate = new UIManagerImpl(
      reactContext,
      viewManagersList,
      new UIImplementationProvider(),
      minTimeLeftInFrameForNonBatchedOperationMs) {
      @Override
      public ReactApplicationContext getReactApplicationContext() {
        return UIManagerBridgeModule.this.getReactApplicationContext();
      }

      @Override
      public UIManagerModule asUIManagerModule() {
        return UIManagerBridgeModule.this;
      }
    };
  }

  @Override
  public UIImplementation getUIImplementation() {
    return mDelegate.getUIImplementation();
  }

  @NonNull
  @Override
  public String getName() {
    return mDelegate.getName();
  }

  @Nullable
  @Override
  public Map<String, Object> getConstants() {
    return mDelegate.getConstants();
  }

  @Override
  public void initialize() {
    mDelegate.initialize();
  }

  @Override
  public WritableMap lazilyLoadView(String name) {
    return mDelegate.lazilyLoadView(name);
  }

  @Override
  public void onCatalystInstanceDestroy() {
    mDelegate.onCatalystInstanceDestroy();
  }

  @Deprecated
  @Override
  public ViewManagerRegistry getViewManagerRegistry_DO_NOT_USE() {
    return mDelegate.getViewManagerRegistry_DO_NOT_USE();
  }

  @Deprecated
  @Override
  public void preComputeConstantsForViewManager(List<String> viewManagerNames) {
    mDelegate.preComputeConstantsForViewManager(viewManagerNames);
  }

  @Nullable
  @ReactMethod(isBlockingSynchronousMethod = true)
  @Override
  public WritableMap getConstantsForViewManager(
    String viewManagerName) {
    return mDelegate.getConstantsForViewManager(viewManagerName);
  }

  @ReactMethod(isBlockingSynchronousMethod = true)
  @Override
  public WritableMap getDefaultEventTypes() {
    return mDelegate.getDefaultEventTypes();
  }

  @Override
  public UIManagerModule.CustomEventNamesResolver getDirectEventNamesResolver() {
    return mDelegate.getDirectEventNamesResolver();
  }

  @Override
  public void profileNextBatch() {
    mDelegate.profileNextBatch();
  }

  @Override
  public Map<String, Long> getPerformanceCounters() {
    return mDelegate.getPerformanceCounters();
  }

  @Override
  public <T extends View> int addRootView(T rootView) {
    return mDelegate.addRootView(rootView);
  }

  @Override
  public void synchronouslyUpdateViewOnUIThread(int tag, ReadableMap props) {
    mDelegate.synchronouslyUpdateViewOnUIThread(tag, props);
  }

  @Override
  public <T extends View> int addRootView(T rootView,
    WritableMap initialProps,
    @Nullable String initialUITemplate) {
    return mDelegate.addRootView(rootView, initialProps, initialUITemplate);
  }

  @ReactMethod
  @Override
  public void removeRootView(int rootViewTag) {
    mDelegate.removeRootView(rootViewTag);
  }

  @Override
  public void updateNodeSize(int nodeViewTag, int newWidth, int newHeight) {
    mDelegate.updateNodeSize(nodeViewTag, newWidth, newHeight);
  }

  @Override
  public void setViewLocalData(int tag, Object data) {
    mDelegate.setViewLocalData(tag, data);
  }

  @ReactMethod
  @Override
  public void createView(int tag, String className, int rootViewTag,
    ReadableMap props) {
    mDelegate.createView(tag, className, rootViewTag, props);
  }

  @ReactMethod
  @Override
  public void updateView(int tag, String className,
    ReadableMap props) {
    mDelegate.updateView(tag, className, props);
  }

  @ReactMethod
  @Override
  public void manageChildren(int viewTag,
    @Nullable ReadableArray moveFrom,
    @Nullable ReadableArray moveTo,
    @Nullable ReadableArray addChildTags,
    @Nullable ReadableArray addAtIndices,
    @Nullable ReadableArray removeFrom) {
    mDelegate.manageChildren(viewTag, moveFrom, moveTo, addChildTags, addAtIndices, removeFrom);
  }

  @ReactMethod
  @Override
  public void setChildren(int viewTag, ReadableArray childrenTags) {
    mDelegate.setChildren(viewTag, childrenTags);
  }

  @ReactMethod
  @Deprecated
  @Override
  public void replaceExistingNonRootView(int oldTag, int newTag) {
    mDelegate.replaceExistingNonRootView(oldTag, newTag);
  }

  @ReactMethod
  @Deprecated
  @Override
  public void removeSubviewsFromContainerWithID(int containerTag) {
    mDelegate.removeSubviewsFromContainerWithID(containerTag);
  }

  @ReactMethod
  @Override
  public void measure(int reactTag, Callback callback) {
    mDelegate.measure(reactTag, callback);
  }

  @ReactMethod
  @Override
  public void measureInWindow(int reactTag, Callback callback) {
    mDelegate.measureInWindow(reactTag, callback);
  }

  @ReactMethod
  @Override
  public void measureLayout(int tag, int ancestorTag,
    Callback errorCallback,
    Callback successCallback) {
    mDelegate.measureLayout(tag, ancestorTag, errorCallback, successCallback);
  }

  @ReactMethod
  @Deprecated
  @Override
  public void measureLayoutRelativeToParent(int tag, Callback errorCallback,
    Callback successCallback) {
    mDelegate.measureLayoutRelativeToParent(tag, errorCallback, successCallback);
  }

  @ReactMethod
  @Override
  public void findSubviewIn(int reactTag, ReadableArray point,
    Callback callback) {
    mDelegate.findSubviewIn(reactTag, point, callback);
  }

  @ReactMethod
  @Deprecated
  @Override
  public void viewIsDescendantOf(int reactTag, int ancestorReactTag,
    Callback callback) {
    mDelegate.viewIsDescendantOf(reactTag, ancestorReactTag, callback);
  }

  @ReactMethod
  @Override
  public void setJSResponder(int reactTag, boolean blockNativeResponder) {
    mDelegate.setJSResponder(reactTag, blockNativeResponder);
  }

  @ReactMethod
  @Override
  public void clearJSResponder() {
    mDelegate.clearJSResponder();
  }

  @ReactMethod
  @Override
  public void dispatchViewManagerCommand(int reactTag, int commandId,
    @Nullable ReadableArray commandArgs) {
    mDelegate.dispatchViewManagerCommand(reactTag, commandId, commandArgs);
  }

  @ReactMethod
  public void dispatchViewManagerCommand(
      int reactTag, Dynamic commandId, @Nullable ReadableArray commandArgs) {
    mDelegate.dispatchViewManagerCommand(reactTag, commandId, commandArgs);
  }

  @Override
  @Deprecated
  public void dispatchCommand(int reactTag, int commandId,
    @Nullable ReadableArray commandArgs) {
    mDelegate.dispatchCommand(reactTag, commandId, commandArgs);
  }

  @Override
  public void dispatchCommand(int reactTag, String commandId,
    @Nullable ReadableArray commandArgs) {
    mDelegate.dispatchCommand(reactTag, commandId, commandArgs);
  }

  @ReactMethod
  @Deprecated
  @Override
  public void playTouchSound() {
    mDelegate.playTouchSound();
  }

  @ReactMethod
  @Override
  public void dispatchViewManagerStringCommand(Double reactTag, String commandID,
    ReadableArray commandArgs) {
    mDelegate.dispatchViewManagerStringCommand(reactTag, commandID, commandArgs);
  }

  @ReactMethod
  @Override
  public void showPopupMenu(int reactTag, ReadableArray items,
    Callback error, Callback success) {
    mDelegate.showPopupMenu(reactTag, items, error, success);
  }

  @ReactMethod
  @Override
  public void dismissPopupMenu() {
    mDelegate.dismissPopupMenu();
  }

  @ReactMethod
  @Override
  public void setLayoutAnimationEnabledExperimental(boolean enabled) {
    mDelegate.setLayoutAnimationEnabledExperimental(enabled);
  }

  @ReactMethod
  @Override
  public void configureNextLayoutAnimation(ReadableMap config,
    Callback success, Callback error) {
    mDelegate.configureNextLayoutAnimation(config, success, error);
  }

  @ReactMethod
  @Override
  public void onBatchComplete() {
    mDelegate.onBatchComplete();
  }

  @Override
  public void setViewHierarchyUpdateDebugListener(@Nullable
    NotThreadSafeViewHierarchyUpdateDebugListener listener) {
    mDelegate.setViewHierarchyUpdateDebugListener(listener);
  }

  @Override
  public EventDispatcher getEventDispatcher() {
    return mDelegate.getEventDispatcher();
  }

  @ReactMethod
  @Override
  public void sendAccessibilityEvent(int tag, int eventType) {
    mDelegate.sendAccessibilityEvent(tag, eventType);
  }

  @Override
  public void setAllowImmediateUIOperationExecution(boolean flag) {
    mDelegate.setAllowImmediateUIOperationExecution(flag);
  }

  @Override
  public void addUIBlock(UIBlock block) {
    mDelegate.addUIBlock(block);
  }

  @Override
  public void prependUIBlock(UIBlock block) {
    mDelegate.prependUIBlock(block);
  }

  @Override
  public void addUIManagerListener(UIManagerModuleListener listener) {
    mDelegate.addUIManagerListener(listener);
  }

  @Override
  public void removeUIManagerListener(UIManagerModuleListener listener) {
    mDelegate.removeUIManagerListener(listener);
  }

  @Override
  public int resolveRootTagFromReactTag(int reactTag) {
    return mDelegate.resolveRootTagFromReactTag(reactTag);
  }

  @Override
  public void invalidateNodeLayout(int tag) {
    mDelegate.invalidateNodeLayout(tag);
  }

  @Override
  public void updateRootLayoutSpecs(int rootViewTag, int widthMeasureSpec,
    int heightMeasureSpec) {
    mDelegate.updateRootLayoutSpecs(rootViewTag, widthMeasureSpec, heightMeasureSpec);
  }

  @Override
  public View resolveView(int tag) {
    return mDelegate.resolveView(tag);
  }

  public UIManagerModule asUIManagerModule() {
    return mDelegate.asUIManagerModule();
  }

  @Override
  public boolean canOverrideExistingModule() {
    return mDelegate.canOverrideExistingModule();
  }

  @Override
  public boolean hasConstants() {
    return mDelegate.hasConstants();
  }

  @Override
  public void invalidate() {
    mDelegate.invalidate();
  }
}
