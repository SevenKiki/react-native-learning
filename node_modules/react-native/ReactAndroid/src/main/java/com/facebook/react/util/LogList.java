package com.facebook.react.util;

import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

public class LogList<T> implements List<T> {
  private final List<T> mDelegate;

  public LogList(List<T> delegate) {
    mDelegate = delegate;
    Log.e("list", "construct " + Integer.toHexString(System.identityHashCode(mDelegate)) + " " + Thread.currentThread().getName()+"@"+Integer.toHexString(System.identityHashCode(Thread.currentThread())));
  }

  @Override
  public int size() {
    return mDelegate.size();
  }

  @Override
  public boolean isEmpty() {
    return mDelegate.isEmpty();
  }

  @Override
  public boolean contains(@Nullable Object o) {
    return mDelegate.contains(o);
  }

  @NonNull
  @Override
  public Iterator<T> iterator() {
    return new LogIterator<>(mDelegate.iterator());
  }

  @Nullable
  @Override
  public Object[] toArray() {
    return mDelegate.toArray();
  }

  @Override
  public <T1> T1[] toArray(@Nullable T1[] a) {
    return mDelegate.toArray(a);
  }

  @Override
  public boolean add(T t) {
    Log
      .e("list", "add " + Integer.toHexString(System.identityHashCode(mDelegate)) + " " + Thread.currentThread().getName()+"@"+Integer.toHexString(System.identityHashCode(Thread.currentThread())));
    return mDelegate.add(t);
  }

  @Override
  public boolean remove(@Nullable Object o) {
    Log.e("list", "remove " + Integer.toHexString(System.identityHashCode(mDelegate)) + " " + Thread.currentThread().getName()+"@"+Integer.toHexString(System.identityHashCode(Thread.currentThread())));
    return mDelegate.remove(o);
  }

  @Override
  public boolean containsAll(@NonNull Collection<?> c) {
    return mDelegate.containsAll(c);
  }

  @Override
  public boolean addAll(@NonNull Collection<? extends T> c) {
    Log.e("list", "addall " + Integer.toHexString(System.identityHashCode(mDelegate)) + " " + Thread.currentThread().getName()+"@"+Integer.toHexString(System.identityHashCode(Thread.currentThread())));
    return mDelegate.addAll(c);
  }

  @Override
  public boolean addAll(int index, @NonNull Collection<? extends T> c) {
    Log.e("list", "addall " + Integer.toHexString(System.identityHashCode(mDelegate)) + " " + Thread.currentThread().getName()+"@"+Integer.toHexString(System.identityHashCode(Thread.currentThread())));
    return mDelegate.addAll(index, c);
  }

  @Override
  public boolean removeAll(@NonNull Collection<?> c) {
    Log.e("list", "removeAll " + Integer.toHexString(System.identityHashCode(mDelegate)) + " " + Thread.currentThread().getName()+"@"+Integer.toHexString(System.identityHashCode(Thread.currentThread())));
    return mDelegate.removeAll(c);
  }

  @Override
  public boolean retainAll(@NonNull Collection<?> c) {
    return mDelegate.retainAll(c);
  }

  @Override
  public void clear() {
    Log.e("list", "clear " + Integer.toHexString(System.identityHashCode(mDelegate)) + " " + Thread.currentThread().getName()+"@"+Integer.toHexString(System.identityHashCode(Thread.currentThread())));
    mDelegate.clear();
  }

  @Override
  public boolean equals(@Nullable Object o) {
    return mDelegate.equals(o);
  }

  @Override
  public int hashCode() {
    return mDelegate.hashCode();
  }

  @Override
  public T get(int index) {
    return mDelegate.get(index);
  }

  @Override
  public T set(int index, T element) {
    Log
      .e("list", "set " + Integer.toHexString(System.identityHashCode(mDelegate)) + " " + Thread.currentThread().getName()+"@"+Integer.toHexString(System.identityHashCode(Thread.currentThread())));
    return mDelegate.set(index, element);
  }

  @Override
  public void add(int index, T element) {
    Log
      .e("list", "add " + Integer.toHexString(System.identityHashCode(mDelegate)) + " " + Thread.currentThread().getName()+"@"+Integer.toHexString(System.identityHashCode(Thread.currentThread())));
    mDelegate.add(index, element);
  }

  @Override
  public T remove(int index) {
    Log.e("list", "remove " + Integer.toHexString(System.identityHashCode(mDelegate)) + " " + Thread.currentThread().getName()+"@"+Integer.toHexString(System.identityHashCode(Thread.currentThread())));
    return mDelegate.remove(index);
  }

  @Override
  public int indexOf(@Nullable Object o) {
    return mDelegate.indexOf(o);
  }

  @Override
  public int lastIndexOf(@Nullable Object o) {
    return mDelegate.lastIndexOf(o);
  }

  @NonNull
  @Override
  public ListIterator<T> listIterator() {
    return new LogListIterator<>(mDelegate.listIterator());
  }

  @NonNull
  @Override
  public ListIterator<T> listIterator(int index) {
    return new LogListIterator<>(mDelegate.listIterator(index));
  }

  @NonNull
  @Override
  public List<T> subList(int fromIndex, int toIndex) {
    return new LogList<>(mDelegate.subList(fromIndex, toIndex));
  }

  @Override
  public String toString() {
    return Integer.toHexString(System.identityHashCode(mDelegate)) + " " + Thread.currentThread().getName()+"@"+Integer.toHexString(System.identityHashCode(Thread.currentThread()));
  }

  private final class LogIterator<T> implements Iterator<T> {
    private final Iterator<T> mDelegate;

    LogIterator(Iterator<T> delegate) {
      mDelegate = delegate;
    }

    @Override
    public boolean hasNext() {
      return mDelegate.hasNext();
    }

    @Override
    public T next() {
      try {
        return mDelegate.next();
      } catch (ConcurrentModificationException e) {
        Log
          .e("list", "ite-cme " + LogList.this.toString() + " " + Thread.currentThread().getName()+"@"+Integer.toHexString(System.identityHashCode(Thread.currentThread())));
        throw e;
      }
    }

    @Override
    public void remove() {
      Log.e("list", "ite-remove " + LogList.this.toString());
      mDelegate.remove();
    }
  }

  private final class LogListIterator<T> implements ListIterator<T> {
    private final ListIterator<T> mDelegate;

    LogListIterator(ListIterator<T> delegate) {
      mDelegate = delegate;
    }

    @Override
    public boolean hasNext() {
      return mDelegate.hasNext();
    }

    @Override
    public T next() {
      return mDelegate.next();
    }

    @Override
    public boolean hasPrevious() {
      return mDelegate.hasPrevious();
    }

    @Override
    public T previous() {
      return mDelegate.previous();
    }

    @Override
    public int nextIndex() {
      return mDelegate.nextIndex();
    }

    @Override
    public int previousIndex() {
      return mDelegate.previousIndex();
    }

    @Override
    public void remove() {
      Log.e("list", "listite-remove " + LogList.this.toString());
      mDelegate.remove();
    }

    @Override
    public void set(T t) {
      Log.e("list", "listite-set " + LogList.this.toString());
      mDelegate.set(t);
    }

    @Override
    public void add(T t) {
      Log.e("list", "listite-add " + LogList.this.toString());
      mDelegate.add(t);
    }
  }
}
