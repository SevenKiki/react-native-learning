//*** licence placeholder ***//

package com.facebook.react.tests.diskcache;

import static com.facebook.react.tests.diskcache.DiskCacheUtils.M;
import static com.facebook.react.tests.diskcache.DiskCacheUtils.endTrace;
import static com.facebook.react.tests.diskcache.DiskCacheUtils.startTrace;

import android.content.Context;
import androidx.test.InstrumentationRegistry;
import androidx.test.runner.AndroidJUnit4;
import com.facebook.imagepipeline.memory.BufferMemoryChunk;
import com.facebook.imagepipeline.memory.MemoryChunk;
import com.facebook.imagepipeline.memory.NativeMemoryChunk;
import com.facebook.soloader.SoLoader;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(AndroidJUnit4.class)
public class BufferChunkTest {
  private final static int TEST_SIZE = 10 * M;
  private List<ByteBuffer> mFixBuffer = new ArrayList<>();
  private ByteBuffer mReadBuffer = ByteBuffer.allocate(TEST_SIZE);

  @Before
  public void setup() {
    Context context = InstrumentationRegistry.getContext();
    SoLoader.init(context, false);
    for (int i = 0; i < 10; ++i) {
      mFixBuffer.add(DiskCacheUtils.createRandomBuffer(TEST_SIZE));
    }
  }

  @Test
  public void memoryChunk() {
    long start = startTrace();
    MemoryChunk memoryChunk = createMemoryChunk(false);
    for (int i = 0; i < 10; ++i) {
      memoryChunk.write(0, mFixBuffer.get(i).array(), 0, TEST_SIZE);
      memoryChunk.read(0, mReadBuffer.array(), 0, TEST_SIZE);
      mReadBuffer.flip();
    }
    memoryChunk.close();
    endTrace("memory chunk", start);
  }

  @Test
  public void nativeChunk() {
    long start = startTrace();
    MemoryChunk memoryChunk = createMemoryChunk(true);
    for (int i = 0; i < 10; ++i) {
      memoryChunk.write(0, mFixBuffer.get(i).array(), 0, TEST_SIZE);
      memoryChunk.read(0, mReadBuffer.array(), 0, TEST_SIZE);
      mReadBuffer.flip();
    }
    memoryChunk.close();
    endTrace("native chunk", start);
  }

  private MemoryChunk createMemoryChunk(boolean isNative) {
    return isNative ? new NativeMemoryChunk(TEST_SIZE) : new BufferMemoryChunk(TEST_SIZE);
  }

}
