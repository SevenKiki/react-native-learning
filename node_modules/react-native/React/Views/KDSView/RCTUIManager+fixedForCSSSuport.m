//
//  RCTUIManager+fixedForCSSSuport.m
//  React-Core
//
//  Created by joyo on 2021/8/24.
//

#import "RCTUIManager+fixedForCSSSuport.h"
#import "RCTShadowView.h"
#import "RCTRootShadowView.h"

@implementation RCTUIManager (fixedForCSSSuport)

// setChildren: 根据当前容器的fixed，创建虚拟节点并替换
- (NSArray<NSNumber *> *)replaceFixedWithVirtualViewToContainer:(NSNumber *)containerTag
                                                      reactTags:(NSArray<NSNumber *> *)reactTags
                                             shadowViewRegistry:(NSDictionary<NSNumber *, id<RCTComponent>> *)_shadowViewRegistry
{
    if (!_shadowViewRegistry || !containerTag || !reactTags) {
        return [NSArray new];
    }
    NSMutableArray<NSNumber *> *replaceFixedChildrenTags = [[NSMutableArray alloc] init];
    RCTShadowView *containerView = _shadowViewRegistry[containerTag];
    for (NSInteger i = 0; i < reactTags.count; i++) {
        RCTShadowView *shadowView = _shadowViewRegistry[reactTags[i]];
        NSNumber *rootTag = shadowView.rootView.reactTag;
        
        if (containerView && shadowView && shadowView.isReactRootView == NO && shadowView.isFixedNode) {
            // 创建空的虚拟节点代替被移除的fixed节点的位置
            NSNumber *virtualTag = @(-[reactTags[i] integerValue]);
            [self createVirtualChild:virtualTag className:shadowView.viewName rootTag:rootTag shadowViewRegistry:_shadowViewRegistry];
            [self interceptFixedChildToRootView:shadowView fromContainerView:containerView];
            [replaceFixedChildrenTags addObject:virtualTag];
        } else {
            [replaceFixedChildrenTags addObject:reactTags[i]];
        }
    }
    return [replaceFixedChildrenTags copy];
}

// 判断是否需要删除关联的Fixed节点，有可能已经移出RootNode
- (BOOL)shouldRemoveBindingFixedChild:(NSNumber *)virtualChildTag
                   shadowViewRegistry:(NSDictionary<NSNumber *, id<RCTComponent>> *)_shadowViewRegistry
{
    RCTShadowView *virtualChild = _shadowViewRegistry[virtualChildTag];
    if (!virtualChild || !_shadowViewRegistry || ![virtualChild isKindOfClass:[RCTShadowView class]]) {
        return NO;
    }
    if ([virtualChildTag integerValue] > 0 || !virtualChild.isBindingVirtualNode) {
        return NO;
    }
    return YES;
}

// 创建空的虚拟节点(其reactTag为负数)
- (void)createVirtualChild:(NSNumber *)reactTag
                 className:(NSString *)className
                   rootTag:(NSNumber *)rootTag
        shadowViewRegistry:(NSDictionary<NSNumber *, id<RCTComponent>> *)_shadowViewRegistry
{
    if (!className || !reactTag || !rootTag || !_shadowViewRegistry || [reactTag integerValue] > 0) {
        return;
    }
    [self createView:reactTag viewName:className rootTag:rootTag props:[NSDictionary new]];
    RCTShadowView *virtualNodeToAdd = _shadowViewRegistry[reactTag];
    [virtualNodeToAdd setDisplay:YGDisplayNone];
    virtualNodeToAdd.isBindingVirtualNode = YES;
}

// 删除节点保存移出的fixed节点tag
- (void)removeMovedOutFixedChildTag:(RCTShadowView *)containerView removeTag:(NSNumber *)removeTag
{
    if (!containerView || ![containerView isKindOfClass:[RCTShadowView class]]) {
        return;
    }
    
    NSArray<NSNumber *> *fixedChildrenTags = [containerView mGetMovedOutFixedChildTags];
    if (fixedChildrenTags == nil || [fixedChildrenTags count] <= 1) {
        [containerView resetMovedOutFixedChildTags:nil];
        return;
    }
    
    NSMutableArray<NSNumber *> *remainChildrenTags = [NSMutableArray new];
    for (NSInteger i = 0; i < fixedChildrenTags.count; i++) {
        NSNumber *fixedTag = fixedChildrenTags[i];
        if (fixedTag && [fixedTag integerValue] != [removeTag integerValue]) {
            [remainChildrenTags addObject:fixedTag];
        }
    }
    
    if ([remainChildrenTags count] == 0) {
        [containerView resetMovedOutFixedChildTags:nil];
    } else {
        [containerView resetMovedOutFixedChildTags:remainChildrenTags];
    }
}

// 父亲移除时同步移除曾移到RootView下的fixed节点
- (void)removeAllFixedChildrenRecursive:(RCTShadowView *)shadowView
                     shadowViewRegistry:(NSDictionary<NSNumber *, id<RCTComponent>> *)_shadowViewRegistry
{
    if (shadowView == nil || !_shadowViewRegistry || ![shadowView isKindOfClass:[RCTShadowView class]]) {
        return;
    }
    NSArray<NSNumber *> *fixedChildrenTags = [shadowView mGetMovedOutFixedChildTags];
    if (fixedChildrenTags == nil || [fixedChildrenTags count] <= 0) {
        return;
    }
    
    RCTShadowView *rootNode = nil;
    NSMutableArray<NSNumber *> *removeChildrenIndex = nil;
    NSNumber *rootTag = @(0);
    for (NSInteger i = 0; i < fixedChildrenTags.count; i++) {
        RCTShadowView *fixedNodeToRemove =_shadowViewRegistry[fixedChildrenTags[i]];
        
        if (fixedNodeToRemove == nil) {
            continue;
        }
        
        if (rootNode == nil) {
            rootTag = fixedNodeToRemove.rootView.reactTag;
            rootNode = _shadowViewRegistry[rootTag];
        }
        
        if (!removeChildrenIndex) {
            removeChildrenIndex = [NSMutableArray new];
        }
        
        BOOL hasFixedNodeInRoot = [rootNode.reactSubviews containsObject:fixedNodeToRemove];
        NSInteger index = [rootNode.reactSubviews indexOfObject:fixedNodeToRemove];
        
        if (hasFixedNodeInRoot) {
            [removeChildrenIndex addObject:@(index)];
        }
    }
    
    if (rootTag && removeChildrenIndex && [removeChildrenIndex count]) {
        // remove operation
        [shadowView resetMovedOutFixedChildTags:nil];
        // 删除所有子fixed节点
        [self manageChildren:rootTag
             moveFromIndices:nil
               moveToIndices:nil
           addChildReactTags:nil
                addAtIndices:nil
             removeAtIndices:removeChildrenIndex];
    }
}

// 虚拟节点移除时，同步移除关联的fixed节点，通常是通过index来删除的场景
- (void)removeFixedChildRecursive:(RCTShadowView *)virtualNode
               shadowViewRegistry:(NSDictionary<NSNumber *, id<RCTComponent>> *)_shadowViewRegistry
{
    if (virtualNode == nil ||
        !_shadowViewRegistry ||
        ![virtualNode isKindOfClass:[RCTShadowView class]] ||
        [virtualNode.reactTag integerValue] > 0 ||
        ![self shouldRemoveBindingFixedChild:virtualNode.reactTag shadowViewRegistry:_shadowViewRegistry])
    {
        return;
    }
    
    NSNumber *fixedNodeTag = @(-[virtualNode.reactTag integerValue]);
    RCTShadowView *fixedNodeToRemove = _shadowViewRegistry[fixedNodeTag];
    if (fixedNodeToRemove == nil) {
        return;
    }
    
    NSNumber *rootTag = virtualNode.rootView.reactTag;
    RCTShadowView *rootNode = _shadowViewRegistry[rootTag];
    NSMutableArray<NSNumber *> *removeChildrenIndex = [NSMutableArray new];
    
    BOOL hasFixedChildInRoot = [rootNode.reactSubviews containsObject:fixedNodeToRemove];
    NSInteger index = [rootNode.reactSubviews indexOfObject:fixedNodeToRemove];
    if (hasFixedChildInRoot && index >= 0) {
        [removeChildrenIndex addObject:@(index)];
    }
    
    if (rootTag && removeChildrenIndex && [removeChildrenIndex count]) {
        // 删除FixedChildTag
        RCTShadowView *parent = virtualNode.reactSuperview;
        if (parent) {
            [self removeMovedOutFixedChildTag:parent removeTag:fixedNodeToRemove.reactTag];
        }
        [self manageChildren:rootTag
             moveFromIndices:nil
               moveToIndices:nil
           addChildReactTags:nil
                addAtIndices:nil
             removeAtIndices:removeChildrenIndex];
    }
}

// 把当前View作为fixed节点，并插入到 rootView 节点最上面(在rootView的视图顶部插入)
- (void)interceptFixedChildToRootView:(RCTShadowView *)child
                    fromContainerView:(RCTShadowView *)containerView
{
    if (child == nil || containerView == nil || child.isReactRootView) {
        return;
    }
    RCTAssert([child.reactTag integerValue] > 0, @"moveFixedChildToRootView child.reactTag is %@", child.reactTag);
    [containerView addMovedOutFixedChildTag:child.reactTag];
    child.originalParentTag = containerView.reactTag;
    
    RCTShadowView *rootNode = child.rootView;
    NSNumber *rootTag = rootNode.reactTag;
    
    NSMutableArray<NSNumber *> *fixedChildrenTags = [NSMutableArray new];
    NSMutableArray<NSNumber *> *fixedChildIndex = [NSMutableArray new];
    if (child.reactTag) {
        [fixedChildrenTags addObject:child.reactTag];
    }
    // 插入视图层级最外侧
    [fixedChildIndex addObject:@(0)];
    
    if(fixedChildrenTags && fixedChildrenTags.count && fixedChildIndex && fixedChildIndex.count) {
        // 插入视图层级最外侧(index 0的位置)
        [self manageChildren:rootTag
             moveFromIndices:nil
               moveToIndices:nil
           addChildReactTags:fixedChildrenTags
                addAtIndices:fixedChildIndex
             removeAtIndices:nil];
    }
}

- (id<RCTComponent>)interceptFixedChildToRootView:(id<RCTComponent>)view
                                         registry:(NSMutableDictionary<NSNumber *, RCTShadowView *> *)registry
{
    if (!view || ![view isKindOfClass:[RCTShadowView class]] || !registry) {
        return nil;
    }
    RCTShadowView *shadowView = (RCTShadowView *)view;
    RCTShadowView *containerView = shadowView.reactSuperview;
    NSNumber *rootTag = shadowView.rootView.reactTag;
    NSNumber *reactTag = shadowView.reactTag;
    if (containerView && shadowView && shadowView.isReactRootView == NO && shadowView.isFixedNode) {
        // 创建空的虚拟节点代替被移除的fixed节点的位置
        NSNumber *virtualTag = @(-[reactTag integerValue]);
        [self createVirtualChild:virtualTag className:shadowView.viewName rootTag:rootTag shadowViewRegistry:registry];
        [self interceptFixedChildToRootView:shadowView fromContainerView:containerView];
        return registry[virtualTag];
    }
    return view;
}

// 先删除originalParent下虚拟空节点，再从rootView移动到originalParent下
- (void)moveFixedChildFromRootViewToOriginalParent:(RCTShadowView *)fixedChild
                                shadowViewRegistry:(NSDictionary<NSNumber *, id<RCTComponent>> *)_shadowViewRegistry
{
    if (!fixedChild || !_shadowViewRegistry || fixedChild.isReactRootView || !fixedChild.reactSuperview || !fixedChild.reactSuperview.isReactRootView) {
        return;
    }
    
    RCTShadowView *rootNode = fixedChild.rootView;
    NSNumber *reactTag = fixedChild.reactTag;
    NSNumber *fixedVirtualTag = @(-[reactTag integerValue]);
    RCTShadowView *fixedVirtualChild = _shadowViewRegistry[fixedVirtualTag];
    RCTShadowView *originalParent = _shadowViewRegistry[fixedChild.originalParentTag];
    NSInteger indexInOriginalParent = [originalParent.reactSubviews indexOfObject:fixedVirtualChild];
    fixedVirtualChild.isBindingVirtualNode = NO;
    
    NSAssert([rootNode.reactSubviews containsObject:fixedChild], @"moveFixedChildFromRootViewToOriginalParent: rootNode should has fixedChild");
    
    // 移除根视图下的fixed节点
    [rootNode removeReactSubview:fixedChild];
    // 移除原父亲节点下的虚拟节点
    [originalParent removeReactSubview:fixedVirtualChild];
    // 插入fixed节点到原父亲节点下
    [originalParent insertReactSubview:fixedChild atIndex:indexInOriginalParent];
    [self addUIBlock:^(RCTUIManager *uiManager, NSDictionary<NSNumber *,UIView *> *viewRegistry) {
        UIView *rootView = viewRegistry[rootNode.reactTag];
        UIView *parent = viewRegistry[originalParent.reactTag];
        UIView *virtualChild = viewRegistry[fixedVirtualChild.reactTag];
        UIView *child = viewRegistry[reactTag];
        // 移除根视图下的fixed节点
        [rootView removeReactSubview:child];
        if ([parent.reactSubviews containsObject:virtualChild]) {
            // 移除原父亲节点下的虚拟节点
            [parent removeReactSubview:virtualChild];
        }
        // 插入fixed节点到原父亲节点下
        [parent insertReactSubview:child atIndex:indexInOriginalParent];
    }];
    
    [self _shadowViewDidReceiveUpdatedChildren:_shadowViewRegistry[originalParent.reactTag]];
    [self _shadowViewDidReceiveUpdatedChildren:_shadowViewRegistry[rootNode.reactTag]];
    
    //清除父节点中记录的flag
    if (originalParent) {
        [self removeMovedOutFixedChildTag:originalParent removeTag:reactTag];
    }
}

// 先创建虚拟空节点并插入到originalParent下，再从originalParent下把fixed节点移动到rootView下
- (void)moveFixedChildFromParentToRootView:(RCTShadowView *)child
                                    parent:(RCTShadowView *)parent
                        shadowViewRegistry:(NSDictionary<NSNumber *, id<RCTComponent>> *)_shadowViewRegistry
{
    if (child == nil || !_shadowViewRegistry || child.isReactRootView || parent == nil) {
        return;
    }
    
    NSNumber *rootTag = child.rootView.reactTag;
    RCTShadowView *rootNode = _shadowViewRegistry[rootTag];
    if (rootNode == nil) {
        return;
    }
    NSNumber *virtualChildTag = @(-[child.reactTag integerValue]);
    
    // 创建虚拟占位节点
    [self createVirtualChild:virtualChildTag className:child.viewName rootTag:rootTag shadowViewRegistry:_shadowViewRegistry];
    [parent addMovedOutFixedChildTag:child.reactTag];
    child.originalParentTag = parent.reactTag;
    
    // 插入虚拟节点
    NSMutableArray<NSNumber *> *virtualChildTags = [NSMutableArray new];
    NSMutableArray<NSNumber *> *virtualChildIndex = [NSMutableArray new];
    if (virtualChildTag) {
        [virtualChildTags addObject:virtualChildTag];
    }
    BOOL hasChildInParent = [parent.reactSubviews containsObject:child];
    NSInteger index = [parent.reactSubviews indexOfObject:child];
    if (hasChildInParent && index >= 0) {
        [virtualChildIndex addObject:@(index)];
    }
    
    NSNumber *originParentTag = child.reactSuperview.reactTag;
    
    // 移除parent下的fixedNode
    NSNumber *parentTag = parent.reactTag;
    NSNumber *childTag = child.reactTag;
    [parent removeReactSubview:child];
    [self addUIBlock:^(RCTUIManager *uiManager, NSDictionary<NSNumber *,UIView *> *viewRegistry) {
        UIView *parent = viewRegistry[parentTag];
        UIView *child = viewRegistry[childTag];
        [parent removeReactSubview:child];
    }];
    
    // 添加虚拟节点到原fixedNode位置
    [self manageChildren:originParentTag
         moveFromIndices:nil
           moveToIndices:nil
       addChildReactTags:virtualChildTags
            addAtIndices:virtualChildIndex
         removeAtIndices:nil];
    
    NSInteger childCount = [rootNode.reactSubviews count];
    
    // 将fixed节点移到RootView下
    [self manageChildren:rootTag
         moveFromIndices:nil
           moveToIndices:nil
       addChildReactTags:@[child.reactTag]
            addAtIndices:@[@(childCount)]
         removeAtIndices:nil];
}

@end
