"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encrypt = exports.EncryptType = void 0;
const xor_1 = require("./operations/xor");
const md5_1 = __importDefault(require("md5"));
const adm_zip_1 = __importDefault(require("adm-zip"));
const fs = __importStar(require("fs-extra"));
const path = __importStar(require("path"));
var EncryptType;
(function (EncryptType) {
    EncryptType[EncryptType["XOR"] = 1] = "XOR";
})(EncryptType = exports.EncryptType || (exports.EncryptType = {}));
const encrypt = (options) => {
    var _a;
    const { type = EncryptType.XOR, pngPath, bundleFileName, output, manifest = { filename: 'manifest.json' } } = options;
    const totalPngContent = fs.readFileSync(pngPath);
    // 头部图片大小
    const headerSize = 171;
    const headerBuffer = totalPngContent.slice(0, headerSize);
    const pngContent = totalPngContent.slice(headerSize);
    const zip = new adm_zip_1.default(pngContent);
    const bundleEntry = zip.getEntry(bundleFileName);
    const content = bundleEntry === null || bundleEntry === void 0 ? void 0 : bundleEntry.getData();
    if (content == null || bundleEntry == null) {
        throw new Error('未从 png 中找到 bundle 文件');
    }
    let encryptContent = null;
    switch (type) {
        case EncryptType.XOR:
            {
                encryptContent = Buffer.from((0, xor_1.encrypt)(content));
                break;
            }
    }
    if (encryptContent == null) {
        throw new Error(`未知的加密类型: ${type}`);
    }
    zip.updateFile(bundleEntry, encryptContent);
    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
    if (output === null || output === void 0 ? void 0 : output.bundleFileName) {
        bundleEntry.entryName = output.bundleFileName;
    }
    const { filename: manifestFileName = 'manifest.json' } = manifest;
    const manifestEntry = zip.getEntry(manifestFileName);
    if (manifestEntry == null) {
        throw new Error(`未找到 manifest 文件: ${manifestFileName}`);
    }
    try {
        const manifestContent = JSON.parse(manifestEntry.getData().toString());
        manifestContent[(_a = output === null || output === void 0 ? void 0 : output.bundleFileName) !== null && _a !== void 0 ? _a : bundleFileName] = (0, md5_1.default)(encryptContent);
        // 原来和现在的 bundle 文件名不一致，删除原来的
        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
        if ((output === null || output === void 0 ? void 0 : output.bundleFileName) && (output === null || output === void 0 ? void 0 : output.bundleFileName) !== bundleFileName) {
            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
            delete manifestContent[bundleFileName];
        }
        zip.updateFile(manifestEntry, Buffer.from(JSON.stringify(manifestContent, null, 2)));
    }
    catch (err) {
        throw new Error(`manifest 文件更新失败: ${manifestFileName}`);
    }
    const newPngContent = Buffer.concat([headerBuffer, zip.toBuffer()]);
    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
    if (output === null || output === void 0 ? void 0 : output.pngPath) {
        const outputPngPath = path.resolve(output.pngPath);
        fs.ensureDirSync(path.dirname(outputPngPath));
        fs.writeFileSync(outputPngPath, newPngContent);
    }
    const result = {
        md5: (0, md5_1.default)(encryptContent),
        pngSize: newPngContent.byteLength,
        pngMd5: (0, md5_1.default)(newPngContent),
        bundleSize: encryptContent.byteLength
    };
    return result;
};
exports.encrypt = encrypt;
