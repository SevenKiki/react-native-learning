/**
 * @author n1474335 [n1474335@gmail.com]
 * @copyright Crown Copyright 2016
 * @license Apache-2.0
 */

import * as utf8 from 'utf8'

/**
  * Utility functions for use in operations, the core framework and the stage.
  */
// eslint-disable-next-line @typescript-eslint/no-extraneous-class
export class Utils {
  static convertToByteArray (str: string, type: 'utf8' | 'latin1'): number[] {
    switch (type.toLowerCase()) {
      case 'utf8':
        return Utils.strToUtf8ByteArray(str)
      case 'latin1':
      default:
        return Utils.strToByteArray(str)
    }
  }

  /**
     * Converts a string to a byte array.
     * Treats the string as UTF-8 if any values are over 255.
     *
     * @param {string} str
     * @returns {byteArray}
     *
     * @example
     * // returns [72,101,108,108,111]
     * Utils.strToByteArray("Hello");
     *
     * // returns [228,189,160,229,165,189]
     * Utils.strToByteArray("你好");
     */
  static strToByteArray (str: string): number[] {
    const byteArray = new Array(str.length)
    let i = str.length; let b
    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
    while (i--) {
      b = str.charCodeAt(i)
      byteArray[i] = b
      // If any of the bytes are over 255, read as UTF-8
      if (b > 255) return Utils.strToUtf8ByteArray(str)
    }
    return byteArray
  }

  /**
 * Converts a string to a UTF-8 byte array.
 *
 * @param {string} str
 * @returns {byteArray}
 *
 * @example
 * // returns [72,101,108,108,111]
 * Utils.strToUtf8ByteArray("Hello");
 *
 * // returns [228,189,160,229,165,189]
 * Utils.strToUtf8ByteArray("你好");
 */
  static strToUtf8ByteArray (str: string): number[] {
    const utf8Str = utf8.encode(str)

    return Utils.strToByteArray(utf8Str)
  }
}
