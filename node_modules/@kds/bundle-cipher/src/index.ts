import { encrypt as xorEncrypt } from './operations/xor'
import md5 from 'md5'
import AdmZip from 'adm-zip'
import * as fs from 'fs-extra'
import * as path from 'path'

export enum EncryptType {
  XOR = 1,
}

interface EncryptOptions {
  type?: EncryptType
  pngPath: string
  bundleFileName: string
  output?: {
    pngPath?: string
    bundleFileName?: string
  }
  manifest?: {
    filename?: string
  }
}

interface EncryptResult {
  pngMd5: string
  md5: string
  pngSize: number
  bundleSize: number
}

export const encrypt = (options: EncryptOptions): EncryptResult => {
  const { type = EncryptType.XOR, pngPath, bundleFileName, output, manifest = { filename: 'manifest.json' } } = options
  const totalPngContent = fs.readFileSync(pngPath)
  // 头部图片大小
  const headerSize = 171
  const headerBuffer = totalPngContent.slice(0, headerSize)
  const pngContent = totalPngContent.slice(headerSize)
  const zip = new AdmZip(pngContent)
  const bundleEntry = zip.getEntry(bundleFileName)
  const content = bundleEntry?.getData()
  if (content == null || bundleEntry == null) {
    throw new Error('未从 png 中找到 bundle 文件')
  }
  let encryptContent: Buffer | null = null

  switch (type) {
    case EncryptType.XOR:
    {
      encryptContent = Buffer.from(xorEncrypt(content))
      break
    }
  }
  if (encryptContent == null) {
    throw new Error(`未知的加密类型: ${type}`)
  }
  zip.updateFile(bundleEntry, encryptContent)
  // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
  if (output?.bundleFileName) {
    bundleEntry.entryName = output.bundleFileName
  }

  const { filename: manifestFileName = 'manifest.json' } = manifest

  const manifestEntry = zip.getEntry(manifestFileName)

  if (manifestEntry == null) {
    throw new Error(`未找到 manifest 文件: ${manifestFileName}`)
  }

  try {
    const manifestContent = JSON.parse(manifestEntry.getData().toString())
    manifestContent[output?.bundleFileName ?? bundleFileName] = md5(encryptContent)
    // 原来和现在的 bundle 文件名不一致，删除原来的
    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
    if (output?.bundleFileName && output?.bundleFileName !== bundleFileName) {
      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
      delete manifestContent[bundleFileName]
    }
    zip.updateFile(manifestEntry, Buffer.from(JSON.stringify(manifestContent, null, 2)))
  } catch (err) {
    throw new Error(`manifest 文件更新失败: ${manifestFileName}`)
  }

  const newPngContent = Buffer.concat([headerBuffer, zip.toBuffer()])

  // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
  if (output?.pngPath) {
    const outputPngPath = path.resolve(output.pngPath)
    fs.ensureDirSync(path.dirname(outputPngPath))
    fs.writeFileSync(outputPngPath, newPngContent)
  }
  const result = {
    md5: md5(encryptContent),
    pngSize: newPngContent.byteLength,
    pngMd5: md5(newPngContent),
    bundleSize: encryptContent.byteLength
  }
  return result
}
