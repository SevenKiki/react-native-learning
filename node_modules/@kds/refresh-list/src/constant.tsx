import React, {Component} from 'react';
import {Text, StyleProp, ViewStyle} from 'react-native';

export enum PullState {
  INIT,
  FINISH,
  PULLING,
  LOADING,
  HOLDING,
}

export enum PushingState {
  INIT = 1,
  PREPARE,
  LOADING,
  COMPLETE,
}

export type SetScrollEvent = (setScrollY: (y: number) => void) => void;

export interface PullRefreshProps {
  RefreshControl?: React.ComponentClass;
  children: React.ReactNode;
  pullAnimHeight?: number;
  minPullDistance?: number;
  isContentScroll?: boolean;
  // setScrollEvent: SetScrollEvent,
  onRequest: () => void;
  updateOnPullChange?: boolean;
  isRefreshing: boolean;
  msHoldingTime?: number;
  refreshLayoutStyle?: StyleProp<ViewStyle>
  refreshControlStyle?: StyleProp<ViewStyle>
  useStateChildren?: boolean; // 是否使用this.state.children，android
}

export interface RefreshControlParams {
  moveHeight: number;
  movePercent: number;
  pullAnimHeight: number;
  minPullDistance: number;
  pullState: PullState;
}

interface DefaultRefreshControlProps {}
interface DefaultRefreshControlState {
  text: string;
}
export class DefaultRefreshControl extends Component<
  DefaultRefreshControlProps,
  DefaultRefreshControlState
> {
  constructor(props: DefaultRefreshControlProps) {
    super(props);
    this.state = {
      text: '下拉刷新',
    };
  }
  setRefreshControlParams(refreshControlParams: RefreshControlParams) {
    if (refreshControlParams.pullState === PullState.INIT) {
      this.setState({
        text: '下拉刷新',
      });
    } else if (refreshControlParams.pullState === PullState.PULLING) {
      this.setState({
        text: refreshControlParams.movePercent >= 100 ? '松开加载' : '下拉刷新',
      });
    } else if (refreshControlParams.pullState === PullState.LOADING) {
      this.setState({
        text: '拼命加载中...',
      });
    } else if (refreshControlParams.pullState === PullState.HOLDING) {
      this.setState({
        text: '加载成功',
      });
    }
  }
  render() {
    return <Text>{this.state.text}</Text>;
  }
}
export interface PullRefreshState {
  top: number;
}
