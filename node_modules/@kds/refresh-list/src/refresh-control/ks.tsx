// 先放这，之后再迁移

import React, {Component} from 'react';
import {RefreshControlParams, PullState} from '../constant';
import {KsLoading, LoadingType} from './loading/ks';
export * from './loading/ks';

interface KsRefreshControlProps {}
interface KsRefreshControlPropsState {
  animated: boolean;
  percent: number;
}
export default function getKsRefreshControl(
  type: LoadingType = LoadingType.highlight
) {
  return class KsRefreshControl extends Component<
    KsRefreshControlProps,
    KsRefreshControlPropsState
  > {
    constructor(props: KsRefreshControlProps) {
      super(props);
      this.state = {
        animated: false,
        percent: 0,
      };
    }
    setRefreshControlParams(refreshControlParams: RefreshControlParams) {
      if (refreshControlParams.pullState === PullState.PULLING) {
        this.setState({
          animated: false,
          percent:
            (Math.max(refreshControlParams.movePercent - 50, 0) / (100 - 50)) *
            100,
        });
      } else if (refreshControlParams.pullState === PullState.LOADING) {
        this.setState({
          animated: true,
        });
      } else if (refreshControlParams.pullState === PullState.HOLDING) {
        this.setState({
          animated: true,
        });
      }
    }
    render() {
      const {animated, percent} = this.state;
      return <KsLoading type={type} animated={animated} percent={percent} />;
    }
  };
}
