import React, { Component } from 'react';
import { View, StyleSheet, Animated } from 'react-native';
import {
  PullRefreshState,
  DefaultRefreshControl,
  PullState,
  PullRefreshProps,
  PushingState,
} from './constant';
// @ts-expect-error
import type { CompositeAnimation } from 'react-native/Libraries/Animated/AnimatedImplementation';
import RefreshHeader from './components/RefreshHeader.android';
import RefreshLayout from './components/RefreshLayout.android';
import { px2dip, dip2px } from './util';

interface AndroidPullRefreshState extends PullRefreshState {
  top: number;
  viewHeight: number;
  children: React.ReactNode;
}

export default class PullRefresh extends Component<
  PullRefreshProps,
  AndroidPullRefreshState
> {
  pullAnimHeight: number = 0;
  minPullDistance: number = 0;
  pan: Animated.Value;
  scrollY: number;
  isPulling: boolean;
  isRefreshing: boolean;
  animation?: CompositeAnimation;
  touching: boolean;
  pullState: PullState;
  moveHeight: number;
  movePercent: number;
  timeout?: number;
  refreshNode: any;
  refreshControl?: DefaultRefreshControl;
  nowPullState?: PushingState;

  constructor(props: PullRefreshProps) {
    super(props);
    this.pan = new Animated.Value(0);
    this.isPulling = false;
    this.scrollY = 0;
    this.isRefreshing = false;
    this.touching = false;
    this.pullState = PullState.INIT;
    this.moveHeight = 0;
    this.movePercent = 0;
    this.refreshNode = null;
    this.pullAnimHeight = props.pullAnimHeight || 0;
    this.state = {
      top: -1000,
      viewHeight: dip2px(props.pullAnimHeight || 0),
      children: props.children,
    };
  }
  renderRefreshControl() {
    const refreshControl = {
      pullAnimHeight: this.pullAnimHeight,
      minPullDistance: this.minPullDistance,
      pullState: this.pullState,
      moveHeight: this.moveHeight,
      movePercent: this.movePercent,
    };
    if (this.refreshControl) {
      this.refreshControl.setRefreshControlParams(refreshControl);
    }
  }
  setRefreshControl = (ref: DefaultRefreshControl) => {
    this.refreshControl = ref;
  };
  updatePullState(state: PullState) {
    if (this.pullState === state) {
      return;
    }
    this.pullState = state;
    this.renderRefreshControl();
  }

  shouldComponentUpdate(
    nextProps: PullRefreshProps,
    nextState: PullRefreshState
  ) {
    if (
      // @ts-ignore
      !Object.keys(nextState).every((key: never) => {
        return nextState[key] === this.state[key];
      })
    ) {
      return true;
    }
    // @ts-ignore
    const isPropsSame = Object.keys(nextProps).every((key: never) => {
      if (key === 'children') {
        return true;
      }
      return nextProps[key] === this.props[key];
    });
    return !isPropsSame;
  }

  UNSAFE_componentWillReceiveProps(nextProps: PullRefreshProps) {
    if (this.pullState === PullState.PULLING) {
      return;
    }
    if (
      nextProps.isRefreshing &&
      !this.props.isRefreshing &&
      !this.isRefreshing
    ) {
      this.startRefresh(false);
    }
    if (
      !nextProps.isRefreshing &&
      this.props.isRefreshing &&
      this.isRefreshing
    ) {
      this.updatePullState(PullState.HOLDING);
      console.log('===> holding');

      this.timeout && clearTimeout(this.timeout);
      this.timeout = setTimeout(() => {
        console.log('===> holding to finish');
        this.finishRefresh();
      }, this.props.msHoldingTime || 1000);
    }
    if (
      nextProps.children !== this.state.children &&
      (!this.nowPullState || this.nowPullState === PushingState.INIT || this.nowPullState === PushingState.COMPLETE)
    ) {
      this.setState({ children: nextProps.children });
    }
  }
  onLayout = (evt: any) => {
    if (evt.nativeEvent.layout.height !== this.pullAnimHeight) {
      this.setState({
        viewHeight: dip2px(evt.nativeEvent.layout.height),
      });
    }
    this.pullAnimHeight = this.pullAnimHeight || evt.nativeEvent.layout.height;
    this.minPullDistance = this.props.minPullDistance || this.pullAnimHeight;
  };
  _onPushingState = (evt: any) => {
    const moveHeight = px2dip(evt.nativeEvent.moveHeight);
    const state = evt.nativeEvent.state;
    this.moveHeight = moveHeight;
    this.movePercent = (moveHeight / this.pullAnimHeight) * 100;

    if (this.props.updateOnPullChange != false) {
      this.renderRefreshControl();
    }
    if (state === PushingState.LOADING && this.nowPullState !== PushingState.LOADING) {
      if (moveHeight > this.minPullDistance) {
        this.startRefresh(moveHeight > this.pullAnimHeight);
      }
    } else if (state === PushingState.PREPARE && this.nowPullState !== PushingState.PREPARE) {
      this.timeout && clearTimeout(this.timeout);
      this.updatePullState(PullState.PULLING);
    } else if (state === PushingState.INIT && this.nowPullState !== PushingState.INIT) {
      this.updatePullState(PullState.FINISH);
    }

    if (!this.nowPullState || state === PushingState.INIT || state === PushingState.COMPLETE) {
      this.setState({ children: this.props.children });
    }
    this.nowPullState = state;
  };
  setRefreshNode = (refreshNode: any) => {
    this.refreshNode = refreshNode;
  };

  finishRefresh = () => {
    this.refreshNode && this.refreshNode.finishRefresh();
    this.isRefreshing = false;
    this.updatePullState(PullState.FINISH);
  };
  startRefresh(calledFromNative: boolean = true) {
    if (!calledFromNative) {
      // 如果不是从native触发的调用，则通知native更新UI
      this.refreshNode && this.refreshNode.startRefresh();
    }
    this.updatePullState(PullState.LOADING);
    this.isRefreshing = true;
    if(calledFromNative) {
      this.props.onRequest && this.props.onRequest();
    }
  }
  render() {
    const { viewHeight } = this.state;
    const RefreshControl = this.props.RefreshControl || DefaultRefreshControl;

    return (
      <RefreshLayout
        isContentScroll={this.props.isContentScroll !== false}
        refreshable={true}
        style={[styles.refreshLayout, this.props.refreshLayoutStyle]}
        ref={this.setRefreshNode.bind(this)}>
        <RefreshHeader
          style={[
            styles.refreshHeader,
            {
              height: this.props.pullAnimHeight,
            },
            this.props.refreshControlStyle
          ]}
          viewHeight={viewHeight}
          onPushingState={this._onPushingState}>
          <View
            onLayout={this.onLayout}
            style={[
              styles.freshItem,
              {
                height: this.props.pullAnimHeight,
              },
            ]}>
            <RefreshControl ref={this.setRefreshControl} />
          </View>
        </RefreshHeader>
        {this.props.useStateChildren !== false ? this.state.children : this.props.children}
      </RefreshLayout>
    );
  }
}

const styles = StyleSheet.create({
  defaultRefreshControl: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
  },
  defaultIcon: { marginRight: 5 },
  refreshLayout: {
    flex: 1,
  },
  refreshHeader: {
    position: 'absolute',
    flex: 1,
    width: '100%',
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'transparent',
  },
  freshItem: {
    width: '100%',
    justifyContent: 'center',
    alignItems: 'center',
    flexDirection: 'row',
    flex: 1,
  },
});
