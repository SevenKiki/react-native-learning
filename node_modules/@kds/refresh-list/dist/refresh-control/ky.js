// 先放这，之后再迁移
import React, { Component } from 'react';
import { PullState } from '../constant';
import { KyLoading } from './loading/ky';
import { View, Text, StyleSheet, Animated } from 'react-native';
import { steps } from '../util';
export * from './loading/ky';
const styles = StyleSheet.create({
    success: {
        position: 'absolute',
        top: 0,
        width: 325,
        height: 25,
    },
    successWrap: {
        height: 25,
        width: 25,
        overflow: 'hidden',
    },
});
export default function getKyRefreshControl(successText = '') {
    return class KyRefreshControl extends Component {
        constructor(props) {
            super(props);
            this.successValue = new Animated.Value(0);
            this.successValueOut = this.successValue.interpolate({
                inputRange: [-301, -300, 0],
                outputRange: [-300, -300, 0],
            });
            this.state = {
                text: '下拉刷新',
                showFinish: false,
                showLoading: true,
                showText: true,
            };
        }
        setRefreshControlParams(refreshControlParams) {
            if (refreshControlParams.pullState === PullState.PULLING) {
                const nextText = refreshControlParams.movePercent >= 100 ? '松开加载' : '下拉刷新';
                const { text, showText, showFinish, showLoading } = this.state;
                if (text === nextText && showText && !showFinish && showLoading) {
                    return;
                }
                this.setState({
                    showFinish: false,
                    text: nextText,
                    showLoading: true,
                    showText: true,
                });
            }
            else if (refreshControlParams.pullState === PullState.LOADING) {
                this.setState({
                    showFinish: false,
                    showLoading: true,
                    showText: false,
                });
            }
            else if (refreshControlParams.pullState === PullState.HOLDING) {
                this.setState({
                    showFinish: true,
                    showLoading: true,
                    showText: false,
                });
                this.successValue.setValue(0);
                Animated.timing(this.successValue, {
                    toValue: -600,
                    duration: 1000,
                    useNativeDriver: true,
                    easing: steps(24),
                }).start(({ finished }) => {
                    if (finished && successText) {
                        this.setState({
                            showFinish: false,
                            showLoading: false,
                            showText: true,
                            text: successText,
                        });
                    }
                });
            }
        }
        render() {
            const { text, showText, showFinish, showLoading } = this.state;
            let loadingIcon = null;
            if (showFinish) {
                loadingIcon = (<View style={styles.successWrap}>
            <Animated.Image style={[
                    styles.success,
                    {
                        transform: [{ translateX: this.successValueOut }],
                    },
                ]} source={require('../../assets/loading-success.png')}/>
          </View>);
            }
            else if (showLoading) {
                loadingIcon = <KyLoading />;
            }
            return (<View style={{
                justifyContent: 'center',
                alignItems: 'center',
            }}>
          {loadingIcon}
          {showText ? <Text style={{ color: '#fff' }}>{text}</Text> : null}
        </View>);
        }
    };
}
