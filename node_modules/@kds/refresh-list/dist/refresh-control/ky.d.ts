import React from 'react';
import { RefreshControlParams } from '../constant';
import { Animated } from 'react-native';
export * from './loading/ky';
interface KyRefreshControlProps {
}
interface KyRefreshControlPropsState {
    text: string;
    showFinish: boolean;
    showLoading: boolean;
    showText: boolean;
}
export default function getKyRefreshControl(successText?: string): {
    new (props: KyRefreshControlProps): {
        successValue: Animated.Value;
        successValueOut: Animated.AnimatedInterpolation;
        setRefreshControlParams(refreshControlParams: RefreshControlParams): void;
        render(): JSX.Element;
        context: any;
        setState<K extends "text" | "showFinish" | "showLoading" | "showText">(state: KyRefreshControlPropsState | ((prevState: Readonly<KyRefreshControlPropsState>, props: Readonly<KyRefreshControlProps>) => KyRefreshControlPropsState | Pick<KyRefreshControlPropsState, K> | null) | Pick<KyRefreshControlPropsState, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<KyRefreshControlProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<KyRefreshControlPropsState>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<KyRefreshControlProps>, nextState: Readonly<KyRefreshControlPropsState>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<KyRefreshControlProps>, prevState: Readonly<KyRefreshControlPropsState>): any;
        componentDidUpdate?(prevProps: Readonly<KyRefreshControlProps>, prevState: Readonly<KyRefreshControlPropsState>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<KyRefreshControlProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<KyRefreshControlProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<KyRefreshControlProps>, nextState: Readonly<KyRefreshControlPropsState>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<KyRefreshControlProps>, nextState: Readonly<KyRefreshControlPropsState>, nextContext: any): void;
    };
    contextType?: React.Context<any> | undefined;
};
