{"version":3,"sources":["inlineStyles.tsx"],"names":["inlineStyles","document","styleElements","length","selectors","element","children","styleString","join","csstree","parse","parseProps","parseError","console","warn","selectorsMq","selectorsPseudo","sortedSelectors","reverse","rule","item","selectorStr","generate","data","matched","map","initStyle","walk","visit","enter","node","property","value","important","name","trim","camel","val","style","priority","current","get","undefined","set","selectError","constructor","SyntaxError"],"mappings":"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","sourcesContent":["import { Middleware, XmlAST, camelCase } from \"../xml/common\";\nimport { querySelectorAll, FlatSelectorList, closestElem, flattenToSelectors, parseProps, filterByMqs, filterByPseudos, cleanPseudos, sortSelectors, initStyle, } from './common';\nimport csstree, { CssNode, Declaration } from 'css-tree';\n\nexport const inlineStyles: Middleware = function inlineStyles(\n    document: XmlAST,\n) {\n    // collect <style/>s\n    const styleElements = querySelectorAll('style', document);\n\n    //no <styles/>s, nothing to do\n    if (styleElements.length === 0) {\n        return document;\n    }\n\n    const selectors: FlatSelectorList = [];\n\n    for (let element of styleElements) {\n        const { children } = element;\n        if (!children.length || closestElem(element, 'foreignObject')) {\n            // skip empty <style/>s or <foreignObject> content.\n            continue;\n        }\n\n        // collect <style/>s and their css ast\n        try {\n            const styleString = children.join('');\n            flattenToSelectors(csstree.parse(styleString, parseProps), selectors);\n        } catch (parseError) {\n            console.warn(\n                'Warning: Parse error of styles of <style/> element, skipped. Error details: ' +\n                parseError,\n            );\n        }\n    }\n\n    // filter for mediaqueries to be used or without any mediaquery\n    const selectorsMq = filterByMqs(selectors);\n\n    // filter for pseudo elements to be used\n    const selectorsPseudo = filterByPseudos(selectorsMq);\n\n    // remove PseudoClass from its SimpleSelector for proper matching\n    cleanPseudos(selectorsPseudo);\n\n    // stable sort selectors\n    const sortedSelectors = sortSelectors(selectorsPseudo).reverse();\n\n    // match selectors\n    for (let { rule, item } of sortedSelectors) {\n        if (rule === null) {\n            continue;\n        }\n        const selectorStr = csstree.generate(item.data);\n        try {\n            // apply <style/> to matched elements\n            const matched = querySelectorAll(selectorStr, document).map(initStyle);\n            if (matched.length === 0) {\n                continue;\n            }\n            csstree.walk(rule, {\n                visit: 'Declaration',\n                enter(node: CssNode) {\n                    const { property, value, important } = node as Declaration;\n                    // existing inline styles have higher priority\n                    // no inline styles, external styles,                                    external styles used\n                    // inline styles,    external styles same   priority as inline styles,   inline   styles used\n                    // inline styles,    external styles higher priority than inline styles, external styles used\n                    const name = property.trim();\n                    const camel = camelCase(name);\n                    const val = csstree.generate(value).trim();\n                    for (let element of matched) {\n                        const { style, priority } = element;\n                        const current = priority.get(name);\n                        if (current === undefined || current < important) {\n                            priority.set(name, important as boolean);\n                            style[camel] = val;\n                        }\n                    }\n                },\n            });\n        } catch (selectError) {\n            if (selectError.constructor === SyntaxError) {\n                console.warn(\n                    'Warning: Syntax error when trying to select \\n\\n' +\n                    selectorStr +\n                    '\\n\\n, skipped. Error details: ' +\n                    selectError,\n                );\n                continue;\n            }\n            throw selectError;\n        }\n    }\n\n    return document;\n};\n\nexport default inlineStyles;"]}