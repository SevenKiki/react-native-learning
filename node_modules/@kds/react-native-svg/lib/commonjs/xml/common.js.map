{"version":3,"sources":["common.tsx"],"names":["tags","svg","Svg","circle","Circle","ellipse","Ellipse","g","G","text","Text","tspan","TSpan","textPath","TextPath","path","Path","polygon","Polygon","polyline","Polyline","line","Line","rect","Rect","use","Use","image","Image","symbol","Symbol","defs","Defs","linearGradient","LinearGradient","radialGradient","RadialGradient","stop","Stop","clipPath","ClipPath","pattern","Pattern","mask","Mask","marker","Marker","missingTag","err","console","error","bind","repeat","str","i","result","toSpaces","tabs","length","locate","source","lines","split","nLines","column","before","slice","replace","beforeExec","exec","beforeLine","after","afterExec","afterLine","pad","snippet","fetchText","uri","fetch","response","upperCase","_match","letter","toUpperCase","camelCase","phrase","getStyle","string","style","declarations","declaration","property","value","trim","validNameCharacters","whitespace","quotemarks"],"mappings":"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","sourcesContent":["import { ComponentType } from 'react';\nimport Rect from '../elements/Rect';\nimport Circle from '../elements/Circle';\nimport Ellipse from '../elements/Ellipse';\nimport Polygon from '../elements/Polygon';\nimport Polyline from '../elements/Polyline';\nimport Line from '../elements/Line';\nimport Svg from '../elements/Svg';\nimport Path from '../elements/Path';\nimport G from '../elements/G';\nimport Text from '../elements/Text';\nimport TSpan from '../elements/TSpan';\nimport TextPath from '../elements/TextPath';\nimport Use from '../elements/Use';\nimport Image from '../elements/Image';\nimport Symbol from '../elements/Symbol';\nimport Defs from '../elements/Defs';\nimport LinearGradient from '../elements/LinearGradient';\nimport RadialGradient from '../elements/RadialGradient';\nimport Stop from '../elements/Stop';\nimport ClipPath from '../elements/ClipPath';\nimport Pattern from '../elements/Pattern';\nimport Mask from '../elements/Mask';\nimport Marker from '../elements/Marker';\n\nexport const tags: { [tag: string]: ComponentType } = {\n    svg: Svg,\n    circle: Circle,\n    ellipse: Ellipse,\n    g: G,\n    text: Text,\n    tspan: TSpan,\n    textPath: TextPath,\n    path: Path,\n    polygon: Polygon,\n    polyline: Polyline,\n    line: Line,\n    rect: Rect,\n    use: Use,\n    image: Image,\n    symbol: Symbol,\n    defs: Defs,\n    linearGradient: LinearGradient,\n    radialGradient: RadialGradient,\n    stop: Stop,\n    clipPath: ClipPath,\n    pattern: Pattern,\n    mask: Mask,\n    marker: Marker,\n};\n\nexport function missingTag() {\n    return null;\n}\n\nexport interface AST {\n    tag: string;\n    style?: Styles;\n    styles?: string;\n    priority?: Map<string, boolean | undefined>;\n    parent: AST | null;\n    children: (AST | string)[] | (JSX.Element | string)[];\n    props: {\n        [prop: string]: Styles | string | undefined;\n    };\n    Tag: ComponentType;\n}\n\nexport interface XmlAST extends AST {\n    children: (XmlAST | string)[];\n    parent: XmlAST | null;\n}\n\nexport interface JsxAST extends AST {\n    children: (JSX.Element | string)[];\n}\n\nexport type AdditionalProps = {\n    onError?: (error: Error) => void;\n    override?: Object;\n};\n\nexport type UriProps = { uri: string | null } & AdditionalProps;\nexport type UriState = { xml: string | null };\n\nexport type XmlProps = { xml: string | null } & AdditionalProps;\nexport type XmlState = { ast: JsxAST | null };\n\nexport type AstProps = { ast: JsxAST | null } & AdditionalProps;\n\nexport const err = console.error.bind(console);\n\nfunction repeat(str: string, i: number) {\n    let result = '';\n    while (i--) {\n        result += str;\n    }\n    return result;\n}\n\nexport const toSpaces = (tabs: string) => repeat('  ', tabs.length);\n\nexport function locate(source: string, i: number) {\n    const lines = source.split('\\n');\n    const nLines = lines.length;\n    let column = i;\n    let line = 0;\n    for (; line < nLines; line++) {\n        const { length } = lines[line];\n        if (column >= length) {\n            column -= length;\n        } else {\n            break;\n        }\n    }\n    const before = source.slice(0, i).replace(/^\\t+/, toSpaces);\n    const beforeExec = /(^|\\n).*$/.exec(before);\n    const beforeLine = (beforeExec && beforeExec[0]) || '';\n    const after = source.slice(i);\n    const afterExec = /.*(\\n|$)/.exec(after);\n    const afterLine = afterExec && afterExec[0];\n    const pad = repeat(' ', beforeLine.length);\n    const snippet = `${beforeLine}${afterLine}\\n${pad}^`;\n    return { line, column, snippet };\n}\n\nexport async function fetchText(uri: string) {\n    const response = await fetch(uri);\n    return await response.text();\n}\n\nconst upperCase = (_match: string, letter: string) => letter.toUpperCase();\n\nexport const camelCase = (phrase: string) =>\n    phrase.replace(/[:-]([a-z])/g, upperCase);\n\nexport type Styles = { [property: string]: string };\n\nexport function getStyle(string: string): Styles {\n    const style: Styles = {};\n    const declarations = string.split(';');\n    const { length } = declarations;\n    for (let i = 0; i < length; i++) {\n        const declaration = declarations[i];\n        if (declaration.length !== 0) {\n            const split = declaration.split(':');\n            const property = split[0];\n            const value = split[1];\n            style[camelCase(property.trim())] = value.trim();\n        }\n    }\n    return style;\n}\n\nexport const validNameCharacters = /[a-zA-Z0-9:_-]/;\nexport const whitespace = /[\\s\\t\\r\\n]/;\nexport const quotemarks = /['\"]/;\n\nexport type Middleware = (ast: XmlAST) => XmlAST;"]}