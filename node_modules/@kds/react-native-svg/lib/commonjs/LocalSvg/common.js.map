{"version":3,"sources":["common.tsx"],"names":["NativeModules","RNSVGRenderableManager","getRawResource","getUriFromSource","source","resolvedAssetSource","uri","loadLocalRawResourceDefault","isUriAnAndroidResourceIdentifier","indexOf","loadAndroidRawResource","console","error","loadLocalRawResourceAndroid"],"mappings":"khBAAA,yCAEA,2GAEA,qCAEA,SAA2BA,2BAAcC,sBAAd,EAAwC,EAAnE,CAAQC,cAAR,MAAQA,cAAR,CAEO,QAASC,CAAAA,gBAAT,CAA0BC,MAA1B,CAAoD,CACzD,GAAMC,CAAAA,mBAAmB,CAAG,gCAAmBD,MAAnB,CAA5B,CACA,MAAOC,CAAAA,mBAAmB,CAACC,GAA3B,CACD,CAEM,QAASC,CAAAA,2BAAT,CAAqCH,MAArC,CAA+D,CACpE,GAAME,CAAAA,GAAG,CAAGH,gBAAgB,CAACC,MAAD,CAA5B,CACA,MAAO,sBAAUE,GAAV,CAAP,CACD,CAEM,QAASE,CAAAA,gCAAT,CAA0CF,GAA1C,CAAiE,CACtE,MAAO,OAAOA,CAAAA,GAAP,GAAe,QAAf,EAA2BA,GAAG,CAACG,OAAJ,CAAY,GAAZ,GAAoB,CAAC,CAAvD,CACD,CAEM,QAAeC,CAAAA,sBAAf,CAAsCJ,GAAtC,qMAEUJ,cAAc,CAACI,GAAD,CAFxB,gHAIHK,OAAO,CAACC,KAAR,CACE,mFADF,cAJG,gCAQI,IARJ,2EAYA,QAASC,CAAAA,2BAAT,CAAqCT,MAArC,CAA+D,CACpE,GAAME,CAAAA,GAAG,CAAGH,gBAAgB,CAACC,MAAD,CAA5B,CACA,GAAII,gCAAgC,CAACF,GAAD,CAApC,CAA2C,CACzC,MAAOI,CAAAA,sBAAsB,CAACJ,GAAD,CAA7B,CACD,CAFD,IAEO,CACL,MAAO,sBAAUA,GAAV,CAAP,CACD,CACF","sourcesContent":["import { NativeModules } from 'react-native';\n// @ts-ignore\nimport resolveAssetSource from 'react-native/Libraries/Image/resolveAssetSource';\n\nimport { fetchText } from '../xml/common';\n\nconst { getRawResource } = NativeModules.RNSVGRenderableManager || {};\n\nexport function getUriFromSource(source?: string | number) {\n  const resolvedAssetSource = resolveAssetSource(source);\n  return resolvedAssetSource.uri;\n}\n\nexport function loadLocalRawResourceDefault(source?: string | number) {\n  const uri = getUriFromSource(source);\n  return fetchText(uri);\n}\n\nexport function isUriAnAndroidResourceIdentifier(uri?: string | number) {\n  return typeof uri === 'string' && uri.indexOf('/') <= -1;\n}\n\nexport async function loadAndroidRawResource(uri?: string | number) {\n  try {\n    return await getRawResource(uri);\n  } catch (e) {\n    console.error(\n      'Error in RawResourceUtils while trying to natively load an Android raw resource: ',\n      e,\n    );\n    return null;\n  }\n}\n\nexport function loadLocalRawResourceAndroid(source?: string | number) {\n  const uri = getUriFromSource(source);\n  if (isUriAnAndroidResourceIdentifier(uri)) {\n    return loadAndroidRawResource(uri);\n  } else {\n    return fetchText(uri);\n  }\n}\n\nexport type LocalProps = { asset?: string | number; override?: Object };\nexport type LocalState = { xml: string | null };"]}