{"version":3,"sources":["common.tsx"],"names":["isTag","node","getParent","parent","getChildren","children","getName","elem","tag","getText","_node","getAttributeValue","name","props","removeSubsets","nodes","idx","length","ancestor","replace","includes","splice","existsOne","predicate","elems","some","getSiblings","hasAttrib","hasOwnProperty","findOne","i","l","findAll","result","j","push","adapter","cssSelectOpts","xmlMode","querySelectorAll","query","flattenToSelectors","cssAst","selectors","csstree","walk","visit","enter","rule","type","prelude","atrule","each","item","pseudos","pseudoItem","list","childType","filterByMqs","filter","atPrelude","first","mq","generate","useMqs","filterByPseudos","usePseudos","List","fromArray","map","pseudo","data","cleanPseudos","forEach","remove","specificity","selector","A","B","C","toLowerCase","charAt","compareSpecificity","aSpecificity","bSpecificity","selectorWithSpecificity","bySelectorSpecificity","a","b","pass","arr","len","chk","dbl","r","e","li","ri","exec","buffer","Array","tmp","sortSelectors","specs","s","declarationParseProps","context","parseValue","CSSStyleDeclaration","ast","styles","style","priority","Map","declarations","parse","property","value","important","trim","set","styleError","message","console","warn","parseError","initStyle","selectedEl","closestElem","elemName","parseProps","parseCustomProperty"],"mappings":"omCAAA,qCAKA,0DAaA,6D,0/BAYO,QAASA,CAAAA,KAAT,CAAeC,IAAf,CAAsD,CAC3D,MAAO,OAAOA,CAAAA,IAAP,GAAgB,QAAvB,CACD,CAKM,QAASC,CAAAA,SAAT,CAAmBD,IAAnB,CAAkD,CACvD,MAAS,OAAOA,CAAAA,IAAP,GAAgB,QAAhB,EAA4BA,IAAI,CAACE,MAAlC,EAA6C,IAArD,CACD,CAIM,QAASC,CAAAA,WAAT,CAAqBH,IAArB,CAAoE,CACzE,MAAQ,OAAOA,CAAAA,IAAP,GAAgB,QAAhB,EAA4BA,IAAI,CAACI,QAAlC,EAA+C,EAAtD,CACD,CAIM,QAASC,CAAAA,OAAT,CAAiBC,IAAjB,CAAuC,CAC5C,MAAOA,CAAAA,IAAI,CAACC,GAAZ,CACD,CAKM,QAASC,CAAAA,OAAT,CAAiBC,KAAjB,CAAiD,CACtD,MAAO,EAAP,CACD,CAKM,QAASC,CAAAA,iBAAT,CAA2BJ,IAA3B,CAAyCK,IAAzC,CAA+D,CACpE,MAAQL,CAAAA,IAAI,CAACM,KAAL,CAAWD,IAAX,GAAoB,IAA5B,CACD,CAIM,QAASE,CAAAA,aAAT,CAAuBC,KAAvB,CAA8E,CACnF,GAAIC,CAAAA,GAAG,CAAGD,KAAK,CAACE,MAAhB,CACEhB,IADF,CAEEiB,QAFF,CAGEC,OAHF,CAOA,MAAO,EAAEH,GAAF,CAAQ,CAAC,CAAhB,CAAmB,CACjBf,IAAI,CAAGiB,QAAQ,CAAGH,KAAK,CAACC,GAAD,CAAvB,CAGA,MAAOD,CAAAA,KAAK,CAACC,GAAD,CAAZ,CACAG,OAAO,CAAG,IAAV,CAEA,MAAOD,QAAP,CAAiB,CACf,GAAIH,KAAK,CAACK,QAAN,CAAeF,QAAf,CAAJ,CAA8B,CAC5BC,OAAO,CAAG,KAAV,CACAJ,KAAK,CAACM,MAAN,CAAaL,GAAb,CAAkB,CAAlB,EACA,MACD,CACDE,QAAQ,CAAI,MAAOA,CAAAA,QAAP,GAAoB,QAApB,EAAgCA,QAAQ,CAACf,MAA1C,EAAqD,IAAhE,CACD,CAGD,GAAIgB,OAAJ,CAAa,CACXJ,KAAK,CAACC,GAAD,CAAL,CAAaf,IAAb,CACD,CACF,CAED,MAAOc,CAAAA,KAAP,CACD,CAGM,QAASO,CAAAA,SAAT,CACLC,SADK,CAELC,KAFK,CAGI,CACT,MAAOA,CAAAA,KAAK,CAACC,IAAN,CACL,SAAAlB,IAAI,QACF,OAAOA,CAAAA,IAAP,GAAgB,QAAhB,GACCgB,SAAS,CAAChB,IAAD,CAAT,EAAmBe,SAAS,CAACC,SAAD,CAAYhB,IAAI,CAACF,QAAjB,CAD7B,CADE,EADC,CAAP,CAKD,CAMM,QAASqB,CAAAA,WAAT,CAAqBzB,IAArB,CAAoE,CACzE,GAAME,CAAAA,MAAM,CAAG,MAAOF,CAAAA,IAAP,GAAgB,QAAhB,EAA4BA,IAAI,CAACE,MAAhD,CACA,MAAQA,CAAAA,MAAM,EAAIA,MAAM,CAACE,QAAlB,EAA+B,EAAtC,CACD,CAGD,QAASsB,CAAAA,SAAT,CAAmBpB,IAAnB,CAAiCK,IAAjC,CAAwD,CACtD,MAAOL,CAAAA,IAAI,CAACM,KAAL,CAAWe,cAAX,CAA0BhB,IAA1B,CAAP,CACD,CAIM,QAASiB,CAAAA,OAAT,CACLN,SADK,CAELC,KAFK,CAGe,CACpB,GAAIjB,CAAAA,IAAJ,CAEA,IAAK,GAAIuB,CAAAA,CAAC,CAAG,CAAR,CAAWC,CAAC,CAAGP,KAAK,CAACP,MAA1B,CAAkCa,CAAC,CAAGC,CAAJ,EAAS,CAACxB,IAA5C,CAAkDuB,CAAC,EAAnD,CAAuD,CACrD,GAAM7B,CAAAA,IAAI,CAAGuB,KAAK,CAACM,CAAD,CAAlB,CACA,GAAI,MAAO7B,CAAAA,IAAP,GAAgB,QAApB,CAA8B,CAC7B,CADD,IACO,IAAIsB,SAAS,CAACtB,IAAD,CAAb,CAAqB,CAC1BM,IAAI,CAAGN,IAAP,CACD,CAFM,IAEA,CACL,GAAQI,CAAAA,QAAR,CAAqBJ,IAArB,CAAQI,QAAR,CACA,GAAIA,QAAQ,CAACY,MAAT,GAAoB,CAAxB,CAA2B,CACzBV,IAAI,CAAGsB,OAAO,CAACN,SAAD,CAAYlB,QAAZ,CAAd,CACD,CACF,CACF,CAED,MAAOE,CAAAA,IAAP,CACD,CAIM,QAASyB,CAAAA,OAAT,CACLT,SADK,CAELR,KAFK,CAIU,IADfkB,CAAAA,MACe,2DADS,EACT,CACf,IAAK,GAAIH,CAAAA,CAAC,CAAG,CAAR,CAAWI,CAAC,CAAGnB,KAAK,CAACE,MAA1B,CAAkCa,CAAC,CAAGI,CAAtC,CAAyCJ,CAAC,EAA1C,CAA8C,CAC5C,GAAM7B,CAAAA,IAAI,CAAGc,KAAK,CAACe,CAAD,CAAlB,CACA,GAAI,MAAO7B,CAAAA,IAAP,GAAgB,QAApB,CAA8B,CAC5B,SACD,CACD,GAAIsB,SAAS,CAACtB,IAAD,CAAb,CAAqB,CACnBgC,MAAM,CAACE,IAAP,CAAYlC,IAAZ,EACD,CACD,GAAQI,CAAAA,QAAR,CAAqBJ,IAArB,CAAQI,QAAR,CACA,GAAIA,QAAQ,CAACY,MAAT,GAAoB,CAAxB,CAA2B,CACzBe,OAAO,CAACT,SAAD,CAAYlB,QAAZ,CAAsB4B,MAAtB,CAAP,CACD,CACF,CAED,MAAOA,CAAAA,MAAP,CACD,CAEM,GAAMG,CAAAA,OAAyC,CAAG,CACvDtB,aAAa,CAAbA,aADuD,CAEvDQ,SAAS,CAATA,SAFuD,CAGvDI,WAAW,CAAXA,WAHuD,CAIvDC,SAAS,CAATA,SAJuD,CAKvDE,OAAO,CAAPA,OALuD,CAMvDG,OAAO,CAAPA,OANuD,CAOvDhC,KAAK,CAALA,KAPuD,CAQvDE,SAAS,CAATA,SARuD,CASvDE,WAAW,CAAXA,WATuD,CAUvDE,OAAO,CAAPA,OAVuD,CAWvDG,OAAO,CAAPA,OAXuD,CAYvDE,iBAAiB,CAAjBA,iBAZuD,CAAlD,C,wBAeA,GAAM0B,CAAAA,aAA+C,CAAG,CAC7DC,OAAO,CAAE,IADoD,CAE7DF,OAAO,CAAPA,OAF6D,CAAxD,C,oCAYA,QAASG,CAAAA,gBAAT,CAA0BC,KAA1B,CAAwChB,KAAxC,CAA4E,CACjF,MAAO,uBAAUgB,KAAV,CAAiBhB,KAAjB,CAAwBa,aAAxB,CAAP,CACD,CAqBM,QAASI,CAAAA,kBAAT,CAA4BC,MAA5B,CAA6CC,SAA7C,CAA0E,CAC/EC,iBAAQC,IAAR,CAAaH,MAAb,CAAqB,CACnBI,KAAK,CAAE,MADY,CAEnBC,KAFmB,gBAEbC,IAFa,CAEE,CACnB,SAA0BA,IAA1B,CAAQC,IAAR,MAAQA,IAAR,CAAcC,OAAd,MAAcA,OAAd,CACA,GAAID,IAAI,GAAK,MAAb,CAAqB,CACnB,OACD,CACD,GAAME,CAAAA,MAAM,CAAG,KAAKA,MAApB,CACCD,OAAD,CAA0B7C,QAA1B,CAAmC+C,IAAnC,CAAwC,SAACnD,IAAD,CAAOoD,IAAP,CAAgB,CACtD,UAAqBpD,IAArB,CAAQI,QAAR,OAAQA,QAAR,CACA,GAAMiD,CAAAA,OAA+B,CAAG,EAAxC,CACAX,SAAS,CAACR,IAAV,CAAe,CACbkB,IAAI,CAAJA,IADa,CAEbF,MAAM,CAANA,MAFa,CAGbH,IAAI,CAAJA,IAHa,CAIbM,OAAO,CAAPA,OAJa,CAAf,EAMAjD,QAAQ,CAAC+C,IAAT,CAAc,eAAsBG,UAAtB,CAAkCC,IAAlC,CAA2C,IAAlCC,CAAAA,SAAkC,OAAxCR,IAAwC,CACvD,GACEQ,SAAS,GAAK,qBAAd,EACAA,SAAS,GAAK,uBAFhB,CAGE,CACAH,OAAO,CAACnB,IAAR,CAAa,CACXkB,IAAI,CAAEE,UADK,CAEXC,IAAI,CAAJA,IAFW,CAAb,EAID,CACF,CAVD,EAWD,CApBD,EAqBD,CA7BkB,CAArB,EA+BD,CAQM,QAASE,CAAAA,WAAT,CAAqBf,SAArB,CAAkD,CACvD,MAAOA,CAAAA,SAAS,CAACgB,MAAV,CAAiB,eAAgB,IAAbR,CAAAA,MAAa,OAAbA,MAAa,CACtC,GAAIA,MAAM,GAAK,IAAf,CAAqB,CACnB,MAAO,KAAP,CACD,CACD,GAAQvC,CAAAA,IAAR,CAA0BuC,MAA1B,CAAQvC,IAAR,CAAcsC,OAAd,CAA0BC,MAA1B,CAAcD,OAAd,CACA,GAAMU,CAAAA,SAAS,CAAGV,OAAlB,CACA,GAAMW,CAAAA,KAAK,CAAGD,SAAS,EAAIA,SAAS,CAACvD,QAAV,CAAmBwD,KAAnB,EAA3B,CACA,GAAMC,CAAAA,EAAE,CAAGD,KAAK,EAAIA,KAAK,CAACZ,IAAN,GAAe,gBAAnC,CACA,GAAMT,CAAAA,KAAK,CAAGsB,EAAE,CAAGlB,iBAAQmB,QAAR,CAAiBH,SAAjB,CAAH,CAAiChD,IAAjD,CACA,MAAOoD,CAAAA,MAAM,CAAC5C,QAAP,CAAgBoB,KAAhB,CAAP,CACD,CAVM,CAAP,CAWD,CAED,GAAMwB,CAAAA,MAAM,CAAG,CAAC,EAAD,CAAK,QAAL,CAAf,CAQO,QAASC,CAAAA,eAAT,CAAyBtB,SAAzB,CAAsD,CAC3D,MAAOA,CAAAA,SAAS,CAACgB,MAAV,CAAiB,mBAAGL,CAAAA,OAAH,OAAGA,OAAH,OACtBY,CAAAA,UAAU,CAAC9C,QAAX,CACEwB,iBAAQmB,QAAR,CAAiB,CACfd,IAAI,CAAE,UADS,CAEf5C,QAAQ,CAAE,GAAI8D,cAAJ,GAAoBC,SAApB,CACRd,OAAO,CAACe,GAAR,CAAY,SAAAC,MAAM,QAAIA,CAAAA,MAAM,CAACjB,IAAP,CAAYkB,IAAhB,EAAlB,CADQ,CAFK,CAAjB,CADF,CADsB,EAAjB,CAAP,CAUD,CAED,GAAML,CAAAA,UAAU,CAAG,CAAC,EAAD,CAAnB,CAQO,QAASM,CAAAA,YAAT,CAAsB7B,SAAtB,CAAmD,CACxDA,SAAS,CAAC8B,OAAV,CAAkB,mBAAGnB,CAAAA,OAAH,OAAGA,OAAH,OAChBA,CAAAA,OAAO,CAACmB,OAAR,CAAgB,SAAAH,MAAM,QAAIA,CAAAA,MAAM,CAACd,IAAP,CAAYkB,MAAZ,CAAmBJ,MAAM,CAACjB,IAA1B,CAAJ,EAAtB,CADgB,EAAlB,EAGD,CAGM,QAASsB,CAAAA,WAAT,CAAqBC,QAArB,CAAsD,CAC3D,GAAIC,CAAAA,CAAC,CAAG,CAAR,CACA,GAAIC,CAAAA,CAAC,CAAG,CAAR,CACA,GAAIC,CAAAA,CAAC,CAAG,CAAR,CAEAH,QAAQ,CAACvE,QAAT,CAAkB+C,IAAlB,CAAuB,QAASP,CAAAA,IAAT,CAAc5C,IAAd,CAA6B,CAClD,OAAQA,IAAI,CAACgD,IAAb,EACE,IAAK,cAAL,CACA,IAAK,UAAL,CACEhD,IAAI,CAACI,QAAL,CAAc+C,IAAd,CAAmBP,IAAnB,EACA,MAEF,IAAK,YAAL,CACEgC,CAAC,GACD,MAEF,IAAK,eAAL,CACA,IAAK,mBAAL,CACEC,CAAC,GACD,MAEF,IAAK,qBAAL,CACE,OAAQ7E,IAAI,CAACW,IAAL,CAAUoE,WAAV,EAAR,EACE,IAAK,KAAL,CACE,GAAM3E,CAAAA,QAAQ,CAAIJ,IAAD,CAA8BI,QAA/C,CACAA,QAAQ,EAAIA,QAAQ,CAAC+C,IAAT,CAAcP,IAAd,CAAZ,CACA,MAEF,IAAK,QAAL,CACA,IAAK,OAAL,CACA,IAAK,YAAL,CACA,IAAK,cAAL,CACEkC,CAAC,GACD,MAIF,QACED,CAAC,GAhBL,CAkBA,MAEF,IAAK,uBAAL,CACEC,CAAC,GACD,MAEF,IAAK,cAAL,CAEE,GAAQnE,CAAAA,IAAR,CAAiBX,IAAjB,CAAQW,IAAR,CACA,GAAIA,IAAI,CAACqE,MAAL,CAAYrE,IAAI,CAACK,MAAL,CAAc,CAA1B,IAAiC,GAArC,CAA0C,CACxC8D,CAAC,GACF,CACD,MA9CJ,CAgDD,CAjDD,EAmDA,MAAO,CAACF,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAP,CACD,CAUM,QAASG,CAAAA,kBAAT,CACLC,YADK,CAELC,YAFK,CAGG,CACR,IAAK,GAAItD,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,CAApB,CAAuBA,CAAC,EAAI,CAA5B,CAA+B,CAC7B,GAAIqD,YAAY,CAACrD,CAAD,CAAZ,CAAkBsD,YAAY,CAACtD,CAAD,CAAlC,CAAuC,CACrC,MAAO,CAAC,CAAR,CACD,CAFD,IAEO,IAAIqD,YAAY,CAACrD,CAAD,CAAZ,CAAkBsD,YAAY,CAACtD,CAAD,CAAlC,CAAuC,CAC5C,MAAO,EAAP,CACD,CACF,CACD,MAAO,EAAP,CACD,CAMM,QAASuD,CAAAA,uBAAT,CAAiCT,QAAjC,CAA+D,CACpE,MAAO,CACLA,QAAQ,CAARA,QADK,CAELD,WAAW,CAAEA,WAAW,CAACC,QAAQ,CAACvB,IAAT,CAAckB,IAAf,CAFnB,CAAP,CAID,CASM,QAASe,CAAAA,qBAAT,CAA+BC,CAA/B,CAAwCC,CAAxC,CAAyD,CAC9D,MAAON,CAAAA,kBAAkB,CAACK,CAAC,CAACZ,WAAH,CAAgBa,CAAC,CAACb,WAAlB,CAAzB,CACD,CAGM,QAASc,CAAAA,IAAT,CAAcC,GAAd,CAA2BC,GAA3B,CAAwCC,GAAxC,CAAqD3D,MAArD,CAAqE,CAE1E,GAAM4D,CAAAA,GAAG,CAAGD,GAAG,CAAG,CAAlB,CAEA,GAAI7D,CAAAA,CAAJ,CAAO+D,CAAP,CAAUC,CAAV,CAEA,GAAIC,CAAAA,EAAJ,CAAQC,EAAR,CAGA,GAAInE,CAAAA,CAAC,CAAG,CAAR,CACA,IAAKC,CAAC,CAAG,CAAT,CAAYA,CAAC,CAAG4D,GAAhB,CAAqB5D,CAAC,EAAI8D,GAA1B,CAA+B,CAC7BC,CAAC,CAAG/D,CAAC,CAAG6D,GAAR,CACAG,CAAC,CAAGD,CAAC,CAAGF,GAAR,CACA,GAAIE,CAAC,CAAGH,GAAR,CAAa,CACXG,CAAC,CAAGH,GAAJ,CACD,CACD,GAAII,CAAC,CAAGJ,GAAR,CAAa,CACXI,CAAC,CAAGJ,GAAJ,CACD,CAGDK,EAAE,CAAGjE,CAAL,CACAkE,EAAE,CAAGH,CAAL,CACA,MAAO,IAAP,CAAa,CAEX,GAAIE,EAAE,CAAGF,CAAL,EAAUG,EAAE,CAAGF,CAAnB,CAAsB,CAGpB,GAAIT,qBAAqB,CAACI,GAAG,CAACM,EAAD,CAAJ,CAAUN,GAAG,CAACO,EAAD,CAAb,CAArB,EAA2C,CAA/C,CAAkD,CAChDhE,MAAM,CAACH,CAAC,EAAF,CAAN,CAAc4D,GAAG,CAACM,EAAE,EAAH,CAAjB,CACD,CAFD,IAEO,CACL/D,MAAM,CAACH,CAAC,EAAF,CAAN,CAAc4D,GAAG,CAACO,EAAE,EAAH,CAAjB,CACD,CACF,CARD,IAUK,IAAID,EAAE,CAAGF,CAAT,CAAY,CACf7D,MAAM,CAACH,CAAC,EAAF,CAAN,CAAc4D,GAAG,CAACM,EAAE,EAAH,CAAjB,CACD,CAFI,IAEE,IAAIC,EAAE,CAAGF,CAAT,CAAY,CACjB9D,MAAM,CAACH,CAAC,EAAF,CAAN,CAAc4D,GAAG,CAACO,EAAE,EAAH,CAAjB,CACD,CAFM,IAIF,CACH,MACD,CACF,CACF,CACF,CAIM,QAASC,CAAAA,IAAT,CAAcR,GAAd,CAA2BC,GAA3B,CAAgD,CAIrD,GAAIQ,CAAAA,MAAM,CAAG,GAAIC,CAAAA,KAAJ,CAAUT,GAAV,CAAb,CACA,IAAK,GAAIC,CAAAA,GAAG,CAAG,CAAf,CAAkBA,GAAG,CAAGD,GAAxB,CAA6BC,GAAG,EAAI,CAApC,CAAuC,CACrCH,IAAI,CAACC,GAAD,CAAMC,GAAN,CAAWC,GAAX,CAAgBO,MAAhB,CAAJ,CACA,GAAME,CAAAA,GAAG,CAAGX,GAAZ,CACAA,GAAG,CAAGS,MAAN,CACAA,MAAM,CAAGE,GAAT,CACD,CACD,MAAOX,CAAAA,GAAP,CACD,CAQM,QAASY,CAAAA,aAAT,CAAuB3D,SAAvB,CAAoD,CAEzD,GAAMgD,CAAAA,GAAG,CAAGhD,SAAS,CAAC1B,MAAtB,CACA,GAAI0E,GAAG,EAAI,CAAX,CAAc,CACZ,MAAOhD,CAAAA,SAAP,CACD,CACD,GAAM4D,CAAAA,KAAK,CAAG5D,SAAS,CAAC0B,GAAV,CAAcgB,uBAAd,CAAd,CACA,MAAOa,CAAAA,IAAI,CAACK,KAAD,CAAQZ,GAAR,CAAJ,CAAiBtB,GAAjB,CAAqB,SAAAmC,CAAC,QAAIA,CAAAA,CAAC,CAAC5B,QAAN,EAAtB,CAAP,CACD,CAEM,GAAM6B,CAAAA,qBAAqB,CAAG,CACnCC,OAAO,CAAE,iBAD0B,CAEnCC,UAAU,CAAE,KAFuB,CAA9B,C,oDAIA,QAASC,CAAAA,mBAAT,CAA6BC,GAA7B,CAA0C,CAC/C,GAAQhG,CAAAA,KAAR,CAA0BgG,GAA1B,CAAQhG,KAAR,CAAeiG,MAAf,CAA0BD,GAA1B,CAAeC,MAAf,CACA,GAAI,CAACjG,KAAK,CAACkG,KAAX,CAAkB,CAChBlG,KAAK,CAACkG,KAAN,CAAc,EAAd,CACD,CACD,GAAMA,CAAAA,KAAK,CAAGlG,KAAK,CAACkG,KAApB,CACA,GAAMC,CAAAA,QAAQ,CAAG,GAAIC,CAAAA,GAAJ,EAAjB,CACAJ,GAAG,CAACE,KAAJ,CAAYA,KAAZ,CACAF,GAAG,CAACG,QAAJ,CAAeA,QAAf,CACA,GAAI,CAACF,MAAD,EAAWA,MAAM,CAAC7F,MAAP,GAAkB,CAAjC,CAAoC,CAClC,OACD,CACD,GAAI,CACF,GAAMiG,CAAAA,YAAY,CAAGtE,iBAAQuE,KAAR,CACnBL,MADmB,CAEnBL,qBAFmB,CAArB,CAIAS,YAAY,CAAC7G,QAAb,CAAsB+C,IAAtB,CAA2B,SAAAnD,IAAI,CAAI,CACjC,GAAI,CACF,UAAuCA,IAAvC,CAAQmH,QAAR,OAAQA,QAAR,CAAkBC,KAAlB,OAAkBA,KAAlB,CAAyBC,SAAzB,OAAyBA,SAAzB,CACA,GAAM1G,CAAAA,IAAI,CAAGwG,QAAQ,CAACG,IAAT,EAAb,CACAP,QAAQ,CAACQ,GAAT,CAAa5G,IAAb,CAAmB0G,SAAnB,EACAP,KAAK,CAAC,sBAAUnG,IAAV,CAAD,CAAL,CAAyBgC,iBAAQmB,QAAR,CAAiBsD,KAAjB,EAAwBE,IAAxB,EAAzB,CACD,CAAC,MAAOE,UAAP,CAAmB,CAEnB,GAAIA,UAAU,CAACC,OAAX,GAAuB,8BAA3B,CAA2D,CACzDC,OAAO,CAACC,IAAR,CACE,oLACEH,UAFJ,EAID,CACF,CACF,CAfD,EAgBD,CAAC,MAAOI,UAAP,CAAmB,CACnBF,OAAO,CAACC,IAAR,CACE,oLACEC,UAFJ,EAID,CACF,CAMM,QAASC,CAAAA,SAAT,CAAmBC,UAAnB,CAAkD,CACvD,GAAI,CAACA,UAAU,CAAChB,KAAhB,CAAuB,CACrBH,mBAAmB,CAACmB,UAAD,CAAnB,CACD,CACD,MAAOA,CAAAA,UAAP,CACD,CAQM,QAASC,CAAAA,WAAT,CAAqB/H,IAArB,CAAmCgI,QAAnC,CAAqD,CAC1D,GAAI1H,CAAAA,IAAmB,CAAGN,IAA1B,CACA,MAAO,CAACM,IAAI,CAAGA,IAAI,CAACJ,MAAb,GAAwBI,IAAI,CAACC,GAAL,GAAayH,QAA5C,CAAsD,CAAE,CACxD,MAAO1H,CAAAA,IAAP,CACD,CAEM,GAAM2H,CAAAA,UAAU,CAAG,CACxBvB,UAAU,CAAE,KADY,CAExBwB,mBAAmB,CAAE,KAFG,CAAnB,C","sourcesContent":["import {\n  camelCase,\n  Styles,\n  XmlAST,\n} from '../xml/common';\nimport csstree, {\n  Atrule,\n  AtrulePrelude,\n  CssNode,\n  Declaration,\n  DeclarationList,\n  List,\n  ListItem,\n  PseudoClassSelector,\n  Rule,\n  Selector,\n  SelectorList,\n} from 'css-tree';\nimport cssSelect, { Adapter, Options, Predicate, Query } from 'css-select';\n\n/*\n * Style element inlining experiment based on SVGO\n * https://github.com/svg/svgo/blob/11f9c797411a8de966aacc4cb83dbb3e471757bc/plugins/inlineStyles.js\n * */\n\n/**\n * DOMUtils API for rnsvg AST (used by css-select)\n */\n// is the node a tag?\n// isTag: ( node:Node ) => isTag:Boolean\nexport function isTag(node: XmlAST | string): node is XmlAST {\n  return typeof node === 'object';\n}\n\n// get the parent of the node\n// getParent: ( node:Node ) => parentNode:Node\n// returns null when no parent exists\nexport function getParent(node: XmlAST | string): XmlAST {\n  return ((typeof node === 'object' && node.parent) || null) as XmlAST;\n}\n\n// get the node's children\n// getChildren: ( node:Node ) => children:[Node]\nexport function getChildren(node: XmlAST | string): Array<XmlAST | string> {\n  return (typeof node === 'object' && node.children) || [];\n}\n\n// get the name of the tag'\n// getName: ( elem:ElementNode ) => tagName:String\nexport function getName(elem: XmlAST): string {\n  return elem.tag;\n}\n\n// get the text content of the node, and its children if it has any\n// getText: ( node:Node ) => text:String\n// returns empty string when there is no text\nexport function getText(_node: XmlAST | string): string {\n  return '';\n}\n\n// get the attribute value\n// getAttributeValue: ( elem:ElementNode, name:String ) => value:String\n// returns null when attribute doesn't exist\nexport function getAttributeValue(elem: XmlAST, name: string): string {\n  return (elem.props[name] || null) as string;\n}\n\n// takes an array of nodes, and removes any duplicates, as well as any nodes\n// whose ancestors are also in the array\nexport function removeSubsets(nodes: Array<XmlAST | string>): Array<XmlAST | string> {\n  let idx = nodes.length,\n    node,\n    ancestor,\n    replace;\n\n  // Check if each node (or one of its ancestors) is already contained in the\n  // array.\n  while (--idx > -1) {\n    node = ancestor = nodes[idx];\n\n    // Temporarily remove the node under consideration\n    delete nodes[idx];\n    replace = true;\n\n    while (ancestor) {\n      if (nodes.includes(ancestor)) {\n        replace = false;\n        nodes.splice(idx, 1);\n        break;\n      }\n      ancestor = (typeof ancestor === 'object' && ancestor.parent) || null;\n    }\n\n    // If the node has been found to be unique, re-insert it.\n    if (replace) {\n      nodes[idx] = node;\n    }\n  }\n\n  return nodes;\n}\n\n// does at least one of passed element nodes pass the test predicate?\nexport function existsOne(\n  predicate: Predicate<XmlAST>,\n  elems: Array<XmlAST | string>,\n): boolean {\n  return elems.some(\n    elem =>\n      typeof elem === 'object' &&\n      (predicate(elem) || existsOne(predicate, elem.children)),\n  );\n}\n\n/*\n  get the siblings of the node. Note that unlike jQuery's `siblings` method,\n  this is expected to include the current node as well\n*/\nexport function getSiblings(node: XmlAST | string): Array<XmlAST | string> {\n  const parent = typeof node === 'object' && node.parent;\n  return (parent && parent.children) || [];\n}\n\n// does the element have the named attribute?\nfunction hasAttrib(elem: XmlAST, name: string): boolean {\n  return elem.props.hasOwnProperty(name);\n}\n\n// finds the first node in the array that matches the test predicate, or one\n// of its children\nexport function findOne(\n  predicate: Predicate<XmlAST>,\n  elems: Array<XmlAST | string>,\n): XmlAST | undefined {\n  let elem: XmlAST | undefined;\n\n  for (let i = 0, l = elems.length; i < l && !elem; i++) {\n    const node = elems[i];\n    if (typeof node === 'string') {\n    } else if (predicate(node)) {\n      elem = node;\n    } else {\n      const { children } = node;\n      if (children.length !== 0) {\n        elem = findOne(predicate, children);\n      }\n    }\n  }\n\n  return elem;\n}\n\n// finds all of the element nodes in the array that match the test predicate,\n// as well as any of their children that match it\nexport function findAll(\n  predicate: Predicate<XmlAST>,\n  nodes: Array<XmlAST | string>,\n  result: Array<XmlAST> = [],\n): Array<XmlAST> {\n  for (let i = 0, j = nodes.length; i < j; i++) {\n    const node = nodes[i];\n    if (typeof node !== 'object') {\n      continue;\n    }\n    if (predicate(node)) {\n      result.push(node);\n    }\n    const { children } = node;\n    if (children.length !== 0) {\n      findAll(predicate, children, result);\n    }\n  }\n\n  return result;\n}\n\nexport const adapter: Adapter<XmlAST | string, XmlAST> = {\n  removeSubsets,\n  existsOne,\n  getSiblings,\n  hasAttrib,\n  findOne,\n  findAll,\n  isTag,\n  getParent,\n  getChildren,\n  getName,\n  getText,\n  getAttributeValue,\n};\n\nexport const cssSelectOpts: Options<XmlAST | string, XmlAST> = {\n  xmlMode: true,\n  adapter,\n};\n\n/**\n * Evaluate a string of CSS selectors against the element and returns matched elements.\n *\n * @param {Query} query can be either a CSS selector string or a compiled query function.\n * @param {Array<XmlAST> | XmlAST} elems Elements to query. If it is an element, its children will be queried.\n * @return {Array<XmlAST>} All matching elements.\n */\nexport function querySelectorAll(query: Query, elems: XmlAST | XmlAST[]): XmlAST[] {\n  return cssSelect(query, elems, cssSelectOpts);\n}\n\nexport type FlatPseudoSelector = {\n  item: ListItem<CssNode>;\n  list: List<CssNode>;\n};\nexport type FlatPseudoSelectorList = FlatPseudoSelector[];\nexport type FlatSelector = {\n  item: ListItem<CssNode>;\n  atrule: Atrule | null;\n  rule: CssNode;\n  pseudos: FlatPseudoSelectorList;\n};\nexport type FlatSelectorList = FlatSelector[];\n\n/**\n * Flatten a CSS AST to a selectors list.\n *\n * @param {Object} cssAst css-tree AST to flatten\n * @param {Array} selectors\n */\nexport function flattenToSelectors(cssAst: CssNode, selectors: FlatSelectorList) {\n  csstree.walk(cssAst, {\n    visit: 'Rule',\n    enter(rule: CssNode) {\n      const { type, prelude } = rule as Rule;\n      if (type !== 'Rule') {\n        return;\n      }\n      const atrule = this.atrule;\n      (prelude as SelectorList).children.each((node, item) => {\n        const { children } = node as Selector;\n        const pseudos: FlatPseudoSelectorList = [];\n        selectors.push({\n          item,\n          atrule,\n          rule,\n          pseudos,\n        });\n        children.each(({ type: childType }, pseudoItem, list) => {\n          if (\n            childType === 'PseudoClassSelector' ||\n            childType === 'PseudoElementSelector'\n          ) {\n            pseudos.push({\n              item: pseudoItem,\n              list,\n            });\n          }\n        });\n      });\n    },\n  });\n}\n\n/**\n * Filter selectors by Media Query.\n *\n * @param {Array} selectors to filter\n * @return {Array} Filtered selectors that match the passed media queries\n */\nexport function filterByMqs(selectors: FlatSelectorList) {\n  return selectors.filter(({ atrule }) => {\n    if (atrule === null) {\n      return true;\n    }\n    const { name, prelude } = atrule;\n    const atPrelude = prelude as AtrulePrelude;\n    const first = atPrelude && atPrelude.children.first();\n    const mq = first && first.type === 'MediaQueryList';\n    const query = mq ? csstree.generate(atPrelude) : name;\n    return useMqs.includes(query);\n  });\n}\n// useMqs Array with strings of media queries that should pass (<name> <expression>)\nconst useMqs = ['', 'screen'];\n\n/**\n * Filter selectors by the pseudo-elements and/or -classes they contain.\n *\n * @param {Array} selectors to filter\n * @return {Array} Filtered selectors that match the passed pseudo-elements and/or -classes\n */\nexport function filterByPseudos(selectors: FlatSelectorList) {\n  return selectors.filter(({ pseudos }) =>\n    usePseudos.includes(\n      csstree.generate({\n        type: 'Selector',\n        children: new List<CssNode>().fromArray(\n          pseudos.map(pseudo => pseudo.item.data),\n        ),\n      }),\n    ),\n  );\n}\n// usePseudos Array with strings of single or sequence of pseudo-elements and/or -classes that should pass\nconst usePseudos = [''];\n\n/**\n * Remove pseudo-elements and/or -classes from the selectors for proper matching.\n *\n * @param {Array} selectors to clean\n * @return {Array} Selectors without pseudo-elements and/or -classes\n */\nexport function cleanPseudos(selectors: FlatSelectorList) {\n  selectors.forEach(({ pseudos }) =>\n    pseudos.forEach(pseudo => pseudo.list.remove(pseudo.item)),\n  );\n}\n\nexport type Specificity = [number, number, number];\nexport function specificity(selector: Selector): Specificity {\n  let A = 0;\n  let B = 0;\n  let C = 0;\n\n  selector.children.each(function walk(node: CssNode) {\n    switch (node.type) {\n      case 'SelectorList':\n      case 'Selector':\n        node.children.each(walk);\n        break;\n\n      case 'IdSelector':\n        A++;\n        break;\n\n      case 'ClassSelector':\n      case 'AttributeSelector':\n        B++;\n        break;\n\n      case 'PseudoClassSelector':\n        switch (node.name.toLowerCase()) {\n          case 'not':\n            const children = (node as PseudoClassSelector).children;\n            children && children.each(walk);\n            break;\n\n          case 'before':\n          case 'after':\n          case 'first-line':\n          case 'first-letter':\n            C++;\n            break;\n\n          // TODO: support for :nth-*(.. of <SelectorList>), :matches(), :has()\n\n          default:\n            B++;\n        }\n        break;\n\n      case 'PseudoElementSelector':\n        C++;\n        break;\n\n      case 'TypeSelector':\n        // ignore universal selector\n        const { name } = node;\n        if (name.charAt(name.length - 1) !== '*') {\n          C++;\n        }\n        break;\n    }\n  });\n\n  return [A, B, C];\n}\n\n/**\n * Compares two selector specificities.\n * extracted from https://github.com/keeganstreet/specificity/blob/master/specificity.js#L211\n *\n * @param {Array} aSpecificity Specificity of selector A\n * @param {Array} bSpecificity Specificity of selector B\n * @return {Number} Score of selector specificity A compared to selector specificity B\n */\nexport function compareSpecificity(\n  aSpecificity: Specificity,\n  bSpecificity: Specificity,\n): number {\n  for (let i = 0; i < 4; i += 1) {\n    if (aSpecificity[i] < bSpecificity[i]) {\n      return -1;\n    } else if (aSpecificity[i] > bSpecificity[i]) {\n      return 1;\n    }\n  }\n  return 0;\n}\n\nexport type Spec = {\n  selector: FlatSelector;\n  specificity: Specificity;\n};\nexport function selectorWithSpecificity(selector: FlatSelector): Spec {\n  return {\n    selector,\n    specificity: specificity(selector.item.data as Selector),\n  };\n}\n\n/**\n * Compare two simple selectors.\n *\n * @param {Object} a Simple selector A\n * @param {Object} b Simple selector B\n * @return {Number} Score of selector A compared to selector B\n */\nexport function bySelectorSpecificity(a: Spec, b: Spec): number {\n  return compareSpecificity(a.specificity, b.specificity);\n}\n\n// Run a single pass with the given chunk size.\nexport function pass(arr: Spec[], len: number, chk: number, result: Spec[]) {\n  // Step size / double chunk size.\n  const dbl = chk * 2;\n  // Bounds of the left and right chunks.\n  let l, r, e;\n  // Iterators over the left and right chunk.\n  let li, ri;\n\n  // Iterate over pairs of chunks.\n  let i = 0;\n  for (l = 0; l < len; l += dbl) {\n    r = l + chk;\n    e = r + chk;\n    if (r > len) {\n      r = len;\n    }\n    if (e > len) {\n      e = len;\n    }\n\n    // Iterate both chunks in parallel.\n    li = l;\n    ri = r;\n    while (true) {\n      // Compare the chunks.\n      if (li < r && ri < e) {\n        // This works for a regular `sort()` compatible comparator,\n        // but also for a simple comparator like: `a > b`\n        if (bySelectorSpecificity(arr[li], arr[ri]) <= 0) {\n          result[i++] = arr[li++];\n        } else {\n          result[i++] = arr[ri++];\n        }\n      }\n      // Nothing to compare, just flush what's left.\n      else if (li < r) {\n        result[i++] = arr[li++];\n      } else if (ri < e) {\n        result[i++] = arr[ri++];\n      }\n      // Both iterators are at the chunk ends.\n      else {\n        break;\n      }\n    }\n  }\n}\n\n// Execute the sort using the input array and a second buffer as work space.\n// Returns one of those two, containing the final result.\nexport function exec(arr: Spec[], len: number): Spec[] {\n  // Rather than dividing input, simply iterate chunks of 1, 2, 4, 8, etc.\n  // Chunks are the size of the left or right hand in merge sort.\n  // Stop when the left-hand covers all of the array.\n  let buffer = new Array(len);\n  for (let chk = 1; chk < len; chk *= 2) {\n    pass(arr, len, chk, buffer);\n    const tmp = arr;\n    arr = buffer;\n    buffer = tmp;\n  }\n  return arr;\n}\n\n/**\n * Sort selectors stably by their specificity.\n *\n * @param {Array} selectors to be sorted\n * @return {Array} Stable sorted selectors\n */\nexport function sortSelectors(selectors: FlatSelectorList) {\n  // Short-circuit when there's nothing to sort.\n  const len = selectors.length;\n  if (len <= 1) {\n    return selectors;\n  }\n  const specs = selectors.map(selectorWithSpecificity);\n  return exec(specs, len).map(s => s.selector);\n}\n\nexport const declarationParseProps = {\n  context: 'declarationList',\n  parseValue: false,\n};\nexport function CSSStyleDeclaration(ast: XmlAST) {\n  const { props, styles } = ast;\n  if (!props.style) {\n    props.style = {};\n  }\n  const style = props.style as Styles;\n  const priority = new Map();\n  ast.style = style;\n  ast.priority = priority;\n  if (!styles || styles.length === 0) {\n    return;\n  }\n  try {\n    const declarations = csstree.parse(\n      styles,\n      declarationParseProps,\n    ) as DeclarationList;\n    declarations.children.each(node => {\n      try {\n        const { property, value, important } = node as Declaration;\n        const name = property.trim();\n        priority.set(name, important);\n        style[camelCase(name)] = csstree.generate(value).trim();\n      } catch (styleError) {\n        //@ts-ignore\n        if (styleError.message !== 'Unknown node type: undefined') {\n          console.warn(\n            \"Warning: Parse error when parsing inline styles, style properties of this element cannot be used. The raw styles can still be get/set using .attr('style').value. Error details: \" +\n              styleError,\n          );\n        }\n      }\n    });\n  } catch (parseError) {\n    console.warn(\n      \"Warning: Parse error when parsing inline styles, style properties of this element cannot be used. The raw styles can still be get/set using .attr('style').value. Error details: \" +\n        parseError,\n    );\n  }\n}\n\nexport interface StyledAST extends XmlAST {\n  style: Styles;\n  priority: Map<string, boolean | undefined>;\n}\nexport function initStyle(selectedEl: XmlAST): StyledAST {\n  if (!selectedEl.style) {\n    CSSStyleDeclaration(selectedEl);\n  }\n  return selectedEl as StyledAST;\n}\n\n/**\n * Find the closest ancestor of the current element.\n * @param node\n * @param elemName\n * @return {?Object}\n */\nexport function closestElem(node: XmlAST, elemName: string) {\n  let elem: XmlAST | null = node;\n  while ((elem = elem.parent) && elem.tag !== elemName) {}\n  return elem;\n}\n\nexport const parseProps = {\n  parseValue: false,\n  parseCustomProperty: false,\n};\n"]}