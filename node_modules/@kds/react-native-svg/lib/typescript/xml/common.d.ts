import { ComponentType } from 'react';
export declare const tags: {
    [tag: string]: ComponentType;
};
export declare function missingTag(): null;
export interface AST {
    tag: string;
    style?: Styles;
    styles?: string;
    priority?: Map<string, boolean | undefined>;
    parent: AST | null;
    children: (AST | string)[] | (JSX.Element | string)[];
    props: {
        [prop: string]: Styles | string | undefined;
    };
    Tag: ComponentType;
}
export interface XmlAST extends AST {
    children: (XmlAST | string)[];
    parent: XmlAST | null;
}
export interface JsxAST extends AST {
    children: (JSX.Element | string)[];
}
export declare type AdditionalProps = {
    onError?: (error: Error) => void;
    override?: Object;
};
export declare type UriProps = {
    uri: string | null;
} & AdditionalProps;
export declare type UriState = {
    xml: string | null;
};
export declare type XmlProps = {
    xml: string | null;
} & AdditionalProps;
export declare type XmlState = {
    ast: JsxAST | null;
};
export declare type AstProps = {
    ast: JsxAST | null;
} & AdditionalProps;
export declare const err: (message?: any, ...optionalParams: any[]) => void;
export declare const toSpaces: (tabs: string) => string;
export declare function locate(source: string, i: number): {
    line: number;
    column: number;
    snippet: string;
};
export declare function fetchText(uri: string): Promise<string>;
export declare const camelCase: (phrase: string) => string;
export declare type Styles = {
    [property: string]: string;
};
export declare function getStyle(string: string): Styles;
export declare const validNameCharacters: RegExp;
export declare const whitespace: RegExp;
export declare const quotemarks: RegExp;
export declare type Middleware = (ast: XmlAST) => XmlAST;
