import { Styles, XmlAST } from '../xml/common';
import { Atrule, CssNode, List, ListItem, Selector } from 'css-tree';
import { Adapter, Options, Predicate, Query } from 'css-select';
/**
 * DOMUtils API for rnsvg AST (used by css-select)
 */
export declare function isTag(node: XmlAST | string): node is XmlAST;
export declare function getParent(node: XmlAST | string): XmlAST;
export declare function getChildren(node: XmlAST | string): Array<XmlAST | string>;
export declare function getName(elem: XmlAST): string;
export declare function getText(_node: XmlAST | string): string;
export declare function getAttributeValue(elem: XmlAST, name: string): string;
export declare function removeSubsets(nodes: Array<XmlAST | string>): Array<XmlAST | string>;
export declare function existsOne(predicate: Predicate<XmlAST>, elems: Array<XmlAST | string>): boolean;
export declare function getSiblings(node: XmlAST | string): Array<XmlAST | string>;
export declare function findOne(predicate: Predicate<XmlAST>, elems: Array<XmlAST | string>): XmlAST | undefined;
export declare function findAll(predicate: Predicate<XmlAST>, nodes: Array<XmlAST | string>, result?: Array<XmlAST>): Array<XmlAST>;
export declare const adapter: Adapter<XmlAST | string, XmlAST>;
export declare const cssSelectOpts: Options<XmlAST | string, XmlAST>;
/**
 * Evaluate a string of CSS selectors against the element and returns matched elements.
 *
 * @param {Query} query can be either a CSS selector string or a compiled query function.
 * @param {Array<XmlAST> | XmlAST} elems Elements to query. If it is an element, its children will be queried.
 * @return {Array<XmlAST>} All matching elements.
 */
export declare function querySelectorAll(query: Query, elems: XmlAST | XmlAST[]): XmlAST[];
export declare type FlatPseudoSelector = {
    item: ListItem<CssNode>;
    list: List<CssNode>;
};
export declare type FlatPseudoSelectorList = FlatPseudoSelector[];
export declare type FlatSelector = {
    item: ListItem<CssNode>;
    atrule: Atrule | null;
    rule: CssNode;
    pseudos: FlatPseudoSelectorList;
};
export declare type FlatSelectorList = FlatSelector[];
/**
 * Flatten a CSS AST to a selectors list.
 *
 * @param {Object} cssAst css-tree AST to flatten
 * @param {Array} selectors
 */
export declare function flattenToSelectors(cssAst: CssNode, selectors: FlatSelectorList): void;
/**
 * Filter selectors by Media Query.
 *
 * @param {Array} selectors to filter
 * @return {Array} Filtered selectors that match the passed media queries
 */
export declare function filterByMqs(selectors: FlatSelectorList): FlatSelector[];
/**
 * Filter selectors by the pseudo-elements and/or -classes they contain.
 *
 * @param {Array} selectors to filter
 * @return {Array} Filtered selectors that match the passed pseudo-elements and/or -classes
 */
export declare function filterByPseudos(selectors: FlatSelectorList): FlatSelector[];
/**
 * Remove pseudo-elements and/or -classes from the selectors for proper matching.
 *
 * @param {Array} selectors to clean
 * @return {Array} Selectors without pseudo-elements and/or -classes
 */
export declare function cleanPseudos(selectors: FlatSelectorList): void;
export declare type Specificity = [number, number, number];
export declare function specificity(selector: Selector): Specificity;
/**
 * Compares two selector specificities.
 * extracted from https://github.com/keeganstreet/specificity/blob/master/specificity.js#L211
 *
 * @param {Array} aSpecificity Specificity of selector A
 * @param {Array} bSpecificity Specificity of selector B
 * @return {Number} Score of selector specificity A compared to selector specificity B
 */
export declare function compareSpecificity(aSpecificity: Specificity, bSpecificity: Specificity): number;
export declare type Spec = {
    selector: FlatSelector;
    specificity: Specificity;
};
export declare function selectorWithSpecificity(selector: FlatSelector): Spec;
/**
 * Compare two simple selectors.
 *
 * @param {Object} a Simple selector A
 * @param {Object} b Simple selector B
 * @return {Number} Score of selector A compared to selector B
 */
export declare function bySelectorSpecificity(a: Spec, b: Spec): number;
export declare function pass(arr: Spec[], len: number, chk: number, result: Spec[]): void;
export declare function exec(arr: Spec[], len: number): Spec[];
/**
 * Sort selectors stably by their specificity.
 *
 * @param {Array} selectors to be sorted
 * @return {Array} Stable sorted selectors
 */
export declare function sortSelectors(selectors: FlatSelectorList): FlatSelectorList;
export declare const declarationParseProps: {
    context: string;
    parseValue: boolean;
};
export declare function CSSStyleDeclaration(ast: XmlAST): void;
export interface StyledAST extends XmlAST {
    style: Styles;
    priority: Map<string, boolean | undefined>;
}
export declare function initStyle(selectedEl: XmlAST): StyledAST;
/**
 * Find the closest ancestor of the current element.
 * @param node
 * @param elemName
 * @return {?Object}
 */
export declare function closestElem(node: XmlAST, elemName: string): XmlAST | null;
export declare const parseProps: {
    parseValue: boolean;
    parseCustomProperty: boolean;
};
