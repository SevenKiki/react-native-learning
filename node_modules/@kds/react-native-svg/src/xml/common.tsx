import { ComponentType } from 'react';
import Rect from '../elements/Rect';
import Circle from '../elements/Circle';
import Ellipse from '../elements/Ellipse';
import Polygon from '../elements/Polygon';
import Polyline from '../elements/Polyline';
import Line from '../elements/Line';
import Svg from '../elements/Svg';
import Path from '../elements/Path';
import G from '../elements/G';
import Text from '../elements/Text';
import TSpan from '../elements/TSpan';
import TextPath from '../elements/TextPath';
import Use from '../elements/Use';
import Image from '../elements/Image';
import Symbol from '../elements/Symbol';
import Defs from '../elements/Defs';
import LinearGradient from '../elements/LinearGradient';
import RadialGradient from '../elements/RadialGradient';
import Stop from '../elements/Stop';
import ClipPath from '../elements/ClipPath';
import Pattern from '../elements/Pattern';
import Mask from '../elements/Mask';
import Marker from '../elements/Marker';

export const tags: { [tag: string]: ComponentType } = {
    svg: Svg,
    circle: Circle,
    ellipse: Ellipse,
    g: G,
    text: Text,
    tspan: TSpan,
    textPath: TextPath,
    path: Path,
    polygon: Polygon,
    polyline: Polyline,
    line: Line,
    rect: Rect,
    use: Use,
    image: Image,
    symbol: Symbol,
    defs: Defs,
    linearGradient: LinearGradient,
    radialGradient: RadialGradient,
    stop: Stop,
    clipPath: ClipPath,
    pattern: Pattern,
    mask: Mask,
    marker: Marker,
};

export function missingTag() {
    return null;
}

export interface AST {
    tag: string;
    style?: Styles;
    styles?: string;
    priority?: Map<string, boolean | undefined>;
    parent: AST | null;
    children: (AST | string)[] | (JSX.Element | string)[];
    props: {
        [prop: string]: Styles | string | undefined;
    };
    Tag: ComponentType;
}

export interface XmlAST extends AST {
    children: (XmlAST | string)[];
    parent: XmlAST | null;
}

export interface JsxAST extends AST {
    children: (JSX.Element | string)[];
}

export type AdditionalProps = {
    onError?: (error: Error) => void;
    override?: Object;
};

export type UriProps = { uri: string | null } & AdditionalProps;
export type UriState = { xml: string | null };

export type XmlProps = { xml: string | null } & AdditionalProps;
export type XmlState = { ast: JsxAST | null };

export type AstProps = { ast: JsxAST | null } & AdditionalProps;

export const err = console.error.bind(console);

function repeat(str: string, i: number) {
    let result = '';
    while (i--) {
        result += str;
    }
    return result;
}

export const toSpaces = (tabs: string) => repeat('  ', tabs.length);

export function locate(source: string, i: number) {
    const lines = source.split('\n');
    const nLines = lines.length;
    let column = i;
    let line = 0;
    for (; line < nLines; line++) {
        const { length } = lines[line];
        if (column >= length) {
            column -= length;
        } else {
            break;
        }
    }
    const before = source.slice(0, i).replace(/^\t+/, toSpaces);
    const beforeExec = /(^|\n).*$/.exec(before);
    const beforeLine = (beforeExec && beforeExec[0]) || '';
    const after = source.slice(i);
    const afterExec = /.*(\n|$)/.exec(after);
    const afterLine = afterExec && afterExec[0];
    const pad = repeat(' ', beforeLine.length);
    const snippet = `${beforeLine}${afterLine}\n${pad}^`;
    return { line, column, snippet };
}

export async function fetchText(uri: string) {
    const response = await fetch(uri);
    return await response.text();
}

const upperCase = (_match: string, letter: string) => letter.toUpperCase();

export const camelCase = (phrase: string) =>
    phrase.replace(/[:-]([a-z])/g, upperCase);

export type Styles = { [property: string]: string };

export function getStyle(string: string): Styles {
    const style: Styles = {};
    const declarations = string.split(';');
    const { length } = declarations;
    for (let i = 0; i < length; i++) {
        const declaration = declarations[i];
        if (declaration.length !== 0) {
            const split = declaration.split(':');
            const property = split[0];
            const value = split[1];
            style[camelCase(property.trim())] = value.trim();
        }
    }
    return style;
}

export const validNameCharacters = /[a-zA-Z0-9:_-]/;
export const whitespace = /[\s\t\r\n]/;
export const quotemarks = /['"]/;

export type Middleware = (ast: XmlAST) => XmlAST;