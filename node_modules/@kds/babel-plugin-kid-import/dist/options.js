"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-nocheck
function dash2Camel(name) {
    return name.replace(/-+(.)/gi, (match, capture1) => {
        return capture1.toUpperCase();
    });
}
function capitalName(name) {
    return name.replace(/^\S/, s => s.toUpperCase());
}
const specialPath = {};
const specialMapper = {
    'alert-light': ['alert'],
    avatar: ['avatar-props'],
    'animated-number': ['animated-number-props'],
    badge: ['badge-props', 'kid-badge-view'],
    bubble: ['text-bubble-props', 'kid-text-bubble'],
    button: ['button-props'],
    carousel: ['carousel-props'],
    checkbox: ['i-checkbox-props', 'i-checkbox-group-props', 'i-checkbox-context', 'i-checkbox-value'],
    'city-selector': ['city-selecter-item-object-t'],
    'collect-anim-view': ['collect-anim-view-props'],
    context: ['wrap-context'],
    dialog: ['dialog-show', 'dialog-props', 'dialog-component'],
    'drag-and-drop': ['context-type', 'drag-and-drop-root-context', 'drop-area-context', 'root-tag-context', 'drag-and-drop-factory', 'i-dn-d-subject', 'drag-and-drop-root', 'i-draggable-props', 'draggable', 'i-props', 'drag-host', 'i-drop-area-props', 'drop-area', 'use-drop', 'i-use-drag-context', 'use-drag', 'use-dnd-subject', 'create-draggable-element', 'create-drop-element',],
    icon: ['kid-icon-props'],
    input: ['input-props'],
    'letter-indexes': ['indexes', 'letter-indexes-props'],
    'linear-gradient-button': ['linear-gradient-button-props'],
    'linear-gradient-text': ['linear-gradient-text-props'],
    loading: ['loading-size', 'loading-type'],
    'multi-line-text': ['multi-line-text-props'],
    'nav-bar': ['nav-bar-props'],
    'net-error': ['net-error-props'],
    'notice-bar': ['notice-bar-props'],
    'page-indicators': ['kid-page-indicator-props', 'kid-page-indicator-control'],
    popup: ['popup-props'],
    'pull-refresh': ['kid-pull-refresh-props'],
    'rating-star-view': ['rating-star-view-props'],
    'search-bar': ['search-bar-custom-style-props', 'search-bar-ref'],
    'seek-bar': ['seek-bar-props'],
    slider: ['slider-props'],
    'spectrum-view': ['spectrum-view-props'],
    stepper: ['base-stepper', 'stepper-change-type', 'stepper-context', 'base-stepper-props', 'stepper-props'],
    'switch-button': ['switch-button-props'],
    'tab-bar': ['tab-bar-props', 'tab-bar-indicator', 'tab-bar-indicator-props', 'tab-bar-item', 'tab-bar-item-props'],
    'tab-view': ['tab-view-props', 'scene-map', 'route', 'navigation-state', 'scene-renderer-props'],
    'tag': ['tag-props'],
    'textarea': ['textarea-props'],
    'time-picker': ['scroll-picker-props', 'scroll-picker', 'date-picker-props', 'date-picker', 'time-picker-props', 'time-picker'],
    toast: ['toast-props'],
    locale: ['locale-context', 'use-translate'],
};
Object.entries(specialMapper).forEach(([path, specialKeys]) => {
    specialKeys.forEach(key => {
        specialPath[key] = path;
    });
});
const svgSpecialPath = {};
const svgSpecialMapper = {
    xml: ['parse', 'svg-ast', 'svg-from-uri', 'svg-from-xml', 'svg-uri', 'svg-xml'],
    css: ['svg-css', 'svg-css-uri', 'svg-with-css', 'svg-with-css-uri', 'inline-styles'],
    LocalSvg: ['local-svg', 'with-local-svg', 'load-local-raw-resource']
};
Object.entries(svgSpecialMapper).forEach(([path, specialKeys]) => {
    specialKeys.forEach(key => {
        if (key === 'parse') {
            svgSpecialPath[key] = `${path}/parse`;
        }
        else if (key === 'inline-styles' || key === 'load-local-raw-resource') {
            svgSpecialPath[key] = `${path}/${dash2Camel(key)}`;
        }
        else {
            svgSpecialPath[key] = `${path}/${dash2Camel(capitalName(key))}`;
        }
    });
});
exports.default = [{
        libraryName: '@kid-ui/krn',
        transformToDefaultImport: false,
        customName: name => {
            const rootPath = '@kid-ui/krn/lib';
            if (name === 'theme-context') {
                return `${rootPath}/theme/context`;
            }
            if (/^use/.test(name)) {
                return `${rootPath}/theme/${dash2Camel(name)}`;
            }
            if (specialPath[name]) {
                return `${rootPath}/components/${specialPath[name]}`;
            }
            return `${rootPath}/components/${name.replace('kid-', '').toLowerCase()}`;
        },
    }, {
        libraryName: 'react-native-svg',
        transformToDefaultImport: true,
        customName: (name, file, isDefaultImport) => {
            const rootPath = '@kds/react-native-svg/src';
            if (isDefaultImport) {
                return `${rootPath}/elements/Svg`;
            }
            if (svgSpecialPath[name]) {
                return `${rootPath}/${svgSpecialPath[name]}`;
            }
            if (/^rnsvg/.test(name)) {
                return `${rootPath}/elements/NativeComponents`;
            }
            return `${rootPath}/elements/${capitalName(dash2Camel(name))}`;
        },
    }, {
        libraryName: '@kds/react-native-svg',
        transformToDefaultImport: true,
        customName: (name, file, isDefaultImport) => {
            const rootPath = '@kds/react-native-svg/src';
            if (isDefaultImport) {
                return `${rootPath}/elements/Svg`;
            }
            if (svgSpecialPath[name]) {
                return `${rootPath}/${svgSpecialPath[name]}`;
            }
            if (/^rnsvg/.test(name)) {
                return `${rootPath}/elements/NativeComponents`;
            }
            return `${rootPath}/elements/${capitalName(dash2Camel(name))}`;
        },
    }, {
        libraryName: "@kds-ui/rn",
        libraryDirectory: "es",
        transformToDefaultImport: false,
        style: false
    }];
