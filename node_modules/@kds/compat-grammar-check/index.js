const babelCheck = require("./babelCheck.js")
const eslintCheck = require("./eslintCheck.js")

const babelCheckTipMap = {
  flat: "ES2019 'Array.prototype.flat' method is forbidden.",
  flatMap: "ES2019 'Array.prototype.flatMap' method is forbidden.",
  finally: "ES2018 'Promise.prototype.finally' method is forbidden.",
  at: "ES2022 'Array.prototype.at' method is forbidden.",
  with: "ES2023 'Array.prototype.with' method is forbidden.",
  toSpliced: "ES2023 'Array.prototype.toSpliced' method is forbidden.",
  toSorted: "ES2023 'Array.prototype.toSorted' method is forbidden.",
  toReversed: "ES2023 'Array.prototype.toReversed' method is forbidden.",
  findLast: "ES2023 'Array.prototype.findLast' method is forbidden.",
  findLastIndex: "ES2023 'Array.prototype.findLastIndex' method is forbidden.",
}

async function checkGrammar(options) {
  const { filePath, sourcemapPath, ignoreRules = [] } = options
  let retString = ""
  const esLintRules = {}
  const babelRules = []
  ignoreRules.forEach((rule) => {
    if (rule.includes("es-x")) {
      esLintRules[rule] = "off"
    } else {
      babelRules.push(rule)
    }
  })
  const babelRet = await babelCheck(filePath, sourcemapPath, babelRules)
  const babelCheckArr = babelRet.map((e) => ({
    ...e,
    name: babelCheckTipMap[e.name] || e.name,
  }))
  const eslintRet = await eslintCheck(filePath, sourcemapPath, esLintRules)
  babelCheckArr.concat(eslintRet).forEach((item) => {
    const tempPath = item.filePath.replace(/^webpack:\/\//,'')
    const matchRet = tempPath.match(/((?<=\/).+)/)
    const filePath = matchRet ? matchRet[0] : tempPath
    retString += `    ${item.name}(${filePath}:${item.line}:${item.column})\n`
  })
  if (retString) {
    throw Error("iOS 10 不支持以下 JavaScript 语法（ JavaScript 语法可参考：https://docs.corp.kuaishou.com/d/home/fcAAWMJy_-h3mRPg_mNPyBjbg ）：\n" + retString)
  }
}
exports.default = checkGrammar
