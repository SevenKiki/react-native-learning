const { ESLint } = require("eslint")
const { SourceMapConsumer } = require("source-map")
const fs = require("fs")
const path = require("path")

module.exports = async function grammarCheck(
  lintFilePath,
  sourceMapFilePath,
  ignoreRules = {}
) {
  // 1. Create an instance
  const eslint = new ESLint({
    useEslintrc: false,
    // 修改 eslint 加载插件的位置
    resolvePluginsRelativeTo: path.join(
      __dirname,
      "./node_modules/@kds/compat-grammar-check/node_modules"
    ),
    overrideConfig: {
      env: {
        node: true,
      },
      extends: [
        "plugin:es-x/restrict-to-es2016",
        "plugin:es-x/no-new-in-esnext",
      ],
      parserOptions: {
        sourceType: "module",
        ecmaVersion: 2016,
      },
      plugins: ["es-x"],
      rules: {
        "es-x/no-new-target": "error",
        "es-x/no-exponential-operators": "error",
        "es-x/no-array-prototype-findlast-findlastindex": "off",
        "es-x/no-array-prototype-toreversed": "off",
        "es-x/no-array-prototype-tosorted": "off",
        "es-x/no-array-prototype-tospliced": "off",
        "es-x/no-array-prototype-with": "off",
        "es-x/no-promise-prototype-finally": "off",
        "es-x/no-array-prototype-flat": "off",
        "es-x/no-array-string-prototype-at": "off",
        "es-x/no-array-prototype-includes": "off",
        "es-x/no-object-getownpropertydescriptors": "off",
        "es-x/no-trailing-function-commas": "off",
        ...ignoreRules,
      },
    },
  })

  // 2. Lint text.
  const results = await eslint.lintFiles(lintFilePath)
  // 3. Format the results.
  if (!sourceMapFilePath && !fs.existsSync(sourceMapFilePath)) {
    return results[0].messages.map((item) => ({
      name: item.message,
      line: item.line,
      column: item.column,
      filePath: lintFilePath,
    }))
  }
  const whatever = await SourceMapConsumer.with(
    fs.readFileSync(sourceMapFilePath, "utf8"),
    null,
    (consumer) => {
      // results[0].messages 是 eslint 取到的错误对象列表
      return results[0].messages.map((val) => {
        const sourcemapOutput = consumer.originalPositionFor({
          line: val.line,
          column: val.column,
        })
        return {
          name: val.message,
          line: sourcemapOutput.line,
          column: sourcemapOutput.column,
          filePath: sourcemapOutput.source,
        }
      })
    }
  )
  return whatever
}
