/* eslint-disable camelcase */
import { globalConfig } from './global-config';
import { NativeModules } from 'react-native';

export const delay = (timeout: number) =>
    new Promise<void>((resolve) => setTimeout(resolve, timeout));

// 加工处理reject的errorInfo，在10.1.10版本之前，IOS并未传递code 只能通过msg解析
export const dealRejectErrorInfo = (err: {
    code: any;
    message: string;
    error_msg?: string;
    userInfo?: { error_msg: string };
}): any => {
    err.message = err.error_msg =
        err.userInfo?.error_msg || err.error_msg || err.message || '';
    if (err.code !== 'EUNSPECIFIED') {
        return err;
    }
    // 尝试从 message中提取Code
    try {
        var codeStr = err.message.substr(err.message.indexOf('Code=') + 5);
        codeStr = codeStr.substr(0, codeStr.indexOf(' '));
        err.code = codeStr;
    } catch (e) {
        if (__DEV__) {
            console.warn('[dealRejectErrorInfo]', err);
        }
    }
    return err;
};

export const normalParams = (params: any) => {
    if (
        __DEV__ &&
        !globalConfig.rootTag &&
        (!params || (typeof params === 'object' && !('rootTag' in params)))
    ) {
        console.warn(
            '[@kds/bridge-lite]: 请在根组件渲染的时候先调用 setGlobalConfig 方法设置 rootTag，避免调用报错',
        );
    }
    if (params == null) {
        return '';
    }
    if (
        typeof params === 'object' &&
        !('rootTag' in params) &&
        globalConfig.rootTag != null
    ) {
        params.rootTag = globalConfig.rootTag;
    }
    return JSON.stringify(params);
};

export const normalNamespace = (name: string) => {
    return name.replace(/^kwai/u, 'Kwai');
};

export function generateUUID() {
    let d = new Date().getTime();
    if (
        typeof performance !== 'undefined' &&
        // eslint-disable-next-line no-undef
        typeof performance.now === 'function'
    ) {
        // eslint-disable-next-line no-undef
        d += performance.now(); // use high-precision timer if available
    }
    let pattern = 'xxxxxxxx_xxxx_4xxx_yxxx_xxxxxxxxxxxx';
    return pattern.replace(/[xy]/g, function (c) {
        // eslint-disable-next-line no-bitwise
        var r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        // eslint-disable-next-line no-bitwise
        return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);
    });
}

export type Version = string | number;
export enum VersionIs {
    LessThan = -1,
    EqualTo = 0,
    GreaterThan = 1,
}

/**
 * Compare two versions quickly.
 * @param current Is this version greater, equal to, or less than the other?
 * @param other The version to compare against the current version
 * @return 1 if current is greater than other, 0 if they are equal or equivalent, and -1 if current is less than other
 */
export function versionCompare(current: Version, other: Version): VersionIs {
    const cp = String(current).split('.');
    const op = String(other).split('.');
    for (let depth = 0; depth < Math.min(cp.length, op.length); depth++) {
        const cn = Number(cp[depth]);
        const on = Number(op[depth]);
        if (cn > on) {
            return VersionIs.GreaterThan;
        }
        if (on > cn) {
            return VersionIs.LessThan;
        }
        if (!isNaN(cn) && isNaN(on)) {
            return VersionIs.GreaterThan;
        }
        if (isNaN(cn) && !isNaN(on)) {
            return VersionIs.LessThan;
        }
    }
    return VersionIs.EqualTo;
}

let appVersion = '';
export function getAppVersion() {
    if (appVersion) {
        return appVersion;
    }
    const {
        data: { appVersion: version },
    } = NativeModules.KRNBasic?.getDeviceInfoSync?.() || {
        data: {
            appVersion: '',
        },
    };

    appVersion = (version as string)?.match(/\d+\.\d+\.\d+/)?.[0] || '';
    return appVersion;
}
