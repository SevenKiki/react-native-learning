import { NativeEventEmitter, NativeModules } from 'react-native';
import { krnAppStateEventSet } from './constants';
import type { YodaEvents } from './types';

export interface AddListenerOptions {
    data: unknown;
}

const appStateEventEmitter = new NativeEventEmitter(NativeModules.KRNAppState);
const customEventEmitter = new NativeEventEmitter(NativeModules.KdsEvent);

export const addListener = async <T extends keyof YodaEvents>(
    type: T,
    listener: (event: YodaEvents[T]) => void,
): Promise<void> => {
    return new Promise((res) => {
        const eventEmitter = krnAppStateEventSet.has(type)
            ? appStateEventEmitter
            : customEventEmitter;
        eventEmitter.addListener(type, listener);
        res();
    });
};

export const removeListener = async <T extends keyof YodaEvents>(
    type: T,
    listener?: ((event: YodaEvents[T]) => void) | undefined,
): Promise<void> => {
    return new Promise((res) => {
        const eventEmitter = krnAppStateEventSet.has(type)
            ? appStateEventEmitter
            : customEventEmitter;
        eventEmitter.removeListener(type, listener);
        res();
    });
};
