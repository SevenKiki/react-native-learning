import { getCurrentMode, setCurrentMode } from './mode';
import type { Mode } from './mode';
import { version } from './version';

export interface GlobalConfig {
    mode: Mode;
    rootTag?: number;
    timeout?: number;
    serializer?: Serializer;
    isSetSerializer?: boolean;
}

type Serializer = {
    stringify: (params: any) => string;
    parse: (params: string) => any;
};

export const defaultSerializer: Serializer = {
    stringify: (params: any) => JSON.stringify(params),
    parse: (params: string) => JSON.parse(params),
};

let rootTag: number | null = null;
let serializer: Serializer = defaultSerializer;
export const globalConfig: GlobalConfig = {
    get mode() {
        return getCurrentMode();
    },
    set mode(mode: Mode) {
        setCurrentMode(mode);

        console.info(
            `You're currently running version ${version} in ${mode} mode`,
        );
    },
    get rootTag() {
        return rootTag;
    },
    set rootTag(value: number) {
        rootTag = value;
    },
    get serializer() {
        return serializer;
    },
    set serializer(newSerializer: Serializer) {
        serializer = newSerializer;
    },
    get isSetSerializer() {
        return serializer !== defaultSerializer;
    },
};

export const setGlobalConfig = (
    nextGlobalConfig: Partial<GlobalConfig>,
): void => {
    Object.assign(globalConfig, nextGlobalConfig);
};
