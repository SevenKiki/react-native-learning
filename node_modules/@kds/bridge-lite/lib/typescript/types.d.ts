import type { NativeBridges, NativeEvents } from '@kds/bridge-lite-types';
import { CallbackOnlyBridge } from './constants';
export declare type RequiredKeys<T> = {
    [P in keyof T]-?: T extends Record<P, T[P]> ? P : never;
}[keyof T];
export declare type Split<T extends string, U extends string> = T extends `${infer S}${U}${infer R}` ? [S, ...Split<R, U>] : [T];
export interface CallbackArg {
    result: number;
    [x: string]: any;
}
export interface Listener {
    (e: CallbackArg): void;
    __yodaCallbackId__?: Record<string, string>;
}
export interface YodaBridges extends NativeBridges {
}
export interface YodaEvents extends NativeEvents {
    krnAppStateDidChange: {
        appState: 'show' | 'hide' | 'active' | 'background' | 'inactive';
        bundleId: string;
        componentName: string;
        rootTag: number;
    };
    kdsMemoryWarning: Record<string, never>;
}
export declare type InvocationParams<T extends keyof YodaBridges> = YodaBridges[T]['params'] & {
    rootTag?: number;
};
export interface InvocationOptions {
    timeout?: number | undefined;
}
export declare type YodaSupportSyncBridges = Pick<YodaBridges, 'system.isNetworkConnected' | 'system.getServerTime' | 'system.isBottomNavigationBarShown' | 'system.getNetworkType' | 'system.getPushPermission' | 'system.isPad' | 'system.getDisplaySetting' | 'system.getNavigationBarHeight' | 'system.deviceIsLandscape' | 'tool.getClipBoard' | 'tool.getKswitchData' | 'tool.getABTestInfo' | 'tool.canIUse' | 'tool.getStartUpData' | 'platform.getDarkMode' | 'social.getNoticeRecoTextSync' | 'social.getPymkRecoTextSync' | 'social.getRemarkNameSync' | 'social.getSocialMultiStringLangsSync'>;
export declare type InvocationCallback<T extends keyof YodaBridges> = T extends CallbackOnlyBridge ? (response: InvocationResponse<T>) => void : never;
export declare type InvocationBridgeNamespace<T extends keyof YodaBridges> = Split<T, '.'>[0];
export declare type InvocationBridgeName<T extends keyof YodaBridges> = Split<T, '.'>[1];
export declare type InvocationConfig<T extends keyof YodaBridges> = T extends unknown ? {
    readonly initialBridge: T;
    bridge: T;
    params: InvocationParams<T>;
    options: InvocationOptions;
    callback?: InvocationCallback<T> | undefined;
} : never;
export declare type InvocationResponse<T extends keyof YodaBridges> = YodaBridges[T]['responseData'];
export declare type InvocationResponseData<T extends keyof YodaBridges> = InvocationResponse<T> extends {
    result: number;
} ? Omit<InvocationResponse<T>, 'result' | 'message'> : InvocationResponse<T>;
export declare type InvocationPromise<T extends keyof YodaBridges> = Promise<InvocationResponseData<T>>;
export declare type InvocationWithCallback<T extends keyof YodaBridges> = [
    bridge: T,
    params: InvocationParams<T>,
    callback?: InvocationCallback<T>
];
export declare type InvocationWithoutParams<T extends keyof YodaBridges> = [bridge: T] | [bridge: T, params: InvocationParams<T>, options?: InvocationOptions];
export declare type InvocationWithUnknownParams<T extends keyof YodaBridges> = [
    bridge: T,
    params?: InvocationParams<T>,
    options?: InvocationOptions
];
export declare type InvocationWithParams<T extends keyof YodaBridges> = [
    bridge: T,
    params: InvocationParams<T>,
    options?: InvocationOptions
];
export declare type InvocationParameters<T extends keyof YodaBridges> = T extends CallbackOnlyBridge ? InvocationWithCallback<T> : InvocationParams<T> extends Record<string, never> ? InvocationWithoutParams<T> : [RequiredKeys<InvocationParams<T>>] extends [never] ? InvocationWithoutParams<T> : InvocationParams<T> extends Record<string, unknown> ? InvocationWithUnknownParams<T> : InvocationWithParams<T>;
export type { CallbackOnlyBridge };
