import { addListener, removeListener } from './event';
import { invoke, invokeSync } from './invoke';
import { version } from './version';
export { invoke, invokeSync };
export { addListener, removeListener };
export type { BridgeError, BridgeErrorContext } from './bridge-error';
export { isBridgeError } from './bridge-error';
export type { GlobalConfig } from './global-config';
export { setGlobalConfig } from './global-config';
export { version };
export * from './types';
declare const _default: {
    addListener: <T extends keyof import("./types").YodaEvents>(type: T, listener: (event: import("./types").YodaEvents[T]) => void) => Promise<void>;
    removeListener: <T_1 extends keyof import("./types").YodaEvents>(type: T_1, listener?: (event: import("./types").YodaEvents[T_1]) => void) => Promise<void>;
    invoke: <T_2 extends keyof import("./types").YodaBridges>(...args: import("./types").InvocationParameters<T_2>) => import("./types").InvocationPromise<T_2>;
    invokeSync: <T_3 extends "tool.getClipBoard" | "platform.getDarkMode" | "system.getPushPermission" | "system.getServerTime" | "system.getNetworkType" | "system.isNetworkConnected" | "system.isBottomNavigationBarShown" | "tool.getABTestInfo" | "tool.getKswitchData" | "tool.canIUse" | "system.getNavigationBarHeight" | "system.isPad" | "system.deviceIsLandscape" | "system.getDisplaySetting" | "social.getPymkRecoTextSync" | "tool.getStartUpData" | "social.getNoticeRecoTextSync" | "social.getRemarkNameSync" | "social.getSocialMultiStringLangsSync">(...args: import("./types").InvocationParameters<T_3>) => import("./types").InvocationResponse<T_3>;
    version: string;
    isBridgeError: (err: unknown) => err is import("./bridge-error").BridgeError;
    setGlobalConfig: (nextGlobalConfig: Partial<import("./global-config").GlobalConfig>) => void;
};
export default _default;
