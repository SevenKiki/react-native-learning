{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type { NativeBridges, NativeEvents } from '@kds/bridge-lite-types';\nimport { CallbackOnlyBridge } from './constants';\n\nexport type RequiredKeys<T> = {\n    [P in keyof T]-?: T extends Record<P, T[P]> ? P : never;\n}[keyof T];\n\nexport type Split<\n    T extends string,\n    U extends string,\n> = T extends `${infer S}${U}${infer R}` ? [S, ...Split<R, U>] : [T];\n\nexport interface CallbackArg {\n    result: number;\n    [x: string]: any;\n}\n\nexport interface Listener {\n    (e: CallbackArg): void;\n    __yodaCallbackId__?: Record<string, string>;\n}\n\nexport interface YodaBridges extends NativeBridges {}\n\nexport interface YodaEvents extends NativeEvents {\n    krnAppStateDidChange: {\n        appState: 'show' | 'hide' | 'active' | 'background' | 'inactive';\n        bundleId: string;\n        componentName: string;\n        rootTag: number;\n    };\n    kdsMemoryWarning: Record<string, never>;\n}\n\nexport type InvocationParams<T extends keyof YodaBridges> =\n    YodaBridges[T]['params'] & {\n        rootTag?: number;\n    };\n\nexport interface InvocationOptions {\n    timeout?: number | undefined;\n}\n\nexport type YodaSupportSyncBridges = Pick<\n    YodaBridges,\n    | 'system.isNetworkConnected'\n    | 'system.getServerTime'\n    | 'system.isBottomNavigationBarShown'\n    | 'system.getNetworkType'\n    | 'system.getPushPermission'\n    | 'system.isPad'\n    | 'system.getDisplaySetting'\n    | 'system.getNavigationBarHeight'\n    | 'system.deviceIsLandscape'\n    | 'tool.getClipBoard'\n    | 'tool.getKswitchData'\n    | 'tool.getABTestInfo'\n    | 'tool.canIUse'\n    | 'tool.getStartUpData'\n    | 'platform.getDarkMode'\n    | 'social.getNoticeRecoTextSync'\n    | 'social.getPymkRecoTextSync'\n    | 'social.getRemarkNameSync'\n    | 'social.getSocialMultiStringLangsSync'\n>;\n\nexport type InvocationCallback<T extends keyof YodaBridges> =\n    T extends CallbackOnlyBridge\n        ? (response: InvocationResponse<T>) => void\n        : never;\n\nexport type InvocationBridgeNamespace<T extends keyof YodaBridges> = Split<\n    T,\n    '.'\n>[0];\n\nexport type InvocationBridgeName<T extends keyof YodaBridges> = Split<\n    T,\n    '.'\n>[1];\n\nexport type InvocationConfig<T extends keyof YodaBridges> = T extends unknown\n    ? {\n          readonly initialBridge: T;\n          bridge: T;\n          params: InvocationParams<T>;\n          options: InvocationOptions;\n          callback?: InvocationCallback<T> | undefined;\n      }\n    : never;\n\nexport type InvocationResponse<T extends keyof YodaBridges> =\n    YodaBridges[T]['responseData'];\n\nexport type InvocationResponseData<T extends keyof YodaBridges> =\n    InvocationResponse<T> extends { result: number }\n        ? Omit<InvocationResponse<T>, 'result' | 'message'>\n        : InvocationResponse<T>;\n\nexport type InvocationPromise<T extends keyof YodaBridges> = Promise<\n    InvocationResponseData<T>\n>;\n\nexport type InvocationWithCallback<T extends keyof YodaBridges> = [\n    bridge: T,\n    params: InvocationParams<T>,\n    callback?: InvocationCallback<T>,\n];\n\nexport type InvocationWithoutParams<T extends keyof YodaBridges> =\n    | [bridge: T]\n    | [bridge: T, params: InvocationParams<T>, options?: InvocationOptions];\n\nexport type InvocationWithUnknownParams<T extends keyof YodaBridges> = [\n    bridge: T,\n    params?: InvocationParams<T>,\n    options?: InvocationOptions,\n];\n\nexport type InvocationWithParams<T extends keyof YodaBridges> = [\n    bridge: T,\n    params: InvocationParams<T>,\n    options?: InvocationOptions,\n];\n\nexport type InvocationParameters<T extends keyof YodaBridges> =\n    T extends CallbackOnlyBridge\n        ? InvocationWithCallback<T>\n        : InvocationParams<T> extends Record<string, never>\n        ? InvocationWithoutParams<T>\n        : [RequiredKeys<InvocationParams<T>>] extends [never]\n        ? InvocationWithoutParams<T>\n        : InvocationParams<T> extends Record<string, unknown>\n        ? InvocationWithUnknownParams<T>\n        : InvocationWithParams<T>;\n\nexport type { CallbackOnlyBridge };\n"],"mappings":""}