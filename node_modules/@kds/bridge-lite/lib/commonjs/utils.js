"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.delay = exports.dealRejectErrorInfo = exports.VersionIs = void 0;
exports.generateUUID = generateUUID;
exports.getAppVersion = getAppVersion;
exports.normalParams = exports.normalNamespace = void 0;
exports.versionCompare = versionCompare;

var _globalConfig = require("./global-config");

var _reactNative = require("react-native");

/* eslint-disable camelcase */
const delay = timeout => new Promise(resolve => setTimeout(resolve, timeout)); // 加工处理reject的errorInfo，在10.1.10版本之前，IOS并未传递code 只能通过msg解析


exports.delay = delay;

const dealRejectErrorInfo = err => {
  var _err$userInfo;

  err.message = err.error_msg = ((_err$userInfo = err.userInfo) === null || _err$userInfo === void 0 ? void 0 : _err$userInfo.error_msg) || err.error_msg || err.message || '';

  if (err.code !== 'EUNSPECIFIED') {
    return err;
  } // 尝试从 message中提取Code


  try {
    var codeStr = err.message.substr(err.message.indexOf('Code=') + 5);
    codeStr = codeStr.substr(0, codeStr.indexOf(' '));
    err.code = codeStr;
  } catch (e) {
    if (__DEV__) {
      console.warn('[dealRejectErrorInfo]', err);
    }
  }

  return err;
};

exports.dealRejectErrorInfo = dealRejectErrorInfo;

const normalParams = params => {
  if (__DEV__ && !_globalConfig.globalConfig.rootTag && (!params || typeof params === 'object' && !('rootTag' in params))) {
    console.warn('[@kds/bridge-lite]: 请在根组件渲染的时候先调用 setGlobalConfig 方法设置 rootTag，避免调用报错');
  }

  if (params == null) {
    return '';
  }

  if (typeof params === 'object' && !('rootTag' in params) && _globalConfig.globalConfig.rootTag != null) {
    params.rootTag = _globalConfig.globalConfig.rootTag;
  }

  return JSON.stringify(params);
};

exports.normalParams = normalParams;

const normalNamespace = name => {
  return name.replace(/^kwai/u, 'Kwai');
};

exports.normalNamespace = normalNamespace;

function generateUUID() {
  let d = new Date().getTime();

  if (typeof performance !== 'undefined' && // eslint-disable-next-line no-undef
  typeof performance.now === 'function') {
    // eslint-disable-next-line no-undef
    d += performance.now(); // use high-precision timer if available
  }

  let pattern = 'xxxxxxxx_xxxx_4xxx_yxxx_xxxxxxxxxxxx';
  return pattern.replace(/[xy]/g, function (c) {
    // eslint-disable-next-line no-bitwise
    var r = (d + Math.random() * 16) % 16 | 0;
    d = Math.floor(d / 16); // eslint-disable-next-line no-bitwise

    return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
  });
}

let VersionIs;
/**
 * Compare two versions quickly.
 * @param current Is this version greater, equal to, or less than the other?
 * @param other The version to compare against the current version
 * @return 1 if current is greater than other, 0 if they are equal or equivalent, and -1 if current is less than other
 */

exports.VersionIs = VersionIs;

(function (VersionIs) {
  VersionIs[VersionIs["LessThan"] = -1] = "LessThan";
  VersionIs[VersionIs["EqualTo"] = 0] = "EqualTo";
  VersionIs[VersionIs["GreaterThan"] = 1] = "GreaterThan";
})(VersionIs || (exports.VersionIs = VersionIs = {}));

function versionCompare(current, other) {
  const cp = String(current).split('.');
  const op = String(other).split('.');

  for (let depth = 0; depth < Math.min(cp.length, op.length); depth++) {
    const cn = Number(cp[depth]);
    const on = Number(op[depth]);

    if (cn > on) {
      return VersionIs.GreaterThan;
    }

    if (on > cn) {
      return VersionIs.LessThan;
    }

    if (!isNaN(cn) && isNaN(on)) {
      return VersionIs.GreaterThan;
    }

    if (isNaN(cn) && !isNaN(on)) {
      return VersionIs.LessThan;
    }
  }

  return VersionIs.EqualTo;
}

let appVersion = '';

function getAppVersion() {
  var _NativeModules$KRNBas, _NativeModules$KRNBas2, _match;

  if (appVersion) {
    return appVersion;
  }

  const {
    data: {
      appVersion: version
    }
  } = ((_NativeModules$KRNBas = _reactNative.NativeModules.KRNBasic) === null || _NativeModules$KRNBas === void 0 ? void 0 : (_NativeModules$KRNBas2 = _NativeModules$KRNBas.getDeviceInfoSync) === null || _NativeModules$KRNBas2 === void 0 ? void 0 : _NativeModules$KRNBas2.call(_NativeModules$KRNBas)) || {
    data: {
      appVersion: ''
    }
  };
  appVersion = (version === null || version === void 0 ? void 0 : (_match = version.match(/\d+\.\d+\.\d+/)) === null || _match === void 0 ? void 0 : _match[0]) || '';
  return appVersion;
}
//# sourceMappingURL=utils.js.map