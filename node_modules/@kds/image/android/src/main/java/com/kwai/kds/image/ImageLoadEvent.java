/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

package com.kwai.kds.image;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.util.HashMap;
import java.util.Map;

import androidx.annotation.IntDef;
import androidx.annotation.Nullable;

import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.uimanager.events.Event;
import com.facebook.react.uimanager.events.RCTEventEmitter;

public class ImageLoadEvent extends Event<ImageLoadEvent> {
  @IntDef({ON_ERROR, ON_LOAD, ON_LOAD_END, ON_LOAD_START, ON_PROGRESS, ON_GIF_END, ON_ANIMATED_FRAME})
  @Retention(RetentionPolicy.SOURCE)
  @interface ImageEventType {}

  // Currently ON_PROGRESS is not implemented, these can be added
  // easily once support exists in fresco.
  public static final int ON_ERROR = 1;
  public static final int ON_LOAD = 2;
  public static final int ON_LOAD_END = 3;
  public static final int ON_LOAD_START = 4;
  public static final int ON_PROGRESS = 5;
  public static final int ON_GIF_END = 6;
  public static final int ON_ANIMATED_FRAME = 7;
  public static final String TOTAL_FRAME_COUNT = "totalFrameCount";
  public static final String CURRENT_FRAME = "currentFrame";

  private final int mEventType;
  private final @Nullable
  String mImageUri;
  private final int mWidth;
  private final int mHeight;
  private final @Nullable
  String mImageLoadMessage;
  Map<String, Integer> mAnimatedMessage;

  public ImageLoadEvent(int viewId, @ImageEventType int eventType) {
    this(viewId, eventType, null);
  }

  public ImageLoadEvent(int viewId, @ImageEventType int eventType, boolean error, String message) {
    this(viewId, eventType, null, 0, 0, message);
  }

  public ImageLoadEvent(int viewId, @ImageEventType int eventType, String imageUri) {
    this(viewId, eventType, imageUri, 0, 0, null);
  }

  public ImageLoadEvent(
    int viewId, @ImageEventType int eventType, @Nullable String imageUri, int width, int height) {
    this(viewId, eventType, imageUri, width, height, null);
  }

  public ImageLoadEvent(
    int viewId,
    @ImageEventType int eventType,
    @Nullable String imageUri,
    int width,
    int height,
    @Nullable String message) {
    super(viewId);
    mEventType = eventType;
    mImageUri = imageUri;
    mWidth = width;
    mHeight = height;
    mImageLoadMessage = message;
  }

  public ImageLoadEvent(
    int viewId,
    @ImageEventType int eventType,
    @Nullable String imageUri,
    @Nullable Map<String, Integer> animatedMessage) {
    super(viewId);
    mEventType = eventType;
    mImageUri = imageUri;
    mWidth = 0;
    mHeight = 0;
    mImageLoadMessage = null;
    mAnimatedMessage = animatedMessage;
  }

  public static String eventNameForType(@ImageEventType int eventType) {
    switch (eventType) {
      case ON_ERROR:
        return "onKwaiImageError";
      case ON_LOAD:
        return "onKwaiImageLoad";
      case ON_LOAD_END:
        return "onKwaiImageLoadEnd";
      case ON_LOAD_START:
        return "onKwaiImageLoadStart";
      case ON_PROGRESS:
        return "onKwaiImageProgress";
      case ON_GIF_END:
        return "onKwaiImageGifPlayEnd";
      case ON_ANIMATED_FRAME:
        return "onKwaiImageAnimatedFrame";
      default:
        throw new IllegalStateException("Invalid image event: " + Integer.toString(eventType));
    }
  }

  @Override
  public String getEventName() {
    return ImageLoadEvent.eventNameForType(mEventType);
  }

  @Override
  public short getCoalescingKey() {
    // Intentionally casting mEventType because it is guaranteed to be small
    // enough to fit into short.
    return (short) mEventType;
  }

  @Override
  public void dispatch(RCTEventEmitter rctEventEmitter) {
    WritableMap eventData = null;

    if (mImageUri != null || (mEventType == ON_LOAD || mEventType == ON_ERROR)) {
      eventData = Arguments.createMap();

      if (mImageUri != null) {
        eventData.putString("uri", mImageUri);
      }

      if (mEventType == ON_LOAD) {
        eventData.putDouble("width", mWidth);
        eventData.putDouble("height", mHeight);
        eventData.putBoolean("isAnimatedImage", Boolean.parseBoolean(mImageLoadMessage));
        if (mImageUri != null) {
          eventData.putString("url", mImageUri);
        }
      } else if (mEventType == ON_ERROR) {
        eventData.putString("error", mImageLoadMessage);
      } else if (mEventType == ON_ANIMATED_FRAME) {
        eventData.putInt(TOTAL_FRAME_COUNT, getValueSafely(mAnimatedMessage, TOTAL_FRAME_COUNT));
        eventData.putInt(CURRENT_FRAME, getValueSafely(mAnimatedMessage, CURRENT_FRAME));
      }
    }

    rctEventEmitter.receiveEvent(getViewTag(), getEventName(), eventData);
  }

  private int getValueSafely(Map<String, Integer> map, String key) {
    if (map != null && map.containsKey(key)) {
      return map.get(key);
    }
    return 0;
  }
}
