/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

package com.kwai.kds.image;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import android.annotation.SuppressLint;
import android.content.Context;
import android.graphics.Color;
import android.graphics.PorterDuff.Mode;
import android.text.TextUtils;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.facebook.common.logging.FLog;
import com.facebook.drawee.backends.pipeline.Fresco;
import com.facebook.drawee.controller.AbstractDraweeControllerBuilder;
import com.facebook.drawee.drawable.ScalingUtils;
import com.facebook.react.bridge.JSApplicationIllegalArgumentException;
import com.facebook.react.bridge.JavaOnlyArray;
import com.facebook.react.bridge.MemoryStatsCallback;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.common.MapBuilder;
import com.facebook.react.module.annotations.ReactModule;
import com.facebook.react.uimanager.PixelUtil;
import com.facebook.react.uimanager.ThemedReactContext;
import com.facebook.react.uimanager.ViewProps;
import com.facebook.react.uimanager.annotations.ReactProp;
import com.facebook.react.uimanager.annotations.ReactPropGroup;
import com.facebook.react.views.image.GlobalImageLoadListener;
import com.facebook.react.views.image.ImageMemoryMonitor;
import com.facebook.react.views.image.ImageResizeMethod;
import com.facebook.react.views.image.ImageResizeMode;
import com.facebook.react.views.image.ReactCallerContextFactory;
import com.facebook.yoga.YogaConstants;
import com.kwai.kds.componenthelp.KrnBaseSimpleViewManager;

@ReactModule(name = ReactImageManager.REACT_CLASS)
public class ReactImageManager extends KrnBaseSimpleViewManager<ReactImageView> {

  public static final String REACT_CLASS = "KwaiImageView";

  @Override
  public String getName() {
    return REACT_CLASS;
  }

  private @Nullable
  AbstractDraweeControllerBuilder mDraweeControllerBuilder;
  private @Nullable
  GlobalImageLoadListener mGlobalImageLoadListener;
  private final @Nullable
  Object mCallerContext;
  private final @Nullable
  ReactCallerContextFactory mCallerContextFactory;
  ImageMemoryMonitor mImageMemoryMonitor;

  /**
   * @deprecated use {@link ReactImageManager#ReactImageManager(AbstractDraweeControllerBuilder,
   * ReactCallerContextFactory)} instead.
   */
  @Deprecated
  public ReactImageManager(
    @Nullable AbstractDraweeControllerBuilder draweeControllerBuilder,
    @Nullable Object callerContext) {
    this(draweeControllerBuilder, null, callerContext);
  }

  /**
   * @deprecated use {@link ReactImageManager#ReactImageManager(AbstractDraweeControllerBuilder,
   * GlobalImageLoadListener, ReactCallerContextFactory)} instead.
   */
  @Deprecated
  public ReactImageManager(
    @Nullable AbstractDraweeControllerBuilder draweeControllerBuilder,
    @Nullable GlobalImageLoadListener globalImageLoadListener,
    @Nullable Object callerContext) {
    mDraweeControllerBuilder = draweeControllerBuilder;
    mGlobalImageLoadListener = globalImageLoadListener;
    mCallerContext = callerContext;
    mCallerContextFactory = null;
    mImageMemoryMonitor = new ImageMemoryMonitor();
  }

  public ReactImageManager(
    @Nullable AbstractDraweeControllerBuilder draweeControllerBuilder,
    @Nullable ReactCallerContextFactory callerContextFactory) {
    this(draweeControllerBuilder, null, callerContextFactory);
  }

  public ReactImageManager(
    @Nullable AbstractDraweeControllerBuilder draweeControllerBuilder,
    @Nullable GlobalImageLoadListener globalImageLoadListener,
    @Nullable ReactCallerContextFactory callerContextFactory) {
    mDraweeControllerBuilder = draweeControllerBuilder;
    mGlobalImageLoadListener = globalImageLoadListener;
    mCallerContextFactory = callerContextFactory;
    mCallerContext = null;
    mImageMemoryMonitor = new ImageMemoryMonitor();
  }

  public ReactImageManager() {
    // Lazily initialize as FrescoModule have not been initialized yet
    mDraweeControllerBuilder = null;
    mCallerContext = null;
    mCallerContextFactory = null;
    mImageMemoryMonitor = new ImageMemoryMonitor();
  }

  public AbstractDraweeControllerBuilder getDraweeControllerBuilder() {
    if (mDraweeControllerBuilder == null) {
      mDraweeControllerBuilder = Fresco.newDraweeControllerBuilder();
    }
    return mDraweeControllerBuilder;
  }

  /**
   * @deprecated use {@link ReactCallerContextFactory} instead
   */
  @Deprecated
  public Object getCallerContext() {
    return mCallerContext;
  }

  @Override
  public ReactImageView createViewInstance(ThemedReactContext context) {
    Object callerContext =
      mCallerContextFactory != null
        ? mCallerContextFactory.getOrCreateCallerContext(context)
        : getCallerContext();
    String bundleId = getCurrentBundleId(context);
    if (bundleId == null) {
      bundleId = "";
    }
    return new ReactImageView(
      context, getDraweeControllerBuilder(), mGlobalImageLoadListener, callerContext, mImageMemoryMonitor, bundleId);
  }

  // In JS this is Image.props.source
  @ReactProp(name = "src")
  public void setSource(ReactImageView view, @Nullable ReadableArray sources) {
    view.setSource(sources);
  }

  @ReactProp(name = "source")
  public void setSource(ReactImageView view, @Nullable ReadableMap source) {
    if (source != null) {
      JavaOnlyArray array = parseSource(view.getContext(), source);
      view.setSource(array);
    } else {
      view.setSource(null);
    }
  }

  @ReactProp(name = "blurRadius")
  public void setBlurRadius(ReactImageView view, float blurRadius) {
    FLog.w(REACT_CLASS, "setBlurRadius: " + blurRadius);
    view.setBlurRadius(blurRadius);
  }

  // In JS this is Image.props.defaultSource
  @ReactProp(name = "defaultSrc")
  public void setDefaultSource(ReactImageView view, @Nullable String source) {
    FLog.w(REACT_CLASS, "setDefaultSource: " + source);
    view.setDefaultSource(source);
  }

  // In JS this is Image.props.loadingIndicatorSource.uri
  @ReactProp(name = "loadingIndicatorSrc")
  public void setLoadingIndicatorSource(ReactImageView view, @Nullable String source) {
    FLog.w(REACT_CLASS, "setDefaultSource: " + source);
    view.setLoadingIndicatorSource(source);
  }

  @Override
  public void updateReuseViewPropsStart(ReactImageView view) {
    super.updateReuseViewPropsStart(view);
    view.updateReuseViewPropsStart();
  }

  @Override
  public void updateReuseViewPropsEnd(ReactImageView view) {
    super.updateReuseViewPropsEnd(view);
    view.updateReuseViewPropsEnd();
  }

  @ReactProp(name = "borderColor", customType = "Color")
  public void setBorderColor(ReactImageView view, @Nullable Integer borderColor) {
    FLog.w(REACT_CLASS, "setBorderColor: " + borderColor);
    if (borderColor == null) {
      view.setBorderColor(Color.TRANSPARENT);
    } else {
      view.setBorderColor(borderColor);
    }
  }

  @SuppressLint("ResourceType")
  @ReactProp(name = "overlayColor", customType = "Color")
  public void setOverlayColor(ReactImageView view, @Nullable Integer overlayColor) {
    FLog.w(REACT_CLASS, "setOverlayColor: " + overlayColor);
    if (overlayColor == null) {
      view.setOverlayColor(Color.TRANSPARENT);
    } else {
      view.setOverlayColor(overlayColor);
    }
  }

  @ReactProp(name = "borderWidth")
  public void setBorderWidth(ReactImageView view, float borderWidth) {
    FLog.w(REACT_CLASS, "setBorderWidth: " + borderWidth);
    view.setBorderWidth(borderWidth);
  }

  @ReactPropGroup(
    names = {
      ViewProps.BORDER_RADIUS,
      ViewProps.BORDER_TOP_LEFT_RADIUS,
      ViewProps.BORDER_TOP_RIGHT_RADIUS,
      ViewProps.BORDER_BOTTOM_RIGHT_RADIUS,
      ViewProps.BORDER_BOTTOM_LEFT_RADIUS
    },
    defaultFloat = YogaConstants.UNDEFINED)
  public void setBorderRadius(ReactImageView view, int index, float borderRadius) {
    FLog.w(REACT_CLASS, "setBorderRadius: index: " + index + ", borderRadius:" + borderRadius);
    if (!YogaConstants.isUndefined(borderRadius)) {
      borderRadius = PixelUtil.toPixelFromDIP(borderRadius);
    }

    if (index == 0) {
      view.setBorderRadius(borderRadius);
    } else {
      view.setBorderRadius(borderRadius, index - 1);
    }
  }

  @ReactProp(name = ViewProps.RESIZE_MODE)
  public void setResizeMode(ReactImageView view, @Nullable String resizeMode) {
    FLog.w(REACT_CLASS, "setResizeMode: " + resizeMode);
    ScalingUtils.ScaleType scaleType;
    // center 字段要与 iOS 端对齐，不缩放图片，因此 JS 传入 center 时需要返回 ScalingUtils.ScaleType.CENTER
    if ("center".equals(resizeMode)) {
      scaleType = ScalingUtils.ScaleType.CENTER;
    } else {
      scaleType = ImageResizeMode.toScaleType(resizeMode);
    }
    view.setScaleType(scaleType);
    view.setTileMode(ImageResizeMode.toTileMode(resizeMode));
  }

  @ReactProp(name = ViewProps.RESIZE_METHOD)
  public void setResizeMethod(ReactImageView view, @Nullable String resizeMethod) {
    FLog.w(REACT_CLASS, "setResizeMethod: " + resizeMethod);
    if (resizeMethod == null || "auto".equals(resizeMethod)) {
      view.setResizeMethod(ImageResizeMethod.AUTO);
    } else if ("resize".equals(resizeMethod)) {
      view.setResizeMethod(ImageResizeMethod.RESIZE);
    } else if ("scale".equals(resizeMethod)) {
      view.setResizeMethod(ImageResizeMethod.SCALE);
    } else {
      throw new JSApplicationIllegalArgumentException(
        "Invalid resize method: '" + resizeMethod + "'");
    }
  }

  @ReactProp(name = "tintColor", customType = "Color")
  public void setTintColor(ReactImageView view, @Nullable Integer tintColor) {
    FLog.w(REACT_CLASS, "setTintColor: " + tintColor);
    if (tintColor == null) {
      view.clearColorFilter();
    } else {
      view.setColorFilter(tintColor, Mode.SRC_IN);
    }
  }

  @ReactProp(name = "progressiveRenderingEnabled")
  public void setProgressiveRenderingEnabled(ReactImageView view, boolean enabled) {
    FLog.w(REACT_CLASS, "setProgressiveRenderingEnabled: " + enabled);
    view.setProgressiveRenderingEnabled(enabled);
  }

  @ReactProp(name = "fadeDuration")
  public void setFadeDuration(ReactImageView view, int durationMs) {
    FLog.w(REACT_CLASS, "setFadeDuration: " + durationMs);
    view.setFadeDuration(durationMs);
  }

  @ReactProp(name = "shouldNotifyLoadEvents")
  public void setLoadHandlersRegistered(ReactImageView view, boolean shouldNotifyLoadEvents) {
    FLog.w(REACT_CLASS, "setLoadHandlersRegistered: " + shouldNotifyLoadEvents);
    view.setShouldNotifyLoadEvents(shouldNotifyLoadEvents);
  }

  @ReactProp(name = "headers")
  public void setHeaders(ReactImageView view, ReadableMap headers) {
    String headerMessage = "";
    if (headers != null) {
      headerMessage = headers.toString();
    }
    FLog.w(REACT_CLASS, "setHeaders: " + headerMessage);
    view.setHeaders(headers);
  }

  @ReactProp(name = "enableMultiSourceRetry")
  public void setMultiSourceRetryEnabled(ReactImageView view, boolean multiSourceRetryEnabled) {
    FLog.w(REACT_CLASS, "setMultiSourceRetryEnabled: " + multiSourceRetryEnabled);
    view.setMultiSourceRetryEnabled(multiSourceRetryEnabled);
  }

  @ReactProp(name = "cropSize")
  public void setCropSize(ReactImageView view, ReadableMap cropSize) {
    String cropsizeMessage = "";
    if (cropSize != null) {
      cropsizeMessage = cropSize.toString();
      view.setmResizeOptionHeight(cropSize.getInt("height"));
      view.setmResizeOptionWidth(cropSize.getInt("width"));
    }
    FLog.w(REACT_CLASS, "setCropSize: " + cropsizeMessage);
  }

  @ReactProp(name = "playAnimatedImage")
  public void setPlayAnimatedImage(ReactImageView view, boolean playAnimatedImage) {
    FLog.w(REACT_CLASS, "setPlayAnimatedImage: " + playAnimatedImage);
    view.setPlayAnimatedImage(playAnimatedImage);
  }

  @ReactProp(name = "imageWarningThreshold")
  public void setImageWarningThreshold(ReactImageView view, ReadableMap imageWarningThreshold) {
    if (imageWarningThreshold != null && imageWarningThreshold.hasKey("imageSizeWarningThreshold")) {
      view.setImageSizeWarningThreshold((float) imageWarningThreshold.getDouble("imageSizeWarningThreshold"));
    }
  }

  @ReactProp(name = "animatedLoopCount")
  public void setAnimatedLoopCount(ReactImageView view, int animatedLoopCount) {
    view.setAnimatedLoopCount(animatedLoopCount);
  }

  @Override
  public @Nullable
  Map getExportedCustomDirectEventTypeConstants() {
    return MapBuilder.of(
      ImageLoadEvent.eventNameForType(ImageLoadEvent.ON_LOAD_START),
      MapBuilder.of("registrationName", "onKwaiImageLoadStart"),
      ImageLoadEvent.eventNameForType(ImageLoadEvent.ON_LOAD),
      MapBuilder.of("registrationName", "onKwaiImageLoad"),
      ImageLoadEvent.eventNameForType(ImageLoadEvent.ON_ERROR),
      MapBuilder.of("registrationName", "onKwaiImageError"),
      ImageLoadEvent.eventNameForType(ImageLoadEvent.ON_LOAD_END),
      MapBuilder.of("registrationName", "onKwaiImageLoadEnd"),
      ImageLoadEvent.eventNameForType(ImageLoadEvent.ON_GIF_END),
      MapBuilder.of("registrationName", "onKwaiImageGifPlayEnd"),
      ImageLoadEvent.eventNameForType(ImageLoadEvent.ON_ANIMATED_FRAME),
      MapBuilder.of("registrationName", "onKwaiImageAnimatedFrame"));
  }

  @Override
  protected void onAfterUpdateTransaction(ReactImageView view) {
    super.onAfterUpdateTransaction(view);
    FLog.w(REACT_CLASS, "onAfterUpdateTransaction");
    view.maybeUpdateView();
  }

  private JavaOnlyArray parseSource(Context context, @NonNull ReadableMap source) {
    ArrayList<String> urls = new ArrayList<>();

    ReadableArray urlArray = source.hasKey("uris") ? source.getArray("uris") : null;
    if (urlArray != null) {
      for (int i = 0; i < urlArray.size(); i++) {
        ReadableMap map = urlArray.getMap(i);

        String url = map.hasKey("url") ? map.getString("url") : null;
        if (!TextUtils.isEmpty(url)) {
          urls.add(url);
        }
      }
    }

    JavaOnlyArray sourceArray = new JavaOnlyArray();
    if (urls.isEmpty()) {
      String uri = source.getString("uri");
      String newUri = ImageSourceHandler.onInterceptImageSource(context, uri);
      if (TextUtils.equals(uri, newUri)) {
        sourceArray.pushMap(source);
      } else {
        WritableNativeMap sourceMap = new WritableNativeMap();
        sourceMap.merge(source);
        sourceMap.putString("uri", newUri);

        sourceArray.pushMap(sourceMap);
      }
    } else {
      for (String url : urls) {
        WritableNativeMap sourceMap = new WritableNativeMap();
        sourceMap.merge(source);
        sourceMap.putString("uri", ImageSourceHandler.onInterceptImageSource(context, url));
        sourceArray.pushMap(sourceMap);
      }
    }

    return sourceArray;
  }

  @Override
  public void getMemoryStats(MemoryStatsCallback memoryStatsCallback) {
    if (mImageMemoryMonitor != null) {
      Map<String, Long> result = new HashMap<>();
      result.put(REACT_CLASS, mImageMemoryMonitor.getMaxImageSize());
      memoryStatsCallback.onMemoryStatsCollected(result);
    }
  }
}
