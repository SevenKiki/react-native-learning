//
//  KwaiImageSource.m
//  react-native-kwai-image
//
//  Created by jiaozhiyu on 2020/11/12.
//

#import "KwaiImageSource.h"

static BOOL sSupportPathConvertEnabled = YES;
void Kwai_RCTEnableSupportPathConvert(BOOL supportPathConvert)
{
    sSupportPathConvertEnabled = supportPathConvert;
}

@implementation KwaiImageSource

- (instancetype)initWithURL:(NSURL *)url
                    cdnURLs:(NSArray *)urls
                   priority:(KwaiImagePriority)priority
                    headers:(NSDictionary *)headers
               cacheControl:(KwaiImageCacheControl)cacheControl
       decodeFirstFrameOnly:(BOOL)decodeFirstFrameOnly

{
    self = [super init];
    if (self) {
        // 兼容 JS 分包方案，进行路径转换
        _uri = sSupportPathConvertEnabled ? [self multiPackageImagePath:url] : url;
        _urls = urls;
        _priority = priority;
        _headers = headers;
        _cacheControl = cacheControl;
        _decodeFirstFrameOnly = decodeFirstFrameOnly;
    }
    return self;
}

- (NSURL *)multiPackageImagePath:(NSURL *)imageURL {
    NSString *imageURLStr = imageURL.absoluteString;
    if ([imageURLStr hasPrefix:@"file:///"]) {
        NSString *finalPath = nil;
        NSBundle *mainBundle = [NSBundle mainBundle];
        NSDictionary *info = [mainBundle infoDictionary];
        NSString *prodName = [info objectForKey:@"CFBundleName"];
        NSString *appBundleIdentifier = [prodName stringByAppendingString:@".app/"];
        NSArray<NSString *> *parts = [imageURLStr componentsSeparatedByString:appBundleIdentifier];
        if (parts.count >= 2 && parts[1].length > 0) {
            NSString *workDirectory = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject] stringByAppendingPathComponent:@"Bundles"];
            NSFileManager *fileManager  = [NSFileManager defaultManager];
            NSError *error;
            NSArray<NSString *> *files = [fileManager contentsOfDirectoryAtPath:workDirectory error:&error];
            if (error) {
                NSLog(@"RCTImage get path : %@, contents error is %@ ", workDirectory, error);
            }
            for (NSString *file in files) {
                finalPath = [workDirectory stringByAppendingPathComponent:[file stringByAppendingPathComponent:parts[1]]];
                if ([fileManager fileExistsAtPath:finalPath]) {
                    break;
                }
            }
            imageURL = [NSURL URLWithString:[@"file://" stringByAppendingString:finalPath]];
            NSLog(@"RCTImage hooked URL is %@ ", imageURL);
        }
    }
    return imageURL;
}

- (BOOL)isEqualToKwaiImageSource:(id)object {
    if (![object isKindOfClass:self.class]) {
        return NO;
    }
    
    KwaiImageSource *compareObject = (KwaiImageSource *)object;
    if (self.decodeFirstFrameOnly != compareObject.decodeFirstFrameOnly ||
        self.cacheControl != compareObject.cacheControl ||
        self.priority != compareObject.priority ||
        (!(self.uri == nil && compareObject.uri == nil) && ![self.uri isEqual:compareObject.uri]) ||
        (!(self.urls == nil && compareObject.urls == nil) && ![self.urls isEqualToArray:compareObject.urls]) ||
        (!(self.headers == nil && compareObject.headers == nil) && ![self.headers isEqualToDictionary:compareObject.headers])) {
        return NO;
    }

    return YES;
}

@end
