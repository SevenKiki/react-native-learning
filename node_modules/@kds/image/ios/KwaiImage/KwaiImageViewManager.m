//
//  KwaiImageViewManager.m
//  react-native-kwai-image
//
//  Created by jiaozhiyu on 2020/11/12.
//

#import <React/RCTBridgeModule.h>
#import "KwaiImageViewManager.h"
#import "KwaiImageView.h"
#import <KSWebImage/KSWebImagePrefetcher.h>

@implementation KwaiImageViewManager

RCT_EXPORT_MODULE(KwaiImageView)

- (KwaiImageView *)view {
    return [[KwaiImageView alloc] initWithBridge:self.bridge];
}

RCT_EXPORT_VIEW_PROPERTY(source, KwaiImageSource)
RCT_EXPORT_VIEW_PROPERTY(resizeMode, RCTResizeMode)
RCT_EXPORT_VIEW_PROPERTY(onKwaiImageLoadStart, RCTDirectEventBlock)
RCT_EXPORT_VIEW_PROPERTY(onKwaiImageProgress, RCTDirectEventBlock)
RCT_EXPORT_VIEW_PROPERTY(onKwaiImageError, RCTDirectEventBlock)
RCT_EXPORT_VIEW_PROPERTY(onKwaiImageLoad, RCTDirectEventBlock)
RCT_EXPORT_VIEW_PROPERTY(onKwaiImageLoadEnd, RCTDirectEventBlock)
RCT_EXPORT_VIEW_PROPERTY(onKwaiImageGifPlayEnd, RCTDirectEventBlock)
RCT_EXPORT_VIEW_PROPERTY(refreshCache, BOOL)
RCT_EXPORT_VIEW_PROPERTY(useDefaultCacheKey, BOOL)
RCT_REMAP_VIEW_PROPERTY(tintColor, imageColor, UIColor)
RCT_EXPORT_VIEW_PROPERTY(defaultSrc, NSDictionary)
RCT_REMAP_VIEW_PROPERTY(cropSize, cropSize, CGSize)
RCT_EXPORT_VIEW_PROPERTY(imageWarningThreshold, NSDictionary)
RCT_EXPORT_VIEW_PROPERTY(playAnimatedImage, BOOL)
RCT_EXPORT_VIEW_PROPERTY(animatedLoopCount, NSInteger)
RCT_EXPORT_VIEW_PROPERTY(requestUseCookie, BOOL)

RCT_EXPORT_METHOD(preload:(nonnull NSArray<KwaiImageSource *> *)sources resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    NSMutableArray *urls = [NSMutableArray arrayWithCapacity:sources.count];
    
    [sources enumerateObjectsUsingBlock:^(KwaiImageSource * _Nonnull source, NSUInteger idx, BOOL * _Nonnull stop) {
        [source.headers enumerateKeysAndObjectsUsingBlock:^(NSString *key, NSString* header, BOOL *stop) {
            [[SDWebImageDownloader sharedDownloader] setValue:header forHTTPHeaderField:key];
        }];
        [urls setObject:source.uri atIndexedSubscript:idx];
    }];
    
    [[KSWebImagePrefetcher sharedImagePrefetcher] prefetchURLs:urls
                                                      progress:nil
                                                     completed:^(NSUInteger noOfFinishedUrls, NSUInteger noOfSkippedUrls) {
        if (noOfSkippedUrls == 0) {
            resolve(@"true");
        }
        else {
            reject(@"false", @"image prefetch failed, please check the image uri", nil);
        }
    }];
    
}

RCT_EXPORT_METHOD(getSize:(NSString *)url resolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    KSWebImageOptions *options = [KSWebImageOptions new];
    options.cacheKeyFilter = ^NSString * _Nullable(NSString * _Nullable cacheKey) {
        return [cacheKey stringByAppendingString:@"_SDAnimated"];
    };
    [[KSWebImageManager sharedManager] loadImageWithURL:[NSURL URLWithString:url] options:options progress:nil completed:^(UIImage * _Nullable image, NSError * _Nullable error, KSWebImageLoadResult * _Nullable loadResult) {
            if (error) {
                reject(@(error.code), error.localizedFailureReason, error);
            } else {
                resolve(@{
                    @"width": @(image.size.width ?: 0),
                    @"height": @(image.size.height ?: 0)
                });
            }
    }];
}

@end
