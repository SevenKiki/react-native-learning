//
//  RCTConvert+KwaiImage.h
//  react-native-kwai-image
//
//  Created by jiaozhiyu on 2020/11/12.
//

#import "RCTConvert+KwaiImage.h"
#import "KwaiImageSource.h"

@implementation RCTConvert (KwaiImageSource)

RCT_ENUM_CONVERTER(KwaiImagePriority, (@{
                                   @"low": @(KwaiImagePriorityLow),
                                   @"normal": @(KwaiImagePriorityNormal),
                                   @"high": @(KwaiImagePriorityHigh),
                                   }), KwaiImagePriorityNormal, integerValue);

RCT_ENUM_CONVERTER(KwaiImageCacheControl, (@{
                                       @"immutable": @(KwaiImageCacheControlImmutable),
                                       @"web": @(KwaiImageCacheControlWeb),
                                       @"cacheOnly": @(KwaiImageCacheControlCacheOnly),
                                       }), KwaiImageCacheControlImmutable, integerValue);

+ (KwaiImageSource *)KwaiImageSource:(id)json {
    if (!json) {
        return nil;
    }
    
    NSString *uriString = json[@"uri"];
    NSArray *uris = json[@"uris"];
    NSURL *uri = ([uriString isKindOfClass:[NSNull class]] || uriString.length == 0) ? nil : [self NSURL:uriString];
    NSArray *cdnURLs = ([uris isKindOfClass:[NSNull class]]) ? @[] : uris;

    if (uri == nil && [cdnURLs isEqualToArray:@[]]) {
        return nil;
    }
    
    KwaiImagePriority priority = [self KwaiImagePriority:json[@"priority"]];
    KwaiImageCacheControl cacheControl = [self KwaiImageCacheControl:json[@"cache"]];
    BOOL decodeFirstFrameOnly = [self BOOL:json[@"decodeFirstFrameOnly"]] ?: false;

    NSDictionary *headers = [self NSDictionary:json[@"headers"]];
    if (headers) {
        __block BOOL allHeadersAreStrings = YES;
        [headers enumerateKeysAndObjectsUsingBlock:^(NSString *key, id header, BOOL *stop) {
            if (![header isKindOfClass:[NSString class]]) {
                RCTLogError(@"Values of HTTP headers passed must be  of type string. "
                            "Value of header '%@' is not a string.", key);
                allHeadersAreStrings = NO;
                *stop = YES;
            }
        }];
        if (!allHeadersAreStrings) {
            // Set headers to nil here to avoid crashing later.
            headers = nil;
        }
    }
    
    KwaiImageSource *imageSource = [[KwaiImageSource alloc] initWithURL:uri
                                                                cdnURLs:cdnURLs
                                                               priority:priority
                                                                headers:headers
                                                           cacheControl:cacheControl
                                                   decodeFirstFrameOnly:decodeFirstFrameOnly];
    
    return imageSource;
}

RCT_ARRAY_CONVERTER(KwaiImageSource);

@end
