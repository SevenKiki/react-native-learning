import React from 'react';
import { ImageResolvedAssetSource, ImageSourcePropType, FlexStyle, LayoutChangeEvent, ShadowStyleIOS, StyleProp, TransformsStyle, AccessibilityProps } from 'react-native';
export declare type ResizeMode = 'contain' | 'cover' | 'stretch' | 'center';
export declare type ResizeMethod = 'auto' | 'resize' | 'scale';
export declare const resizeMode: {
    readonly contain: "contain";
    readonly cover: "cover";
    readonly stretch: "stretch";
    readonly center: "center";
};
export declare const resizeMethod: {
    readonly auto: "auto";
    readonly resize: "resize";
    readonly scale: "scale";
};
export declare type Priority = 'low' | 'normal' | 'high';
export declare const priority: {
    readonly low: "low";
    readonly normal: "normal";
    readonly high: "high";
};
export declare type Cache = 'immutable' | 'web' | 'cacheOnly';
export declare const cacheControl: {
    readonly immutable: "immutable";
    readonly web: "web";
    readonly cacheOnly: "cacheOnly";
};
export declare type Source = {
    uri?: string;
    uris?: {
        [key: string]: string;
    }[];
    headers?: {
        [key: string]: string;
    };
    priority?: Priority;
    cache?: Cache;
    decodeFirstFrameOnly?: boolean;
};
export interface OnLoadEvent {
    nativeEvent: {
        width: number;
        height: number;
        isAnimatedImage: boolean;
    };
}
export interface OnProgressEvent {
    nativeEvent: {
        loaded: number;
        total: number;
    };
}
export interface OnAnimatedFrame {
    nativeEvent: {
        totalFrameCount: number;
        currentFrame: number;
    };
}
export declare type ImageWarningThreshold = {
    imageSizeWarningThreshold?: number;
    imageMemoryWarningThreshold?: number;
};
export declare type ImageSizeResponse = {
    width?: number;
    height?: number;
};
export interface ImageStyle extends FlexStyle, TransformsStyle, ShadowStyleIOS {
    backfaceVisibility?: 'visible' | 'hidden';
    borderBottomLeftRadius?: number;
    borderBottomRightRadius?: number;
    backgroundColor?: string;
    borderColor?: string;
    borderWidth?: number;
    borderRadius?: number;
    borderTopLeftRadius?: number;
    borderTopRightRadius?: number;
    overlayColor?: string;
    tintColor?: string;
    opacity?: number;
}
export interface KwaiImagePropsIOS {
    refreshCache?: boolean;
    useDefaultCacheKey?: boolean;
    requestUseCookie?: boolean;
}
export interface KwaiImagePropsAndroid {
    /**
     * When true, enables progressive jpeg streaming
     * @platform android
     */
    progressiveRenderingEnabled?: boolean;
    /**
     * Duration of fade in animation in ms. Defaults to 300
     *
     * @platform android
     */
    fadeDuration?: number;
    /**
     * The mechanism that should be used to resize the image when the image's dimensions
     * differ from the image view's dimensions. Defaults to 'auto'.
     *
     * - auto: Use heuristics to pick between resize and scale.
     * - resize: A software operation which changes the encoded image in memory before it gets decoded.
     *   This should be used instead of scale when the image is much larger than the view.
     * - scale: The image gets drawn downscaled or upscaled. Compared to resize, scale is
     *   faster (usually hardware accelerated) and produces higher quality images.
     *   This should be used if the image is smaller than the view.
     *   It should also be used if the image is slightly bigger than the view.
     *
     * More details about resize and scale can be found at http://frescolib.org/docs/resizing.html.
     *
     * @platform android
     */
    resizeMethod?: ResizeMethod;
    onAnimatedFrame?(event: OnAnimatedFrame): void;
}
export interface KwaiImageProps extends KwaiImagePropsAndroid, KwaiImagePropsIOS, AccessibilityProps {
    source: Source | number;
    resizeMode?: ResizeMode;
    fallback?: boolean;
    defaultSource?: Source | number;
    cropSize?: {
        width: number;
        height: number;
    };
    playAnimatedImage?: boolean;
    animatedLoopCount?: number;
    onLoadStart?(): void;
    onProgress?(event: OnProgressEvent): void;
    onLoad?(event: OnLoadEvent): void;
    onError?(): void;
    onLoadEnd?(): void;
    onGifPlayEnd?(): void;
    /**
     * onLayout function
     * Invoked on mount and layout changes with
     * {nativeEvent: { layout: {x, y, width, height}}}.
     */
    onLayout?: (event: LayoutChangeEvent) => void;
    /**
     * Style
     */
    style?: StyleProp<ImageStyle>;
    /**
     * TintColor
     * If supplied, changes the color of all the non-transparent pixels to the given color.
     */
    tintColor?: number | string;
    /**
     * A unique identifier for this element to be used in UI Automation testing scripts.
     */
    testID?: string;
    /**
     * Render children within the image.
     */
    children?: React.ReactNode;
    /**
     * Set the image size and memory warning threshold.
     * Image size and memory warning only happen on Debug mode.
     */
    imageWarningThreshold?: ImageWarningThreshold;
}
interface KwaiImageStaticProperties {
    resizeMode: typeof resizeMode;
    resizeMethod: typeof resizeMethod;
    priority: typeof priority;
    cacheControl: typeof cacheControl;
    preload: (sources: Source[]) => Promise<Response>;
    getSize: (uri: string) => Promise<ImageSizeResponse>;
    resolveAssetSource: (source: ImageSourcePropType) => ImageResolvedAssetSource;
}
declare const KwaiImage: React.ComponentType<KwaiImageProps> & KwaiImageStaticProperties;
export default KwaiImage;
