function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, memo } from 'react';
import { View, Image, NativeModules, requireNativeComponent, StyleSheet, Platform } from 'react-native';
const KwaiImageViewNativeModule = NativeModules.KwaiImageView;
export const resizeMode = {
  contain: 'contain',
  cover: 'cover',
  stretch: 'stretch',
  center: 'center'
};
export const resizeMethod = {
  auto: 'auto',
  resize: 'resize',
  scale: 'scale'
};
export const priority = {
  low: 'low',
  normal: 'normal',
  high: 'high'
};
export const cacheControl = {
  // Ignore headers, use uri as cache key, fetch only if not in cache.
  immutable: 'immutable',
  // Respect http headers, no aggressive caching.
  web: 'web',
  // Only load from cache.
  cacheOnly: 'cacheOnly'
};

function KwaiImageBase({
  source,
  tintColor,
  defaultSource,
  cropSize,
  onLoadStart,
  onProgress,
  onLoad,
  onError,
  onLoadEnd,
  onGifPlayEnd,
  onAnimatedFrame,
  style,
  fallback,
  children,
  // eslint-disable-next-line no-shadow
  resizeMode = 'cover',
  resizeMethod = 'auto',
  useDefaultCacheKey = true,
  refreshCache = false,
  forwardedRef,
  ...props
}) {
  if (fallback) {
    const cleanedSource = { ...source
    };
    const cleanedDefaultSource = { ...defaultSource
    };
    delete cleanedSource.cache;
    const resolvedSource = Image.resolveAssetSource(cleanedSource);
    const resolvedDefaultSource = Image.resolveAssetSource(cleanedDefaultSource);
    return /*#__PURE__*/React.createElement(View, {
      style: [styles.imageContainer, style],
      ref: forwardedRef
    }, /*#__PURE__*/React.createElement(Image, _extends({}, props, {
      style: StyleSheet.absoluteFill,
      source: resolvedSource,
      defaultSource: resolvedDefaultSource,
      onLoadStart: onLoadStart,
      onProgress: onProgress,
      onLoad: onLoad,
      onError: onError,
      onLoadEnd: onLoadEnd,
      resizeMode: resizeMode,
      resizeMethod: resizeMethod
    })), children);
  }

  var resolvedSource = Image.resolveAssetSource(source);
  var resolvedDefaultSource = Image.resolveAssetSource(defaultSource);
  var headers = null;

  if (typeof source !== 'number') {
    var safeSource = { ...source
    };

    if (safeSource == null || safeSource === undefined) {
      safeSource = {};
    }

    if (safeSource.uri == null || safeSource.uri === undefined) {
      safeSource.uri = '';
    }

    if (safeSource.uris === '' || safeSource.uris === undefined) {
      safeSource.uris = null;
    }

    if (safeSource.headers) {
      headers = safeSource.headers;
    }

    resolvedSource = safeSource;
  }

  if (cropSize != null && cropSize.height > 0 && cropSize.width > 0) {
    resizeMethod = 'resize';
  }

  return /*#__PURE__*/React.createElement(View, {
    style: [styles.imageContainer, style],
    ref: forwardedRef
  }, /*#__PURE__*/React.createElement(KwaiImageView, _extends({}, props, {
    tintColor: tintColor,
    style: StyleSheet.absoluteFill,
    source: resolvedSource,
    defaultSrc: Platform.OS == 'ios' ? resolvedDefaultSource : resolvedDefaultSource ? resolvedDefaultSource.uri : null,
    headers: headers,
    onKwaiImageLoadStart: onLoadStart,
    onKwaiImageProgress: onProgress,
    onKwaiImageLoad: onLoad,
    onKwaiImageError: onError,
    onKwaiImageLoadEnd: onLoadEnd,
    onKwaiImageGifPlayEnd: onGifPlayEnd,
    onKwaiImageAnimatedFrame: onAnimatedFrame,
    cropSize: cropSize,
    resizeMode: resizeMode,
    resizeMethod: resizeMethod,
    useDefaultCacheKey: useDefaultCacheKey,
    refreshCache: refreshCache
  })), children);
}

const KwaiImageMemo = /*#__PURE__*/memo(KwaiImageBase);
const KwaiImageComponent = /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(KwaiImageMemo, _extends({
  forwardedRef: ref
}, props)));
KwaiImageComponent.displayName = 'KwaiImage';
const KwaiImage = KwaiImageComponent;
KwaiImage.resizeMode = resizeMode;
KwaiImage.resizeMethod = resizeMethod;
KwaiImage.cacheControl = cacheControl;
KwaiImage.priority = priority;

KwaiImage.preload = sources => KwaiImageViewNativeModule.preload(sources);

KwaiImage.getSize = uri => KwaiImageViewNativeModule.getSize(uri);

KwaiImage.resolveAssetSource = source => Image.resolveAssetSource(source);

const styles = StyleSheet.create({
  imageContainer: {
    overflow: 'hidden'
  }
}); // Types of requireNativeComponent are not correct.

const KwaiImageView = requireNativeComponent('KwaiImageView', KwaiImage, {
  nativeOnly: {
    onKwaiImageLoadStart: true,
    onKwaiImageProgress: true,
    onKwaiImageLoad: true,
    onKwaiImageError: true,
    onKwaiImageLoadEnd: true
  }
});
export default KwaiImage;
//# sourceMappingURL=index.js.map