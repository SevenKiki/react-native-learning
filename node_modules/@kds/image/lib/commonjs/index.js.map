{"version":3,"sources":["index.tsx"],"names":["KwaiImageViewNativeModule","NativeModules","KwaiImageView","resizeMode","contain","cover","stretch","center","resizeMethod","auto","resize","scale","priority","low","normal","high","cacheControl","immutable","web","cacheOnly","KwaiImageBase","source","tintColor","defaultSource","cropSize","onLoadStart","onProgress","onLoad","onError","onLoadEnd","onGifPlayEnd","onAnimatedFrame","style","fallback","children","useDefaultCacheKey","refreshCache","forwardedRef","props","cleanedSource","cleanedDefaultSource","cache","resolvedSource","Image","resolveAssetSource","resolvedDefaultSource","styles","imageContainer","StyleSheet","absoluteFill","headers","safeSource","undefined","uri","uris","height","width","Platform","OS","KwaiImageMemo","KwaiImageComponent","ref","displayName","KwaiImage","preload","sources","getSize","create","overflow","requireNativeComponent","nativeOnly","onKwaiImageLoadStart","onKwaiImageProgress","onKwaiImageLoad","onKwaiImageError","onKwaiImageLoadEnd"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport {\n  View,\n  Image,\n  ImageResolvedAssetSource,\n  ImageSourcePropType,\n  NativeModules,\n  requireNativeComponent,\n  StyleSheet,\n  FlexStyle,\n  LayoutChangeEvent,\n  ShadowStyleIOS,\n  StyleProp,\n  Platform,\n  TransformsStyle,\n  AccessibilityProps,\n} from 'react-native';\n\nconst KwaiImageViewNativeModule = NativeModules.KwaiImageView;\n\nexport type ResizeMode = 'contain' | 'cover' | 'stretch' | 'center';\n\nexport type ResizeMethod = 'auto' | 'resize' | 'scale';\n\nexport const resizeMode = {\n  contain: 'contain',\n  cover: 'cover',\n  stretch: 'stretch',\n  center: 'center',\n} as const;\n\nexport const resizeMethod = {\n  auto: 'auto',\n  resize: 'resize',\n  scale: 'scale',\n} as const;\n\nexport type Priority = 'low' | 'normal' | 'high';\n\nexport const priority = {\n  low: 'low',\n  normal: 'normal',\n  high: 'high',\n} as const;\n\nexport type Cache = 'immutable' | 'web' | 'cacheOnly';\n\nexport const cacheControl = {\n  // Ignore headers, use uri as cache key, fetch only if not in cache.\n  immutable: 'immutable',\n  // Respect http headers, no aggressive caching.\n  web: 'web',\n  // Only load from cache.\n  cacheOnly: 'cacheOnly',\n} as const;\n\nexport type Source = {\n  uri?: string;\n  uris?: { [key: string]: string }[];\n  headers?: { [key: string]: string };\n  priority?: Priority;\n  cache?: Cache;\n  decodeFirstFrameOnly?: boolean;\n};\n\nexport interface OnLoadEvent {\n  nativeEvent: {\n    width: number;\n    height: number;\n    isAnimatedImage: boolean;\n  };\n}\n\nexport interface OnProgressEvent {\n  nativeEvent: {\n    loaded: number;\n    total: number;\n  };\n}\n\nexport interface OnAnimatedFrame {\n  nativeEvent: {\n    totalFrameCount: number;\n    currentFrame: number;\n  };\n}\n\nexport type ImageWarningThreshold = {\n  imageSizeWarningThreshold?: number; \n\timageMemoryWarningThreshold?: number;\n}\n\nexport type ImageSizeResponse = {\n  width?: number; \n  height?: number;\n}\n\nexport interface ImageStyle extends FlexStyle, TransformsStyle, ShadowStyleIOS {\n  backfaceVisibility?: 'visible' | 'hidden';\n  borderBottomLeftRadius?: number;\n  borderBottomRightRadius?: number;\n  backgroundColor?: string;\n  borderColor?: string;\n  borderWidth?: number;\n  borderRadius?: number;\n  borderTopLeftRadius?: number;\n  borderTopRightRadius?: number;\n  overlayColor?: string;\n  tintColor?: string;\n  opacity?: number;\n}\n\nexport interface KwaiImagePropsIOS {\n  refreshCache?: boolean;\n  useDefaultCacheKey?: boolean;\n  requestUseCookie?: boolean;\n}\n\nexport interface KwaiImagePropsAndroid {\n  /**\n   * When true, enables progressive jpeg streaming\n   * @platform android\n   */\n   progressiveRenderingEnabled?: boolean;\n   /**\n    * Duration of fade in animation in ms. Defaults to 300\n    *\n    * @platform android\n    */\n   fadeDuration?: number;\n   /**\n    * The mechanism that should be used to resize the image when the image's dimensions\n    * differ from the image view's dimensions. Defaults to 'auto'.\n    *\n    * - auto: Use heuristics to pick between resize and scale.\n    * - resize: A software operation which changes the encoded image in memory before it gets decoded.\n    *   This should be used instead of scale when the image is much larger than the view.\n    * - scale: The image gets drawn downscaled or upscaled. Compared to resize, scale is\n    *   faster (usually hardware accelerated) and produces higher quality images.\n    *   This should be used if the image is smaller than the view.\n    *   It should also be used if the image is slightly bigger than the view.\n    *\n    * More details about resize and scale can be found at http://frescolib.org/docs/resizing.html.\n    *\n    * @platform android\n    */\n   resizeMethod?: ResizeMethod;\n   onAnimatedFrame?(event: OnAnimatedFrame): void;\n}\n\nexport interface KwaiImageProps extends KwaiImagePropsAndroid, KwaiImagePropsIOS, AccessibilityProps {\n  source: Source | number;\n  resizeMode?: ResizeMode;\n  fallback?: boolean;\n  defaultSource?: Source | number;\n  cropSize?: {width: number; height: number };\n  playAnimatedImage?: boolean;\n  animatedLoopCount?: number;\n\n  onLoadStart?(): void;\n\n  onProgress?(event: OnProgressEvent): void;\n\n  onLoad?(event: OnLoadEvent): void;\n\n  onError?(): void;\n\n  onLoadEnd?(): void;\n\n  onGifPlayEnd?(): void;\n\n  /**\n   * onLayout function\n   * Invoked on mount and layout changes with\n   * {nativeEvent: { layout: {x, y, width, height}}}.\n   */\n  onLayout?: (event: LayoutChangeEvent) => void;\n\n  /**\n   * Style\n   */\n  style?: StyleProp<ImageStyle>;\n\n  /**\n   * TintColor\n   * If supplied, changes the color of all the non-transparent pixels to the given color.\n   */\n\n  tintColor?: number | string;\n\n  /**\n   * A unique identifier for this element to be used in UI Automation testing scripts.\n   */\n  testID?: string;\n\n  /**\n   * Render children within the image.\n   */\n  children?: React.ReactNode;\n\n  /**\n   * Set the image size and memory warning threshold.\n   * Image size and memory warning only happen on Debug mode. \n   */\n  imageWarningThreshold?: ImageWarningThreshold;\n}\n\nfunction KwaiImageBase({\n  source,\n  tintColor,\n  defaultSource,\n  cropSize,\n  onLoadStart,\n  onProgress,\n  onLoad,\n  onError,\n  onLoadEnd,\n  onGifPlayEnd,\n  onAnimatedFrame,\n  style,\n  fallback,\n  children,\n  // eslint-disable-next-line no-shadow\n  resizeMode = 'cover',\n  resizeMethod = 'auto',\n  useDefaultCacheKey = true,\n  refreshCache = false,\n  forwardedRef,\n  ...props\n}: KwaiImageProps & { forwardedRef: React.Ref<any> }) {\n  if (fallback) {\n    const cleanedSource = { ...(source as any) };\n    const cleanedDefaultSource = { ...(defaultSource as any) };\n    delete cleanedSource.cache;\n    const resolvedSource = Image.resolveAssetSource(cleanedSource);\n    const resolvedDefaultSource = Image.resolveAssetSource(cleanedDefaultSource);\n\n    return (\n      <View style={[styles.imageContainer, style]} ref={forwardedRef}>\n        <Image\n          {...props}\n          style={StyleSheet.absoluteFill}\n          source={resolvedSource}\n          defaultSource={resolvedDefaultSource}\n          onLoadStart={onLoadStart}\n          onProgress={onProgress}\n          onLoad={onLoad as any}\n          onError={onError}\n          onLoadEnd={onLoadEnd}\n          resizeMode={resizeMode}\n          resizeMethod={resizeMethod}\n        />\n        {children}\n      </View>\n    );\n  }\n\n  var resolvedSource = Image.resolveAssetSource(source as any);\n  var resolvedDefaultSource = Image.resolveAssetSource(defaultSource as any);\n  var headers = null\n  if (typeof source !== 'number') {\n    var safeSource = { ...(source as any) };\n    if (safeSource == null || safeSource === undefined) {\n      safeSource = {};\n    }\n    if (safeSource.uri == null || safeSource.uri === undefined) {\n      safeSource.uri = '';\n    }\n    if (safeSource.uris === '' || safeSource.uris === undefined) {\n      safeSource.uris = null;\n    }\n    if (safeSource.headers) {\n      headers = safeSource.headers;\n    }\n    resolvedSource = safeSource;\n  }\n  if (cropSize != null && cropSize.height >0 && cropSize.width > 0) {\n    resizeMethod = 'resize';\n  }\n  return (\n    <View style={[styles.imageContainer, style]} ref={forwardedRef}>\n      <KwaiImageView\n        {...props}\n        tintColor={tintColor}\n        style={StyleSheet.absoluteFill}\n        source={resolvedSource}\n        defaultSrc={Platform.OS == 'ios' ? resolvedDefaultSource : resolvedDefaultSource ? resolvedDefaultSource.uri : null}\n        headers={headers}\n        onKwaiImageLoadStart={onLoadStart}\n        onKwaiImageProgress={onProgress}\n        onKwaiImageLoad={onLoad}\n        onKwaiImageError={onError}\n        onKwaiImageLoadEnd={onLoadEnd}\n        onKwaiImageGifPlayEnd={onGifPlayEnd}\n        onKwaiImageAnimatedFrame={onAnimatedFrame}\n        cropSize={cropSize}\n        resizeMode={resizeMode}\n        resizeMethod={resizeMethod}\n        useDefaultCacheKey={useDefaultCacheKey}\n        refreshCache={refreshCache}\n      />\n      {children}\n    </View>\n  );\n}\ninterface KwaiImageStaticProperties {\n  resizeMode: typeof resizeMode;\n  resizeMethod: typeof resizeMethod;\n  priority: typeof priority;\n  cacheControl: typeof cacheControl;\n  preload: (sources: Source[]) => Promise<Response>;\n  getSize: (uri: string) => Promise<ImageSizeResponse>;\n  resolveAssetSource: (source: ImageSourcePropType) => ImageResolvedAssetSource;\n}\n\nconst KwaiImageMemo = memo(KwaiImageBase);\n\nconst KwaiImageComponent: React.ComponentType<KwaiImageProps> = forwardRef(\n  (props: KwaiImageProps, ref: React.Ref<any>) => (\n    <KwaiImageMemo forwardedRef={ref} {...props} />\n  )\n);\n\nKwaiImageComponent.displayName = 'KwaiImage';\n\nconst KwaiImage: React.ComponentType<KwaiImageProps> &\n  KwaiImageStaticProperties = KwaiImageComponent as any;\n\nKwaiImage.resizeMode = resizeMode;\n\nKwaiImage.resizeMethod = resizeMethod;\n\nKwaiImage.cacheControl = cacheControl;\n\nKwaiImage.priority = priority;\n\nKwaiImage.preload = (sources: Source[]) =>\n  KwaiImageViewNativeModule.preload(sources);\n\nKwaiImage.getSize = (uri: string) => \n  KwaiImageViewNativeModule.getSize(uri);\n\nKwaiImage.resolveAssetSource = (source: ImageSourcePropType) =>\n  Image.resolveAssetSource(source)\n\nconst styles = StyleSheet.create({\n  imageContainer: {\n    overflow: 'hidden',\n  },\n});\n\n// Types of requireNativeComponent are not correct.\nconst KwaiImageView = (requireNativeComponent as any)(\n  'KwaiImageView',\n  KwaiImage,\n  {\n    nativeOnly: {\n      onKwaiImageLoadStart: true,\n      onKwaiImageProgress: true,\n      onKwaiImageLoad: true,\n      onKwaiImageError: true,\n      onKwaiImageLoadEnd: true,\n    },\n  }\n);\n\nexport default KwaiImage;\n"]}