"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.cacheControl = exports.priority = exports.resizeMethod = exports.resizeMode = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const KwaiImageViewNativeModule = _reactNative.NativeModules.KwaiImageView;
const resizeMode = {
  contain: 'contain',
  cover: 'cover',
  stretch: 'stretch',
  center: 'center'
};
exports.resizeMode = resizeMode;
const resizeMethod = {
  auto: 'auto',
  resize: 'resize',
  scale: 'scale'
};
exports.resizeMethod = resizeMethod;
const priority = {
  low: 'low',
  normal: 'normal',
  high: 'high'
};
exports.priority = priority;
const cacheControl = {
  // Ignore headers, use uri as cache key, fetch only if not in cache.
  immutable: 'immutable',
  // Respect http headers, no aggressive caching.
  web: 'web',
  // Only load from cache.
  cacheOnly: 'cacheOnly'
};
exports.cacheControl = cacheControl;

function KwaiImageBase({
  source,
  tintColor,
  defaultSource,
  cropSize,
  onLoadStart,
  onProgress,
  onLoad,
  onError,
  onLoadEnd,
  onGifPlayEnd,
  onAnimatedFrame,
  style,
  fallback,
  children,
  // eslint-disable-next-line no-shadow
  resizeMode = 'cover',
  resizeMethod = 'auto',
  useDefaultCacheKey = true,
  refreshCache = false,
  forwardedRef,
  ...props
}) {
  if (fallback) {
    const cleanedSource = { ...source
    };
    const cleanedDefaultSource = { ...defaultSource
    };
    delete cleanedSource.cache;

    const resolvedSource = _reactNative.Image.resolveAssetSource(cleanedSource);

    const resolvedDefaultSource = _reactNative.Image.resolveAssetSource(cleanedDefaultSource);

    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: [styles.imageContainer, style],
      ref: forwardedRef
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Image, _extends({}, props, {
      style: _reactNative.StyleSheet.absoluteFill,
      source: resolvedSource,
      defaultSource: resolvedDefaultSource,
      onLoadStart: onLoadStart,
      onProgress: onProgress,
      onLoad: onLoad,
      onError: onError,
      onLoadEnd: onLoadEnd,
      resizeMode: resizeMode,
      resizeMethod: resizeMethod
    })), children);
  }

  var resolvedSource = _reactNative.Image.resolveAssetSource(source);

  var resolvedDefaultSource = _reactNative.Image.resolveAssetSource(defaultSource);

  var headers = null;

  if (typeof source !== 'number') {
    var safeSource = { ...source
    };

    if (safeSource == null || safeSource === undefined) {
      safeSource = {};
    }

    if (safeSource.uri == null || safeSource.uri === undefined) {
      safeSource.uri = '';
    }

    if (safeSource.uris === '' || safeSource.uris === undefined) {
      safeSource.uris = null;
    }

    if (safeSource.headers) {
      headers = safeSource.headers;
    }

    resolvedSource = safeSource;
  }

  if (cropSize != null && cropSize.height > 0 && cropSize.width > 0) {
    resizeMethod = 'resize';
  }

  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.imageContainer, style],
    ref: forwardedRef
  }, /*#__PURE__*/_react.default.createElement(KwaiImageView, _extends({}, props, {
    tintColor: tintColor,
    style: _reactNative.StyleSheet.absoluteFill,
    source: resolvedSource,
    defaultSrc: _reactNative.Platform.OS == 'ios' ? resolvedDefaultSource : resolvedDefaultSource ? resolvedDefaultSource.uri : null,
    headers: headers,
    onKwaiImageLoadStart: onLoadStart,
    onKwaiImageProgress: onProgress,
    onKwaiImageLoad: onLoad,
    onKwaiImageError: onError,
    onKwaiImageLoadEnd: onLoadEnd,
    onKwaiImageGifPlayEnd: onGifPlayEnd,
    onKwaiImageAnimatedFrame: onAnimatedFrame,
    cropSize: cropSize,
    resizeMode: resizeMode,
    resizeMethod: resizeMethod,
    useDefaultCacheKey: useDefaultCacheKey,
    refreshCache: refreshCache
  })), children);
}

const KwaiImageMemo = /*#__PURE__*/(0, _react.memo)(KwaiImageBase);
const KwaiImageComponent = /*#__PURE__*/(0, _react.forwardRef)((props, ref) => /*#__PURE__*/_react.default.createElement(KwaiImageMemo, _extends({
  forwardedRef: ref
}, props)));
KwaiImageComponent.displayName = 'KwaiImage';
const KwaiImage = KwaiImageComponent;
KwaiImage.resizeMode = resizeMode;
KwaiImage.resizeMethod = resizeMethod;
KwaiImage.cacheControl = cacheControl;
KwaiImage.priority = priority;

KwaiImage.preload = sources => KwaiImageViewNativeModule.preload(sources);

KwaiImage.getSize = uri => KwaiImageViewNativeModule.getSize(uri);

KwaiImage.resolveAssetSource = source => _reactNative.Image.resolveAssetSource(source);

const styles = _reactNative.StyleSheet.create({
  imageContainer: {
    overflow: 'hidden'
  }
}); // Types of requireNativeComponent are not correct.


const KwaiImageView = (0, _reactNative.requireNativeComponent)('KwaiImageView', KwaiImage, {
  nativeOnly: {
    onKwaiImageLoadStart: true,
    onKwaiImageProgress: true,
    onKwaiImageLoad: true,
    onKwaiImageError: true,
    onKwaiImageLoadEnd: true
  }
});
var _default = KwaiImage;
exports.default = _default;
//# sourceMappingURL=index.js.map