export type SuccessParams<T> = {
  /**
   * 响应的 header 头
   * @type {Record<string, any>}
   */
  headers: Record<string, any>;
  /**
   * 状态码
   * @type {number}
   */
  statusCode: number;
  /**
   * 响应数据
   * @type {T}
   */
  data: T;
  /**
   * 响应时携带的 cookie
   * @type {Array<string>}
   */
  cookies: Array<string>;
};

export type FailParams = {
  /**
   * 请求错误码
   * @type {number}
   */
  code: number;
  /**
   * 请求错误信息
   * @type {string}
   */
  message: string;
  /**
   * 原生的请求错误信息对象，原来的老版本 request 方法此字段为空
   * @type {Record<string, any>}
   */
  apiErrorInfo?: Record<string, any>;
};

export type SuccessHander<T> = (params: SuccessParams<T>) => void;
export type FailHander = (params: FailParams) => void;

export type RequestOptions<P> = {
  /**
   * 请求 url，必须是带域名的完整 url，暂时不支持只传 path
   * @type {string}
   */
  url: string;
  /**
   * 主站特殊的字段，用来确定host 和做dns,默认的 businessName 为 api
   * @type {string}
   */
  businessName?: string;
  /**
   * 请求方法
   * @type {('GET' | 'POST')}
   */
  method: 'GET' | 'POST';
  /**
   * 超时时间，单位为秒，Android 默认为 10s，IOS 默认为 15s
   * @type {number}
   */
  timeout?: number;
  /**
   * 请求头，格式为对象
   * @type {Record<string, any>}
   */
  headers?: Record<string, any>;
  /**
   * 请求参数，GET请求放到 query 区域， POST 放到 requestBody
   * @type {P}
   */
  params?: P;
  /**
   * 指定 query 参数，只在 POST 请求下生效，双端从 10.5.20 版本开始支持，低版本不支持
   * @type {Record<string, any>}
   */
  queryParams?: Record<string, any>;
  /**
   * 0 或 1，代表是否携带主站公共参数，默认为 1
   * @type {number}
   */
  isAddCommonParameters?: number;
  /**
   * 响应类型，默认为 json
   * @type {('string' | 'json')}
   */
  responseType?: 'string' | 'json';
};

export type ExportRequestOptions<R, P> = RequestOptions<P> & {
  /**
   * 是否返回 Promise 对象，默认为 true
   * @type {boolean}
   */
  returnPromise?: boolean;
  /**
   * 请求完成时执行的回调，无论是否成功或失败都会执行
   */
  complete?: (params: SuccessParams<R> | FailParams) => void;
  /**
   * 请求成功时执行的回调
   * @type {SuccessHander<R>}
   */
  success?: SuccessHander<R>;
  /**
   * 请求失败时执行的回调
   * @type {FailHander}
   */
  fail?: FailHander;
  /**
   * 请求拦截器
   * @type {Array<(options: ExportRequestOptions<R, P>) => ExportRequestOptions<R, P>>}
   */
  requestInterceptors?: Array<
    (options: ExportRequestOptions<R, P>) => ExportRequestOptions<R, P>
  >;
  /**
   * 响应拦截器
   * @type {Array<(options: SuccessParams<R>) => SuccessParams<any>>}
   */
  responseInterceptors?: Array<
    (response: SuccessParams<R>) => SuccessParams<any>
  >;
};
