import { NativeModules } from 'react-native';

export type Version = string | number;
export enum VersionIs {
  LessThan = -1,
  EqualTo = 0,
  GreaterThan = 1,
}

/**
 * Compare two versions quickly.
 * @param current Is this version greater, equal to, or less than the other?
 * @param other The version to compare against the current version
 * @return 1 if current is greater than other, 0 if they are equal or equivalent, and -1 if current is less than other
 */
export function versionCompare(current: Version, other: Version): VersionIs {
  const cp = String(current).split('.');
  const op = String(other).split('.');
  for (let depth = 0; depth < Math.min(cp.length, op.length); depth++) {
    const cn = Number(cp[depth]);
    const on = Number(op[depth]);
    if (cn > on) return VersionIs.GreaterThan;
    if (on > cn) return VersionIs.LessThan;
    if (!isNaN(cn) && isNaN(on)) return VersionIs.GreaterThan;
    if (isNaN(cn) && !isNaN(on)) return VersionIs.LessThan;
  }
  return VersionIs.EqualTo;
}

let appVersion = '';
export function getAppVersion() {
  if (appVersion) {
    return appVersion;
  }
  const {
    data: { appVersion: version },
  } = NativeModules.KRNBasic?.getDeviceInfoSync?.() || {
    data: {
      appVersion: '',
    },
  };

  appVersion = (version as string)?.match(/\d+\.\d+\.\d+/)?.[0] || '';
  return appVersion;
}
