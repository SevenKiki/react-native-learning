{"version":3,"sources":["utils.ts"],"names":["NativeModules","VersionIs","versionCompare","current","other","cp","String","split","op","depth","Math","min","length","cn","Number","on","GreaterThan","LessThan","isNaN","EqualTo","appVersion","getAppVersion","data","version","KRNBasic","getDeviceInfoSync","match"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AAGA,WAAYC,SAAZ;AAMA;AACA;AACA;AACA;AACA;AACA;;WAXYA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,KAAAA,S;;AAYZ,OAAO,SAASC,cAAT,CAAwBC,OAAxB,EAA0CC,KAA1C,EAAqE;AAC1E,QAAMC,EAAE,GAAGC,MAAM,CAACH,OAAD,CAAN,CAAgBI,KAAhB,CAAsB,GAAtB,CAAX;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACF,KAAD,CAAN,CAAcG,KAAd,CAAoB,GAApB,CAAX;;AACA,OAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASN,EAAE,CAACO,MAAZ,EAAoBJ,EAAE,CAACI,MAAvB,CAA5B,EAA4DH,KAAK,EAAjE,EAAqE;AACnE,UAAMI,EAAE,GAAGC,MAAM,CAACT,EAAE,CAACI,KAAD,CAAH,CAAjB;AACA,UAAMM,EAAE,GAAGD,MAAM,CAACN,EAAE,CAACC,KAAD,CAAH,CAAjB;AACA,QAAII,EAAE,GAAGE,EAAT,EAAa,OAAOd,SAAS,CAACe,WAAjB;AACb,QAAID,EAAE,GAAGF,EAAT,EAAa,OAAOZ,SAAS,CAACgB,QAAjB;AACb,QAAI,CAACC,KAAK,CAACL,EAAD,CAAN,IAAcK,KAAK,CAACH,EAAD,CAAvB,EAA6B,OAAOd,SAAS,CAACe,WAAjB;AAC7B,QAAIE,KAAK,CAACL,EAAD,CAAL,IAAa,CAACK,KAAK,CAACH,EAAD,CAAvB,EAA6B,OAAOd,SAAS,CAACgB,QAAjB;AAC9B;;AACD,SAAOhB,SAAS,CAACkB,OAAjB;AACD;AAED,IAAIC,UAAU,GAAG,EAAjB;AACA,OAAO,SAASC,aAAT,GAAyB;AAAA;;AAC9B,MAAID,UAAJ,EAAgB;AACd,WAAOA,UAAP;AACD;;AACD,QAAM;AACJE,IAAAA,IAAI,EAAE;AAAEF,MAAAA,UAAU,EAAEG;AAAd;AADF,MAEF,0BAAAvB,aAAa,CAACwB,QAAd,0GAAwBC,iBAAxB,kHAAiD;AACnDH,IAAAA,IAAI,EAAE;AACJF,MAAAA,UAAU,EAAE;AADR;AAD6C,GAFrD;AAQAA,EAAAA,UAAU,GAAG,CAACG,OAAD,aAACA,OAAD,iCAACA,OAAD,CAAqBG,KAArB,CAA2B,eAA3B,mDAA8C,CAA9C,MAAoD,EAAjE;AACA,SAAON,UAAP;AACD","sourcesContent":["import { NativeModules } from 'react-native';\n\nexport type Version = string | number;\nexport enum VersionIs {\n  LessThan = -1,\n  EqualTo = 0,\n  GreaterThan = 1,\n}\n\n/**\n * Compare two versions quickly.\n * @param current Is this version greater, equal to, or less than the other?\n * @param other The version to compare against the current version\n * @return 1 if current is greater than other, 0 if they are equal or equivalent, and -1 if current is less than other\n */\nexport function versionCompare(current: Version, other: Version): VersionIs {\n  const cp = String(current).split('.');\n  const op = String(other).split('.');\n  for (let depth = 0; depth < Math.min(cp.length, op.length); depth++) {\n    const cn = Number(cp[depth]);\n    const on = Number(op[depth]);\n    if (cn > on) return VersionIs.GreaterThan;\n    if (on > cn) return VersionIs.LessThan;\n    if (!isNaN(cn) && isNaN(on)) return VersionIs.GreaterThan;\n    if (isNaN(cn) && !isNaN(on)) return VersionIs.LessThan;\n  }\n  return VersionIs.EqualTo;\n}\n\nlet appVersion = '';\nexport function getAppVersion() {\n  if (appVersion) {\n    return appVersion;\n  }\n  const {\n    data: { appVersion: version },\n  } = NativeModules.KRNBasic?.getDeviceInfoSync?.() || {\n    data: {\n      appVersion: '',\n    },\n  };\n\n  appVersion = (version as string)?.match(/\\d+\\.\\d+\\.\\d+/)?.[0] || '';\n  return appVersion;\n}\n"]}