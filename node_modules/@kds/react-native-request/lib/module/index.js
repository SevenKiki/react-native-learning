export * from './types';
import { NativeModules, Platform } from 'react-native';
import { getAppVersion, versionCompare, VersionIs } from './utils';
const {
  KSURCTNetworkInterface: {
    requestV2: nativeRequestV2,
    request: nativeRequest
  } = {
    requestV2: undefined,
    request: undefined
  }
} = NativeModules;

async function request(originOptions) {
  const {
    success,
    fail,
    complete,
    returnPromise = true,
    requestInterceptors = [],
    responseInterceptors = [],
    ...otherOptions
  } = originOptions;
  const options = requestInterceptors.reduce((ret, reqInterceptor) => {
    return reqInterceptor(ret) || ret;
  }, otherOptions);
  let resolve;
  let reject;
  const timeout = options.timeout || (Platform.OS === 'android' ? 10 : 15);
  let timer;
  let hasResult = false;

  const successCallback = res => {
    var _resolve;

    clearTimeout(timer);

    if (hasResult) {
      return;
    }

    hasResult = true;
    const result = responseInterceptors.reduce((ret, resInterceptor) => {
      return resInterceptor(ret) || ret;
    }, res);
    success === null || success === void 0 ? void 0 : success(result);
    (_resolve = resolve) === null || _resolve === void 0 ? void 0 : _resolve(result);
    complete === null || complete === void 0 ? void 0 : complete(result);
  };

  const failCallback = err => {
    var _reject;

    clearTimeout(timer);

    if (hasResult) {
      return;
    }

    hasResult = true;
    fail === null || fail === void 0 ? void 0 : fail(err);
    (_reject = reject) === null || _reject === void 0 ? void 0 : _reject(err);
    complete === null || complete === void 0 ? void 0 : complete(err);
  }; // 如果是版本号小于 9.10.40，且 businessName 为 web_merchant，对于 url 中没有带 host 的补上 https://app.kwaixiaodian.com


  if (options.businessName === 'web_merchant' && !/^https?:\/\//.test(options.url || '')) {
    const appVersion = getAppVersion();

    if (versionCompare(appVersion, '9.10.40') === VersionIs.LessThan) {
      options.url = `https://app.kwaixiaodian.com/${(options.url || '').replace(/^\//, '')}`;
    }
  } // 兼容安卓 9.8.50 之前的 Content-Type


  if (options.headers && (options.headers['content-type'] || options.headers['Content-Type']) && Platform.OS === 'android') {
    const {
      headers: {
        'content-type': contentType,
        'Content-Type': contentType2
      }
    } = options;
    const mergedContentType = contentType || contentType2;
    const appVersion = getAppVersion();

    if (versionCompare(appVersion, '9.8.50') === VersionIs.LessThan && mergedContentType.indexOf('application/json') !== -1) {
      if (contentType) {
        options.headers['content-type'] = 'application/json';
      }

      if (contentType2) {
        options.headers['Content-Type'] = 'application/json';
      }
    }
  } // 兼容IOS 10.1.30 之前的 Content-Type


  if (options.headers && options.headers['content-type'] && Platform.OS === 'ios') {
    const {
      headers: {
        'content-type': contentType
      }
    } = options;
    const appVersion = getAppVersion();

    if (versionCompare(appVersion, '10.1.30') === VersionIs.LessThan) {
      delete options.headers['content-type'];
      options.headers['Content-Type'] = contentType;
    }
  } // IOS 10.5.10 以下不应该使用 V2 接口


  const isIosLessThan10_5_10 = Platform.OS === 'ios' && versionCompare(getAppVersion(), '10.5.10') === VersionIs.LessThan; // Android 11.0.30 以下且 responseType 等于 string 时不应该使用 V2 接口

  const isAndroidAndReponseTypeStringAndLessThan11_0_30 = options.responseType === 'string' && Platform.OS === 'android' && versionCompare(getAppVersion(), '11.0.30') === VersionIs.LessThan;
  const useRequestV2 = !!nativeRequestV2 && !isIosLessThan10_5_10 && !isAndroidAndReponseTypeStringAndLessThan11_0_30;

  if (useRequestV2) {
    nativeRequestV2({ ...options
    }, res => {
      const parsedRes = JSON.parse(res);
      successCallback(parsedRes);
    }, err => {
      const parsedErr = JSON.parse(err);
      failCallback(parsedErr);
    });
  } else if (nativeRequest) {
    nativeRequest(options).then(data => {
      const compatibleRes = {
        data,
        headers: {},
        statusCode: 200,
        cookies: []
      };
      successCallback(compatibleRes);
    }).catch(_ref => {
      let {
        code,
        message
      } = _ref;
      failCallback({
        code,
        message
      });
    });
  } else {
    // 没有原生请求模块暂时直接返回失败
    failCallback({
      code: -1,
      message: '',
      apiErrorInfo: {}
    });
  } // 如果规定时间没响应自动超时


  timer = setTimeout(() => {
    failCallback({
      code: -2,
      message: '请求接口超时',
      apiErrorInfo: {}
    });
  }, timeout * 1000);
  return returnPromise ? new Promise((res, rej) => {
    resolve = res;
    reject = rej;
  }) : undefined;
}

export default request;
//# sourceMappingURL=index.js.map