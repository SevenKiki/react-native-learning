import Core from '@ks-radar/radar-core';
import NavigationCollect from '@ks-radar/radar-navigation-collect';
import ApiCollect from '@ks-radar/radar-api-collect';
import ResourceCollect from '@ks-radar/radar-resource-collect';
import ChromeMetricsCollect from '@ks-radar/radar-chrome-metrics-collect';
import EventCollect from '@ks-radar/radar-event-collect';
import ErrorCollect from '@ks-radar/radar-error-collect';
import { ActionEndDimension, ActionStartDimension } from '@ks-radar/radar-event-collect/dist/types/src/interface';
import RadarSpaFmpCollect from '@ks/radar-spa-fmp-sdk';
import type { RadarOptions } from './index';
export interface RadarVueSpaOptions extends RadarOptions {
    router?: any;
    pageMainElMap?: {
        [routerPath: string]: string;
    };
    enableReportRpv?: boolean;
    isSpaDebugger?: boolean;
}
/** TODO: 应当继承 index.ts 文件中的 Radar 类，两者的逻辑重复度极高，之后需要修改逻辑时也得注意要两边一起改才行，容易漏掉。 */
export declare class RadarVueSpa {
    static key: string;
    static version: string;
    weblogger: any;
    core: Core;
    navigationCollect: NavigationCollect;
    apiCollect?: ApiCollect;
    resourceCollect?: ResourceCollect;
    chromeMetricsCollect: ChromeMetricsCollect;
    eventCollect: EventCollect;
    errorCollect?: ErrorCollect;
    spaFMPCollector: RadarSpaFmpCollect;
    action: {
        start: (dimension: ActionStartDimension) => void;
        end: (dimension: ActionEndDimension) => void;
    };
    constructor(options: RadarVueSpaOptions);
    apply(weblogger: any): void;
    bindWeblogger(weblog: any): void;
    event(res: any, value?: any): void;
    customStage(key: string, options?: any): void;
    setDimensions(param: any): void;
    fmp(option?: number | {
        currentRoutePath: string;
        timestamp?: number;
    }): void;
    sfmp(option: {
        currentRoutePath?: string;
        extendInfo?: any;
        timestamp?: number;
    }): void;
    ffp(option: {
        currentRoutePath?: string;
        extendInfo?: any;
    }): void;
    sffp(option: {
        currentRoutePath: string;
        extendInfo?: any;
    }): void;
    spa(option: {
        currentRoutePath?: string;
        extendInfo?: any;
    }): void;
    captureException(e: Error): void;
    destroy(): void;
}
