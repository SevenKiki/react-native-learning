import Core from '@ks-radar/radar-core';
import NavigationCollect from '@ks-radar/radar-navigation-collect';
import ApiCollect from '@ks-radar/radar-api-collect';
import ResourceCollect from '@ks-radar/radar-resource-collect';
import ChromeMetricsCollect from '@ks-radar/radar-chrome-metrics-collect';
import EventCollect from '@ks-radar/radar-event-collect';
import ErrorCollect from '@ks-radar/radar-error-collect';
import { ActionEndDimension, ActionStartDimension } from '@ks-radar/radar-event-collect/dist/types/src/interface';
import { APIHooKData, APIHooKResData, isIgnoreInvalidStatusCodeData } from '@ks-radar/radar-api-collect/dist/types/src/interface';
import { ResourceHookData, ResourceHookResData } from '@ks-radar/radar-resource-collect/dist/types/src';
import { SetDimensionParam } from '@ks-radar/radar-core/dist/types/src/types';
import { TimelineOption } from '@ks-radar/radar-navigation-collect/dist/types/src/interface';
/** NOTE: 该目录其它 index.*.ts 文件中，会扩展该类型以声明各自的配置类型 */
export interface RadarOptions {
    weblog?: any;
    projectId: string;
    sampling?: number;
    APIHook?: (apiData: APIHooKData) => APIHooKResData;
    resourceHook?: (data: ResourceHookData) => ResourceHookResData;
    lcp?: boolean;
    cls?: boolean;
    fid?: boolean;
    fcp?: boolean;
    mainApi?: string | string[];
    mainJs?: string | string[];
    unuseAPIPlugin?: boolean;
    ignoreXHR?: boolean;
    ignoreFetch?: boolean;
    unuseErrorPlugin?: boolean;
    unuseResourcePlugin?: boolean;
    resourceSampling?: number;
    apiSampling?: number;
    errorSampling?: number;
    customizeRadarStatus?: (data: any) => any;
    ignoreList?: string[];
    httpReportFirst?: boolean;
    customDimensions?: SetDimensionParam;
    isIgnoreInvalidStatusCode?: (res: isIgnoreInvalidStatusCodeData) => Promise<boolean>;
}
export declare class Radar {
    static key: string;
    static version: string;
    weblogger: any;
    core: Core;
    navigationCollect: NavigationCollect;
    apiCollect?: ApiCollect;
    resourceCollect?: ResourceCollect;
    chromeMetricsCollect: ChromeMetricsCollect;
    eventCollect: EventCollect;
    errorCollect?: ErrorCollect;
    action: {
        start: (dimension: ActionStartDimension) => void;
        end: (dimension: ActionEndDimension) => void;
    };
    constructor(options: RadarOptions);
    apply(weblogger: any): void;
    bindWeblogger(weblog: any): void;
    event(res: any, value?: any): void;
    customStage(key: string, options?: TimelineOption): void;
    setDimensions(param: any): void;
    fmp(option?: number | {
        timestamp?: number;
    }): void;
    captureException(e: Error): void;
    destroy(): void;
}
