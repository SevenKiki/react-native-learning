/**
 *
 * Radar Error 采集器
 *
 */
import { BaseCollect, RadarCore } from '@ks-radar/radar-util';
import { ErrorLog } from './types';
/**
 * 解析错误信息，生成 ErrorLog 数据结构。
 *
 * 错误信息最好是一个 Error 类的实例，这可以让我们拿到完整的错误类型、消息、堆栈和其它有用的信息。
 *
 * 但也可以是一个字符串，或其它任意类型的值，此时错误类型将是该值的值类型（如：string、null 等），
 * 且错误消息将生成为一种特殊格式，用于提醒使用者，而至于堆栈信息什么的，就别想了。
 *
 * @param flag 错误标记，如 `promise error`, `global error` 等，主要用于生成特殊格式的错误消息；
 * @param error 错误信息；
 */
export declare function generateScriptErrorLog(flag: 'Captured Exception' | 'Global Uncaught Exception' | 'Unhandled Promise Rejection', error: Error | string | any, event?: ErrorEvent): ErrorLog;
export declare class RadarErrorCollect extends BaseCollect {
    constructor(data: {
        core: RadarCore;
        sampling?: number;
    });
    init(): void;
    destroy(): void;
    parseSeedLog(): void;
    private onError;
    private onPromiseError;
    /**
     * collect之前进行筛选
     * 策略是：相同的错误短时间内多次触发算作一条日志
     * 一般认为 同一文件，同一行，同一列的报错为同一错误 不重复收集
     */
    private isSameErrorAndReport;
    private collect;
    /**
     * 用于主动记录某个错误，并在雷达后台中跟踪它们。
     *
     * ## 场景 一
     *
     * 对于使用 try...catch... 捕获的错误，若想要记录并跟踪它们，则可以使用该方法：
     *
     * ```javascript
     * try {
     *     doSomething();
     * } catch (error) {
     *     weblog.plugins.radar.captureException(error);
     * }
     * ```
     *
     * ## 场景 二
     *
     * 用于记录 Vue 组件中的未捕获异常：
     *
     * ```javascript
     * Vue.config.errorHandler = function (error) {
     *     weblog.plugins.radar.captureException(error);
     * }
     * ```
     *
     * @param error - 错误信息，最好是传入一个 Error 对象，因为这可以让我们记录下该错误发生的地点以及其它有用的信息。
     */
    captureException(error: Error): void;
}
