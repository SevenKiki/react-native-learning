import { RadarCore, BaseCollect } from '@ks-radar/radar-util';
import { APIHooKData, APIHooKResData, MainApi, isIgnoreInvalidStatusCodeData } from './interface';
interface APICollectOptions {
    core?: RadarCore;
    sampling?: number;
    ignoreXHR?: boolean;
    ignoreFetch?: boolean;
    ignoreList?: string[];
    APIHook?: (apiData: APIHooKData) => APIHooKResData;
    customizeRadarStatus?: (data: any) => any;
    isIgnoreInvalidStatusCode?: (res: isIgnoreInvalidStatusCodeData) => Promise<boolean> | boolean;
}
export declare class RadarAPICollect extends BaseCollect {
    private ignoreList;
    private APIHook?;
    private unhookXML?;
    private unhookFetch?;
    private queue;
    private logList;
    private perfList;
    private customizeRadarStatus?;
    private observer;
    broadcastApi: {
        off(handler: (event: MainApi) => void): void;
        on(handler: (event: MainApi) => void): () => void;
        once(handler: (event: MainApi) => void): () => void;
        emit(event: MainApi): void;
    };
    initiatorTypeList: string[];
    private option;
    constructor(data?: APICollectOptions);
    private init;
    /**
     * 处理APIHook函数
     * @param payload
     * @returns
     */
    private customHook;
    /**
     * 处理 PerformanceObserver
     * @param perf
     */
    private observeAPI;
    /**
     * 对有效接口标记开始时间并添加到queue中
     * @param request
     */
    private beforeHook;
    /**
     * 接口返回后获取采集数据
     * @param request
     * @param response
     */
    private afterHook;
    destroy(): void;
    /**
     * 合并数据
     * @param allPerf  从Performance中获取的数据
     * @param info  利用apiHook拿到的数据
     * @returns 是否合并
     */
    private mergeAPIPerf;
    private takeItem;
    /**
     * 日志上报
     * @param item
     */
    private collect;
}
export {};
