import { BaseCollect, RadarCore, MainApi, ResourceLog } from '@ks-radar/radar-util';
import { RadarTiming, TimelineOption } from './interface';
export declare class RadarNavigationCollect extends BaseCollect {
    private hasFMP;
    private syncMetricNum;
    private customKeys;
    private custom_metric;
    private optionsMainAPI;
    private mainAPIList;
    private radarMainApiList;
    private mainJSList;
    private radarMainJSList;
    radarTiming: RadarTiming;
    constructor(options: {
        core: RadarCore;
        mainApi?: string | string[];
        mainJs?: string | string[];
    });
    init(): void;
    /**
     * 上报自定义性能指标
     * @param key
     * @param options
     * @returns
     */
    customStage(key: string, options?: TimelineOption): void;
    /**
     * 验证传入时间戳是否合法
     * - 校验类型
     * - 校验数值大于navigationStart
     * @param timestamp
     * @param type
     * @returns
     */
    private isValidTimestamp;
    fmp(time?: number): void;
    /**
     * 从performance获取相关数据
     */
    private getPerformanceData;
    private h5Load;
    /**
     * 处理从API采集器收集传入的API数据，主要是以下内容：
     * - 缓存fmp之前的api请求的开始和结束，在调用fmp时计算main_api
     * - 将接口性能添加到 mainApiResult
     * @param item
     * @returns 是否继续调用
     */
    dealAPI: (item: MainApi) => boolean;
    /**
     * 缓存fmp之前的api请求的开始和结束，在调用fmp时计算main_api
     * @param item
     */
    private cacheAndCalculateMainAPI;
    /**
     * 将接口性能添加到 main_api_list
     * @param item
     */
    private addMainApiResult;
    /**
     * 将接口性能添加到 mainJSResult
     * @param item
     * @returns 是否继续调用
     */
    addMainJSResult: (item: ResourceLog) => boolean;
    destroy(): void;
    private collect;
}
