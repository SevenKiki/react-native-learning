import { RADAR_KEY } from './interface';
interface LogData {
    key: RADAR_KEY;
    dimension: ErrorDimension & LoadDimension & EventDimension & ResourceDimension & ApiDimension & BloodDimension;
    value: {
        [key: string]: any;
    };
}
interface ApiDimension {
    custom_failed: boolean;
    api: string;
    status: number;
    res_type: string;
    protocol: string;
    cached: boolean;
}
interface ResourceDimension {
    failed?: boolean;
    res_path?: string;
    file: string;
    event_client_timestamp?: number | string;
}
interface EventDimension {
    name: string;
}
interface ErrorDimension {
    msg: string;
    error_type: string;
    error_cons_type: string;
    sample_rate: number;
    line?: number;
    col?: number;
    event_client_timestamp?: number | string;
}
interface LoadDimension {
    event_name: 'radar_init' | 'h5_load' | 'fmp' | 'main_api' | 'h5_custom_metric';
    custom_metric_name?: string;
}
interface BloodDimension {
    data: {
        com: string;
        host?: string;
    };
}
interface KRNCoreConfig {
    weblog?: any;
    weblogger?: any;
    sampling?: number;
    sessionId?: string;
    bundleId?: string;
    bundleVersionCode?: number;
    bundleVersion?: string;
    componentName?: string;
    jsExecutor?: string;
    scheme?: string;
    props?: any;
}
/**
 * 验证 Load 类型
 * 每个 load 类型都需要有 event_name 的上报，才能清洗
 * 不同的event_name有不同的内容需要验证，！！ 这里的验证只是挑一些关键的指标进行验证，不全面 ！！
 * value里的内容需要都是 string 类型的，保证精度
 * todo event_name 为 main_api 的验证
 * @param data 日志内容
 * @returns boolean 是否验证通过
 */
export declare function verifyLoad(data: LogData): boolean;
/**
 * 验证 Api 类型
 * custom_failed,api,duration,status,res_type,protocol,cached,size 存在，且类型合适
 * value是字符串
 * @param data 日志内容
 * @returns boolean 是否验证通过
 */
export declare function verifyApi(data: LogData): boolean;
/**
 * 验证 Error 类型
 * error部分需要验证的是 error_type, error_cons_type, msg 这三个字段
 * 三个字段都要存在且是 string 类型
 * col line 不必须存在，但是存在的话需要是 number 类型
 * 其他的dimension里的内容都需要是 string 类型
 * @param data 日志内容
 * @returns boolean 是否验证通过
 */
export declare function verifyError(data: LogData): boolean;
/**
 * 验证 Resource 类型
 * failed是否存在
 * failed 为 true 时，验证 file 和 res_path 存在且为 string 类型
 * failed 为 false 时，验证 value 中是否都是字符串, dimension 中的 file 也是 string
 * @param data 日志内容
 * @returns boolean 是否验证通过
 */
export declare function verifyResource(data: LogData): boolean;
/**
 * 验证 Event 类型
 * event只需要验证 value 的内容是 string 类型。todo name 必须存在，且是128个字符以内的 string 类型
 * @param data 日志内容
 * @returns boolean 是否验证通过
 */
export declare function verifyEvent(data: LogData): boolean;
/**
 * 验证Blood
 * 验证是否有许血缘关系数组，数组是否有com，com为string
 * @param data 日志内容
 * @returns boolean 是否验证通过
 */
export declare function verifyBlood(log: LogData): boolean;
/**
 * 验证 krn 环境初始化雷达的参数
 * @param data 部分初始化参数
 * @returns boolean | string 是否验证通过
 */
export declare function verifyKRNParams(data: KRNCoreConfig): boolean | string;
export declare function verify(data: LogData): any;
export {};
