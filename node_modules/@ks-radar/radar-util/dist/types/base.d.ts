import { RadarCore, RADAR_KEY } from './interface';
export declare abstract class BaseCollect {
    private key;
    private version?;
    private name?;
    sampling?: number;
    core?: RadarCore;
    isHit: boolean;
    private baseOptions;
    constructor(options?: {
        core?: RadarCore;
        sampling?: number;
        key?: RADAR_KEY | string;
        version?: string;
        name?: string;
    });
    /**
     * 更新core，并处理core相关调整
     * @param core
     */
    updateCore(core: RadarCore): void;
    /**
     * 动态更新采样率
     */
    private broadcastSampleFb;
    /**
     * 获取当前采集器的采样率
     * @param sampling 传入的采集器配置的采样率
     * @returns 期望的采样率
     */
    private getSample;
    /**
     * 判断是否采样
     * 1.如果isHit为false，则返回false，即core不上报，所有的都不上报
     * 2.期望的采样率是a，core会做一个整体的采样b，所以采集器的采样应当是a/b，
     *   即若core的采样率是0.8，采集器的采样率是0.4，那么真实应用到采集器上的采样率应当是0.4/0.8=0.5
     * 3.若相除之后大于1，由于使用的采样方式是random，所以是全部采样的，相当于采样率是1
     * @param sampling 当前采集器期望的采样率
     * @returns 是否采样
     */
    private samplingControl;
    baseCollect(data: {
        dimension?: {
            [key: string]: any;
        };
        value?: object;
        key?: string;
    }): void;
}
