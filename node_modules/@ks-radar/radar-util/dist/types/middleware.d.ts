/**
 * @file 中间件管理
 */
/**
 * 执行中间件
 * @param middlewares
 * @returns
 */
export declare function compose(middlewares: any[]): (context: any, next?: any) => any;
/**
 * 中间件管理器
 *
 * @example
 * const request = new MiddlewareManager((context, next)=>{
 *   const {url, ...options} = context
 *   return fetch(context.url, options)
 * })
 *
 * request.use((context, next)=>{
 *   if(!context.method) context.method = 'GET'
 *   context.headers = {
 *     'content-type': 'application/json',
 *     ...context.headers
 *   }
 *   return next()
 * })
 *
 * request.invoke({
 *   url: 'https://liusong.kproxy.corp.kuaishou.com/abc'
 * })
 */
export declare class MiddlewareManager {
    middlewares: any[];
    constructor(...middleware: any[]);
    /**
     * 添加使用一个新的中间件
     * @param middlewares
     */
    use(...middlewares: any[]): void;
    /**
     * 执行所有已添加的中间件
     * @param context
     * @returns
     */
    invoke(context: any): any;
}
