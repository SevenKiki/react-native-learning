import { ServerTiming } from './server-timing';
import { PerformanceTimingProperty, radarWebviewTimingProperty } from './types';
export interface SampleList {
    isHit: boolean;
    core: number;
    api?: number;
    error?: number;
    resource?: number;
    event?: number;
    web_log?: number;
    web_log_size?: number;
    web_log_inter?: number;
    web_log_per_cnt?: number;
}
/**
 * 风控拦截状态intercept_result为 risk-control 是的 code
 * undefined：未知 （非API，在日志上报前没有任何接口被拦截）
 * 2：直接拦截 （是更严格的处置手段，防止黑产破解验证码，但是对误伤的用户体验差一些）
 * 2001：滑块验证 （是一种用户体验比较好的拦截手段，用户可以自行解开，但是有些高级一点的黑产可以破解）
 * https://docs.corp.kuaishou.com/d/home/fcADROZ_yXhF9jiGvCMDQU05Z
 */
export interface CommonDimension {
    intercept_result?: 'risk-control' | string;
    intercept_result_code?: string;
    happen_stage?: string;
}
export interface RadarCore {
    weblog?: any;
    isInYoda: boolean;
    sampling: number;
    radarSessionId: string;
    sampleData: SampleList;
    ignoreList: string[];
    randomSampling: number;
    collect: (key: string, dimension: any, value?: any) => void;
    setDimensions: (param: any) => void;
    setCommonDimension?: (key: keyof CommonDimension, value: any, isCover?: boolean) => void;
    flush: () => void;
    samplingControl(sampling: number): boolean;
    broadcastSample: {
        off(handler: (event: SampleList) => void): void;
        on(handler: (event: SampleList) => void): () => void;
        once(handler: (event: SampleList) => void): () => void;
        emit(event: SampleList): void;
    };
}
export declare enum RADAR_KEY {
    LOAD = "load",
    RES = "resource",
    API = "api",
    ERROR = "error",
    SDK_ERROR = "sdk_error",
    CUSTOM = "custom",
    BATCH = "batch",
    EVENT = "event",
    BLOOD = "blood"
}
export declare type PerfMapType = DOMPerf & ResPerf & APIPerf;
export interface DOMPerf extends RadarPerf {
    redirect?: number;
    redirect_count?: number;
    dns_start?: number;
    tcp_start?: number;
    ssl_start?: number;
    dom_parse_start?: number;
    fp?: number | null;
    dom_ready?: number;
    dom_parse?: number;
    blank?: number;
    resource?: number;
    tti?: number;
    js_cost?: number;
    dom_num?: number;
    request_start?: number;
}
export interface RadarPerf {
    dns?: number;
    tcp?: number;
    ssl?: number;
    ttfb?: number;
    trans?: number;
    total?: number;
    fb?: number;
    protocol?: string;
    has_timing_allow?: boolean;
}
export interface ResPerf extends RadarPerf {
    start_time?: number;
    fetch_start?: number;
    cached?: boolean;
    file?: string;
    size?: number;
    res_type?: string;
    duration?: number;
    cached_type?: 'unknown' | 'hit_browser' | 'miss_browser' | 'miss_cdn' | 'hit_cdn';
    cdn_duration?: number;
    cdn_ip?: string;
}
export declare type APIPerf = APILog & APIPerfInfo;
export interface APILog {
    size?: number;
    duration?: number;
    status?: number;
    api?: string;
    method?: string;
    protocol?: string;
    responseData?: string;
    logTime?: number;
}
export interface APIPerfInfo extends RadarPerf {
    start_time?: number;
    fetch_start?: number;
    cached?: boolean;
    file?: string;
    size?: number;
    res_type?: string;
    duration?: number;
    apiTime?: MainApi;
    perfTime?: string;
    server_timing?: ServerTiming[];
}
export interface MainApi {
    url?: string;
    size?: number;
    cached?: boolean;
    status?: number;
    method?: string;
    fetch_start?: number;
    dns_start?: number;
    dns_end?: number;
    ssl_start?: number;
    request_start?: number;
    response_start?: number;
    response_end?: number;
    [key: string]: any;
}
export declare type radarCustomPerf = {
    fmp?: number;
    radarFmp?: number;
};
export declare type webviewPerf = {
    userStart?: number;
    pageStart?: number;
    pageShow?: number;
    preCreate?: number;
    created?: number;
    startLoad?: number;
    didStartLoad?: number;
    didEndLoad?: number;
};
export declare type radarWebviewPerf = {
    [key: string]: any;
};
export declare type PerfKey = keyof DOMPerf & keyof ResPerf & keyof webviewPerf & keyof radarWebviewPerf & keyof radarCustomPerf;
export declare type PerfTime = PerformanceNavigationTiming & PerformanceResourceTiming & webviewPerf & radarCustomPerf & PerformanceEntry;
declare type customCollectKey = 'main_data_receive_end' | 'fmp';
export interface PerfItem {
    start?: PerformanceTimingProperty | radarWebviewTimingProperty;
    end?: PerformanceTimingProperty | radarWebviewTimingProperty | customCollectKey;
    cachedSkip?: boolean;
    notCatchIfUndefined?: boolean;
    crossOriginSkip?: boolean;
    custom?(key: string, timing: PerfTime | radarWebviewPerf): number | string | boolean | null | undefined;
}
export declare type PerfMap<T> = {
    [key in keyof T]: PerfItem;
};
export interface ResourceLog {
    encoded_body_size?: number;
    decoded_body_size?: number;
    redirect_start?: number;
    redirect_end?: number;
    dns_start?: number;
    dns_end?: number;
    connect_start?: number;
    connect_end?: number;
    ssl_start?: number;
    request_start?: number;
    response_start?: number;
    response_end?: number;
    fetch_start?: number;
    dns?: number;
    tcp?: number;
    ssl?: number;
    ttfb?: number;
    trans?: number;
    fb?: number;
    total?: number;
    duration?: number;
    size?: number;
    protocol?: string;
    file?: string;
    res_type?: string;
    cached?: boolean;
    failed?: boolean;
    res_path?: string;
    start_time?: number;
}
export {};
