import { Base } from './base';
import { ClientEvent as ClientEventV3 } from './client_event';
import { RADAR_KEY, NETWORK_TYPE } from '@ks-radar/radar-util';
export interface SetDimensionParam {
    c_dimension1?: any;
    c_dimension2?: any;
    c_dimension3?: any;
    release_tag?: any;
    product_version?: any;
    sub_app?: string;
}
export declare type CustomDimensionKey = keyof SetDimensionParam;
export interface SampleList {
    isHit: boolean;
    core: number;
    api?: number;
    error?: number;
    resource?: number;
    event?: number;
}
export interface RateList {
    load?: number | string;
    api?: number | string;
    error?: number | string;
    resource?: number | string;
    custom?: number | string;
    event?: number | string;
    [key: string]: any;
}
export interface RadarOptionsQueueConfig {
    maxBatchLength?: number;
    wait?: number;
}
export interface CoreConfig {
    weblogger?: any;
    projectId: string;
    httpReportFirst?: boolean;
    sampling?: number;
    customDimensions?: SetDimensionParam;
    queueConfig?: RadarOptionsQueueConfig;
    ignoreList?: string[];
}
export interface KVPair {
    key: RADAR_KEY;
    value?: any;
    dimension?: any;
    data?: any;
    [key: string]: any;
}
export interface CommonData {
    h5_extra_attr: any;
    url_package: Base.UrlPackage;
    refer_url_package: Base.UrlPackage;
    app_version_name?: string;
    project_id: string;
    is_report_test?: boolean;
    [key: string]: any;
}
export interface UrlObj {
    page?: string;
    params?: any;
    pageId?: string;
    force?: boolean;
}
export interface UrlMapFnParam {
    url?: string;
    page?: string;
    params?: any;
    pageId?: string;
}
/**
 * 全局附加属性
 */
export interface GlobalAttr {
    entry_tag?: EntryTagType[];
    [key: string]: any;
}
export declare type UrlMapFn = (param: UrlMapFnParam) => UrlObj | string;
export interface BaseOptions {
    /**
     * did
     */
    device_id?: string;
    /**
     * 预留字段, 端内页面不可缺省，服务端需解密
     */
    global_id?: string;
    /**
     * 用户唯一标志
     */
    user_id?: string;
    /**
     * 标识调用方,产品线（新注册时自动增加）,找韩小龙要
     * 默认是0，表示产品未被注册= =
     */
    product?: number;
    /**
     * 来源
     */
    channel?: string;
    /**
     * 版本名
     */
    version_name?: string;
    /**
     * 应用包名
     */
    package_name?: string;
    /**
     * 代替app_product参数上报具体接入的app，具体值请联系韩小龙分配
     */
    product_name?: string;
    /**
     * 各端设备识的备用参数，例如微信小程序端上报微信内部用户的唯一标识
     */
    union_id?: string;
    /**
     * 网络类型
     */
    network_type?: keyof typeof NETWORK_TYPE;
    /**
     * 区分平台
     */
    container?: Container;
    /**
     * 中台服务名称，比如积木、im sdk等，如果业务log未使用中台服务，该字段置空
     */
    service_name?: string;
    /**
     * 子业务场景
     */
    sub_biz?: string;
    /**
     * 是否需要加密
     */
    need_encrypt?: boolean;
    /**
     * 防盗链id
     */
    safety_id?: string;
    /**
     * AB实验
     */
    experiment?: Base.Experiment[];
    /**
     * H5 附加参数
     */
    h5_extra_attr?: H5ExtraAttr;
    /**
     * 表示宿主平台环境，默认是 PC 端 web 页面
     */
    platform?: number;
    /**
     * 表示页面会话 id
     */
    session_id?: string;
    /**
     * 全局参数，可用来设置染色参数
     */
    global_attr?: GlobalAttr;
}
export declare type MinaBaseOption = BaseOptions & {
    appProduct?: string;
    batchReportInterval?: number;
    isReportUtilBizPublicParamsBeSet?: boolean;
    [key: string]: string | boolean | number | undefined;
};
/**
 * 事件
 */
export declare enum TaskOperations {
    CLICK = "CLICK",
    DOUBLE_CLICK = "DOUBLE_CLICK",
    TRIPLE_CLICK = "TRIPLE_CLICK",
    LONG_PRESS = "LONG_PRESS",
    PULL = "PULL",
    DRAG = "DRAG",
    SCALE = "SCALE",
    PULL_DOWN = "PULL_DOWN",
    PULL_UP = "PULL_UP"
}
export declare enum EventTypes {
    PV = "PV",
    SHOW = "SHOW",
    VIDEO = "VIDEO",
    CUSTOM = "CUSTOM",
    RADAR = "RADAR"
}
export declare type StatusTypes = keyof typeof Base.ActionStatus;
export declare type OperationDirectionTypes = keyof typeof Base.Direction;
export declare type TaskStatusTypes = keyof typeof Base.TaskStatus;
export interface OtherEventOptions {
    name: string;
    params?: any;
    referUrlPackage?: Base.UrlPackage;
    currentUrlPackage: Base.UrlPackage;
    contentPackage?: ContentPackage | string;
    status?: TaskStatusTypes;
    taskType?: TaskEventTypeStrings;
    eventId?: string;
    operationDirection?: OperationDirectionTypes;
}
export interface H5ExtraAttr {
    product_name?: string;
    host_product?: string;
    app_version_name?: string;
    seq_id?: number;
    http_seq_id?: number;
    domain?: string;
    [key: string]: any;
}
/**
 * 染色参数
 *  page_name: 页面标识，
 *  element_action: 元素标识，
 *  stid：策略id（格式由小分队提供），
 *  pos：位置信息1，
 *  params:{元素参数1}
 */
export interface EntryTagType {
    page_name?: string;
    element_action?: string;
    stid?: string;
    pos?: number;
    params?: {
        [key: string]: any;
    };
}
export declare type PageTypeKey = 'web' | 'native' | 'mina';
export declare type Container = 'NATIVE' | 'REACT_NATIVE' | 'H5' | 'MP_WECHAT' | 'MP_ALIPAY' | 'MP_BAIDU' | 'WEB';
export interface UrlMap {
    [key: string]: string;
}
export declare type ContentPackage = string | {
    [key: string]: any;
};
export interface ShowEventOptions {
    type?: string;
    referUrlPackage?: Base.UrlPackage;
    currentUrlPackage: Base.UrlPackage;
    action: 'enter' | 'leave' | 'hidden' | 'visible';
    beginTime?: number;
    name?: string;
    params?: any;
    contentPackage?: ContentPackage | string;
    status?: StatusTypes;
    operationDirection?: OperationDirectionTypes;
    actionType?: keyof typeof Base.ActionType;
    auto?: boolean;
    eventId?: string;
    /**
     * 向客户端透传的日志信息，如 stid
     */
    feedLogCtx?: {
        stidContainer?: string;
    };
}
export interface ShowEventProps {
    referUrlPackage?: Base.UrlPackage;
    currentUrlPackage: Base.UrlPackage;
    type: 'enter' | 'leave' | 'hidden' | 'visible';
    beginTime?: number;
    name: string;
    params?: any;
    contentPackage?: ContentPackage | string;
    status?: StatusTypes;
    eventId?: string;
    operationDirection?: OperationDirectionTypes;
    actionType?: keyof typeof Base.ActionType;
    auto?: boolean;
}
export declare type TaskEventTypeStrings = keyof typeof ClientEventV3.TaskEventType;
export declare type TaskEventOperationTypes = keyof typeof Base.OperationType;
export interface TaskEventOptions {
    sessionId?: string;
    referUrlPackage?: Base.UrlPackage;
    currentUrlPackage: Base.UrlPackage;
    name: string;
    params?: any;
    type: TaskOperations;
    contentPackage?: ContentPackage | string;
    status?: StatusTypes;
    taskType?: string;
    operationDirection?: keyof typeof Base.Direction;
    eventId?: string;
}
export interface CustomStatEventOptions {
    name: string;
    params: any;
    currentUrlPackage: Base.UrlPackage;
    referUrlPackage?: Base.UrlPackage;
    [key: string]: any;
    eventId?: string;
}
export interface Weblogger {
    logConfig: any;
    collect: (type: string, ...params: any) => void;
    sendImmediately: (type: string, ...params: any) => void;
    plug: (params: any, options?: any) => void;
    addPluginInstance: (plugin: any) => void;
    unplug: (name: string) => void;
    updateBase: (options: BaseOptions) => void;
    updateCommonPackage: (options: BaseOptions) => void;
    updateReferUrlPackage: (url?: string | UrlObj, type?: 'web' | 'native' | 'mina') => void;
    updateCurrentUrlPackage: (url: string | UrlObj, type?: 'web' | 'native' | 'mina') => void;
    flush: () => void;
    logger: any;
    currentUrlPackage: Base.UrlPackage & {
        getRealUrlPackage: Function;
        update: (page: string, params: any, pageId?: string) => void;
        toJSON: () => any;
    };
    referUrlPackage?: Base.UrlPackage & {
        getRealUrlPackage: Function;
    };
    commonPackage: any;
    baseOption: any;
    plugins: {
        [key: string]: any;
    };
    bridge?: any;
    yoda?: any;
    entryTag?: any;
    sessionId: string;
    SampledPageMap?: {
        [key: string]: boolean | {
            radar: {
                [key: string]: number;
            };
        };
    };
    Utils: {
        [key: string]: any;
    };
    beforeUnload: (event: Event) => void;
    initBuildInPlugins?: (option?: any) => any;
    addPlugins: () => void;
    unplugAll: () => void;
    on: (event: 'event', handler: (e: {
        type: string;
        action: string;
        data: any;
    }) => void) => void;
    off: (event: 'event', handler: (e?: any) => void) => void;
    generateLog: (type: string | SendConfig, name: string | PVOptions | ShowOptions | TaskOptions | CustomOptions | OtherEventOptions, params?: any, contentPackage?: ContentPackage | string, factory?: (type: string, data: any) => any) => any;
    getEntryTags?: () => Base.EntryTagType[];
    setEntryTag?: (entryTag: Base.EntryTagType) => void;
    consumeEntryTag?: (identity: string) => Base.EntryTagType[];
    clearEntryTag?: (identity: string, containSelf: boolean) => void;
    sendByHttp?: (type: string, ...params: any) => void;
}
export interface WeblogClass {
    __instance: Weblogger;
}
export declare type AutoPVFilter = (newUrl: string, oldUrl: string | null, type: 'enter' | 'leave' | 'hidden' | 'visible') => boolean;
/**
 * PV 类型参数
 */
export interface PVOptions {
    page?: string;
    identity?: string;
    pageId?: string;
    pageType?: string;
    params?: string | any;
    contentPackage?: ContentPackage | string;
    currentUrlPackage?: Base.UrlPackage;
    status?: StatusTypes;
    type?: 'enter' | 'leave' | 'hidden' | 'visible';
    beginTime?: number;
    eventId?: string;
    auto?: boolean;
    name?: string;
    /**
     * 是否是半屏页面
     */
    coPage?: boolean;
    callback?: (error?: any) => void;
}
export interface UrlPage {
    page: string;
    identity?: string;
    params?: any;
    coPage?: boolean;
}
/**
 * Show 类型参数
 */
export interface ShowOptions {
    action: string;
    params?: any;
    contentPackage?: ContentPackage | string;
    currentUrlPackage?: Base.UrlPackage;
    eventId?: string;
    urlPage?: UrlPage;
    /**
     * 向客户端透传的日志信息，如 stid
     */
    feedLogCtx?: {
        stidContainer?: string;
    };
    callback?: (error?: any) => void;
}
/**
 * TASK 类型参数
 */
export interface TaskOptions {
    action: string;
    params?: any;
    contentPackage?: ContentPackage | string;
    currentUrlPackage?: Base.UrlPackage;
    type?: TaskEventTypeStrings;
    status?: TaskStatusTypes;
    eventId?: string;
    urlPage?: UrlPage;
    /**
     * 向客户端透传的日志信息，如 stid
     */
    feedLogCtx?: {
        stidContainer?: string;
    };
    callback?: (error?: any) => void;
}
export interface ClickOptions {
    action: string;
    params?: any;
    contentPackage?: ContentPackage | string;
    currentUrlPackage?: Base.UrlPackage;
    type?: TaskEventTypeStrings;
    status?: TaskStatusTypes;
    eventId?: string;
    urlPage?: UrlPage;
    /**
     * 染色参数
     */
    entryTag?: EntryTagType;
    /**
     * 向客户端透传的日志信息，如 stid
     */
    feedLogCtx?: {
        stidContainer?: string;
    };
    callback?: (error?: any) => void;
}
/**
 * CUSTOM 类型参数
 */
export interface CustomOptions {
    key: string;
    value?: any;
    biz?: string;
    eventId?: string;
    urlPage?: UrlPage;
    currentUrlPackage?: Base.UrlPackage;
    callback?: (error?: any) => void;
}
export interface VideoEventOptionsParams {
    duration?: number;
    played_duration?: number;
    downloaded?: boolean;
    prepare_duration?: number;
    enter_time?: number;
    leave_time?: number;
    video_type?: string;
    play_video_type?: string;
    photo_id?: number;
    leave_action?: string;
    average_fps?: number;
    media_type?: string;
    s_photo_id?: number;
    video_qos_json?: string;
    click_to_first_frame_duration?: number;
    rssi?: number;
    enter_player_action?: string;
    summary?: string;
    board_platform?: string;
    collect_before_status?: string;
    collect_after_status?: string;
    session_uuid?: string;
    soc_name?: string;
}
export interface VideoEventOptions {
    params: VideoEventOptionsParams;
    callback?: (error?: any) => void;
    urlPage?: UrlPage;
    currentUrlPackage?: Base.UrlPackage;
}
export declare type v3Env = 'production' | 'test' | 'development';
export declare type SendCallback = (error?: any) => void;
export declare type LoggerSender = (data: {
    url: string;
    data: any;
    [key: string]: any;
}, callback?: (error?: any) => void) => void;
/**
 * 发送埋点接口参数
 */
export declare type EventOptions = PVOptions | ShowOptions | TaskOptions | CustomOptions | VideoEventOptions | ClickOptions;
/**
 * 支持的事件类型
 */
export declare type SupportTypes = keyof typeof EventTypes | keyof typeof TaskOperations;
export interface SendConfig {
    type: SupportTypes;
    async?: boolean;
}
