/**
 * radar core
 * 1.采样率
 *  - core会透出是否在Yoda内
 *  - 若在Yoda内，会透出从window上拿到的注入的采样率以及是否采样
 *  - 若不在Yoda内，则会透出core配置的采样率，以及是否采样
 * 2.数据验证
 * 3.自定义维度
 */
import { CoreConfig, SampleList, SetDimensionParam, CommonData } from './types';
import { CommonDimension } from '@ks-radar/radar-util/dist/types/interface';
export declare class RadarCore {
    weblog?: any;
    private config;
    private queueConfig;
    private logQueue;
    private preStoredLogQueue;
    private batchTimer;
    private eventName;
    private currentUrlPackage;
    private referUrlPackage?;
    private customDimension;
    private runtimeIdMap;
    randomSampling: number;
    private commonDimension;
    isInYoda: boolean;
    sampleData: SampleList;
    sampling: number;
    radarSessionId: string;
    ignoreList: string[];
    broadcastSample: {
        off(handler: (event: SampleList) => void): void;
        on(handler: (event: SampleList) => void): () => void;
        once(handler: (event: SampleList) => void): () => void;
        emit(event: SampleList): void;
    };
    didRate: number | undefined;
    constructor(config: CoreConfig);
    private genSessionIncreaseId;
    /** 得到weblogger实例 */
    bindWeblogger(weblogger: any): void;
    /**
     * 处理采样率
     */
    private getSampleData;
    /**
     * 更新端内采样率
     * @param payload 新的采样率内容
     */
    private updateYodaSampleRate;
    /**
     * 更新URLPackage
     */
    private updateUrlPackage;
    /**
     * 添加自定义维度
     * @param param 自定义维度的内容
     * 使用方式：
     * ```javascript
     * core.setDimensions({
     *      c_dimension1: 'dimension_text',
     * })
     * ```
     */
    setDimensions(param: SetDimensionParam): void;
    /**
     * 添加公共维度，sdk内部使用不对外透出
     * @param key
     * @param value
     * @param isCover
     */
    setCommonDimension(key: keyof CommonDimension, value: any, isCover?: boolean): void;
    /**
     * 给日志添加一些内容，有page信息和自定义维度
     * @param kv 本次上报的日志内容
     */
    private decorateLog;
    /**
     * 上报日志方法
     * @param key 日志类型
     * @param dimension 维度
     * @param value 指标
     * @returns
     */
    collect: (key: string, dimension?: any, value?: any) => void;
    /**
     * 将日志队列上报并清空
     */
    flush: () => void;
    /**
     *
     * @param sampling
     * @returns boolean true 为上报
     */
    samplingControl(sampling: number): boolean;
    /**
     * 获取公共数据
     * @returns 公共数据
     */
    getCommonData(): CommonData;
    /**
     * http上报
     */
    private reportByHttp;
    private collectLog;
    /**
     * yoda上报新链路
     * @returns 是否上报成功
     */
    private reportByBridge;
}
