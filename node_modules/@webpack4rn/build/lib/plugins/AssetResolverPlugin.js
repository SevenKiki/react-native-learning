"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetResolverPlugin = exports.AssetResolver = void 0;
const path = require("path");
const escapeStringRegexp = require("escape-string-regexp");
class AssetResolver {
    constructor(config, compiler) {
        this.config = config;
        this.compiler = compiler;
        if (!this.config.test) {
            this.config.test = AssetResolver.DEFAULT_TEST;
        }
    }
    static collectScales(files, { name, type, platform }) {
        // TODO: make it configurable
        const regex = /^(bmp|gif|jpg|jpeg|png|psd|tiff|webp|svg)$/.test(type)
            ? new RegExp(`^${escapeStringRegexp(name)}(@\\d+(\\.\\d+)?x)?(\\.(${platform}|native))?\\.${type}$`)
            : new RegExp(`^${escapeStringRegexp(name)}(\\.(${platform}|native))?\\.${type}$`);
        const priority = (queryPlatform) => ['native', platform].indexOf(queryPlatform);
        // Build a map of files according to the scale
        const output = {};
        for (const file of files) {
            const match = regex.exec(file);
            if (match) {
                let [, scale, , , platform] = match;
                scale = scale || '@1x';
                if (!output[scale] ||
                    priority(platform) > priority(output[scale].platform)) {
                    output[scale] = { platform, name: file };
                }
            }
        }
        return output;
    }
    apply(resolver) {
        const platform = this.config.platform;
        const test = this.config.test;
        const logger = this.compiler.getInfrastructureLogger('ReactNativeAssetResolver');
        resolver
            .getHook('file')
            .tapAsync('ReactNativeAssetResolver', (request, _context, callback) => {
            const requestPath = request.path;
            if ((typeof requestPath === 'string' && !test.test(requestPath)) ||
                requestPath === false) {
                callback();
                return;
            }
            logger.debug('Processing asset:', requestPath);
            resolver.fileSystem.readdir(path.dirname(requestPath), (error, results) => {
                var _a, _b, _c;
                if (error) {
                    callback();
                    return;
                }
                const basename = path.basename(requestPath);
                const name = basename.replace(/\.[^.]+$/, '');
                const type = path.extname(requestPath).substring(1);
                const files = ((_b = (_a = results) === null || _a === void 0 ? void 0 : _a.filter((result) => typeof result === 'string')) !== null && _b !== void 0 ? _b : []);
                let resolved = files.includes(basename) ? requestPath : undefined;
                if (!resolved) {
                    const map = AssetResolver.collectScales(files, {
                        name,
                        type,
                        platform,
                    });
                    const key = map['@1x']
                        ? '@1x'
                        : Object.keys(map).sort((a, b) => Number(a.replace(/[^\d.]/g, '')) -
                            Number(b.replace(/[^\d.]/g, '')))[0];
                    resolved = ((_c = map[key]) === null || _c === void 0 ? void 0 : _c.name)
                        ? path.resolve(path.dirname(requestPath), map[key].name)
                        : undefined;
                    if (!resolved) {
                        logger.error('Cannot resolve:', requestPath, {
                            files,
                            scales: map,
                        });
                        callback();
                        return;
                    }
                }
                const resolvedFile = Object.assign(Object.assign({}, request), { path: resolved, relativePath: request.relativePath &&
                        resolver.join(request.relativePath, resolved), file: true });
                logger.debug('Asset resolved:', requestPath, '->', resolved);
                callback(null, resolvedFile);
            });
        });
    }
}
exports.AssetResolver = AssetResolver;
AssetResolver.DEFAULT_TEST = /\.(aac|aiff|bmp|caf|gif|html|jpeg|jpg|m4a|m4v|mov|mp3|mp4|mpeg|mpg|obj|otf|pdf|png|psd|svg|ttf|wav|webm|webp)$/;
class AssetResolverPlugin {
    constructor(config) {
        this.config = config;
    }
    apply(compiler) {
        const assetResolver = new AssetResolver(this.config, compiler);
        compiler.options.resolve.plugins = (compiler.options.resolve.plugins || []).concat(assetResolver);
    }
}
exports.AssetResolverPlugin = AssetResolverPlugin;
//# sourceMappingURL=AssetResolverPlugin.js.map