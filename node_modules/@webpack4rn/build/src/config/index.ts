import * as webpack from 'webpack';
import * as webpackChain from 'webpack-chain';
import * as webpackMerge from 'webpack-merge';
import {
  AssetResolver,
  AssetResolverPlugin,
  GuardedLoadModulePlugin,
  RestoreEnvPlugin
} from '../plugins';
const path = require('path');
const fs = require('fs');
const webpackBabelConfigPath = path.resolve('babel-webpack.config.js');

export const config = (
  webpackConfig: webpack.Configuration,
  options: {
    assetDest?: string;
  } = {}
): ((env: WebpackEnv) => webpack.Configuration) => {
  return (env) => {
    const isDev = process.env.KRN_DEV_BUILD_MODE === 'true';
    const OLD_NODE_ENV = process.env.NODE_ENV;
    const OLD_BABEL_ENV = process.env.BABEL_ENV;
    process.env.BABEL_ENV = isDev
    ? 'development'
    : process.env.BABEL_ENV || 'production';
    process.env.NODE_ENV = isDev ? 'development' : 'production';
    const config = new webpackChain();
    config.mode(isDev ? 'development' : 'production');
    config.output.globalObject('this');
    config.module
      .rule('react-native-assets')
      .test(AssetResolver.DEFAULT_TEST)
      .use('babel')
      .loader(require.resolve('../loaders/assetsLoader'))
      .options({
        platform: env.platform,
        output: './',
        bundleToFile: true,
        assetDest: options.assetDest
      });
    config.module
      .rule('js')
      .test(/\.m?[jt]sx?$/)
      .use('babel')
      .loader(require.resolve('babel-loader', {
        paths: [__dirname]
      }))
      .options({
        cacheDirectory: false,
        ...fs.existsSync(webpackBabelConfigPath) ? {
          configFile: webpackBabelConfigPath,
          babelrc: false
        } : {}
      });
    config.resolve.mainFields.merge([
      'react-native',
      'browser',
      'module',
      'main',
    ]);
    config.resolve.extensions.merge([
      '.native.js',
      '.native.jsx',
      '.native.ts',
      '.native.tsx',
      `.${env.platform}.js`,
      `.${env.platform}.jsx`,
      `.${env.platform}.ts`,
      `.${env.platform}.tsx`,
      '.js',
      '.jsx',
      '.ts',
      '.tsx',
    ]);
    config.plugin('asset').use(AssetResolverPlugin, [
      {
        platform: env.platform,
      },
    ]);
    config.plugin('limit').use(webpack.optimize.LimitChunkCountPlugin, [
      {
        maxChunks: 1,
      },
    ]);
    config.plugin('define').use(webpack.DefinePlugin, [
      {
        __TEST__: false,
        __DEV__: isDev,
      },
    ]);
    config.plugin('guarded').use(GuardedLoadModulePlugin, []);
    config.plugin('restoreEnv').use(RestoreEnvPlugin, [
      {
        NODE_ENV: OLD_NODE_ENV,
        BABEL_ENV: OLD_BABEL_ENV
      }
    ])
    return webpackMerge.merge(webpackConfig, config.toConfig());
  };
};
