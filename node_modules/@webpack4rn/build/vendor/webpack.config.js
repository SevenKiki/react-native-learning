const path = require("path");

const webpack = require("webpack");
const webpackChain = require("webpack-chain");
const TerserPlugin = require("terser-webpack-plugin");
const { ManifestPlugin } = require("./plugins/ManifestPlugin");
const { HashedModuleIdsPlugin } = require("./plugins/HashedModuleIdsPlugin");
const { RequireModulePlugin } = require("./plugins/RequireModulePlugin");
const { DLL_NAME, applyNodeEnv } = require("./index");

module.exports = (env) => {
  const config = new webpackChain();
  const platform = env.platform;
  const nodeEnv = env.production ? "production" : "development";
  const polyfills = [
    "react-native/Libraries/polyfills/console",
    "react-native/Libraries/polyfills/Object.es7",
    "react-native/Libraries/polyfills/error-guard",
    "react-native/Libraries/Core/InitializeCore",
    "./src/index.js",
  ];
  const entryItems = polyfills;
  const filename = "vendor.js";
  const vendorDir = path.resolve(__dirname, `./${platform}`);
  const manifest = path.resolve(vendorDir, "./manifest.json");
  const persistModuleRegExp = /node_modules\/(react|react-native|@babel)/;
  entryItems.forEach((item) => {
    config.entry(DLL_NAME).add(item);
  });
  applyNodeEnv(nodeEnv);
  config.mode(nodeEnv);
  config.output
    .filename(filename)
    .path(vendorDir)
    .library("[name]")
    .libraryTarget("var");
  config.output
    .filename(filename)
    .path(vendorDir)
    .library("[name]")
    .libraryTarget("var");
  config.module
    .rule("tjs")
    .test(/\.[tj]sx?$/)
    .include.add((path) => path.includes("node_modules"))
    .end()
    .use("babel")
    .loader("babel-loader")
    .options({
      presets: [
        ["@babel/preset-env", { loose: true }],
        "module:metro-react-native-babel-preset",
      ],
      plugins: [
        ["@babel/plugin-proposal-private-methods", { loose: true }],
        ["@babel/plugin-proposal-class-properties", { loose: true }],
        ["@babel/plugin-transform-classes", { loose: true }],
      ],
      // 禁用缓存
      cacheDirectory: false,
    });
  config.resolve.extensions.merge([
    `.${platform}.js`,
    `.${platform}.ts`,
    ".ts",
    ".native.js",
    ".js",
  ]);

  config.performance.merge({
    maxEntrypointSize: 2000000,
    maxAssetSize: 2000000,
  });
  config.devtool("source-map");
  config.stats("normal");
  config.plugin("define").use(webpack.DefinePlugin, [
    {
      __DEV__: false,
      __TEST__: false,
    },
  ]);
  config.plugin("dll").use(webpack.DllPlugin, [
    {
      path: manifest,
      name: DLL_NAME,
      // 依赖提升了，context指向根目录
      context: path.resolve(__dirname, "./"),
      entryOnly: false,
    },
  ]);
  config.plugin("hashed-module-id").use(HashedModuleIdsPlugin, [
    {
      regExp: persistModuleRegExp,
    },
  ]);
  config.plugin("require-module").use(RequireModulePlugin, [
    {
      dllName: DLL_NAME,
      modules: [...polyfills, "@kds/polyfill/lib/index.js"],
    },
  ]);
  config.plugin("manifest").use(ManifestPlugin, [
    {
      manifest,
      regExp: persistModuleRegExp,
    },
  ]);
  config.optimization.minimizer("terser").use(TerserPlugin, [
    {
      terserOptions: { output: { ascii_only: true } },
    },
  ]);
  return config.toConfig();
};
