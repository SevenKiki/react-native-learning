/**
 * Hashed Module Id
 * @author linjinying
 */

const createHash = require("webpack/lib/util/createHash");
const { getUsedModuleIds } = require("webpack/lib/ids/IdHelpers");
const md5 = require("md5");
const path = require("path");
const pathSep = path.sep;

class HashedModuleIdsPlugin {
  constructor(options) {
    this.options = options;
  }
  apply(compiler) {
    compiler.hooks.compilation.tap("HashedModuleIdsPlugin", (compilation) => {
      compilation.hooks.moduleIds.tap("HashedModuleIdsPlugin", (modules) => {
        const chunkGraph = compilation.chunkGraph;
        const usedIds = getUsedModuleIds(compilation);
        for (const module of modules) {
          if (module && module.userRequest) {
            const normalizedRequest = module.userRequest.replace(
              /.*?\/node_modules/,
              "node_modules"
            );
            if (normalizedRequest) {
              const isMatched = this.options.regExp.test(normalizedRequest);
              if (isMatched) {
                const modulePath = normalizedRequest;
                // 最后在将斜杠替换为空串或下划线
                const regExp = new RegExp(
                  pathSep === "\\" ? "\\\\" : pathSep,
                  "gm"
                );
                const moduleId = md5(modulePath.replace(regExp, "_"));

                chunkGraph.setModuleId(module, moduleId);
                usedIds.add(moduleId);
              }
            }
          }
        }
      });
    });
  }
}

module.exports.HashedModuleIdsPlugin = HashedModuleIdsPlugin;
