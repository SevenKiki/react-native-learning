import {
    TouchableOpacity,
    TouchableOpacityProps,
    TouchableWithoutFeedback,
} from 'react-native';
import React, { ElementType, useCallback, useRef } from 'react';

const PREVENT_DISTANCE = 10;

type IProps = {
    fixDistance?: number;
    children?: ElementType | any;
} & TouchableOpacityProps;

export const FixScrollTouchComponent = (props: IProps) => {
    const {
        children,
        activeOpacity,
        onPress,
        fixDistance = PREVENT_DISTANCE,
    } = props;

    const _touchActivatePositionRef = useRef<{
        pageX: number;
        pageY: number;
    }>({ pageX: 0, pageY: 0 });

    const TouchComponent =
        activeOpacity === undefined
            ? TouchableWithoutFeedback
            : TouchableOpacity;
    const _onPressIn = useCallback((e: any) => {
        const { pageX, pageY } = e.nativeEvent;
        _touchActivatePositionRef.current = {
            pageX,
            pageY,
        };
    }, []);

    const _onPress = useCallback(
        (e: any) => {
            const { pageX, pageY } = e.nativeEvent;
            const absX = Math.abs(
                _touchActivatePositionRef.current.pageX - pageX,
            );
            const absY = Math.abs(
                _touchActivatePositionRef.current.pageY - pageY,
            );
            const isDragging = absX >= fixDistance || absY >= fixDistance;

            if (!isDragging) {
                onPress?.(e);
            }
        },
        [fixDistance, onPress],
    );

    return (
        <TouchComponent {...props} onPressIn={_onPressIn} onPress={_onPress}>
            {children}
        </TouchComponent>
    );
};
