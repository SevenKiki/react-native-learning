import React, {
    ForwardedRef,
    forwardRef,
    useImperativeHandle,
    useRef,
} from 'react';
import { FlatList, FlatListProps, ViewToken } from 'react-native';

interface IProps<T = any> extends FlatListProps<T> {
    itemVisiblePercentThreshold?: number;
    onItemShow?: (item: T, index: number) => void;
    onItemHide?: (item: T, index: number) => void;
}

interface FlatListHandler {
    scrollToEnd: (params?: { animated?: boolean | null }) => void;

    /**
     * Scrolls to the item at the specified index such that it is positioned in the viewable area
     * such that viewPosition 0 places it at the top, 1 at the bottom, and 0.5 centered in the middle.
     * Cannot scroll to locations outside the render window without specifying the getItemLayout prop.
     */
    scrollToIndex: (params: {
        animated?: boolean | null;
        index: number;
        viewOffset?: number;
        viewPosition?: number;
    }) => void;

    /**
     * Requires linear scan through data - use `scrollToIndex` instead if possible.
     * May be janky without `getItemLayout` prop.
     */
    scrollToItem: (params: {
        animated?: boolean | null;
        item: any;
        viewPosition?: number;
    }) => void;

    /**
     * Scroll to a specific content pixel offset, like a normal `ScrollView`.
     */
    scrollToOffset: (params: {
        animated?: boolean | null;
        offset: number;
    }) => void;
}

const CommonList: React.ForwardRefRenderFunction<FlatListHandler, IProps> = (
    props: IProps,
    ref: ForwardedRef<FlatListHandler>,
) => {
    const listRef = useRef<FlatList>(null);
    useImperativeHandle(ref, () => ({
        scrollToEnd: (params?: { animated?: boolean | null }) => {
            listRef.current?.scrollToEnd(params);
        },
        scrollToIndex: (params: {
            animated?: boolean | null;
            index: number;
            viewOffset?: number;
            viewPosition?: number;
        }) => {
            listRef.current?.scrollToIndex(params);
        },
        scrollToItem: (params: {
            animated?: boolean | null;
            item: any;
            viewPosition?: number;
        }) => {
            listRef.current?.scrollToItem(params);
        },
        scrollToOffset: (params: {
            animated?: boolean | null;
            offset: number;
        }) => {
            listRef.current?.scrollToOffset(params);
        },
    }));
    const { itemVisiblePercentThreshold = 1, onItemShow, onItemHide } = props;
    const viewConfigRef = React.useRef({ itemVisiblePercentThreshold });
    const onViewableItemChange = useRef(
        ({ changed }: { changed: Array<ViewToken> }) => {
            changed.forEach((viewToken) => {
                if (typeof viewToken.index === 'number') {
                    if (viewToken.isViewable) {
                        onItemShow &&
                            onItemShow(viewToken.item, viewToken.index);
                    } else {
                        onItemHide &&
                            onItemHide(viewToken.item, viewToken.index);
                    }
                }
            });
        },
    );
    return (
        <FlatList
            ref={listRef}
            showsHorizontalScrollIndicator={false}
            showsVerticalScrollIndicator={false}
            onViewableItemsChanged={onViewableItemChange.current}
            viewabilityConfig={viewConfigRef.current}
            {...props}
        />
    );
};

export default React.memo(forwardRef(CommonList));
