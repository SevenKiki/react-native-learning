import React, { ReactNode } from 'react';
import { KidIcon, KidLoading, KidNetError, useThemeValue } from '@kid-ui/krn';
import { View, ViewStyle, StyleSheet } from 'react-native';

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
    },
});
type IProp = {
    isLoading: boolean;
    isError?: boolean;
    isEmpty?: boolean;
    refetch?: () => void;
    children: ReactNode | any;
    ErrorComponent?: ReactNode;
    LoadingComponent?: ReactNode;
    EmptyComponent?: ReactNode;
    containerStyle?: ViewStyle;
};

const noop = () => {};

/**
 * 这个组件不建议放到页面的最外层使用，这会导致页面加载时无法创建子节点，影响秒开
 * @param props
 * @constructor
 */
function Boundary(props: IProp) {
    const {
        isLoading,
        isError,
        isEmpty,
        refetch = noop,
        children,
        containerStyle,
        EmptyComponent,
        LoadingComponent,
        ErrorComponent,
    } = props;
    const bgColor = useThemeValue('cs_common_background_secondary');
    const _style = [
        styles.container,
        { backgroundColor: bgColor },
        containerStyle,
    ];
    if (isLoading) {
        // 正在请求返回loading
        if (LoadingComponent) {
            return LoadingComponent;
        }
        return (
            <View style={_style}>
                <KidLoading />
            </View>
        );
    }
    if (isError) {
        if (ErrorComponent) {
            return ErrorComponent;
        }
        // 请求失败返回错误展位图，点击refetch重试
        return (
            <View style={_style}>
                <KidNetError
                    buttonBgColor={'cs_common_background_primary'}
                    onPress={refetch}
                />
            </View>
        );
    }
    if (isEmpty) {
        if (EmptyComponent) {
            return EmptyComponent;
        }
        return (
            <View style={_style}>
                <KidIcon
                    kid={'local_server_emptystate_nocontent_96'}
                    size={84}
                />
            </View>
        );
    }
    // 返回子组件
    return children;
}

Boundary.defaultProps = {
    containerStyle: undefined,
    isEmpty: false,
};

export default React.memo(Boundary);
