"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FixScrollTouchComponent = void 0;

var _reactNative = require("react-native");

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const PREVENT_DISTANCE = 10;

const FixScrollTouchComponent = props => {
  const {
    children,
    activeOpacity,
    onPress,
    fixDistance = PREVENT_DISTANCE
  } = props;

  const _touchActivatePositionRef = (0, _react.useRef)({
    pageX: 0,
    pageY: 0
  });

  const TouchComponent = activeOpacity === undefined ? _reactNative.TouchableWithoutFeedback : _reactNative.TouchableOpacity;

  const _onPressIn = (0, _react.useCallback)(e => {
    const {
      pageX,
      pageY
    } = e.nativeEvent;
    _touchActivatePositionRef.current = {
      pageX,
      pageY
    };
  }, []);

  const _onPress = (0, _react.useCallback)(e => {
    const {
      pageX,
      pageY
    } = e.nativeEvent;
    const absX = Math.abs(_touchActivatePositionRef.current.pageX - pageX);
    const absY = Math.abs(_touchActivatePositionRef.current.pageY - pageY);
    const isDragging = absX >= fixDistance || absY >= fixDistance;

    if (!isDragging) {
      onPress === null || onPress === void 0 ? void 0 : onPress(e);
    }
  }, [fixDistance, onPress]);

  return /*#__PURE__*/_react.default.createElement(TouchComponent, _extends({}, props, {
    onPressIn: _onPressIn,
    onPress: _onPress
  }), children);
};

exports.FixScrollTouchComponent = FixScrollTouchComponent;
//# sourceMappingURL=index.js.map