{"version":3,"names":["React","forwardRef","useImperativeHandle","useRef","FlatList","CommonList","props","ref","listRef","scrollToEnd","params","current","scrollToIndex","scrollToItem","scrollToOffset","itemVisiblePercentThreshold","onItemShow","onItemHide","viewConfigRef","onViewableItemChange","changed","forEach","viewToken","index","isViewable","item","memo"],"sources":["index.tsx"],"sourcesContent":["import React, {\n    ForwardedRef,\n    forwardRef,\n    useImperativeHandle,\n    useRef,\n} from 'react';\nimport { FlatList, FlatListProps, ViewToken } from 'react-native';\n\ninterface IProps<T = any> extends FlatListProps<T> {\n    itemVisiblePercentThreshold?: number;\n    onItemShow?: (item: T, index: number) => void;\n    onItemHide?: (item: T, index: number) => void;\n}\n\ninterface FlatListHandler {\n    scrollToEnd: (params?: { animated?: boolean | null }) => void;\n\n    /**\n     * Scrolls to the item at the specified index such that it is positioned in the viewable area\n     * such that viewPosition 0 places it at the top, 1 at the bottom, and 0.5 centered in the middle.\n     * Cannot scroll to locations outside the render window without specifying the getItemLayout prop.\n     */\n    scrollToIndex: (params: {\n        animated?: boolean | null;\n        index: number;\n        viewOffset?: number;\n        viewPosition?: number;\n    }) => void;\n\n    /**\n     * Requires linear scan through data - use `scrollToIndex` instead if possible.\n     * May be janky without `getItemLayout` prop.\n     */\n    scrollToItem: (params: {\n        animated?: boolean | null;\n        item: any;\n        viewPosition?: number;\n    }) => void;\n\n    /**\n     * Scroll to a specific content pixel offset, like a normal `ScrollView`.\n     */\n    scrollToOffset: (params: {\n        animated?: boolean | null;\n        offset: number;\n    }) => void;\n}\n\nconst CommonList: React.ForwardRefRenderFunction<FlatListHandler, IProps> = (\n    props: IProps,\n    ref: ForwardedRef<FlatListHandler>,\n) => {\n    const listRef = useRef<FlatList>(null);\n    useImperativeHandle(ref, () => ({\n        scrollToEnd: (params?: { animated?: boolean | null }) => {\n            listRef.current?.scrollToEnd(params);\n        },\n        scrollToIndex: (params: {\n            animated?: boolean | null;\n            index: number;\n            viewOffset?: number;\n            viewPosition?: number;\n        }) => {\n            listRef.current?.scrollToIndex(params);\n        },\n        scrollToItem: (params: {\n            animated?: boolean | null;\n            item: any;\n            viewPosition?: number;\n        }) => {\n            listRef.current?.scrollToItem(params);\n        },\n        scrollToOffset: (params: {\n            animated?: boolean | null;\n            offset: number;\n        }) => {\n            listRef.current?.scrollToOffset(params);\n        },\n    }));\n    const { itemVisiblePercentThreshold = 1, onItemShow, onItemHide } = props;\n    const viewConfigRef = React.useRef({ itemVisiblePercentThreshold });\n    const onViewableItemChange = useRef(\n        ({ changed }: { changed: Array<ViewToken> }) => {\n            changed.forEach((viewToken) => {\n                if (typeof viewToken.index === 'number') {\n                    if (viewToken.isViewable) {\n                        onItemShow &&\n                            onItemShow(viewToken.item, viewToken.index);\n                    } else {\n                        onItemHide &&\n                            onItemHide(viewToken.item, viewToken.index);\n                    }\n                }\n            });\n        },\n    );\n    return (\n        <FlatList\n            ref={listRef}\n            showsHorizontalScrollIndicator={false}\n            showsVerticalScrollIndicator={false}\n            onViewableItemsChanged={onViewableItemChange.current}\n            viewabilityConfig={viewConfigRef.current}\n            {...props}\n        />\n    );\n};\n\nexport default React.memo(forwardRef(CommonList));\n"],"mappings":";;AAAA,OAAOA,KAAP,IAEIC,UAFJ,EAGIC,mBAHJ,EAIIC,MAJJ,QAKO,OALP;AAMA,SAASC,QAAT,QAAmD,cAAnD;;AA0CA,MAAMC,UAAmE,GAAG,CACxEC,KADwE,EAExEC,GAFwE,KAGvE;EACD,MAAMC,OAAO,GAAGL,MAAM,CAAW,IAAX,CAAtB;EACAD,mBAAmB,CAACK,GAAD,EAAM,OAAO;IAC5BE,WAAW,EAAGC,MAAD,IAA4C;MAAA;;MACrD,oBAAAF,OAAO,CAACG,OAAR,sEAAiBF,WAAjB,CAA6BC,MAA7B;IACH,CAH2B;IAI5BE,aAAa,EAAGF,MAAD,IAKT;MAAA;;MACF,qBAAAF,OAAO,CAACG,OAAR,wEAAiBC,aAAjB,CAA+BF,MAA/B;IACH,CAX2B;IAY5BG,YAAY,EAAGH,MAAD,IAIR;MAAA;;MACF,qBAAAF,OAAO,CAACG,OAAR,wEAAiBE,YAAjB,CAA8BH,MAA9B;IACH,CAlB2B;IAmB5BI,cAAc,EAAGJ,MAAD,IAGV;MAAA;;MACF,qBAAAF,OAAO,CAACG,OAAR,wEAAiBG,cAAjB,CAAgCJ,MAAhC;IACH;EAxB2B,CAAP,CAAN,CAAnB;EA0BA,MAAM;IAAEK,2BAA2B,GAAG,CAAhC;IAAmCC,UAAnC;IAA+CC;EAA/C,IAA8DX,KAApE;EACA,MAAMY,aAAa,GAAGlB,KAAK,CAACG,MAAN,CAAa;IAAEY;EAAF,CAAb,CAAtB;EACA,MAAMI,oBAAoB,GAAGhB,MAAM,CAC/B,QAAgD;IAAA,IAA/C;MAAEiB;IAAF,CAA+C;IAC5CA,OAAO,CAACC,OAAR,CAAiBC,SAAD,IAAe;MAC3B,IAAI,OAAOA,SAAS,CAACC,KAAjB,KAA2B,QAA/B,EAAyC;QACrC,IAAID,SAAS,CAACE,UAAd,EAA0B;UACtBR,UAAU,IACNA,UAAU,CAACM,SAAS,CAACG,IAAX,EAAiBH,SAAS,CAACC,KAA3B,CADd;QAEH,CAHD,MAGO;UACHN,UAAU,IACNA,UAAU,CAACK,SAAS,CAACG,IAAX,EAAiBH,SAAS,CAACC,KAA3B,CADd;QAEH;MACJ;IACJ,CAVD;EAWH,CAb8B,CAAnC;EAeA,oBACI,oBAAC,QAAD;IACI,GAAG,EAAEf,OADT;IAEI,8BAA8B,EAAE,KAFpC;IAGI,4BAA4B,EAAE,KAHlC;IAII,sBAAsB,EAAEW,oBAAoB,CAACR,OAJjD;IAKI,iBAAiB,EAAEO,aAAa,CAACP;EALrC,GAMQL,KANR,EADJ;AAUH,CA1DD;;AA4DA,4BAAeN,KAAK,CAAC0B,IAAN,eAAWzB,UAAU,CAACI,UAAD,CAArB,CAAf"}