function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { forwardRef, useImperativeHandle, useRef } from 'react';
import { FlatList } from 'react-native';

const CommonList = (props, ref) => {
  const listRef = useRef(null);
  useImperativeHandle(ref, () => ({
    scrollToEnd: params => {
      var _listRef$current;

      (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : _listRef$current.scrollToEnd(params);
    },
    scrollToIndex: params => {
      var _listRef$current2;

      (_listRef$current2 = listRef.current) === null || _listRef$current2 === void 0 ? void 0 : _listRef$current2.scrollToIndex(params);
    },
    scrollToItem: params => {
      var _listRef$current3;

      (_listRef$current3 = listRef.current) === null || _listRef$current3 === void 0 ? void 0 : _listRef$current3.scrollToItem(params);
    },
    scrollToOffset: params => {
      var _listRef$current4;

      (_listRef$current4 = listRef.current) === null || _listRef$current4 === void 0 ? void 0 : _listRef$current4.scrollToOffset(params);
    }
  }));
  const {
    itemVisiblePercentThreshold = 1,
    onItemShow,
    onItemHide
  } = props;
  const viewConfigRef = React.useRef({
    itemVisiblePercentThreshold
  });
  const onViewableItemChange = useRef(_ref => {
    let {
      changed
    } = _ref;
    changed.forEach(viewToken => {
      if (typeof viewToken.index === 'number') {
        if (viewToken.isViewable) {
          onItemShow && onItemShow(viewToken.item, viewToken.index);
        } else {
          onItemHide && onItemHide(viewToken.item, viewToken.index);
        }
      }
    });
  });
  return /*#__PURE__*/React.createElement(FlatList, _extends({
    ref: listRef,
    showsHorizontalScrollIndicator: false,
    showsVerticalScrollIndicator: false,
    onViewableItemsChanged: onViewableItemChange.current,
    viewabilityConfig: viewConfigRef.current
  }, props));
};

export default /*#__PURE__*/React.memo( /*#__PURE__*/forwardRef(CommonList));
//# sourceMappingURL=index.js.map