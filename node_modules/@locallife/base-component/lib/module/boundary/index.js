import React from 'react';
import { KidIcon, KidLoading, KidNetError, useThemeValue } from '@kid-ui/krn';
import { View, StyleSheet } from 'react-native';
const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  }
});

const noop = () => {};
/**
 * 这个组件不建议放到页面的最外层使用，这会导致页面加载时无法创建子节点，影响秒开
 * @param props
 * @constructor
 */


function Boundary(props) {
  const {
    isLoading,
    isError,
    isEmpty,
    refetch = noop,
    children,
    containerStyle,
    EmptyComponent,
    LoadingComponent,
    ErrorComponent
  } = props;
  const bgColor = useThemeValue('cs_common_background_secondary');
  const _style = [styles.container, {
    backgroundColor: bgColor
  }, containerStyle];

  if (isLoading) {
    // 正在请求返回loading
    if (LoadingComponent) {
      return LoadingComponent;
    }

    return /*#__PURE__*/React.createElement(View, {
      style: _style
    }, /*#__PURE__*/React.createElement(KidLoading, null));
  }

  if (isError) {
    if (ErrorComponent) {
      return ErrorComponent;
    } // 请求失败返回错误展位图，点击refetch重试


    return /*#__PURE__*/React.createElement(View, {
      style: _style
    }, /*#__PURE__*/React.createElement(KidNetError, {
      buttonBgColor: 'cs_common_background_primary',
      onPress: refetch
    }));
  }

  if (isEmpty) {
    if (EmptyComponent) {
      return EmptyComponent;
    }

    return /*#__PURE__*/React.createElement(View, {
      style: _style
    }, /*#__PURE__*/React.createElement(KidIcon, {
      kid: 'local_server_emptystate_nocontent_96',
      size: 84
    }));
  } // 返回子组件


  return children;
}

Boundary.defaultProps = {
  containerStyle: undefined,
  isEmpty: false
};
export default /*#__PURE__*/React.memo(Boundary);
//# sourceMappingURL=index.js.map