function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { TouchableOpacity, TouchableWithoutFeedback } from 'react-native';
import React, { useCallback, useRef } from 'react';
const PREVENT_DISTANCE = 10;
export const FixScrollTouchComponent = props => {
  const {
    children,
    activeOpacity,
    onPress,
    fixDistance = PREVENT_DISTANCE
  } = props;

  const _touchActivatePositionRef = useRef({
    pageX: 0,
    pageY: 0
  });

  const TouchComponent = activeOpacity === undefined ? TouchableWithoutFeedback : TouchableOpacity;

  const _onPressIn = useCallback(e => {
    const {
      pageX,
      pageY
    } = e.nativeEvent;
    _touchActivatePositionRef.current = {
      pageX,
      pageY
    };
  }, []);

  const _onPress = useCallback(e => {
    const {
      pageX,
      pageY
    } = e.nativeEvent;
    const absX = Math.abs(_touchActivatePositionRef.current.pageX - pageX);
    const absY = Math.abs(_touchActivatePositionRef.current.pageY - pageY);
    const isDragging = absX >= fixDistance || absY >= fixDistance;

    if (!isDragging) {
      onPress === null || onPress === void 0 ? void 0 : onPress(e);
    }
  }, [fixDistance, onPress]);

  return /*#__PURE__*/React.createElement(TouchComponent, _extends({}, props, {
    onPressIn: _onPressIn,
    onPress: _onPress
  }), children);
};
//# sourceMappingURL=index.js.map