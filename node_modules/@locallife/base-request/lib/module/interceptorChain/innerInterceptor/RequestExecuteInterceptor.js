import { Interceptor } from '@locallife/base-request';
import { execute } from '../../network';
export class RequestExecuteInterceptor extends Interceptor {
  proceed() {
    return model => {
      return execute(model.requestParams).then(rawResponse => {
        var _model$requestParams, _model$requestConfig$, _model$requestConfig, _model$requestConfig$2;

        const isStringRes = ((_model$requestParams = model.requestParams) === null || _model$requestParams === void 0 ? void 0 : _model$requestParams.responseType) === 'string';
        const response = (_model$requestConfig$ = (_model$requestConfig = model.requestConfig) === null || _model$requestConfig === void 0 ? void 0 : (_model$requestConfig$2 = _model$requestConfig.responseParseFunc) === null || _model$requestConfig$2 === void 0 ? void 0 : _model$requestConfig$2.call(_model$requestConfig, rawResponse)) !== null && _model$requestConfig$ !== void 0 ? _model$requestConfig$ : isStringRes ? JSON.parse(rawResponse) : rawResponse;
        return Promise.resolve({ ...model,
          response: response
        });
      }).catch(reason => {
        return Promise.reject({ ...model,
          reason: reason
        });
      });
    };
  }

}
//# sourceMappingURL=RequestExecuteInterceptor.js.map