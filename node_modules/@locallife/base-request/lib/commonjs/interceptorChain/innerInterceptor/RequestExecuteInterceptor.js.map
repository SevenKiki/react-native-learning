{"version":3,"names":["RequestExecuteInterceptor","Interceptor","proceed","model","requestParams","then","rawResponse","isStringRes","responseType","response","requestConfig","responseParseFunc","JSON","parse","Promise","resolve","catch","reason","reject"],"sources":["RequestExecuteInterceptor.ts"],"sourcesContent":["import { Interceptor } from '@locallife/base-request';\nimport { InterceptorModel } from '@locallife/base-request';\nimport { execute } from '../../network';\n\nexport class RequestExecuteInterceptor extends Interceptor {\n    proceed() {\n        return (model: InterceptorModel) => {\n            return execute(model.requestParams)\n                .then((rawResponse) => {\n                    const isStringRes =\n                        model.requestParams?.responseType === 'string';\n                    const response =\n                        model.requestConfig?.responseParseFunc?.(rawResponse) ??\n                        (isStringRes ? JSON.parse(rawResponse) : rawResponse);\n\n                    return Promise.resolve({\n                        ...model,\n                        response: response,\n                    });\n                })\n                .catch((reason) => {\n                    return Promise.reject({ ...model, reason: reason });\n                });\n        };\n    }\n}\n"],"mappings":";;;;;;;AAAA;;AAEA;;AAEO,MAAMA,yBAAN,SAAwCC,wBAAxC,CAAoD;EACvDC,OAAO,GAAG;IACN,OAAQC,KAAD,IAA6B;MAChC,OAAO,sBAAQA,KAAK,CAACC,aAAd,EACFC,IADE,CACIC,WAAD,IAAiB;QAAA;;QACnB,MAAMC,WAAW,GACb,yBAAAJ,KAAK,CAACC,aAAN,8EAAqBI,YAArB,MAAsC,QAD1C;QAEA,MAAMC,QAAQ,oDACVN,KAAK,CAACO,aADI,mFACV,qBAAqBC,iBADX,2DACV,kDAAyCL,WAAzC,CADU,yEAETC,WAAW,GAAGK,IAAI,CAACC,KAAL,CAAWP,WAAX,CAAH,GAA6BA,WAF7C;QAIA,OAAOQ,OAAO,CAACC,OAAR,CAAgB,EACnB,GAAGZ,KADgB;UAEnBM,QAAQ,EAAEA;QAFS,CAAhB,CAAP;MAIH,CAZE,EAaFO,KAbE,CAaKC,MAAD,IAAY;QACf,OAAOH,OAAO,CAACI,MAAR,CAAe,EAAE,GAAGf,KAAL;UAAYc,MAAM,EAAEA;QAApB,CAAf,CAAP;MACH,CAfE,CAAP;IAgBH,CAjBD;EAkBH;;AApBsD"}