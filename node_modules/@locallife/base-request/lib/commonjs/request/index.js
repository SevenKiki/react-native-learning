"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.request = void 0;

var _BaseRequestImpl = require("./BaseRequestImpl");

var _IRequestParam = require("../model/IRequestParam");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

function forEach(obj, fn) {
  let {
    allOwnKeys = true
  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  let i;
  let l; // Force an array if not already something iterable

  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (Array.isArray(obj)) {
    // Iterate over array values
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;

    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}

const extend = function (a, b, thisArg) {
  let {
    allOwnKeys = true
  } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  forEach(b, (val, key) => {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, {
    allOwnKeys
  });
  return a;
};

class Request {
  constructor() {
    _defineProperty(this, "requestImpl", new _BaseRequestImpl.BaseRequestImpl());

    _defineProperty(this, "commonRequestParams", void 0);
  }

  configRequestImpl(request) {
    this.requestImpl = request;
  }

  init(commonRequestParams) {
    if (__DEV__ && this.commonRequestParams) {
      throw Error('Request.init 不可以重复初始化');
    }

    this.commonRequestParams = commonRequestParams;
  }

  request(param, config) {
    var _param$commonRequestP;

    param.commonRequestParams = (_param$commonRequestP = param.commonRequestParams) !== null && _param$commonRequestP !== void 0 ? _param$commonRequestP : this.commonRequestParams;
    return this.requestImpl.request(param, config);
  }

  get(param, config) {
    param.method = _IRequestParam.RequestMethod.GET;
    return this.request(param, config);
  }

  post(param, config) {
    param.method = _IRequestParam.RequestMethod.POST;
    return this.request(param, config);
  }

}

function createInstance() {
  // 根据默认配置构建个上下文对象，包括默认配置和请求、响应拦截器对象
  const context = new Request(); // 创建实例 bind后返回的是一个函数，并且上下文指向context

  const instance = bind(Request.prototype.request, context); // 拷贝prototype到实例上 (例如: request、get、post...)继承到实例上，this指向为context

  extend(instance, Request.prototype, context); // 拷贝上下文对象属性(默认配置和请求、相应拦截器对象)到实例上， this指向为context

  extend(instance, context);
  return instance;
}

// Create the default instance to be exported
// @ts-ignore
const request = createInstance();
exports.request = request;
//# sourceMappingURL=index.js.map