import { IRequest } from './IRequest';
import {
    Interceptor,
    IRequestParam,
    KSBaseResponse,
    RequestConfig,
} from '@locallife/base-request';
import { DefaultRequestConfig } from '../model/RequestConfig';
import { start } from '../interceptorChain';

export class BaseRequestImpl implements IRequest<KSBaseResponse> {
    // eslint-disable-next-line
    initInnerInterceptors(requestInnerInterceptors: Array<Interceptor>, responseInnerInterceptors: Array<Interceptor>, config?: RequestConfig) {}

    getDefaultConfig(): RequestConfig {
        return DefaultRequestConfig;
    }

    get(param: IRequestParam, config?: RequestConfig): Promise<KSBaseResponse> {
        return this.request(param, config);
    }

    post(
        param: IRequestParam,
        config?: RequestConfig,
    ): Promise<KSBaseResponse> {
        return this.request(param, config);
    }

    request(
        param: IRequestParam,
        config?: RequestConfig,
    ): Promise<KSBaseResponse> {
        const requestInnerInterceptors: Array<Interceptor> = [];
        const responseInnerInterceptors: Array<Interceptor> = [];
        const requestConfig = { ...this.getDefaultConfig(), ...config };
        this.initInnerInterceptors(
            requestInnerInterceptors,
            responseInnerInterceptors,
            requestConfig,
        );
        return start(
            requestInnerInterceptors,
            responseInnerInterceptors,
            requestConfig,
            param,
        );
    }
}
