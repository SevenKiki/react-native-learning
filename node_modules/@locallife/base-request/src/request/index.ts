import { IRequest } from './IRequest';
import {
    CommonRequestParams,
    IRequestParam,
    KSBaseResponse,
    RequestConfig,
} from '@locallife/base-request';
import { BaseRequestImpl } from './BaseRequestImpl';
import { RequestMethod } from '../model/IRequestParam';

function bind(fn, thisArg) {
    return function wrap() {
        return fn.apply(thisArg, arguments);
    };
}

function forEach(obj, fn, { allOwnKeys = true } = {}) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === 'undefined') {
        return;
    }

    let i;
    let l;

    // Force an array if not already something iterable
    if (typeof obj !== 'object') {
        /*eslint no-param-reassign:0*/
        obj = [obj];
    }

    if (Array.isArray(obj)) {
        // Iterate over array values
        for (i = 0, l = obj.length; i < l; i++) {
            fn.call(null, obj[i], i, obj);
        }
    } else {
        // Iterate over object keys
        const keys = allOwnKeys
            ? Object.getOwnPropertyNames(obj)
            : Object.keys(obj);
        const len = keys.length;
        let key;

        for (i = 0; i < len; i++) {
            key = keys[i];
            fn.call(null, obj[key], key, obj);
        }
    }
}

const extend = (a, b, thisArg?: Request, { allOwnKeys = true } = {}) => {
    forEach(
        b,
        (val, key) => {
            if (thisArg && typeof val === 'function') {
                a[key] = bind(val, thisArg);
            } else {
                a[key] = val;
            }
        },
        { allOwnKeys },
    );
    return a;
};

class Request {
    requestImpl: IRequest<KSBaseResponse> = new BaseRequestImpl();
    commonRequestParams?: CommonRequestParams;

    configRequestImpl(request: IRequest<KSBaseResponse>) {
        this.requestImpl = request;
    }

    init(commonRequestParams?: CommonRequestParams) {
        if (__DEV__ && this.commonRequestParams) {
            throw Error('Request.init 不可以重复初始化');
        }
        this.commonRequestParams = commonRequestParams;
    }

    request(param: IRequestParam, config?: RequestConfig) {
        param.commonRequestParams =
            param.commonRequestParams ?? this.commonRequestParams;
        return this.requestImpl.request(param, config);
    }

    get(param: IRequestParam, config?: RequestConfig) {
        param.method = RequestMethod.GET;
        return this.request(param, config);
    }

    post(param: IRequestParam, config?: RequestConfig) {
        param.method = RequestMethod.POST;
        return this.request(param, config);
    }
}

function createInstance() {
    // 根据默认配置构建个上下文对象，包括默认配置和请求、响应拦截器对象
    const context = new Request();
    // 创建实例 bind后返回的是一个函数，并且上下文指向context
    const instance = bind(Request.prototype.request, context);
    // 拷贝prototype到实例上 (例如: request、get、post...)继承到实例上，this指向为context
    extend(instance, Request.prototype, context);
    // 拷贝上下文对象属性(默认配置和请求、相应拦截器对象)到实例上， this指向为context
    extend(instance, context);

    return instance;
}

export interface IExposedRequest {
    /**
     * 初始化阶段执行一次即可
     */
    init(commonRequestParams?: CommonRequestParams);

    request<T extends KSBaseResponse>(
        param: IRequestParam,
        config?: RequestConfig,
    ): Promise<T>;

    get<T extends KSBaseResponse>(
        param: IRequestParam,
        config?: RequestConfig,
    ): Promise<T>;

    post<T extends KSBaseResponse>(
        param: IRequestParam,
        config?: RequestConfig,
    ): Promise<T>;
}

export type RequestInstance = IExposedRequest;

// Create the default instance to be exported
// @ts-ignore
export const request: RequestInstance = createInstance();
