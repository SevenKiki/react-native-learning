import {
    Interceptor,
    IRequestParam,
    KSBaseResponse,
} from '@locallife/base-request';
import { RequestConfig } from '../model/RequestConfig';
import { InterceptorModel } from '@locallife/base-request';
import { RequestExecuteInterceptor } from './innerInterceptor/RequestExecuteInterceptor';

function buildChain(
    requestInterceptors: Array<Interceptor>,
    requestInnerInterceptors: Array<Interceptor>,
    responseInnerInterceptors: Array<Interceptor>,
    responseInterceptors: Array<Interceptor>,
): Array<Interceptor> {
    return [
        ...requestInterceptors,
        ...requestInnerInterceptors,
        new RequestExecuteInterceptor(),
        ...responseInnerInterceptors,
        ...responseInterceptors,
    ];
}

export function start(
    requestInnerInterceptors: Array<Interceptor>,
    responseInnerInterceptors: Array<Interceptor>,
    config: RequestConfig,
    params: IRequestParam,
): Promise<KSBaseResponse> {
    const chains = buildChain(
        config?.requestInterceptors ?? [],
        requestInnerInterceptors ?? [],
        responseInnerInterceptors ?? [],
        config?.responseInterceptors ?? [],
    );
    const len = chains.length;
    const model = {
        requestConfig: config,
        requestParams: params,
    } as InterceptorModel;
    let promise = Promise.resolve(model);
    for (let i = 0; i < len; i++) {
        promise = promise.then(chains[i].proceed()).catch(chains[i].error());
    }
    // @ts-ignored
    return promise
        .then((model: InterceptorModel) => {
            return Promise.resolve(model.response);
        })
        .catch((model: InterceptorModel) => {
            return Promise.reject(model.reason);
        });
}
