"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useOnDarkModeChange;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * iOS 监听暗黑模式变化
 *
 * @param dispatchUpdateTheme 通知更新主题，需要业务侧实现
 */
function useOnDarkModeChange(dispatchUpdateTheme) {
  const [changing, updateState] = _react.default.useState(false);

  const [isDarkMode, setIsDarkMode] = _react.default.useState(null);

  (0, _react.useEffect)(() => {
    const eventEmitter = new _reactNative.NativeEventEmitter(_reactNative.NativeModules.KSAppearance);
    const colorListener = eventEmitter.addListener('ksAppearanceChanged', _ref => {
      let {
        colorScheme
      } = _ref;
      updateState(true);
      const isDark = colorScheme === 'dark';
      setIsDarkMode(isDark);
      dispatchUpdateTheme && dispatchUpdateTheme(isDark);
      updateState(false);
    });
    return () => {
      colorListener.remove();
    };
  });
  return {
    changing,
    isDarkMode
  };
}
//# sourceMappingURL=index.js.map