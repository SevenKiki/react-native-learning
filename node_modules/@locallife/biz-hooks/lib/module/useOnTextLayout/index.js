import { useCallback, useMemo, useState, useRef } from 'react';

/**
 * 监听文本布局
 *
 * @param textStr 文本字符串
 * @returns [textInfo, onTextLayout] [文本信息, 用来监听文本布局的变化]
 */
export default function useOnTextLayout(textStr) {
  const initTextInfo = useMemo(() => {
    return {
      hasNextLine: false,
      firstLineBrand: false,
      firstLineText: '',
      text: textStr,
      nextLineText: ''
    };
  }, [textStr]);
  const [textInfo, setTextInfo] = useState(initTextInfo);
  const hasLayout = useRef(false);
  const onTextLayout = useCallback(e => {
    let newTitleInfo;

    if (hasLayout.current === false) {
      if (e.nativeEvent.lines.length > 1) {
        let {
          text
        } = e.nativeEvent.lines[0];
        let remainText = '';

        for (let i = 1; i < e.nativeEvent.lines.length; i++) {
          remainText += e.nativeEvent.lines[i].text;
        }

        newTitleInfo = {
          hasNextLine: true,
          firstLineBrand: false,
          text: initTextInfo.text,
          nextLineText: remainText,
          firstLineText: text
        };
      } else {
        newTitleInfo = { ...initTextInfo,
          firstLineBrand: true
        };
      }

      hasLayout.current = true;
      setTextInfo(newTitleInfo);
    }
  }, [initTextInfo]);
  return [textInfo, onTextLayout];
}
//# sourceMappingURL=index.js.map