{"version":3,"names":["useEffect","useRef","useState","NativeModules","getServerTimeStamp","serverTimeStamp","Kds","invoke","JSON","stringify","e","formatNum","num","toString","generateCountDown","nowTime","endTime","useDay","res","hour","minute","second","nextUpdate","diff","seconds","Math","ceil","minutes","floor","hours","days","day","useCountDown","options","onEndRef","onEnd","updateTimeRef","updateServerTimeRef","useServerTime","Date","now","formattedRes","setFormattedRes","current","updateNowTime","clearTimeout","setTimeout","updateCountDown","updateServerTime","countdown"],"sources":["index.tsx"],"sourcesContent":["/* eslint-disable no-use-before-define */\nimport { useEffect, useRef, useState } from 'react';\nimport { NativeModules } from 'react-native';\n\nexport type CountdownOptions = {\n    // 倒计时结束时间\n    endTime: number;\n    // 倒计时是否使用天（单位）\n    useDay?: boolean;\n    // 倒计时结束回调\n    onEnd?: () => void;\n    // 是否使用服务器时间\n    useServerTime?: boolean;\n};\n\n/**\n * 获取服务器时间\n * @returns number\n */\nconst getServerTimeStamp = async () => {\n    try {\n        const { serverTimeStamp } = await NativeModules.Kds.invoke(\n            'system',\n            'getServerTime',\n            JSON.stringify({}),\n        );\n        return serverTimeStamp;\n    } catch (e) {\n        return -1;\n    }\n};\n\n/**\n * 格式化时间\n */\nconst formatNum = (num: number) => {\n    if (num < 10) {\n        return `0${(num || 0).toString()}`;\n    }\n    return (num || '00').toString();\n};\n\n/**\n * 根据时间差值计算倒计时\n * @param time\n */\nconst generateCountDown = (\n    nowTime: number,\n    endTime: number,\n    useDay: boolean,\n): { res: FormattedRes; nextUpdate: number } => {\n    const res: FormattedRes = {\n        hour: '00',\n        minute: '00',\n        second: '00',\n    };\n    if (!endTime || !nowTime) {\n        return { res, nextUpdate: -1 };\n    }\n    const diff = endTime - nowTime;\n    if (diff <= 0) {\n        return { res, nextUpdate: -1 };\n    }\n    const nextUpdate = diff % 1000 || 0;\n    const seconds = Math.ceil(diff / 1000);\n    res.second = formatNum(seconds % 60);\n    const minutes = Math.floor(seconds / 60);\n    res.minute = formatNum(minutes % 60);\n    const hours = Math.floor(minutes / 60);\n    if (useDay) {\n        res.hour = formatNum(hours % 24);\n        const days = Math.floor(hours / 24);\n        res.day = formatNum(days);\n    } else {\n        res.hour = formatNum(hours);\n    }\n    return {\n        res,\n        nextUpdate,\n    };\n};\n\nexport interface FormattedRes {\n    day?: string;\n    hour: string;\n    minute: string;\n    second: string;\n}\n\nconst useCountDown = (\n    options: CountdownOptions,\n): { countdown: number; formattedRes: FormattedRes } => {\n    const onEndRef = useRef(options.onEnd);\n    const updateTimeRef = useRef(null);\n    const updateServerTimeRef = useRef(null);\n    const { useServerTime } = options || {};\n    // 当前时间\n    const nowTime = useRef<number>(Date.now());\n    const endTime = useRef<number>(options.endTime);\n\n    const [formattedRes, setFormattedRes] = useState<FormattedRes>(() => {\n        const { res } = generateCountDown(\n            nowTime.current,\n            endTime.current,\n            options.useDay,\n        );\n        return res;\n    });\n\n    /**\n     * 自动更新当前时间\n     */\n    const updateNowTime = async () => {\n        if (endTime.current <= nowTime.current) {\n            onEndRef?.current?.();\n            return;\n        }\n\n        // 每 1s 更新一次当前时间\n        clearTimeout(updateTimeRef.current);\n        updateTimeRef.current = setTimeout(() => {\n            nowTime.current = nowTime.current + 1000;\n            updateCountDown();\n            updateNowTime();\n        }, 1000);\n    };\n\n    /**\n     * 根据服务器时间更新当前时间\n     */\n    const updateServerTime = async () => {\n        if (!useServerTime) {\n            return;\n        }\n        const now = await getServerTimeStamp();\n        if (now > 0) {\n            nowTime.current = now;\n            const nextUpdate = updateCountDown();\n            if (nextUpdate >= 0) {\n                // 一段时间后再自动更新当前时间\n                clearTimeout(updateTimeRef.current);\n                updateTimeRef.current = setTimeout(\n                    () => updateNowTime(),\n                    nextUpdate + 1000,\n                );\n                // 每 1min 更新一次服务器时间\n                clearTimeout(updateServerTimeRef.current);\n                updateServerTimeRef.current = setTimeout(\n                    updateServerTime,\n                    60 * 1000,\n                );\n            }\n        }\n    };\n    /**\n     * 更新倒计时\n     */\n    const updateCountDown = () => {\n        const { res, nextUpdate } = generateCountDown(\n            nowTime.current,\n            endTime.current,\n            options.useDay,\n        );\n        setFormattedRes(res);\n        return nextUpdate;\n    };\n\n    useEffect(() => {\n        updateNowTime();\n        updateServerTime();\n        return () => {\n            clearTimeout(updateServerTimeRef.current);\n            clearTimeout(updateTimeRef.current);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return { countdown: endTime.current - nowTime.current, formattedRes };\n};\n\nexport default useCountDown;\n"],"mappings":"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"}