import { useState } from 'react';
export let LoadingStatus;
/**
 * 根据传入方法状态判断页面状态
 * @param
 * onlyOnce: 是否只能请求成功一次。
 *   --true: 只能请求成功一次。如：【入驻】请求成功后不允许再次请求入驻
 *   --false：允许请求多次。如：页面加载数据失败允许重新请求
 * @example const { status, withLoading, isLoading } = useLoading()
 */

(function (LoadingStatus) {
  LoadingStatus[LoadingStatus["initial"] = 0] = "initial";
  LoadingStatus[LoadingStatus["loading"] = 1] = "loading";
  LoadingStatus[LoadingStatus["success"] = 2] = "success";
  LoadingStatus[LoadingStatus["fail"] = 3] = "fail";
})(LoadingStatus || (LoadingStatus = {}));

export default function useLoading() {
  let {
    onlyOnce = false
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  const [status, setStatus] = useState(LoadingStatus.initial);

  async function withLoading(task) {
    const disabledStates = onlyOnce ? [LoadingStatus.loading, LoadingStatus.success] : [LoadingStatus.loading];

    if (disabledStates.includes(status)) {
      return;
    }

    try {
      setStatus(LoadingStatus.loading);
      await task();
      setStatus(LoadingStatus.success);
    } catch (err) {
      setStatus(LoadingStatus.fail);
      throw err;
    }
  }

  return {
    status,
    withLoading,
    isLoading: LoadingStatus.loading === status
  };
}
//# sourceMappingURL=index.js.map