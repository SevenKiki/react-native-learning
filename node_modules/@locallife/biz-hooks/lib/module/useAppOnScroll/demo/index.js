/* eslint-disable react/jsx-no-bind */
import React, { useEffect, useState } from 'react';
import { Text, StyleSheet, Animated, SafeAreaView } from 'react-native';
import useAppOnScroll from '..'; // 本Demo展示了useAppOnScroll的使用，通过该hook监听列表的滑动，实时获取滑动的距离

const styles = StyleSheet.create({
  container: {
    flex: 1
  },
  text: {
    width: '100%',
    height: 100,
    textAlign: 'center',
    lineHeight: 100,
    color: '#ffffff',
    fontSize: 22
  },
  blue: {
    backgroundColor: 'blue'
  },
  orange: {
    backgroundColor: 'orange'
  },
  purple: {
    backgroundColor: 'purple'
  },
  green: {
    backgroundColor: 'green'
  },
  bottom: {
    backgroundColor: 'black',
    color: '#ffffff',
    textAlign: 'center',
    height: 50,
    lineHeight: 50
  }
});
export default (() => {
  const [transY, onScroll] = useAppOnScroll();
  const [transYValue, setTransYValue] = useState(0);
  useEffect(() => {
    transY.addListener(_ref => {
      let {
        value
      } = _ref;
      setTransYValue(value);
    });
  }, [transY]);
  const data = Array(100).fill(0).map((_, index) => `第${index + 1}个文本`);
  const backgroundArray = [styles.blue, styles.orange, styles.purple, styles.green];

  const renderItem = _ref2 => {
    let {
      index
    } = _ref2;
    return /*#__PURE__*/React.createElement(Text, {
      style: [styles.text, backgroundArray[index % backgroundArray.length]]
    }, data[index]);
  };

  return /*#__PURE__*/React.createElement(SafeAreaView, {
    style: styles.container
  }, /*#__PURE__*/React.createElement(Animated.FlatList, {
    data: data,
    renderItem: renderItem,
    keyExtractor: index => `${index}`,
    onScroll: onScroll()
  }), /*#__PURE__*/React.createElement(Text, {
    style: styles.bottom
  }, "\u6ED1\u52A8\u8DDD\u79BB", transYValue));
});
//# sourceMappingURL=index.js.map