/* eslint-disable react/jsx-no-bind */
import React, { useEffect, useState } from 'react';
import { Text, StyleSheet, Animated, SafeAreaView } from 'react-native';
import useAppOnScroll from '..';

// 本Demo展示了useAppOnScroll的使用，通过该hook监听列表的滑动，实时获取滑动的距离
const styles = StyleSheet.create({
    container: {
        flex: 1,
    },
    text: {
        width: '100%',
        height: 100,
        textAlign: 'center',
        lineHeight: 100,
        color: '#ffffff',
        fontSize: 22,
    },
    blue: {
        backgroundColor: 'blue',
    },
    orange: {
        backgroundColor: 'orange',
    },
    purple: {
        backgroundColor: 'purple',
    },
    green: {
        backgroundColor: 'green',
    },
    bottom: {
        backgroundColor: 'black',
        color: '#ffffff',
        textAlign: 'center',
        height: 50,
        lineHeight: 50,
    },
});

export default () => {
    const [transY, onScroll] = useAppOnScroll();
    const [transYValue, setTransYValue] = useState(0);
    useEffect(() => {
        transY.addListener(({ value }) => {
            setTransYValue(value);
        });
    }, [transY]);
    const data = Array(100)
        .fill(0)
        .map((_, index) => `第${index + 1}个文本`);

    const backgroundArray = [
        styles.blue,
        styles.orange,
        styles.purple,
        styles.green,
    ];

    const renderItem = ({ index }) => {
        return (
            <Text
                style={[
                    styles.text,
                    backgroundArray[index % backgroundArray.length],
                ]}
            >
                {data[index]}
            </Text>
        );
    };

    return (
        <SafeAreaView style={styles.container}>
            <Animated.FlatList
                data={data}
                renderItem={renderItem}
                keyExtractor={(index) => `${index}`}
                onScroll={onScroll()}
            />
            <Text style={styles.bottom}>滑动距离{transYValue}</Text>
        </SafeAreaView>
    );
};
