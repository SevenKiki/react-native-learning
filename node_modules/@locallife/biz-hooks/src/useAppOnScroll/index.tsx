import { useMemo, useRef } from 'react';
import { Animated } from 'react-native';

type animatedEventCallback = (e?: any) => void;

/**
 * 监听App滚动
 *
 * @returns [transY, useOnScroll] [滑动的距离(Animated.Value类型), 滑动的回调]
 */
export default function useAppOnScroll(): [
    Animated.Value,
    (e?: (event) => void) => animatedEventCallback,
] {
    const transY = useRef(new Animated.Value(0)).current;
    const useOnScroll = (callBack?: (event) => void): animatedEventCallback => {
        return useMemo(() => {
            return Animated.event(
                [
                    {
                        nativeEvent: {
                            contentOffset: {
                                y: transY,
                            },
                        },
                    },
                ],
                {
                    listener: (event) => {
                        if (callBack) {
                            callBack(event);
                        }
                    },
                    useNativeDriver: false,
                },
            );
        }, [callBack]);
    };
    return [transY, useOnScroll];
}
