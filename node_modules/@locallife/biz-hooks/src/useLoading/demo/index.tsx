import React, { useCallback, useEffect } from 'react';
import useLoading, { LoadingStatus } from '../index';
import { Text, View, StyleSheet } from 'react-native';

const LoadingDemo: React.FC = () => {
    const styles = StyleSheet.create({
        container: {
            width: '100%',
            padding: 20,
        },
        itemWrapper: {
            display: 'flex',
            flexDirection: 'row',
            alignItems: 'center',
            justifyContent: 'space-between',
            width: '100%',
            padding: 30,
            marginBottom: 20,
            backgroundColor: '#eee',
        },
        label: {
            color: '#999',
            position: 'absolute',
            left: 3,
            top: 3,
        },
        button: {
            marginLeft: 30,
        },
    });
    const {
        status: status1,
        withLoading: withLoading1,
        isLoading: isLoading1,
    } = useLoading({ onlyOnce: true });
    const {
        status: status2,
        withLoading: withLoading2,
        isLoading: isLoading2,
    } = useLoading();
    const {
        status: status3,
        withLoading: withLoading3,
        isLoading: isLoading3,
    } = useLoading({ onlyOnce: true });

    const mainRequest = () =>
        new Promise((res) => {
            setTimeout(() => {
                res('');
            }, 3000);
        });

    const handleRefresh2 = useCallback(() => {
        withLoading2(mainRequest);
    }, [withLoading2]);
    const handleRefresh3 = useCallback(() => {
        withLoading3(mainRequest);
    }, [withLoading3]);

    const getStatus = useCallback((status: LoadingStatus) => {
        if (status === 0) {
            return 'initial';
        }
        if (status === 1) {
            return 'loading';
        }
        if (status === 2) {
            return 'success';
        }
        if (status === 3) {
            return 'fail';
        }
    }, []);

    useEffect(() => {
        withLoading1(mainRequest);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    return (
        <View style={styles.container}>
            <View style={styles.itemWrapper}>
                <Text style={styles.label}>{getStatus(status1)}</Text>
                <Text>
                    三秒接口（自动请求）：
                    {isLoading1 ? 'loading...' : 'success!'}
                </Text>
            </View>
            <View style={styles.itemWrapper}>
                <Text style={styles.label}>{getStatus(status2)}</Text>
                <Text>三秒接口：{isLoading2 ? 'loading...' : 'success!'}</Text>
                <Text style={styles.button} onPress={handleRefresh2}>
                    刷新
                </Text>
            </View>
            <View style={styles.itemWrapper}>
                <Text style={styles.label}>{getStatus(status3)}</Text>
                <Text>
                    三秒接口（仅load一次）：
                    {isLoading3 ? 'loading...' : 'success!'}
                </Text>
                <Text style={styles.button} onPress={handleRefresh3}>
                    刷新
                </Text>
            </View>
        </View>
    );
};

export default LoadingDemo;
