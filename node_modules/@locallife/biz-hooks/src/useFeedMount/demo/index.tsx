/* eslint-disable react/jsx-no-bind */
import React from 'react';
import {
    FlatList,
    Text,
    StyleSheet,
    SafeAreaView,
    ViewToken,
} from 'react-native';
import useFeedMount from '..';
import { useRef } from 'react';

// 本Demo展示了useFeedMount的使用，通过该Hook可以对列表每个item展现的上报打点进行控制，保证每个item只会上报一次展现点
const styles = StyleSheet.create({
    container: {
        flex: 1,
    },
    text: {
        width: '100%',
        height: 300,
        textAlign: 'center',
        lineHeight: 300,
        color: '#ffffff',
        fontSize: 22,
    },
    blue: {
        backgroundColor: 'blue',
    },
    orange: {
        backgroundColor: 'orange',
    },
    purple: {
        backgroundColor: 'purple',
    },
    green: {
        backgroundColor: 'green',
    },
    bottom: {
        backgroundColor: 'black',
        color: '#ffffff',
        textAlign: 'center',
        lineHeight: 50,
    },
});

class ItemModel {
    data: string;
    index: string;
}

export default () => {
    const onFeedMount = useFeedMount<ItemModel>(
        (item) => item.index,
        (item) => {
            console.log(`第${item.index + 1}个文本 已展现, 上报该展现点`);
        },
    );
    let data = Array(100).fill({ data: '0', index: '0' });
    data = data.map((_, index) => {
        return { data: `第${index + 1}个文本`, index: index };
    });

    const backgroundArray = [
        styles.blue,
        styles.orange,
        styles.purple,
        styles.green,
    ];

    const renderItem = ({ index }) => {
        return (
            <Text
                style={[
                    styles.text,
                    backgroundArray[index % backgroundArray.length],
                ]}
            >
                {data[index].data}
            </Text>
        );
    };

    const onViewableItemChange = useRef(
        ({ changed }: { changed: Array<ViewToken> }) => {
            changed.forEach((viewToken) => {
                if (viewToken.isViewable) {
                    onFeedMount && onFeedMount(viewToken.item, viewToken.index);
                    console.log(`第${viewToken.index + 1}个文本 is visible`);
                } else {
                    console.log(
                        `第${viewToken.index + 1}个文本 is not visible`,
                    );
                }
            });
        },
    );

    return (
        <SafeAreaView style={styles.container}>
            <FlatList
                data={data}
                renderItem={renderItem}
                keyExtractor={(_, index) => `${index}`}
                onViewableItemsChanged={onViewableItemChange.current}
            />
        </SafeAreaView>
    );
};
