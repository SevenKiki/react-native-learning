/* eslint-disable no-use-before-define */
import { useEffect, useRef, useState } from 'react';
import { NativeModules } from 'react-native';

export type CountdownOptions = {
    // 倒计时结束时间
    endTime: number;
    // 倒计时是否使用天（单位）
    useDay?: boolean;
    // 倒计时结束回调
    onEnd?: () => void;
    // 是否使用服务器时间
    useServerTime?: boolean;
};

/**
 * 获取服务器时间
 * @returns number
 */
const getServerTimeStamp = async () => {
    try {
        const { serverTimeStamp } = await NativeModules.Kds.invoke(
            'system',
            'getServerTime',
            JSON.stringify({}),
        );
        return serverTimeStamp;
    } catch (e) {
        return -1;
    }
};

/**
 * 格式化时间
 */
const formatNum = (num: number) => {
    if (num < 10) {
        return `0${(num || 0).toString()}`;
    }
    return (num || '00').toString();
};

/**
 * 根据时间差值计算倒计时
 * @param time
 */
const generateCountDown = (
    nowTime: number,
    endTime: number,
    useDay: boolean,
): { res: FormattedRes; nextUpdate: number } => {
    const res: FormattedRes = {
        hour: '00',
        minute: '00',
        second: '00',
    };
    if (!endTime || !nowTime) {
        return { res, nextUpdate: -1 };
    }
    const diff = endTime - nowTime;
    if (diff <= 0) {
        return { res, nextUpdate: -1 };
    }
    const nextUpdate = diff % 1000 || 0;
    const seconds = Math.ceil(diff / 1000);
    res.second = formatNum(seconds % 60);
    const minutes = Math.floor(seconds / 60);
    res.minute = formatNum(minutes % 60);
    const hours = Math.floor(minutes / 60);
    if (useDay) {
        res.hour = formatNum(hours % 24);
        const days = Math.floor(hours / 24);
        res.day = formatNum(days);
    } else {
        res.hour = formatNum(hours);
    }
    return {
        res,
        nextUpdate,
    };
};

export interface FormattedRes {
    day?: string;
    hour: string;
    minute: string;
    second: string;
}

const useCountDown = (
    options: CountdownOptions,
): { countdown: number; formattedRes: FormattedRes } => {
    const onEndRef = useRef(options.onEnd);
    const updateTimeRef = useRef(null);
    const updateServerTimeRef = useRef(null);
    const { useServerTime } = options || {};
    // 当前时间
    const nowTime = useRef<number>(Date.now());
    const endTime = useRef<number>(options.endTime);

    const [formattedRes, setFormattedRes] = useState<FormattedRes>(() => {
        const { res } = generateCountDown(
            nowTime.current,
            endTime.current,
            options.useDay,
        );
        return res;
    });

    /**
     * 自动更新当前时间
     */
    const updateNowTime = async () => {
        if (endTime.current <= nowTime.current) {
            onEndRef?.current?.();
            return;
        }

        // 每 1s 更新一次当前时间
        clearTimeout(updateTimeRef.current);
        updateTimeRef.current = setTimeout(() => {
            nowTime.current = nowTime.current + 1000;
            updateCountDown();
            updateNowTime();
        }, 1000);
    };

    /**
     * 根据服务器时间更新当前时间
     */
    const updateServerTime = async () => {
        if (!useServerTime) {
            return;
        }
        const now = await getServerTimeStamp();
        if (now > 0) {
            nowTime.current = now;
            const nextUpdate = updateCountDown();
            if (nextUpdate >= 0) {
                // 一段时间后再自动更新当前时间
                clearTimeout(updateTimeRef.current);
                updateTimeRef.current = setTimeout(
                    () => updateNowTime(),
                    nextUpdate + 1000,
                );
                // 每 1min 更新一次服务器时间
                clearTimeout(updateServerTimeRef.current);
                updateServerTimeRef.current = setTimeout(
                    updateServerTime,
                    60 * 1000,
                );
            }
        }
    };
    /**
     * 更新倒计时
     */
    const updateCountDown = () => {
        const { res, nextUpdate } = generateCountDown(
            nowTime.current,
            endTime.current,
            options.useDay,
        );
        setFormattedRes(res);
        return nextUpdate;
    };

    useEffect(() => {
        updateNowTime();
        updateServerTime();
        return () => {
            clearTimeout(updateServerTimeRef.current);
            clearTimeout(updateTimeRef.current);
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    return { countdown: endTime.current - nowTime.current, formattedRes };
};

export default useCountDown;
