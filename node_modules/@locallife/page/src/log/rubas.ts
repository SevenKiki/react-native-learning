import { TPageProps } from '@locallife/page';
import { useEffect } from 'react';
import { pageLog } from './console';
import { NativeModules } from 'react-native';
import { _AppPropsProvider } from '../_AppPropsProvider';
import { getRubasTime } from '../utils';

interface RubasPublishParam {
    event: string;
    payload?: number | string | object;
    token?: any;
}
export function publishRubas(rubasPublishParams: RubasPublishParam) {
    pageLog('PublishRubas', rubasPublishParams);
    NativeModules.Kds.invoke(
        'tool',
        'publishRubas',
        JSON.stringify({
            rootTag: _AppPropsProvider.appProps.rootTag,
            ...rubasPublishParams,
        }),
    ).catch((e) => {
        console.log('Rubas error', e);
    });
}

export function setRubasDimension(dimensionKey: string, value: string) {
    pageLog('dimensionKey:', dimensionKey + 'dimensionValue:' + value);
    NativeModules.Kds.invoke(
        'tool',
        'setRubasDimension',
        JSON.stringify({
            rootTag: _AppPropsProvider.appProps.rootTag,
            ...{
                key: dimensionKey,
                value: value,
            },
        }),
    ).catch((e) => {
        console.log('Rubas Dimension error', e);
    });
}

export const PageRubasRule = {
    enterPage: 'enter_page',
    apiSuccess: 'api_success',
    apiRetrySuccess: 'api_retry_success',
    apiFailed: 'api_failed',
    pageRender: 'page_render',
    exitPage: 'exit_page',
};

export function getPageRubasKey(
    pageProps: TPageProps<any, any>,
    rule: typeof PageRubasRule[keyof typeof PageRubasRule],
) {
    const { navigationKey, appProps } = pageProps;
    return `${appProps.bundleId}_${appProps.componentName}${
        appProps[navigationKey] ? '_' + appProps[navigationKey] : ''
    }_${rule}`;
}

export function useReportContainer(pageProps: TPageProps<any, any>) {
    useEffect(() => {
        publishRubas({
            event: getPageRubasKey(pageProps, PageRubasRule.enterPage),
        });
        requestAnimationFrame(() => {
            pageProps?.onShowLoading?.();
        });
        return () =>
            publishRubas({
                event: getPageRubasKey(pageProps, PageRubasRule.exitPage),
            });
    }, []);
    useEffect(() => {
        setRubasDimension(
            'local_life_page_bundleid',
            pageProps.appProps?.bundleId ?? '',
        );
        setRubasDimension(
            'local_life_page_componentname',
            pageProps.appProps?.componentName ?? '',
        );
        publishRubas({
            event: 'local_life_page_on_create',
            payload: getRubasTime(pageProps.appProps.onCreateTimestamp),
        });
    }, []);
}
