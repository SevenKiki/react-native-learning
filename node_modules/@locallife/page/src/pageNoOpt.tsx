import React, {
    useCallback,
    useEffect,
    useMemo,
    useRef,
    useState,
} from 'react';
import { NativeModules, View, StyleSheet } from 'react-native';
import { Alpha, OP_INLINE } from './alpha';
import { CustomQueryClient } from './customQueryClient';
import { QueryClientProvider } from 'react-query';
import { PageContext } from './pageContext';
import {
    getPageRubasKey,
    pageLog,
    PageRubasRule,
    publishRubas,
    useReportContainer,
} from './log';
import { getErrorCode, getErrorMessage, getRubasTime } from './utils';
import { TAppProps, TPageProps } from './page';
import { useLcpCollect } from './hooks/useLcpCollect';
import { _AppPropsProvider } from './_AppPropsProvider';

const styles = StyleSheet.create({
    container: {
        flex: 1,
    },
});

// 工程脚手架
export const PageNoOpt = <T extends TAppProps, U extends any>(
    props: TPageProps<T, U>,
) => {
    _AppPropsProvider.init(props.appProps);
    useReportContainer(props);
    const t2TimeStampRef = useRef(Date.now());
    const [loadedData, setLoadedData] = useState(false);
    // 请求数据
    const requestData = useCallback(() => {
        // t1上报
        if (!props.noReport) {
            pageLog(
                '分阶段耗时',
                `t1=${Date.now() - props.appProps.onCreateTimestamp}`,
            );
            NativeModules.RootViewPageBridge.rootViewDidMountWith(
                props.appProps.rootTag,
                {},
            );
            publishRubas({
                event: 'local_life_page_on_load_view_t1',
                payload: getRubasTime(Date.now()),
            });
        }
        if (props.queryKey && props.onRequest) {
            props
                .onRequest()
                .then(() => {
                    const queryState = CustomQueryClient.get().getQueryState(
                        props.queryKey,
                    );
                    if (queryState.status === 'success') {
                        t2TimeStampRef.current = queryState.dataUpdatedAt;
                        publishRubas({
                            event: getPageRubasKey(
                                props,
                                queryState.errorUpdateCount
                                    ? PageRubasRule.apiRetrySuccess
                                    : PageRubasRule.apiSuccess,
                            ),
                        });
                        setLoadedData(true);
                        props.onSuccess?.();
                    } else if (queryState.status === 'error') {
                        if (queryState.errorUpdateCount === 1) {
                            publishRubas({
                                event: getPageRubasKey(
                                    props,
                                    PageRubasRule.apiFailed,
                                ),
                                payload: {
                                    local_life_network_error_code: getErrorCode(
                                        queryState?.error,
                                    ),
                                    local_life_network_error_message:
                                        getErrorMessage(queryState?.error),
                                },
                            });
                        }
                        props.onError?.();
                    }
                })
                .catch(() => {
                    props.onError?.();
                    publishRubas({
                        event: getPageRubasKey(props, PageRubasRule.apiFailed),
                    });
                });
        } else if (!props.noReport) {
            // 无网络请求或者数据处理时，t2、t3上报
            const time2 = Date.now() - props.appProps.onCreateTimestamp;
            NativeModules.RootViewPageBridge.reportPageRenderTime(
                props.appProps.rootTag,
                time2,
                time2,
                {},
            );
            publishRubas({
                event: 'local_life_page_request_t2',
                payload: getRubasTime(Date.now()),
            });
            publishRubas({
                event: 'local_life_page_render_t3',
                payload: getRubasTime(Date.now()),
            });
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    // eslint-disable-next-line react-hooks/exhaustive-deps
    useMemo(requestData, []);
    const { lcpImages } = useLcpCollect();

    useEffect(() => {
        if (loadedData) {
            // 有网络请求或者数据处理时，t2、t3上报
            if (!props.noReport) {
                const t3 = Date.now() - props.appProps.onCreateTimestamp;
                const t2 =
                    t2TimeStampRef.current - props.appProps.onCreateTimestamp;
                NativeModules.RootViewPageBridge.reportPageRenderTime(
                    props.appProps.rootTag,
                    t2,
                    t3,
                    {},
                );
                pageLog('分阶段耗时', `t2=${t2},t3=${t3}`);
            }
            publishRubas({
                event: getPageRubasKey(props, PageRubasRule.pageRender),
            });
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [loadedData]);

    // 渲染组件
    function renderContent() {
        return (
            <QueryClientProvider client={CustomQueryClient.get()}>
                <PageContext.Provider
                    value={{
                        loadedData: true,
                        noOpt: true,
                        lcpImages: lcpImages,
                    }}
                >
                    <View style={styles.container}>
                        <Alpha
                            target={props.contentPager}
                            schedule={OP_INLINE}
                            data={props.appProps}
                        />
                    </View>
                </PageContext.Provider>
            </QueryClientProvider>
        );
    }

    return renderContent();
};
