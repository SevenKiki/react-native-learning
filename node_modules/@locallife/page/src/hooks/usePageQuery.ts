import { CustomQueryClient } from '@locallife/page';
import {
    QueryFunction,
    QueryKey,
    useInfiniteQuery,
    useQuery,
    UseQueryOptions,
} from 'react-query';
import { useLayoutEffect, useRef } from 'react';
import { pageLog } from '../log';

export function usePageQuery<T>(
    key: any,
    queryFn: QueryFunction<T, any>,
    options?: UseQueryOptions<unknown, unknown, T, QueryKey>,
    infinite = false,
) {
    const isHit = useRef(false);
    const prefetchQueryState = CustomQueryClient.get().getQueryState<T>(key, {
        predicate: (query) => {
            return query.meta?.['prefetch'] === 1 && isHit.current === false;
        },
    });
    if (
        (prefetchQueryState?.data || prefetchQueryState?.error) &&
        !isHit.current
    ) {
        options = {
            ...options,
            initialData: prefetchQueryState?.data,
            refetchOnMount: false,
        };
        isHit.current = true;
    }
    useLayoutEffect(() => {
        if (prefetchQueryState?.data && options?.onSuccess) {
            pageLog('命中复用优化', 'onSuccess');
            options?.onSuccess(prefetchQueryState?.data);
        }
        if (prefetchQueryState?.error && options?.onError) {
            pageLog('命中复用优化', 'onError');
            options?.onError(prefetchQueryState?.error);
        }
        if (
            (prefetchQueryState?.error || prefetchQueryState?.data) &&
            options?.onSettled
        ) {
            pageLog('命中复用优化', 'onSettled');
            options?.onSettled(
                prefetchQueryState?.data,
                prefetchQueryState?.error,
            );
        }
    }, []);
    const fn = infinite ? useInfiniteQuery : useQuery;
    // @ts-ignore
    return fn<T>(key, queryFn, options);
}
