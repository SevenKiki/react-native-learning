"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.schedulers = exports.OP_NEXT_DRAWFRAME = exports.OP_NEAREST_IDLE_JS = exports.OP_NEAREST_IDLE_INTERACTIVE = exports.OP_INLINE = exports.OP_IMMEDIATE = exports.Alpha = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const OP_INLINE = 1;
exports.OP_INLINE = OP_INLINE;
const OP_IMMEDIATE = 2;
exports.OP_IMMEDIATE = OP_IMMEDIATE;
const OP_NEXT_DRAWFRAME = 3;
exports.OP_NEXT_DRAWFRAME = OP_NEXT_DRAWFRAME;
const OP_NEAREST_IDLE_JS = 4;
exports.OP_NEAREST_IDLE_JS = OP_NEAREST_IDLE_JS;
const OP_NEAREST_IDLE_INTERACTIVE = 5;
exports.OP_NEAREST_IDLE_INTERACTIVE = OP_NEAREST_IDLE_INTERACTIVE;
const schedulers = {
  [OP_INLINE]: action => action(),
  // 无干涉，正常更新DOM
  [OP_IMMEDIATE]: setImmediate,
  // 在当次JS Event Loop尾部更新DOM
  [OP_NEXT_DRAWFRAME]: requestAnimationFrame,
  // 在临近一次Native渲染结束后更新DOM
  [OP_NEAREST_IDLE_JS]: requestIdleCallback,
  // 在下一次JS Event Loop低负载时更新DOM
  [OP_NEAREST_IDLE_INTERACTIVE]: _reactNative.InteractionManager.runAfterInteractions // 在动画和触控交互结束后更新DOM

};
exports.schedulers = schedulers;
const UPDATE_PROPS_PENDING_UPDATE = 1;
const UPDATE_COMMITIED = 2;
const Alpha = /*#__PURE__*/(0, _react.memo)(props => {
  const [updateState, setUpdateState] = (0, _react.useState)(UPDATE_PROPS_PENDING_UPDATE);
  (0, _react.useMemo)(() => {
    if (props.schedule === OP_INLINE || props.schedule === OP_IMMEDIATE) {
      if (props.placeholder) {
        console.warn('OP_INLINE 不要使用placeholder');
      }

      return;
    }

    const commit = schedulers[props.schedule || OP_NEXT_DRAWFRAME];
    commit(() => {
      setUpdateState(UPDATE_COMMITIED);
    }, {
      timeout: props.timeout || 1000
    });
  }, []);

  function renderContent() {
    const {
      target: Target,
      placeholder
    } = props;

    if (Target && (props.schedule === OP_INLINE || updateState === UPDATE_COMMITIED)) {
      return /*#__PURE__*/_react.default.createElement(Target, props.data);
    }

    return placeholder ? placeholder() : null;
  }

  return renderContent();
});
exports.Alpha = Alpha;
//# sourceMappingURL=alpha.js.map