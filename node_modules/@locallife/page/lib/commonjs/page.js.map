{"version":3,"names":["styles","StyleSheet","create","container","flex","EAppState","Page","props","_AppPropsProvider","init","appProps","t2TimeStampRef","Date","now","loadedData","setLoadedData","appState","setAppState","needLoading","undefined","LOADING","COMPLETED","handleResult","queryState","CustomQueryClient","get","getQueryState","queryKey","status","current","dataUpdatedAt","event","errorUpdateCount","PageRubasRule","apiRetrySuccess","apiSuccess","onSuccess","apiFailed","payload","local_life_network_error_code","error","local_life_network_error_message","ERROR","onError","handleException","requestData","noReport","onCreateTimestamp","NativeModules","RootViewPageBridge","rootViewDidMountWith","rootTag","onRequest","then","catch","time2","reportPageRenderTime","lcpImages","t3","t2","pageRender","renderContent","needError","contentPager","OP_NEXT_DRAWFRAME","OP_INLINE","LoadingComponent","LoadingScene","ErrorComponent","ErrorScene","onRetry","refetchQueries"],"sources":["page.tsx"],"sourcesContent":["import React, {\n    useCallback,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from 'react';\nimport { NativeModules, View, StyleSheet } from 'react-native';\nimport { Alpha, OP_INLINE, OP_NEXT_DRAWFRAME } from './alpha';\nimport LoadingScene from './loadingScene';\nimport ErrorScene from './errorScene';\nimport { CustomQueryClient } from './customQueryClient';\nimport { QueryClientProvider, QueryKey } from 'react-query';\nimport { PageContext } from './pageContext';\nimport {\n    getPageRubasKey,\n    pageLog,\n    PageRubasRule,\n    publishRubas,\n    useReportContainer,\n} from './log';\nimport { getErrorCode, getErrorMessage, getRubasTime } from './utils';\nimport { _AppPropsProvider } from './_AppPropsProvider';\nimport { useLcpCollect } from './hooks/useLcpCollect';\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n    },\n});\n\nexport type TAppProps = {\n    rootTag: number;\n    onCreateTimestamp: number;\n    bundleId?: string;\n    componentName?: string;\n};\n\nexport type TPageProps<T extends TAppProps, U extends any> = {\n    appProps: T; // 通过native传入的props\n    contentPager: React.ComponentType<any>; // 首屏组件\n    LoadingComponent?: React.ComponentType<any>; // loading组件\n    ErrorComponent?: React.ComponentType<any>; // error组件\n    noReport?: boolean; // 是否进行埋点上报\n    needLoading?: boolean; // 是否需要loading页面，不填为true\n    needError?: boolean; // 是否需要异常页面，默认为true\n    onSuccess?: () => void; // 数据处理成功地回调\n    onError?: () => void; // 数据处理失败地回调\n    queryKey?: QueryKey; // react-query key，需与第一次调用时的key一致\n    onRequest?: () => Promise<U>; // 数据请求和处理\n    navigationKey?: string; // 页面标识,针对使用react-navigation的情况\n    onShowLoading?: () => void; // mount回调\n};\n\nenum EAppState {\n    LOADING, // 加载状态\n    ERROR, // 错误状态\n    COMPLETED, // 完成状态\n}\n\n// 工程脚手架\nexport const Page = <T extends TAppProps, U extends any>(\n    props: TPageProps<T, U>,\n) => {\n    _AppPropsProvider.init(props.appProps);\n    useReportContainer(props);\n    const t2TimeStampRef = useRef(Date.now());\n    const [loadedData, setLoadedData] = useState(false);\n    const [appState, setAppState] = useState(\n        props.needLoading || undefined === props.needLoading\n            ? EAppState.LOADING\n            : EAppState.COMPLETED,\n    );\n\n    const handleResult = useCallback(() => {\n        const queryState = CustomQueryClient.get().getQueryState(\n            props.queryKey,\n        );\n        if (queryState.status === 'success') {\n            t2TimeStampRef.current = queryState.dataUpdatedAt;\n            publishRubas({\n                event: getPageRubasKey(\n                    props,\n                    queryState.errorUpdateCount\n                        ? PageRubasRule.apiRetrySuccess\n                        : PageRubasRule.apiSuccess,\n                ),\n            });\n            setLoadedData(true);\n            setAppState(EAppState.COMPLETED);\n            props.onSuccess?.();\n        } else if (queryState.status === 'error') {\n            if (queryState.errorUpdateCount === 1) {\n                publishRubas({\n                    event: getPageRubasKey(props, PageRubasRule.apiFailed),\n                    payload: {\n                        local_life_network_error_code: getErrorCode(\n                            queryState?.error,\n                        ),\n                        local_life_network_error_message: getErrorMessage(\n                            queryState?.error,\n                        ),\n                    },\n                });\n            }\n            setAppState(EAppState.ERROR);\n            props.onError?.();\n        }\n    }, []);\n\n    const handleException = useCallback(() => {\n        setAppState(EAppState.ERROR);\n        props.onError?.();\n        publishRubas({\n            event: getPageRubasKey(props, PageRubasRule.apiFailed),\n        });\n    }, []);\n\n    // 请求数据\n    const requestData = useCallback(() => {\n        setAppState(EAppState.LOADING);\n        // t1上报\n        if (!props.noReport) {\n            pageLog(\n                '分阶段耗时',\n                `t1=${Date.now() - props.appProps.onCreateTimestamp}`,\n            );\n            NativeModules.RootViewPageBridge.rootViewDidMountWith(\n                props.appProps.rootTag,\n                {},\n            );\n            publishRubas({\n                event: 'local_life_page_on_load_view_t1',\n                payload: getRubasTime(Date.now()),\n            });\n        }\n        if (props.queryKey && props.onRequest) {\n            props.onRequest().then(handleResult).catch(handleException);\n        } else if (!props.noReport) {\n            // 无网络请求或者数据处理时，t2、t3上报\n            const time2 = Date.now() - props.appProps.onCreateTimestamp;\n            NativeModules.RootViewPageBridge.reportPageRenderTime(\n                props.appProps.rootTag,\n                time2,\n                time2,\n                {},\n            );\n        }\n    }, []);\n\n    useMemo(requestData, []);\n    const { lcpImages } = useLcpCollect();\n\n    useEffect(() => {\n        if (loadedData) {\n            // 有网络请求或者数据处理时，t2、t3上报\n            if (!props.noReport) {\n                const t3 = Date.now() - props.appProps.onCreateTimestamp;\n                const t2 =\n                    t2TimeStampRef.current - props.appProps.onCreateTimestamp;\n                NativeModules.RootViewPageBridge.reportPageRenderTime(\n                    props.appProps.rootTag,\n                    t2,\n                    t3,\n                    {},\n                );\n                pageLog('分阶段耗时', `t2=${t2},t3=${t3}`);\n                publishRubas({\n                    event: 'local_life_page_request_t2',\n                    payload: getRubasTime(t2TimeStampRef.current),\n                });\n                publishRubas({\n                    event: 'local_life_page_render_t3',\n                    payload: getRubasTime(Date.now()),\n                });\n            }\n            publishRubas({\n                event: getPageRubasKey(props, PageRubasRule.pageRender),\n            });\n        }\n    }, [loadedData]);\n\n    // 渲染组件\n    function renderContent() {\n        const needLoading = !!(\n            props.needLoading ||\n            undefined === props.needLoading ||\n            (props.onRequest && props.queryKey)\n        );\n        const needError = !!(props.needError || undefined === props.needError);\n        return (\n            <QueryClientProvider client={CustomQueryClient.get()}>\n                <PageContext.Provider\n                    value={{ loadedData: loadedData, lcpImages: lcpImages }}\n                >\n                    <View style={styles.container}>\n                        <Alpha\n                            target={props.contentPager}\n                            schedule={\n                                needLoading ? OP_NEXT_DRAWFRAME : OP_INLINE\n                            }\n                            data={props.appProps}\n                        />\n                        {needLoading && EAppState.LOADING === appState && (\n                            <Alpha\n                                target={props.LoadingComponent || LoadingScene}\n                                schedule={OP_INLINE}\n                            />\n                        )}\n                        {needError && EAppState.ERROR === appState && (\n                            <Alpha\n                                target={props.ErrorComponent || ErrorScene}\n                                schedule={OP_INLINE}\n                                data={{\n                                    onRetry: () => {\n                                        CustomQueryClient.get()\n                                            .refetchQueries(props.queryKey)\n                                            .then(handleResult)\n                                            .catch(handleException);\n                                    },\n                                }}\n                            />\n                        )}\n                    </View>\n                </PageContext.Provider>\n            </QueryClientProvider>\n        );\n    }\n\n    return renderContent();\n};\n"],"mappings":"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"}