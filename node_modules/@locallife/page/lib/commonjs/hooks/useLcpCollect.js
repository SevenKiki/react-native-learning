"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLcpCollect = void 0;

var _react = require("react");

var _reactNative = require("react-native");

var _log = require("../log");

var _utils = require("../utils");

const useLcpCollect = () => {
  const lcpImages = (0, _react.useMemo)(() => [], []);
  const isCollectFinish = (0, _react.useRef)(false);

  const collectLPCEvent = () => {
    if (isCollectFinish.current === false) {
      let renderTimestamp = 0;
      let maxRenderTimestamp = 0;
      let maxSize = 0;

      for (const idx in lcpImages) {
        const image = lcpImages[idx];

        if (image) {
          if (maxSize < image.imageSize) {
            maxSize = image.imageSize;
            renderTimestamp = image.renderTimestamp;
          }

          if (maxRenderTimestamp < image.renderTimestamp) {
            maxRenderTimestamp = image.renderTimestamp;
          }
        }
      }

      if (renderTimestamp !== 0 && maxSize > 0) {
        (0, _log.publishRubas)({
          event: 'local_life_page_lcp_render',
          payload: (0, _utils.getRubasTime)(renderTimestamp)
        });
        (0, _log.publishRubas)({
          event: 'local_life_page_llt_render',
          payload: (0, _utils.getRubasTime)(maxRenderTimestamp)
        });
        isCollectFinish.current = true;
      }
    }
  };

  (0, _react.useEffect)(() => {
    // 监听页面可见
    const listener = new _reactNative.NativeEventEmitter(_reactNative.NativeModules.KRNAppState).addListener('krnAppStateDidChange', _ref => {
      let {
        appState
      } = _ref;

      if (appState === 'hide' || appState === 'inactive' || appState === 'background' || appState === 'destroy') {
        collectLPCEvent();
      }
    });
    return () => {
      collectLPCEvent();
      listener.remove();
    };
  }, [lcpImages]);
  return {
    lcpImages
  };
};

exports.useLcpCollect = useLcpCollect;
//# sourceMappingURL=useLcpCollect.js.map