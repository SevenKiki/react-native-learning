"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePageQuery = usePageQuery;

var _page = require("@locallife/page");

var _reactQuery = require("react-query");

var _react = require("react");

var _log = require("../log");

function usePageQuery(key, queryFn, options) {
  let infinite = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  const isHit = (0, _react.useRef)(false);

  const prefetchQueryState = _page.CustomQueryClient.get().getQueryState(key, {
    predicate: query => {
      var _query$meta;

      return ((_query$meta = query.meta) === null || _query$meta === void 0 ? void 0 : _query$meta['prefetch']) === 1 && isHit.current === false;
    }
  });

  if ((prefetchQueryState !== null && prefetchQueryState !== void 0 && prefetchQueryState.data || prefetchQueryState !== null && prefetchQueryState !== void 0 && prefetchQueryState.error) && !isHit.current) {
    options = { ...options,
      initialData: prefetchQueryState === null || prefetchQueryState === void 0 ? void 0 : prefetchQueryState.data,
      refetchOnMount: false
    };
    isHit.current = true;
  }

  (0, _react.useLayoutEffect)(() => {
    var _options, _options3, _options5;

    if (prefetchQueryState !== null && prefetchQueryState !== void 0 && prefetchQueryState.data && (_options = options) !== null && _options !== void 0 && _options.onSuccess) {
      var _options2;

      (0, _log.pageLog)('命中复用优化', 'onSuccess');
      (_options2 = options) === null || _options2 === void 0 ? void 0 : _options2.onSuccess(prefetchQueryState === null || prefetchQueryState === void 0 ? void 0 : prefetchQueryState.data);
    }

    if (prefetchQueryState !== null && prefetchQueryState !== void 0 && prefetchQueryState.error && (_options3 = options) !== null && _options3 !== void 0 && _options3.onError) {
      var _options4;

      (0, _log.pageLog)('命中复用优化', 'onError');
      (_options4 = options) === null || _options4 === void 0 ? void 0 : _options4.onError(prefetchQueryState === null || prefetchQueryState === void 0 ? void 0 : prefetchQueryState.error);
    }

    if ((prefetchQueryState !== null && prefetchQueryState !== void 0 && prefetchQueryState.error || prefetchQueryState !== null && prefetchQueryState !== void 0 && prefetchQueryState.data) && (_options5 = options) !== null && _options5 !== void 0 && _options5.onSettled) {
      var _options6;

      (0, _log.pageLog)('命中复用优化', 'onSettled');
      (_options6 = options) === null || _options6 === void 0 ? void 0 : _options6.onSettled(prefetchQueryState === null || prefetchQueryState === void 0 ? void 0 : prefetchQueryState.data, prefetchQueryState === null || prefetchQueryState === void 0 ? void 0 : prefetchQueryState.error);
    }
  }, []);
  const fn = infinite ? _reactQuery.useInfiniteQuery : _reactQuery.useQuery; // @ts-ignore

  return fn(key, queryFn, options);
}
//# sourceMappingURL=usePageQuery.js.map