{"version":3,"names":["useLcpCollect","lcpImages","isCollectFinish","collectLPCEvent","current","renderTimestamp","maxRenderTimestamp","maxSize","idx","image","imageSize","event","payload","listener","NativeEventEmitter","NativeModules","KRNAppState","addListener","appState","remove"],"sources":["useLcpCollect.tsx"],"sourcesContent":["import { useEffect, useMemo, useRef } from 'react';\nimport { NativeEventEmitter, NativeModules } from 'react-native';\nimport { ILCPImageContextProps } from '../pageContext';\nimport { publishRubas } from '../log';\nimport { getRubasTime } from '../utils';\n\nexport const useLcpCollect = () => {\n    const lcpImages = useMemo(() => [], []);\n    const isCollectFinish = useRef(false);\n    const collectLPCEvent = () => {\n        if (isCollectFinish.current === false) {\n            let renderTimestamp = 0;\n            let maxRenderTimestamp = 0;\n            let maxSize = 0;\n            for (const idx in lcpImages) {\n                const image: ILCPImageContextProps = lcpImages[idx];\n                if (image) {\n                    if (maxSize < image.imageSize) {\n                        maxSize = image.imageSize;\n                        renderTimestamp = image.renderTimestamp;\n                    }\n                    if (maxRenderTimestamp < image.renderTimestamp) {\n                        maxRenderTimestamp = image.renderTimestamp;\n                    }\n                }\n            }\n            if (renderTimestamp !== 0 && maxSize > 0) {\n                publishRubas({\n                    event: 'local_life_page_lcp_render',\n                    payload: getRubasTime(renderTimestamp),\n                });\n                publishRubas({\n                    event: 'local_life_page_llt_render',\n                    payload: getRubasTime(maxRenderTimestamp),\n                });\n                isCollectFinish.current = true;\n            }\n        }\n    };\n    useEffect(() => {\n        // 监听页面可见\n        const listener = new NativeEventEmitter(\n            NativeModules.KRNAppState,\n        ).addListener('krnAppStateDidChange', ({ appState }) => {\n            if (\n                appState === 'hide' ||\n                appState === 'inactive' ||\n                appState === 'background' ||\n                appState === 'destroy'\n            ) {\n                collectLPCEvent();\n            }\n        });\n        return () => {\n            collectLPCEvent();\n            listener.remove();\n        };\n    }, [lcpImages]);\n    return { lcpImages };\n};\n"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAEO,MAAMA,aAAa,GAAG,MAAM;EAC/B,MAAMC,SAAS,GAAG,oBAAQ,MAAM,EAAd,EAAkB,EAAlB,CAAlB;EACA,MAAMC,eAAe,GAAG,mBAAO,KAAP,CAAxB;;EACA,MAAMC,eAAe,GAAG,MAAM;IAC1B,IAAID,eAAe,CAACE,OAAhB,KAA4B,KAAhC,EAAuC;MACnC,IAAIC,eAAe,GAAG,CAAtB;MACA,IAAIC,kBAAkB,GAAG,CAAzB;MACA,IAAIC,OAAO,GAAG,CAAd;;MACA,KAAK,MAAMC,GAAX,IAAkBP,SAAlB,EAA6B;QACzB,MAAMQ,KAA4B,GAAGR,SAAS,CAACO,GAAD,CAA9C;;QACA,IAAIC,KAAJ,EAAW;UACP,IAAIF,OAAO,GAAGE,KAAK,CAACC,SAApB,EAA+B;YAC3BH,OAAO,GAAGE,KAAK,CAACC,SAAhB;YACAL,eAAe,GAAGI,KAAK,CAACJ,eAAxB;UACH;;UACD,IAAIC,kBAAkB,GAAGG,KAAK,CAACJ,eAA/B,EAAgD;YAC5CC,kBAAkB,GAAGG,KAAK,CAACJ,eAA3B;UACH;QACJ;MACJ;;MACD,IAAIA,eAAe,KAAK,CAApB,IAAyBE,OAAO,GAAG,CAAvC,EAA0C;QACtC,uBAAa;UACTI,KAAK,EAAE,4BADE;UAETC,OAAO,EAAE,yBAAaP,eAAb;QAFA,CAAb;QAIA,uBAAa;UACTM,KAAK,EAAE,4BADE;UAETC,OAAO,EAAE,yBAAaN,kBAAb;QAFA,CAAb;QAIAJ,eAAe,CAACE,OAAhB,GAA0B,IAA1B;MACH;IACJ;EACJ,CA7BD;;EA8BA,sBAAU,MAAM;IACZ;IACA,MAAMS,QAAQ,GAAG,IAAIC,+BAAJ,CACbC,2BAAcC,WADD,EAEfC,WAFe,CAEH,sBAFG,EAEqB,QAAkB;MAAA,IAAjB;QAAEC;MAAF,CAAiB;;MACpD,IACIA,QAAQ,KAAK,MAAb,IACAA,QAAQ,KAAK,UADb,IAEAA,QAAQ,KAAK,YAFb,IAGAA,QAAQ,KAAK,SAJjB,EAKE;QACEf,eAAe;MAClB;IACJ,CAXgB,CAAjB;IAYA,OAAO,MAAM;MACTA,eAAe;MACfU,QAAQ,CAACM,MAAT;IACH,CAHD;EAIH,CAlBD,EAkBG,CAAClB,SAAD,CAlBH;EAmBA,OAAO;IAAEA;EAAF,CAAP;AACH,CArDM"}