"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PageNoOpt = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _alpha = require("./alpha");

var _customQueryClient = require("./customQueryClient");

var _reactQuery = require("react-query");

var _pageContext = require("./pageContext");

var _log = require("./log");

var _utils = require("./utils");

var _useLcpCollect = require("./hooks/useLcpCollect");

var _AppPropsProvider2 = require("./_AppPropsProvider");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  }
}); // 工程脚手架


const PageNoOpt = props => {
  _AppPropsProvider2._AppPropsProvider.init(props.appProps);

  (0, _log.useReportContainer)(props);
  const t2TimeStampRef = (0, _react.useRef)(Date.now());
  const [loadedData, setLoadedData] = (0, _react.useState)(false); // 请求数据

  const requestData = (0, _react.useCallback)(() => {
    // t1上报
    if (!props.noReport) {
      (0, _log.pageLog)('分阶段耗时', `t1=${Date.now() - props.appProps.onCreateTimestamp}`);

      _reactNative.NativeModules.RootViewPageBridge.rootViewDidMountWith(props.appProps.rootTag, {});

      (0, _log.publishRubas)({
        event: 'local_life_page_on_load_view_t1',
        payload: (0, _utils.getRubasTime)(Date.now())
      });
    }

    if (props.queryKey && props.onRequest) {
      props.onRequest().then(() => {
        const queryState = _customQueryClient.CustomQueryClient.get().getQueryState(props.queryKey);

        if (queryState.status === 'success') {
          var _props$onSuccess;

          t2TimeStampRef.current = queryState.dataUpdatedAt;
          (0, _log.publishRubas)({
            event: (0, _log.getPageRubasKey)(props, queryState.errorUpdateCount ? _log.PageRubasRule.apiRetrySuccess : _log.PageRubasRule.apiSuccess)
          });
          setLoadedData(true);
          (_props$onSuccess = props.onSuccess) === null || _props$onSuccess === void 0 ? void 0 : _props$onSuccess.call(props);
        } else if (queryState.status === 'error') {
          var _props$onError;

          if (queryState.errorUpdateCount === 1) {
            (0, _log.publishRubas)({
              event: (0, _log.getPageRubasKey)(props, _log.PageRubasRule.apiFailed),
              payload: {
                local_life_network_error_code: (0, _utils.getErrorCode)(queryState === null || queryState === void 0 ? void 0 : queryState.error),
                local_life_network_error_message: (0, _utils.getErrorMessage)(queryState === null || queryState === void 0 ? void 0 : queryState.error)
              }
            });
          }

          (_props$onError = props.onError) === null || _props$onError === void 0 ? void 0 : _props$onError.call(props);
        }
      }).catch(() => {
        var _props$onError2;

        (_props$onError2 = props.onError) === null || _props$onError2 === void 0 ? void 0 : _props$onError2.call(props);
        (0, _log.publishRubas)({
          event: (0, _log.getPageRubasKey)(props, _log.PageRubasRule.apiFailed)
        });
      });
    } else if (!props.noReport) {
      // 无网络请求或者数据处理时，t2、t3上报
      const time2 = Date.now() - props.appProps.onCreateTimestamp;

      _reactNative.NativeModules.RootViewPageBridge.reportPageRenderTime(props.appProps.rootTag, time2, time2, {});

      (0, _log.publishRubas)({
        event: 'local_life_page_request_t2',
        payload: (0, _utils.getRubasTime)(Date.now())
      });
      (0, _log.publishRubas)({
        event: 'local_life_page_render_t3',
        payload: (0, _utils.getRubasTime)(Date.now())
      });
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []); // eslint-disable-next-line react-hooks/exhaustive-deps

  (0, _react.useMemo)(requestData, []);
  const {
    lcpImages
  } = (0, _useLcpCollect.useLcpCollect)();
  (0, _react.useEffect)(() => {
    if (loadedData) {
      // 有网络请求或者数据处理时，t2、t3上报
      if (!props.noReport) {
        const t3 = Date.now() - props.appProps.onCreateTimestamp;
        const t2 = t2TimeStampRef.current - props.appProps.onCreateTimestamp;

        _reactNative.NativeModules.RootViewPageBridge.reportPageRenderTime(props.appProps.rootTag, t2, t3, {});

        (0, _log.pageLog)('分阶段耗时', `t2=${t2},t3=${t3}`);
      }

      (0, _log.publishRubas)({
        event: (0, _log.getPageRubasKey)(props, _log.PageRubasRule.pageRender)
      });
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [loadedData]); // 渲染组件

  function renderContent() {
    return /*#__PURE__*/_react.default.createElement(_reactQuery.QueryClientProvider, {
      client: _customQueryClient.CustomQueryClient.get()
    }, /*#__PURE__*/_react.default.createElement(_pageContext.PageContext.Provider, {
      value: {
        loadedData: true,
        noOpt: true,
        lcpImages: lcpImages
      }
    }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: styles.container
    }, /*#__PURE__*/_react.default.createElement(_alpha.Alpha, {
      target: props.contentPager,
      schedule: _alpha.OP_INLINE,
      data: props.appProps
    }))));
  }

  return renderContent();
};

exports.PageNoOpt = PageNoOpt;
//# sourceMappingURL=pageNoOpt.js.map