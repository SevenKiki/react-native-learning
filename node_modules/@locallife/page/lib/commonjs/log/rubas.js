"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PageRubasRule = void 0;
exports.getPageRubasKey = getPageRubasKey;
exports.publishRubas = publishRubas;
exports.setRubasDimension = setRubasDimension;
exports.useReportContainer = useReportContainer;

var _react = require("react");

var _console = require("./console");

var _reactNative = require("react-native");

var _AppPropsProvider2 = require("../_AppPropsProvider");

var _utils = require("../utils");

function publishRubas(rubasPublishParams) {
  (0, _console.pageLog)('PublishRubas', rubasPublishParams);

  _reactNative.NativeModules.Kds.invoke('tool', 'publishRubas', JSON.stringify({
    rootTag: _AppPropsProvider2._AppPropsProvider.appProps.rootTag,
    ...rubasPublishParams
  })).catch(e => {
    console.log('Rubas error', e);
  });
}

function setRubasDimension(dimensionKey, value) {
  (0, _console.pageLog)('dimensionKey:', dimensionKey + 'dimensionValue:' + value);

  _reactNative.NativeModules.Kds.invoke('tool', 'setRubasDimension', JSON.stringify({
    rootTag: _AppPropsProvider2._AppPropsProvider.appProps.rootTag,
    ...{
      key: dimensionKey,
      value: value
    }
  })).catch(e => {
    console.log('Rubas Dimension error', e);
  });
}

const PageRubasRule = {
  enterPage: 'enter_page',
  apiSuccess: 'api_success',
  apiRetrySuccess: 'api_retry_success',
  apiFailed: 'api_failed',
  pageRender: 'page_render',
  exitPage: 'exit_page'
};
exports.PageRubasRule = PageRubasRule;

function getPageRubasKey(pageProps, rule) {
  const {
    navigationKey,
    appProps
  } = pageProps;
  return `${appProps.bundleId}_${appProps.componentName}${appProps[navigationKey] ? '_' + appProps[navigationKey] : ''}_${rule}`;
}

function useReportContainer(pageProps) {
  (0, _react.useEffect)(() => {
    publishRubas({
      event: getPageRubasKey(pageProps, PageRubasRule.enterPage)
    });
    requestAnimationFrame(() => {
      var _pageProps$onShowLoad;

      pageProps === null || pageProps === void 0 ? void 0 : (_pageProps$onShowLoad = pageProps.onShowLoading) === null || _pageProps$onShowLoad === void 0 ? void 0 : _pageProps$onShowLoad.call(pageProps);
    });
    return () => publishRubas({
      event: getPageRubasKey(pageProps, PageRubasRule.exitPage)
    });
  }, []);
  (0, _react.useEffect)(() => {
    var _pageProps$appProps$b, _pageProps$appProps, _pageProps$appProps$c, _pageProps$appProps2;

    setRubasDimension('local_life_page_bundleid', (_pageProps$appProps$b = (_pageProps$appProps = pageProps.appProps) === null || _pageProps$appProps === void 0 ? void 0 : _pageProps$appProps.bundleId) !== null && _pageProps$appProps$b !== void 0 ? _pageProps$appProps$b : '');
    setRubasDimension('local_life_page_componentname', (_pageProps$appProps$c = (_pageProps$appProps2 = pageProps.appProps) === null || _pageProps$appProps2 === void 0 ? void 0 : _pageProps$appProps2.componentName) !== null && _pageProps$appProps$c !== void 0 ? _pageProps$appProps$c : '');
    publishRubas({
      event: 'local_life_page_on_create',
      payload: (0, _utils.getRubasTime)(pageProps.appProps.onCreateTimestamp)
    });
  }, []);
}
//# sourceMappingURL=rubas.js.map