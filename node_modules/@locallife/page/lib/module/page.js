import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import { NativeModules, View, StyleSheet } from 'react-native';
import { Alpha, OP_INLINE, OP_NEXT_DRAWFRAME } from './alpha';
import LoadingScene from './loadingScene';
import ErrorScene from './errorScene';
import { CustomQueryClient } from './customQueryClient';
import { QueryClientProvider } from 'react-query';
import { PageContext } from './pageContext';
import { getPageRubasKey, pageLog, PageRubasRule, publishRubas, useReportContainer } from './log';
import { getErrorCode, getErrorMessage, getRubasTime } from './utils';
import { _AppPropsProvider } from './_AppPropsProvider';
import { useLcpCollect } from './hooks/useLcpCollect';
const styles = StyleSheet.create({
  container: {
    flex: 1
  }
});
var EAppState; // 工程脚手架

(function (EAppState) {
  EAppState[EAppState["LOADING"] = 0] = "LOADING";
  EAppState[EAppState["ERROR"] = 1] = "ERROR";
  EAppState[EAppState["COMPLETED"] = 2] = "COMPLETED";
})(EAppState || (EAppState = {}));

export const Page = props => {
  _AppPropsProvider.init(props.appProps);

  useReportContainer(props);
  const t2TimeStampRef = useRef(Date.now());
  const [loadedData, setLoadedData] = useState(false);
  const [appState, setAppState] = useState(props.needLoading || undefined === props.needLoading ? EAppState.LOADING : EAppState.COMPLETED);
  const handleResult = useCallback(() => {
    const queryState = CustomQueryClient.get().getQueryState(props.queryKey);

    if (queryState.status === 'success') {
      var _props$onSuccess;

      t2TimeStampRef.current = queryState.dataUpdatedAt;
      publishRubas({
        event: getPageRubasKey(props, queryState.errorUpdateCount ? PageRubasRule.apiRetrySuccess : PageRubasRule.apiSuccess)
      });
      setLoadedData(true);
      setAppState(EAppState.COMPLETED);
      (_props$onSuccess = props.onSuccess) === null || _props$onSuccess === void 0 ? void 0 : _props$onSuccess.call(props);
    } else if (queryState.status === 'error') {
      var _props$onError;

      if (queryState.errorUpdateCount === 1) {
        publishRubas({
          event: getPageRubasKey(props, PageRubasRule.apiFailed),
          payload: {
            local_life_network_error_code: getErrorCode(queryState === null || queryState === void 0 ? void 0 : queryState.error),
            local_life_network_error_message: getErrorMessage(queryState === null || queryState === void 0 ? void 0 : queryState.error)
          }
        });
      }

      setAppState(EAppState.ERROR);
      (_props$onError = props.onError) === null || _props$onError === void 0 ? void 0 : _props$onError.call(props);
    }
  }, []);
  const handleException = useCallback(() => {
    var _props$onError2;

    setAppState(EAppState.ERROR);
    (_props$onError2 = props.onError) === null || _props$onError2 === void 0 ? void 0 : _props$onError2.call(props);
    publishRubas({
      event: getPageRubasKey(props, PageRubasRule.apiFailed)
    });
  }, []); // 请求数据

  const requestData = useCallback(() => {
    setAppState(EAppState.LOADING); // t1上报

    if (!props.noReport) {
      pageLog('分阶段耗时', `t1=${Date.now() - props.appProps.onCreateTimestamp}`);
      NativeModules.RootViewPageBridge.rootViewDidMountWith(props.appProps.rootTag, {});
      publishRubas({
        event: 'local_life_page_on_load_view_t1',
        payload: getRubasTime(Date.now())
      });
    }

    if (props.queryKey && props.onRequest) {
      props.onRequest().then(handleResult).catch(handleException);
    } else if (!props.noReport) {
      // 无网络请求或者数据处理时，t2、t3上报
      const time2 = Date.now() - props.appProps.onCreateTimestamp;
      NativeModules.RootViewPageBridge.reportPageRenderTime(props.appProps.rootTag, time2, time2, {});
    }
  }, []);
  useMemo(requestData, []);
  const {
    lcpImages
  } = useLcpCollect();
  useEffect(() => {
    if (loadedData) {
      // 有网络请求或者数据处理时，t2、t3上报
      if (!props.noReport) {
        const t3 = Date.now() - props.appProps.onCreateTimestamp;
        const t2 = t2TimeStampRef.current - props.appProps.onCreateTimestamp;
        NativeModules.RootViewPageBridge.reportPageRenderTime(props.appProps.rootTag, t2, t3, {});
        pageLog('分阶段耗时', `t2=${t2},t3=${t3}`);
        publishRubas({
          event: 'local_life_page_request_t2',
          payload: getRubasTime(t2TimeStampRef.current)
        });
        publishRubas({
          event: 'local_life_page_render_t3',
          payload: getRubasTime(Date.now())
        });
      }

      publishRubas({
        event: getPageRubasKey(props, PageRubasRule.pageRender)
      });
    }
  }, [loadedData]); // 渲染组件

  function renderContent() {
    const needLoading = !!(props.needLoading || undefined === props.needLoading || props.onRequest && props.queryKey);
    const needError = !!(props.needError || undefined === props.needError);
    return /*#__PURE__*/React.createElement(QueryClientProvider, {
      client: CustomQueryClient.get()
    }, /*#__PURE__*/React.createElement(PageContext.Provider, {
      value: {
        loadedData: loadedData,
        lcpImages: lcpImages
      }
    }, /*#__PURE__*/React.createElement(View, {
      style: styles.container
    }, /*#__PURE__*/React.createElement(Alpha, {
      target: props.contentPager,
      schedule: needLoading ? OP_NEXT_DRAWFRAME : OP_INLINE,
      data: props.appProps
    }), needLoading && EAppState.LOADING === appState && /*#__PURE__*/React.createElement(Alpha, {
      target: props.LoadingComponent || LoadingScene,
      schedule: OP_INLINE
    }), needError && EAppState.ERROR === appState && /*#__PURE__*/React.createElement(Alpha, {
      target: props.ErrorComponent || ErrorScene,
      schedule: OP_INLINE,
      data: {
        onRetry: () => {
          CustomQueryClient.get().refetchQueries(props.queryKey).then(handleResult).catch(handleException);
        }
      }
    }))));
  }

  return renderContent();
};
//# sourceMappingURL=page.js.map