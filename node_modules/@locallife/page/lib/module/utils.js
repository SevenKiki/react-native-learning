import { Platform } from 'react-native';
export function getErrorCode(error) {
  if (error && typeof error === 'object') {
    var _error$data, _error$data3;

    if (error !== null && error !== void 0 && (_error$data = error.data) !== null && _error$data !== void 0 && _error$data.code) {
      var _error$data2;

      return error === null || error === void 0 ? void 0 : (_error$data2 = error.data) === null || _error$data2 === void 0 ? void 0 : _error$data2.code;
    }

    if (error !== null && error !== void 0 && error.code) {
      return error === null || error === void 0 ? void 0 : error.code;
    }

    if (error !== null && error !== void 0 && (_error$data3 = error.data) !== null && _error$data3 !== void 0 && _error$data3.status) {
      var _error$data4;

      return error === null || error === void 0 ? void 0 : (_error$data4 = error.data) === null || _error$data4 === void 0 ? void 0 : _error$data4.status;
    }

    if (error !== null && error !== void 0 && error.status) {
      return error === null || error === void 0 ? void 0 : error.status;
    }

    return -1000;
  }

  return -10000;
}
export function getErrorMessage(error) {
  if (error && typeof error === 'object') {
    var _error$data5, _error$data7;

    if (error !== null && error !== void 0 && (_error$data5 = error.data) !== null && _error$data5 !== void 0 && _error$data5.message) {
      var _error$data6;

      return error === null || error === void 0 ? void 0 : (_error$data6 = error.data) === null || _error$data6 === void 0 ? void 0 : _error$data6.message;
    }

    if (error !== null && error !== void 0 && error.message) {
      return error === null || error === void 0 ? void 0 : error.message;
    }

    if (error !== null && error !== void 0 && (_error$data7 = error.data) !== null && _error$data7 !== void 0 && _error$data7.errMsg) {
      var _error$data8;

      return error === null || error === void 0 ? void 0 : (_error$data8 = error.data) === null || _error$data8 === void 0 ? void 0 : _error$data8.errMsg;
    }

    if (error !== null && error !== void 0 && error.errMsg) {
      return error === null || error === void 0 ? void 0 : error.errMsg;
    }

    return 'error message parsing exception';
  }

  return 'error is nil';
}
export function getRubasTime(timestamp) {
  if (Platform.OS === 'ios') {
    return {
      value: timestamp
    };
  } else {
    return timestamp;
  }
}
//# sourceMappingURL=utils.js.map