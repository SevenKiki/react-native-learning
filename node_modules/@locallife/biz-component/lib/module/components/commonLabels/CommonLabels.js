import { StyleSheet, View } from 'react-native';
import { SingleLineIcon } from './SingleLineIcon';
import { SingleLineText } from './SingleLineText';
import React, { memo, useCallback, useRef, useState } from 'react';
import { TagType } from './TagType';
import { SingleLineIconAndText } from './SingleLineIconAndText';
import { useParseBizHook } from './hooks/useParseBizHook';
import { SingleLineTextIconText } from './SingleLineTextIconText';
import { ShowWithData } from '@locallife/base-component';
const styles = StyleSheet.create({
  externalContainer: {
    overflow: 'hidden',
    flexDirection: 'row',
    alignItems: 'center'
  },
  placeHolder: {
    flex: 1
  }
});
export const CommonLabels = /*#__PURE__*/memo(props => {
  const {
    bizTags,
    onPress,
    autoCut = true,
    adaptDark = true
  } = props;
  const [showBizTags, setShowBizTags] = useParseBizHook(bizTags);

  // 超出最大宽度限制，需要删除后面元素，删除结束之前展示透明（不展示），避免看到标签删除的动画
  const [opacity, setOpacity] = useState(0);

  // 标记是否已经执行了删除操作
  const hasDealDelete = useRef(false);

  // 展示不下，删除元素
  const onLayout = useCallback(_ref => {
    var _nativeEvent$layout;
    let {
      nativeEvent
    } = _ref;
    // 此view的宽度 <= 0代表标签展示不下了，需要删除标签
    if ((nativeEvent === null || nativeEvent === void 0 ? void 0 : (_nativeEvent$layout = nativeEvent.layout) === null || _nativeEvent$layout === void 0 ? void 0 : _nativeEvent$layout.width) <= 0) {
      const array = [...showBizTags];
      hasDealDelete.current = false;
      // 展示不下，删除最后一个元素
      while (array.length > 0 && !hasDealDelete.current) {
        var _model$contentModel, _model$contentModel$t, _model$contentModel3, _model$contentModel3$;
        const model = array[array.length - 1];
        if ((model === null || model === void 0 ? void 0 : (_model$contentModel = model.contentModel) === null || _model$contentModel === void 0 ? void 0 : (_model$contentModel$t = _model$contentModel.textInfos) === null || _model$contentModel$t === void 0 ? void 0 : _model$contentModel$t.length) ?? -1 > 0) {
          var _model$contentModel2, _model$contentModel2$;
          // 删除最后一个文案元素
          hasDealDelete.current = true;
          model === null || model === void 0 ? void 0 : (_model$contentModel2 = model.contentModel) === null || _model$contentModel2 === void 0 ? void 0 : (_model$contentModel2$ = _model$contentModel2.textInfos) === null || _model$contentModel2$ === void 0 ? void 0 : _model$contentModel2$.pop();
        } else if ((model === null || model === void 0 ? void 0 : (_model$contentModel3 = model.contentModel) === null || _model$contentModel3 === void 0 ? void 0 : (_model$contentModel3$ = _model$contentModel3.iconInfos) === null || _model$contentModel3$ === void 0 ? void 0 : _model$contentModel3$.length) ?? -1 > 0) {
          var _model$contentModel4, _model$contentModel4$;
          // 删除最后一个icon元素
          hasDealDelete.current = true;
          model === null || model === void 0 ? void 0 : (_model$contentModel4 = model.contentModel) === null || _model$contentModel4 === void 0 ? void 0 : (_model$contentModel4$ = _model$contentModel4.iconInfos) === null || _model$contentModel4$ === void 0 ? void 0 : _model$contentModel4$.pop();
        } else {
          // 这一组没有任何元素了，删除这一组
          array.pop();
        }
      }
      // 更新数据源
      setShowBizTags(array);
    } else {
      setOpacity(1);
    }
  }, [setShowBizTags, showBizTags]);
  return /*#__PURE__*/React.createElement(ShowWithData, {
    data: showBizTags.length > 0
  }, /*#__PURE__*/React.createElement(View, {
    style: [styles.externalContainer, props.containerStyle, {
      width: props.maxWidth,
      opacity: autoCut ? opacity : 1
    }]
  }, showBizTags === null || showBizTags === void 0 ? void 0 : showBizTags.map((info, index) => {
    var _info$contentModel;
    switch (info.styleKey) {
      case TagType.LOCAL_LIFE_TAG_ITEM_ICON:
      case TagType.LOCAL_LIFE_TAG_ITEM_ICON_COUNT_DOWN:
        // 展示一排图片
        return /*#__PURE__*/React.createElement(SingleLineIcon, {
          data: info === null || info === void 0 ? void 0 : (_info$contentModel = info.contentModel) === null || _info$contentModel === void 0 ? void 0 : _info$contentModel.iconInfos,
          onPress: onPress,
          bizTags: info,
          adaptScreen: props.adaptScreen,
          key: index,
          adaptDark: adaptDark
        });
      case TagType.LOCAL_LIFE_TAG_ITEM_TEXT:
        // 展示一排文案
        return /*#__PURE__*/React.createElement(SingleLineText, {
          data: info === null || info === void 0 ? void 0 : info.contentModel,
          onPress: onPress,
          bizTags: info,
          adaptScreen: props.adaptScreen,
          autoRatio: props.autoRatio,
          ratio: props.ratio,
          key: index,
          adaptDark: adaptDark
        });
      case TagType.LOCAL_LIFE_TAG_ICON_TEXT:
        // 展示左侧一排图标右侧一排文案
        return /*#__PURE__*/React.createElement(SingleLineIconAndText, {
          data: info.contentModel,
          onPress: onPress,
          bizTags: info,
          adaptScreen: props.adaptScreen,
          key: index,
          adaptDark: adaptDark
        });
      case TagType.LOCAL_LIFE_TAG_TEXT_ICON_TEXT:
        return /*#__PURE__*/React.createElement(SingleLineTextIconText, {
          data: info.contentModel,
          onPress: onPress,
          bizTags: info,
          adaptScreen: props.adaptScreen,
          key: index,
          adaptDark: adaptDark
        });
    }
  }), autoCut && /*#__PURE__*/React.createElement(View, {
    style: styles.placeHolder,
    onLayout: onLayout
  })));
});
//# sourceMappingURL=CommonLabels.js.map