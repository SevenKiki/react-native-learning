import React, { memo, useCallback } from 'react';
import { StyleSheet, TouchableWithoutFeedback, View } from 'react-native';
import { CustomText } from './CustomText';
import { CustomIcon } from './CustomIcon';
import { useCommonStyleHook } from './hooks/useCommonStyleHook';
import { ShowWithData } from '@locallife/base-component';
const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center'
  }
});

// text icon text çš„ tag
export const SingleLineTextIconText = /*#__PURE__*/memo(_ref => {
  let {
    data,
    onPress,
    bizTags,
    adaptScreen,
    adaptDark = true
  } = _ref;
  const {
    textInfos,
    contentStyle,
    iconInfos
  } = data || {};
  const leftPriceInfo = textInfos === null || textInfos === void 0 ? void 0 : textInfos[0];
  const middleInfo = iconInfos === null || iconInfos === void 0 ? void 0 : iconInfos[0];
  const rightPriceInfo = textInfos === null || textInfos === void 0 ? void 0 : textInfos[1];
  const onPressCard = useCallback(() => {
    onPress && onPress(bizTags);
  }, [bizTags, onPress]);
  const customStyle = useCommonStyleHook(contentStyle, adaptScreen);
  return /*#__PURE__*/React.createElement(ShowWithData, {
    data: !!leftPriceInfo && !!middleInfo && !!rightPriceInfo
  }, /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {
    onPress: onPressCard
  }, /*#__PURE__*/React.createElement(View, {
    style: [styles.container, customStyle]
  }, /*#__PURE__*/React.createElement(CustomText, {
    adaptDark: adaptDark,
    textModel: leftPriceInfo,
    adaptScreen: adaptScreen
  }), /*#__PURE__*/React.createElement(CustomIcon, {
    adaptDark: adaptDark,
    iconModel: middleInfo,
    adaptScreen: adaptScreen
  }), /*#__PURE__*/React.createElement(CustomText, {
    adaptDark: adaptDark,
    textModel: rightPriceInfo,
    adaptScreen: adaptScreen
  }))));
});
//# sourceMappingURL=SingleLineTextIconText.js.map