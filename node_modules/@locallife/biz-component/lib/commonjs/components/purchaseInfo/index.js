"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PurchaseInfo = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _krn = require("@kid-ui/krn");
var _styles = _interopRequireDefault(require("./styles"));
var _commonText = _interopRequireDefault(require("../commonText"));
var _dayjs = _interopRequireDefault(require("dayjs"));
var _config = require("../../utils/config");
var _tsLbsKrnUtils = require("@lux/ts-lbs-krn-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var VALIDATE_RULE = /*#__PURE__*/function (VALIDATE_RULE) {
  VALIDATE_RULE["AFTER_BUY_LIMIT_DAY"] = "AFTER_BUY_LIMIT_DAY";
  VALIDATE_RULE["FROM_TIME_LIMIT_DAY"] = "FROM_TIME_LIMIT_DAY";
  VALIDATE_RULE["CUSTOM_TIME"] = "CUSTOM_TIME";
  return VALIDATE_RULE;
}(VALIDATE_RULE || {});
var USE_TIME_RULE = /*#__PURE__*/function (USE_TIME_RULE) {
  USE_TIME_RULE[USE_TIME_RULE["OPENING_HOURS"] = 1] = "OPENING_HOURS";
  USE_TIME_RULE[USE_TIME_RULE["CUSTOM_USE_TIME"] = 2] = "CUSTOM_USE_TIME";
  return USE_TIME_RULE;
}(USE_TIME_RULE || {}); // 时间格式化
function formatTime(date) {
  return (0, _dayjs.default)(date).format('YYYY.MM.DD');
}
function formatUseTime(useTimeArr) {
  if (Array.isArray(useTimeArr)) {
    let useTimeStr = [];
    for (let i = 0; i < useTimeArr.length && useTimeStr.length <= 5; i++) {
      const item = useTimeArr[i];
      if (Array.isArray(item) && item.length === 2) {
        let startTime = item[0];
        let endTime = item[1];
        if (startTime && endTime) {
          useTimeStr.push(`${startTime}-${endTime}`);
        }
      }
    }
    if (useTimeStr.length > 0) {
      return useTimeStr.join('，');
    }
  }
  return '';
}

/**
 * 使用须知
 */
const PurchaseInfo = _ref => {
  var _productData$itemShow, _productData$itemShow2, _productData$itemShow3, _productData$itemShow4, _productData$itemShow5, _productData$itemShow6, _productData$itemRule, _productData$itemRule2, _productData$itemRule3, _productData$itemShow7, _productData$itemRule4, _productData$itemRule5, _productData$itemShow8, _productData$itemShow9;
  let {
    productData,
    handleShowAlert
  } = _ref;
  /**
   * 有效期
   */
  const validTimeRule = productData === null || productData === void 0 ? void 0 : (_productData$itemShow = productData.itemShowRule) === null || _productData$itemShow === void 0 ? void 0 : (_productData$itemShow2 = _productData$itemShow.itemValidRule) === null || _productData$itemShow2 === void 0 ? void 0 : _productData$itemShow2.validTimeRule;
  const expiryDateText = (0, _react.useMemo)(() => {
    if ((validTimeRule === null || validTimeRule === void 0 ? void 0 : validTimeRule.type) === VALIDATE_RULE.CUSTOM_TIME) {
      const startTime = formatTime(validTimeRule === null || validTimeRule === void 0 ? void 0 : validTimeRule.startTime);
      const endTime = formatTime(validTimeRule === null || validTimeRule === void 0 ? void 0 : validTimeRule.endTime);
      return `${startTime} 至 ${endTime}`;
    }
    if ((validTimeRule === null || validTimeRule === void 0 ? void 0 : validTimeRule.type) === VALIDATE_RULE.AFTER_BUY_LIMIT_DAY) {
      return `购买之日起${validTimeRule === null || validTimeRule === void 0 ? void 0 : validTimeRule.afterBuyLimitDay}天内可用`;
    }
    if ((validTimeRule === null || validTimeRule === void 0 ? void 0 : validTimeRule.type) === VALIDATE_RULE.FROM_TIME_LIMIT_DAY) {
      const fromTime = formatTime(validTimeRule === null || validTimeRule === void 0 ? void 0 : validTimeRule.fromTime);
      return `${fromTime}起${validTimeRule === null || validTimeRule === void 0 ? void 0 : validTimeRule.limitDay}日可用`;
    }
  }, [validTimeRule]);

  /**
   * 可用时间
   */
  const useTimeRule = productData === null || productData === void 0 ? void 0 : (_productData$itemShow3 = productData.itemShowRule) === null || _productData$itemShow3 === void 0 ? void 0 : (_productData$itemShow4 = _productData$itemShow3.itemValidRule) === null || _productData$itemShow4 === void 0 ? void 0 : _productData$itemShow4.useTimeRule;
  const useTimeRuleText = (0, _react.useMemo)(() => {
    if ((useTimeRule === null || useTimeRule === void 0 ? void 0 : useTimeRule.type) === USE_TIME_RULE.OPENING_HOURS) {
      return `${(useTimeRule === null || useTimeRule === void 0 ? void 0 : useTimeRule.typeDesc) ?? '商家营业时间均可使用'}`;
    }
    if ((useTimeRule === null || useTimeRule === void 0 ? void 0 : useTimeRule.type) === USE_TIME_RULE.CUSTOM_USE_TIME) {
      const specialConditionStr = useTimeRule !== null && useTimeRule !== void 0 && useTimeRule.specialCondition ? (useTimeRule === null || useTimeRule === void 0 ? void 0 : useTimeRule.specialCondition) + '\n' : '';
      return `${formatUseTime(useTimeRule === null || useTimeRule === void 0 ? void 0 : useTimeRule.useTime)}\n${specialConditionStr}`;
    }
    return '';
  }, [useTimeRule]);

  /**
   * 退款政策
   */
  const refundRule = productData === null || productData === void 0 ? void 0 : (_productData$itemShow5 = productData.itemShowRule) === null || _productData$itemShow5 === void 0 ? void 0 : (_productData$itemShow6 = _productData$itemShow5.itemValidRule) === null || _productData$itemShow6 === void 0 ? void 0 : _productData$itemShow6.refundRule;
  const refundText = (0, _react.useMemo)(() => {
    if (!(refundRule !== null && refundRule !== void 0 && refundRule.type)) {
      return '';
    }
    return _config.REFUNDED_RULE[refundRule.type];
  }, [refundRule]);

  /**
   * 不可用日期
   */
  const unavailableTime = productData === null || productData === void 0 ? void 0 : (_productData$itemRule = productData.itemRuleDTO) === null || _productData$itemRule === void 0 ? void 0 : (_productData$itemRule2 = _productData$itemRule.useRule) === null || _productData$itemRule2 === void 0 ? void 0 : (_productData$itemRule3 = _productData$itemRule2.useRule) === null || _productData$itemRule3 === void 0 ? void 0 : _productData$itemRule3.unavailableTime;
  const invalidDateTextList = (0, _react.useMemo)(() => {
    const invalidDateTextArr = [];
    if (unavailableTime !== null && unavailableTime !== void 0 && unavailableTime.holidays && Array.isArray(unavailableTime === null || unavailableTime === void 0 ? void 0 : unavailableTime.holidays) && unavailableTime.holidays.length > 0) {
      invalidDateTextArr.push(`${unavailableTime.holidays.join('、')}不可用`);
    }
    if (unavailableTime !== null && unavailableTime !== void 0 && unavailableTime.weeks && Array.isArray(unavailableTime === null || unavailableTime === void 0 ? void 0 : unavailableTime.weeks) && unavailableTime.weeks.length > 0) {
      invalidDateTextArr.push(`${unavailableTime.weeks.join('、')}不可用`);
    }
    let customTimeArr = unavailableTime === null || unavailableTime === void 0 ? void 0 : unavailableTime.customTimes;
    if (Array.isArray(customTimeArr) && (customTimeArr === null || customTimeArr === void 0 ? void 0 : customTimeArr.length) > 0) {
      const customTimeStr = [];
      for (let i = 0; i < customTimeArr.length && customTimeStr.length <= 5; i++) {
        const item = customTimeArr[i];
        const startTime = formatTime(item === null || item === void 0 ? void 0 : item.startTime);
        const endTime = formatTime(item === null || item === void 0 ? void 0 : item.endTime);
        invalidDateTextArr.push(`${startTime} 至 ${endTime}`);
      }
    }
    if (unavailableTime !== null && unavailableTime !== void 0 && unavailableTime.specialCondition) {
      invalidDateTextArr.push(`${unavailableTime === null || unavailableTime === void 0 ? void 0 : unavailableTime.specialCondition}`);
    }
    return invalidDateTextArr;
  }, [unavailableTime]);

  // 预约规则
  const reservationRule = (_productData$itemShow7 = productData.itemShowRule) === null || _productData$itemShow7 === void 0 ? void 0 : _productData$itemShow7.purchaseNotesRule.reservationRule;
  const reservationText = (0, _react.useMemo)(() => {
    if (reservationRule !== null && reservationRule !== void 0 && reservationRule.reservationFlag) {
      return '需提前联系店家预约';
    } else {
      return '到店消费前，无需预约';
    }
  }, [reservationRule]);

  /**
   * 限购政策
   */
  const buyLimitRules = productData === null || productData === void 0 ? void 0 : (_productData$itemRule4 = productData.itemRuleDTO) === null || _productData$itemRule4 === void 0 ? void 0 : (_productData$itemRule5 = _productData$itemRule4.buyLimitRule) === null || _productData$itemRule5 === void 0 ? void 0 : _productData$itemRule5.buyLimitRules;
  const limitText = (0, _react.useMemo)(() => {
    const limitTextArr = [];
    buyLimitRules && buyLimitRules.map(rules => {
      const type = rules === null || rules === void 0 ? void 0 : rules.buyLimitType;
      if (type) {
        var _BUY_LIMIT_RULE$type;
        let text = '';
        (_BUY_LIMIT_RULE$type = _config.BUY_LIMIT_RULE[type]) === null || _BUY_LIMIT_RULE$type === void 0 ? void 0 : _BUY_LIMIT_RULE$type.forEach(item => {
          if (rules[item.key]) {
            text += ((item === null || item === void 0 ? void 0 : item.text) || '').replace(/\{\s*num\s*\}/, rules[item === null || item === void 0 ? void 0 : item.key]);
          }
        });
        text && limitTextArr.push(text);
      }
    });
    if (!limitTextArr.length) {
      return '不限购';
    }
    return limitTextArr.join('、');
  }, [buyLimitRules]);

  /**
   * 使用规则
   */
  const useRule = productData === null || productData === void 0 ? void 0 : (_productData$itemShow8 = productData.itemShowRule) === null || _productData$itemShow8 === void 0 ? void 0 : (_productData$itemShow9 = _productData$itemShow8.purchaseNotesRule) === null || _productData$itemShow9 === void 0 ? void 0 : _productData$itemShow9.useRule;
  const useRuleTextList = (0, _react.useMemo)(() => {
    let useRuleTextArr = [];
    // 如果商家编辑了文案，则展示商家文案
    if (useRule !== null && useRule !== void 0 && useRule.instruction) {
      const instructionList = (useRule === null || useRule === void 0 ? void 0 : useRule.instruction) && (useRule === null || useRule === void 0 ? void 0 : useRule.instruction.split('\n').filter(item => item));
      if (instructionList) {
        useRuleTextArr = useRuleTextArr.concat(instructionList);
      }
    } else {
      // 否则默认展示
      // 使用范围：XXX
      // 退款规则：XXX
      // 单次最多使用XX张团购券
      if (useRule !== null && useRule !== void 0 && useRule.useScopeLimit && Array.isArray(useRule === null || useRule === void 0 ? void 0 : useRule.useScopeLimit) && (useRule === null || useRule === void 0 ? void 0 : useRule.useScopeLimit.length) > 0) {
        useRuleTextArr.push(`使用范围：${useRule === null || useRule === void 0 ? void 0 : useRule.useScopeLimit.join('、')}`);
      }
      if (refundText) {
        useRuleTextArr.push(`退款规则：${refundText}`);
      }
      if (useRule !== null && useRule !== void 0 && useRule.singleUseLimit) {
        useRuleTextArr.push(`单次最多使用${useRule === null || useRule === void 0 ? void 0 : useRule.singleUseLimit}张团购券`);
      }
    }
    return useRuleTextArr;
  }, [useRule, refundText]);
  // 是否唤起电话弹窗
  const handleShowPopup = () => {
    handleShowAlert && handleShowAlert();
  };
  const getSubView = (title, content) => {
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, title && /*#__PURE__*/_react.default.createElement(_commonText.default, {
      customizationUlPoint: _styles.default.customizationUlPoint
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
      style: _styles.default.subtitle
    }, title)), content && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: [_styles.default.subContentLine, _styles.default.subContentDistance]
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
      style: [_styles.default.subContent]
    }, content)));
  };
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: _styles.default.container
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: _styles.default.title
  }, "\u4F7F\u7528\u987B\u77E5"), !!expiryDateText && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: _styles.default.packageDetailItemWrapper
  }, getSubView('有效期', expiryDateText)), !!useTimeRuleText && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: _styles.default.packageDetailItemWrapper
  }, getSubView('可用时间', useTimeRuleText)), invalidDateTextList.length > 0 && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [_styles.default.packageDetailItemWrapper]
  }, getSubView('不可用日期'), invalidDateTextList && invalidDateTextList.length && invalidDateTextList.map(invalidDateText => {
    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: [_styles.default.subContentDistance]
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
      style: _styles.default.subContent
    }, invalidDateText));
  }), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [_styles.default.subContentLine, _styles.default.subContentDistance]
  })), !!limitText && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: _styles.default.packageDetailItemWrapper
  }, getSubView('限购政策', limitText)), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: _styles.default.packageDetailItemWrapper
  }, getSubView('预约规则', reservationText)), useRuleTextList.length > 0 && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: _styles.default.packageDetailItemWrapper
  }, getSubView('使用规则'), useRuleTextList && useRuleTextList.length && useRuleTextList.map(useRuleText => {
    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: [_styles.default.subContentDistance],
      key: useRuleText
    }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
      style: _styles.default.subContent
    }, useRuleText));
  }), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [_styles.default.subContentLine, _styles.default.subContentDistance]
  })), /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    activeOpacity: 1,
    onPress: handleShowPopup
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: _styles.default.priceItemContianer
  }, getSubView('价格和销量说明'), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [_styles.default.rowFlexAlignCenter, _styles.default.subContentDistance]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: _styles.default.subContent
  }, "\u67E5\u770B\u5168\u90E8"), /*#__PURE__*/_react.default.createElement(_krn.KidIcon, {
    kid: 'common_base_next_24',
    kidColor: 'color_base_black_6',
    size: _tsLbsKrnUtils.screenUnit.screenSize(14),
    style: _styles.default.priceItemArrow
  })))));
};
exports.PurchaseInfo = PurchaseInfo;
//# sourceMappingURL=index.js.map