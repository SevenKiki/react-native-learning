"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CustomText = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _transAdaptScreenSize = require("./utils/transAdaptScreenSize");
var _useCommonStyleHook = require("./hooks/useCommonStyleHook");
var _useAdaptThemeValueHook = require("./hooks/useAdaptThemeValueHook");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// 一个文案

const styles = _reactNative.StyleSheet.create({
  labelsContainer: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  text: {
    fontSize: 11,
    fontWeight: '400',
    fontFamily: 'PingFang SC',
    color: '#666666'
  }
});
// 一个文案
const CustomText = /*#__PURE__*/_react.default.memo(props => {
  const {
    textModel,
    adaptScreen,
    autoRatio,
    ratio,
    adaptDark = true
  } = props;
  const {
    textStyle
  } = textModel;
  const style = (0, _useCommonStyleHook.useCommonStyleHook)(textStyle, adaptScreen);
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.labelsContainer, style]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [styles.text, {
      color: (0, _useAdaptThemeValueHook.useAdaptThemeValueHook)({
        light: textModel.textStyle.textColor ?? styles.text.color,
        dark: textModel.textStyle.textColorDark ?? styles.text.color
      }, adaptDark),
      width: (0, _transAdaptScreenSize.transAdaptScreenSize)(textStyle === null || textStyle === void 0 ? void 0 : textStyle.width, adaptScreen),
      height: (0, _transAdaptScreenSize.transAdaptScreenSize)(textStyle === null || textStyle === void 0 ? void 0 : textStyle.height, adaptScreen),
      top: (0, _transAdaptScreenSize.transAdaptScreenSize)(textStyle === null || textStyle === void 0 ? void 0 : textStyle.top, adaptScreen),
      bottom: (0, _transAdaptScreenSize.transAdaptScreenSize)(textStyle === null || textStyle === void 0 ? void 0 : textStyle.bottom, adaptScreen)
    }, {
      fontSize: (0, _transAdaptScreenSize.transAdaptScreenSize)((textStyle === null || textStyle === void 0 ? void 0 : textStyle.fontSize) ?? styles.text.fontSize, adaptScreen, autoRatio, ratio),
      fontFamily: textModel.textStyle.fontFamily ?? styles.text.fontFamily,
      fontWeight: textModel.textStyle.fontWeight ?? styles.text.fontWeight
    }]
    // ellipsizeMode="tail"
    ,
    numberOfLines: 1
  }, textModel.text ?? ''));
});
exports.CustomText = CustomText;
//# sourceMappingURL=CustomText.js.map