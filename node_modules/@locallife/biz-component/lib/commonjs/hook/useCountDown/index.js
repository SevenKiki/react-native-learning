"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useCountDown = exports.default = void 0;
var _react = require("react");
var _reactNative = require("react-native");
/**
 * 获取服务器时间
 * @returns number
 */
const getServerTimeStamp = async () => {
  try {
    const {
      serverTimeStamp
    } = await _reactNative.NativeModules.Kds.invoke('system', 'getServerTime', JSON.stringify({}));
    return serverTimeStamp;
  } catch (error) {
    return +Date.now();
  }
};

/**
 * 格式化时间
 */
const formatNum = num => {
  if (num < 10) {
    return `0${(num || 0).toString()}`;
  }
  return (num || '00').toString();
};

/**
 * 根据时间差值计算倒计时
 * @param time
 */
const generateCountDown = (nowTime, endTime, useDay) => {
  const res = {
    hour: '00',
    minute: '00',
    second: '00'
  };
  if (!endTime || !nowTime) {
    return {
      res,
      nextUpdate: -1
    };
  }
  const diff = endTime - nowTime;
  if (diff <= 0) {
    return {
      res,
      nextUpdate: -1
    };
  }
  const nextUpdate = diff % 1000 || 0;
  const seconds = Math.ceil(diff / 1000);
  res.second = formatNum(seconds % 60);
  const minutes = Math.floor(seconds / 60);
  res.minute = formatNum(minutes % 60);
  const hours = Math.floor(minutes / 60);
  if (useDay) {
    res.hour = formatNum(hours % 24);
    const days = Math.floor(hours / 24);
    res.day = formatNum(days);
  } else {
    res.hour = formatNum(hours);
  }
  return {
    res,
    nextUpdate
  };
};
const useCountDown = params => {
  // 当前时间
  const [selfNowTime, setSelfNowTime] = (0, _react.useState)(Date.now());
  const [countDownRes, setCountDownRes] = (0, _react.useState)(() => {
    const {
      res
    } = generateCountDown(selfNowTime, params.endTime, params.useDay);
    return res;
  });

  // 倒计时是否结束
  const isOver = (0, _react.useMemo)(() => {
    return params.endTime <= selfNowTime;
  }, [params.endTime, selfNowTime]);
  (0, _react.useEffect)(() => {
    const {
      res
    } = generateCountDown(selfNowTime, params.endTime, params.useDay);
    setCountDownRes(res);
  }, [selfNowTime, params.endTime, params.useDay]);
  (0, _react.useEffect)(() => {
    const timer = setTimeout(() => {
      if ((params === null || params === void 0 ? void 0 : params.endTime) <= selfNowTime) {
        return;
      }
      setSelfNowTime(selfNowTime + 1000);
    }, 1000);
    return () => {
      clearTimeout(timer);
    };
  }, [selfNowTime, params === null || params === void 0 ? void 0 : params.endTime]);
  (0, _react.useEffect)(() => {
    const timer = setInterval(async () => {
      const now = await getServerTimeStamp();
      setSelfNowTime(now);
    }, 60 * 1000);
    return () => {
      clearInterval(timer);
    };
  }, []);
  return {
    countDownRes,
    isOver
  };
};
exports.useCountDown = useCountDown;
var _default = useCountDown;
exports.default = _default;
//# sourceMappingURL=index.js.map