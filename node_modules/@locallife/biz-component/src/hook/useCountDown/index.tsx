import { useEffect, useMemo, useState } from 'react';
import { NativeModules } from 'react-native';

export type CountDownParams = {
    // 倒计时结束时间
    endTime: number;
    // 倒计时是否启动更新
    active?: boolean;
    // 倒计时是否使用天（单位）
    useDay?: boolean;
};

/**
 * 获取服务器时间
 * @returns number
 */
const getServerTimeStamp = async () => {
    try {
        const { serverTimeStamp } = await NativeModules.Kds.invoke(
            'system',
            'getServerTime',
            JSON.stringify({}),
        );
        return serverTimeStamp;
    } catch (error) {
        return +Date.now();
    }
};

/**
 * 格式化时间
 */
const formatNum = (num: number) => {
    if (num < 10) {
        return `0${(num || 0).toString()}`;
    }
    return (num || '00').toString();
};

/**
 * 根据时间差值计算倒计时
 * @param time
 */
const generateCountDown = (
    nowTime: number,
    endTime: number,
    useDay?: boolean,
): { res: ICountDownRes; nextUpdate: number } => {
    const res: ICountDownRes = {
        hour: '00',
        minute: '00',
        second: '00',
    };
    if (!endTime || !nowTime) {
        return { res, nextUpdate: -1 };
    }
    const diff = endTime - nowTime;
    if (diff <= 0) {
        return { res, nextUpdate: -1 };
    }
    const nextUpdate = diff % 1000 || 0;
    const seconds = Math.ceil(diff / 1000);
    res.second = formatNum(seconds % 60);
    const minutes = Math.floor(seconds / 60);
    res.minute = formatNum(minutes % 60);
    const hours = Math.floor(minutes / 60);
    if (useDay) {
        res.hour = formatNum(hours % 24);
        const days = Math.floor(hours / 24);
        res.day = formatNum(days);
    } else {
        res.hour = formatNum(hours);
    }
    return {
        res,
        nextUpdate,
    };
};

export interface ICountDownRes {
    day?: string;
    hour: string;
    minute: string;
    second: string;
}

export const useCountDown = (
    params: CountDownParams,
): { countDownRes: ICountDownRes; isOver: boolean } => {
    // 当前时间
    const [selfNowTime, setSelfNowTime] = useState(Date.now());

    const [countDownRes, setCountDownRes] = useState<ICountDownRes>(() => {
        const { res } = generateCountDown(
            selfNowTime,
            params.endTime,
            params.useDay,
        );
        return res;
    });

    // 倒计时是否结束
    const isOver = useMemo(() => {
        return params.endTime <= selfNowTime;
    }, [params.endTime, selfNowTime]);

    useEffect(() => {
        const { res } = generateCountDown(
            selfNowTime,
            params.endTime,
            params.useDay,
        );
        setCountDownRes(res);
    }, [selfNowTime, params.endTime, params.useDay]);

    useEffect(() => {
        const timer = setTimeout(() => {
            if (params?.endTime <= selfNowTime) {
                return;
            }
            setSelfNowTime(selfNowTime + 1000);
        }, 1000);
        return () => {
            clearTimeout(timer);
        };
    }, [selfNowTime, params?.endTime]);

    useEffect(() => {
        const timer = setInterval(async () => {
            const now = await getServerTimeStamp();
            setSelfNowTime(now);
        }, 60 * 1000);
        return () => {
            clearInterval(timer);
        };
    }, []);

    return { countDownRes, isOver };
};

export default useCountDown;
