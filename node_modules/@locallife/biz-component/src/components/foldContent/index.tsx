import React, { useState, useRef } from 'react';
import {
    View,
    Text,
    Animated,
    StyleSheet,
    TouchableOpacity,
    Easing,
} from 'react-native';
import LinearGradient from 'react-native-linear-gradient';
import { KidIcon } from '@kid-ui/krn';
import { screenUnit } from '@lux/ts-lbs-krn-utils';
const { screenSize } = screenUnit;

const styles = StyleSheet.create({
    container: {
        position: 'relative',
        overflow: 'hidden',
    },
    moreContainer: {
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
        width: '100%',
        position: 'absolute',
        left: 0,
        bottom: 0,
        height: screenSize(98),
    },
    moreIconContainer: {
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        width: '100%',
        height: screenSize(40),
        backgroundColor: '#fff',
    },
    moreText: {
        marginTop: screenSize(8),
        fontSize: screenSize(14),
        lineHeight: screenSize(17),
        color: '#666',
        textAlign: 'center',
        marginRight: screenSize(3),
    },
    moreIcon: {
        marginTop: screenSize(6),
    },
    linearGradient: {
        width: '100%',
        height: screenSize(60),
    },
});

export interface ICustomStyleItem {
    outerStyle?: any; // 外层样式自定义
    moreClickStyle?: any; //展开更多外层点击样式自定义
}

export interface IFoldParams {
    foldHeight: number; // 高度
    children: any; // 超出需要显示展开的内容
    customStyle?: ICustomStyleItem; // 定制样式
}

/**
 * 折叠内容
 */
export const FoldContent = (props: IFoldParams) => {
    const { customStyle = {} } = props;
    const [isMoreShow, setMoreVisible] = useState(false);
    const heightAnim = useRef(new Animated.Value(0)).current;
    const [maxHeight, setMaxHeight] = useState(0);
    const isClickMore = useRef(false);
    const onLayout = (event) => {
        const height = Math.floor(event.nativeEvent.layout.height || 0);
        if (height > props.foldHeight && !isClickMore.current) {
            setMoreVisible(true);
            setMaxHeight(height);
            heightAnim?.setValue(props.foldHeight);
        }
    };

    const onClickMore = () => {
        Animated.timing(heightAnim, {
            toValue: maxHeight,
            duration: 300,
            easing: Easing.linear,
            useNativeDriver: false,
        }).start();
        setMoreVisible(false);
        isClickMore.current = true;
    };

    return (
        <Animated.View
            style={[
                styles.container,
                maxHeight && { height: heightAnim },
                customStyle?.outerStyle || {},
            ]}
        >
            <View onLayout={onLayout}>{props.children}</View>
            {isMoreShow && (
                <View style={styles.moreContainer}>
                    <LinearGradient
                        start={{ x: 0, y: 0 }}
                        end={{ x: 0, y: 1 }}
                        style={styles.linearGradient}
                        colors={[
                            'rgba(255,255,255,0.00)',
                            'rgba(255,255,255,1)',
                        ]}
                    />
                    <TouchableOpacity
                        activeOpacity={1}
                        onPress={onClickMore}
                        style={[
                            styles.moreIconContainer,
                            customStyle?.moreClickStyle || {},
                        ]}
                    >
                        <Text style={styles.moreText}>展开更多</Text>
                        <KidIcon
                            kid={
                                'local_life_locallife_taocanxiangqingzhankai_cdn'
                            }
                            kidColor={'color_base_black_6'}
                            size={screenSize(12)}
                            style={styles.moreIcon}
                        />
                    </TouchableOpacity>
                </View>
            )}
        </Animated.View>
    );
};
