// 单个icon
import React, { useMemo } from 'react';
import { TagIconInfo } from './Models';
import KwaiImage from '@kds/image';
import { transAdaptScreenSize } from './utils/transAdaptScreenSize';
import { useAdaptThemeValueHook } from './hooks/useAdaptThemeValueHook';

interface CustomIconProps {
    iconModel: TagIconInfo;
    adaptScreen?: boolean;
    adaptDark?: boolean; // 是否适配暗黑
}

// 单图片icon
export const CustomIcon = React.memo((props: CustomIconProps) => {
    const { iconModel, adaptScreen, adaptDark = true } = props;
    const { iconStyle } = iconModel;
    const { width, height } = useMemo(() => {
        return {
            width: transAdaptScreenSize(
                Number(iconStyle?.iconWidth),
                adaptScreen,
            ),
            height: transAdaptScreenSize(
                Number(iconStyle?.iconHeight),
                adaptScreen,
            ),
        };
    }, [adaptScreen, iconStyle?.iconHeight, iconStyle?.iconWidth]);

    const iconUrls = useAdaptThemeValueHook(
        {
            light: iconModel.iconUrls ?? [],
            dark: iconModel.darkIconUrls ?? iconModel.iconUrls ?? [],
        },
        adaptDark,
    );

    return (
        <KwaiImage
            resizeMode="cover"
            style={[
                {
                    width: width,
                    height: height,
                    marginLeft: transAdaptScreenSize(
                        iconStyle?.marginLeft,
                        adaptScreen,
                    ),
                    marginRight: transAdaptScreenSize(
                        iconStyle?.marginRight,
                        adaptScreen,
                    ),
                },
            ]}
            imageWarningThreshold={{
                imageSizeWarningThreshold: -1, // no image size warning
                imageMemoryWarningThreshold: -1, // no memory warning
            }}
            source={{ uris: iconUrls }}
            cropSize={{ width: width * 3, height: height * 3 }}
        />
    );
});
