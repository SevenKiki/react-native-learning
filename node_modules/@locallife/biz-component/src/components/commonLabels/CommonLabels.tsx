import { StyleSheet, View, ViewStyle } from 'react-native';
import { BizTags } from './Models';
import { SingleLineIcon } from './SingleLineIcon';
import { SingleLineText } from './SingleLineText';
import React, { memo, useCallback, useRef, useState } from 'react';
import { TagType } from './TagType';
import { SingleLineIconAndText } from './SingleLineIconAndText';
import { useParseBizHook } from './hooks/useParseBizHook';
import { SingleLineTextIconText } from './SingleLineTextIconText';
import { ShowWithData } from '@locallife/base-component';

const styles = StyleSheet.create({
    externalContainer: {
        overflow: 'hidden',
        flexDirection: 'row',
        alignItems: 'center',
    },
    placeHolder: {
        flex: 1,
    },
});

interface IProps {
    bizTags: Array<BizTags>; // 数据源数组
    maxWidth?: number; // 最大展示长度
    onPress?: (bizTags?: BizTags) => void; // 点击事件
    adaptScreen?: boolean; // 是否适配屏幕（是否使用rem）
    containerStyle?: ViewStyle; // 标签容器额外UI配置，可以用来调整位置
    autoCut?: boolean; // 是否自动截断
    autoRatio?: boolean; // 是否按照某个比例缩放
    ratio?: number; // 缩放的比例
    adaptDark?: boolean; // 是否适配暗黑
}

export const CommonLabels = memo((props: IProps) => {
    const { bizTags, onPress, autoCut = true, adaptDark = true } = props;

    const [showBizTags, setShowBizTags] = useParseBizHook(bizTags);

    // 超出最大宽度限制，需要删除后面元素，删除结束之前展示透明（不展示），避免看到标签删除的动画
    const [opacity, setOpacity] = useState(0);

    // 标记是否已经执行了删除操作
    const hasDealDelete = useRef(false);

    // 展示不下，删除元素
    const onLayout = useCallback(
        ({ nativeEvent }) => {
            // 此view的宽度 <= 0代表标签展示不下了，需要删除标签
            if (nativeEvent?.layout?.width <= 0) {
                const array = [...showBizTags];
                hasDealDelete.current = false;
                // 展示不下，删除最后一个元素
                while (array.length > 0 && !hasDealDelete.current) {
                    const model = array[array.length - 1];
                    if (model?.contentModel?.textInfos?.length ?? -1 > 0) {
                        // 删除最后一个文案元素
                        hasDealDelete.current = true;
                        model?.contentModel?.textInfos?.pop();
                    } else if (
                        model?.contentModel?.iconInfos?.length ??
                        -1 > 0
                    ) {
                        // 删除最后一个icon元素
                        hasDealDelete.current = true;
                        model?.contentModel?.iconInfos?.pop();
                    } else {
                        // 这一组没有任何元素了，删除这一组
                        array.pop();
                    }
                }
                // 更新数据源
                setShowBizTags(array);
            } else {
                setOpacity(1);
            }
        },
        [setShowBizTags, showBizTags],
    );

    return (
        <ShowWithData data={showBizTags.length > 0}>
            <View
                style={[
                    styles.externalContainer,
                    props.containerStyle,
                    { width: props.maxWidth, opacity: autoCut ? opacity : 1 },
                ]}
            >
                {showBizTags?.map((info, index) => {
                    switch (info.styleKey) {
                        case TagType.LOCAL_LIFE_TAG_ITEM_ICON:
                        case TagType.LOCAL_LIFE_TAG_ITEM_ICON_COUNT_DOWN:
                            // 展示一排图片
                            return (
                                <SingleLineIcon
                                    data={info?.contentModel?.iconInfos}
                                    onPress={onPress}
                                    bizTags={info}
                                    adaptScreen={props.adaptScreen}
                                    key={index}
                                    adaptDark={adaptDark}
                                />
                            );
                        case TagType.LOCAL_LIFE_TAG_ITEM_TEXT:
                            // 展示一排文案
                            return (
                                <SingleLineText
                                    data={info?.contentModel}
                                    onPress={onPress}
                                    bizTags={info}
                                    adaptScreen={props.adaptScreen}
                                    autoRatio={props.autoRatio}
                                    ratio={props.ratio}
                                    key={index}
                                    adaptDark={adaptDark}
                                />
                            );
                        case TagType.LOCAL_LIFE_TAG_ICON_TEXT:
                            // 展示左侧一排图标右侧一排文案
                            return (
                                <SingleLineIconAndText
                                    data={info.contentModel}
                                    onPress={onPress}
                                    bizTags={info}
                                    adaptScreen={props.adaptScreen}
                                    key={index}
                                    adaptDark={adaptDark}
                                />
                            );
                        case TagType.LOCAL_LIFE_TAG_TEXT_ICON_TEXT:
                            return (
                                <SingleLineTextIconText
                                    data={info.contentModel}
                                    onPress={onPress}
                                    bizTags={info}
                                    adaptScreen={props.adaptScreen}
                                    key={index}
                                    adaptDark={adaptDark}
                                />
                            );
                    }
                })}
                {/* 此View由于计算是否标签是否展示得下，此view的宽度 <= 0代表标签展示不下了，需要删除标签 */}
                {autoCut && (
                    <View style={styles.placeHolder} onLayout={onLayout} />
                )}
            </View>
        </ShowWithData>
    );
});
