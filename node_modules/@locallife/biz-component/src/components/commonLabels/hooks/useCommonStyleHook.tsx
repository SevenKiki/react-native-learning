import { StyleInfo } from '../Models';
import { transAdaptScreenSize } from '../utils/transAdaptScreenSize';
import { ViewStyle } from 'react-native';

export const useCommonStyleHook = (
    contentStyle?: StyleInfo,
    adaptScreen?: boolean,
): ViewStyle | undefined => {
    if (contentStyle) {
        return {
            borderColor: contentStyle?.borderColor,
            borderTopLeftRadius: transAdaptScreenSize(
                contentStyle?.borderTopLeftRadius,
                adaptScreen,
            ),
            borderTopRightRadius: transAdaptScreenSize(
                contentStyle?.borderTopRightRadius,
                adaptScreen,
            ),
            borderBottomLeftRadius: transAdaptScreenSize(
                contentStyle?.borderBottomLeftRadius,
                adaptScreen,
            ),
            borderBottomRightRadius: transAdaptScreenSize(
                contentStyle?.borderBottomRightRadius,
                adaptScreen,
            ),
            borderWidth: transAdaptScreenSize(
                contentStyle?.borderWidth,
                adaptScreen,
            ),
            marginLeft: transAdaptScreenSize(
                contentStyle?.marginLeft,
                adaptScreen,
            ),
            marginRight: transAdaptScreenSize(
                contentStyle?.marginRight,
                adaptScreen,
            ),
            paddingLeft: transAdaptScreenSize(
                contentStyle?.paddingLeft,
                adaptScreen,
            ),
            paddingRight: transAdaptScreenSize(
                contentStyle?.paddingRight,
                adaptScreen,
            ),
            paddingTop: transAdaptScreenSize(
                contentStyle?.paddingTop,
                adaptScreen,
            ),
            paddingBottom: transAdaptScreenSize(
                contentStyle?.paddingBottom,
                adaptScreen,
            ),
            height: transAdaptScreenSize(contentStyle?.height, adaptScreen),
            backgroundColor: contentStyle?.bgColor,
        };
    }
    return undefined;
};
