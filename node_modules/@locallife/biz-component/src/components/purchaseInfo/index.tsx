import React, { useMemo } from 'react';
import { View, Text, TouchableOpacity } from 'react-native';
import { KidIcon } from '@kid-ui/krn';
import styles from './styles';
import CommonText from '../commonText';
import { IProductData } from './types';
import dayjs from 'dayjs';
import { REFUNDED_RULE, BUY_LIMIT_RULE } from '../../utils/config';
import { screenUnit } from '@lux/ts-lbs-krn-utils';
interface IProductInfo {
    productData: IProductData;
    handleShowAlert: () => void;
}

enum VALIDATE_RULE {
    AFTER_BUY_LIMIT_DAY = 'AFTER_BUY_LIMIT_DAY',
    FROM_TIME_LIMIT_DAY = 'FROM_TIME_LIMIT_DAY',
    CUSTOM_TIME = 'CUSTOM_TIME',
}

enum USE_TIME_RULE {
    OPENING_HOURS = 1,
    CUSTOM_USE_TIME = 2,
}

// 时间格式化
function formatTime(date: number) {
    return dayjs(date).format('YYYY.MM.DD');
}

function formatUseTime(useTimeArr: string[][]) {
    if (Array.isArray(useTimeArr)) {
        let useTimeStr = [];
        for (let i = 0; i < useTimeArr.length && useTimeStr.length <= 5; i++) {
            const item = useTimeArr[i];
            if (Array.isArray(item) && item.length === 2) {
                let startTime = item[0];
                let endTime = item[1];
                if (startTime && endTime) {
                    useTimeStr.push(`${startTime}-${endTime}`);
                }
            }
        }
        if (useTimeStr.length > 0) {
            return useTimeStr.join('，');
        }
    }
    return '';
}

/**
 * 使用须知
 */
export const PurchaseInfo = ({
    productData,
    handleShowAlert,
}: IProductInfo) => {
    /**
     * 有效期
     */
    const validTimeRule =
        productData?.itemShowRule?.itemValidRule?.validTimeRule;

    const expiryDateText = useMemo(() => {
        if (validTimeRule?.type === VALIDATE_RULE.CUSTOM_TIME) {
            const startTime = formatTime(validTimeRule?.startTime);
            const endTime = formatTime(validTimeRule?.endTime);
            return `${startTime} 至 ${endTime}`;
        }
        if (validTimeRule?.type === VALIDATE_RULE.AFTER_BUY_LIMIT_DAY) {
            return `购买之日起${validTimeRule?.afterBuyLimitDay}天内可用`;
        }
        if (validTimeRule?.type === VALIDATE_RULE.FROM_TIME_LIMIT_DAY) {
            const fromTime = formatTime(validTimeRule?.fromTime);
            return `${fromTime}起${validTimeRule?.limitDay}日可用`;
        }
    }, [validTimeRule]);

    /**
     * 可用时间
     */
    const useTimeRule = productData?.itemShowRule?.itemValidRule?.useTimeRule;
    const useTimeRuleText = useMemo(() => {
        if (useTimeRule?.type === USE_TIME_RULE.OPENING_HOURS) {
            return `${useTimeRule?.typeDesc ?? '商家营业时间均可使用'}`;
        }
        if (useTimeRule?.type === USE_TIME_RULE.CUSTOM_USE_TIME) {
            const specialConditionStr = useTimeRule?.specialCondition
                ? useTimeRule?.specialCondition + '\n'
                : '';
            return `${formatUseTime(
                useTimeRule?.useTime,
            )}\n${specialConditionStr}`;
        }
        return '';
    }, [useTimeRule]);

    /**
     * 退款政策
     */
    const refundRule = productData?.itemShowRule?.itemValidRule?.refundRule;
    const refundText = useMemo(() => {
        if (!refundRule?.type) {
            return '';
        }
        return REFUNDED_RULE[refundRule.type];
    }, [refundRule]);

    /**
     * 不可用日期
     */
    const unavailableTime =
        productData?.itemRuleDTO?.useRule?.useRule?.unavailableTime;
    const invalidDateTextList = useMemo(() => {
        const invalidDateTextArr = [];
        if (
            unavailableTime?.holidays &&
            Array.isArray(unavailableTime?.holidays) &&
            unavailableTime.holidays.length > 0
        ) {
            invalidDateTextArr.push(
                `${unavailableTime.holidays.join('、')}不可用`,
            );
        }
        if (
            unavailableTime?.weeks &&
            Array.isArray(unavailableTime?.weeks) &&
            unavailableTime.weeks.length > 0
        ) {
            invalidDateTextArr.push(
                `${unavailableTime.weeks.join('、')}不可用`,
            );
        }

        let customTimeArr = unavailableTime?.customTimes;
        if (Array.isArray(customTimeArr) && customTimeArr?.length > 0) {
            const customTimeStr = [];
            for (
                let i = 0;
                i < customTimeArr.length && customTimeStr.length <= 5;
                i++
            ) {
                const item = customTimeArr[i];
                const startTime = formatTime(item?.startTime);
                const endTime = formatTime(item?.endTime);
                invalidDateTextArr.push(`${startTime} 至 ${endTime}`);
            }
        }
        if (unavailableTime?.specialCondition) {
            invalidDateTextArr.push(`${unavailableTime?.specialCondition}`);
        }

        return invalidDateTextArr;
    }, [unavailableTime]);

    // 预约规则
    const reservationRule =
        productData.itemShowRule?.purchaseNotesRule.reservationRule;
    const reservationText = useMemo(() => {
        if (reservationRule?.reservationFlag) {
            return '需提前联系店家预约';
        } else {
            return '到店消费前，无需预约';
        }
    }, [reservationRule]);

    /**
     * 限购政策
     */
    const buyLimitRules = productData?.itemRuleDTO?.buyLimitRule?.buyLimitRules;
    const limitText = useMemo(() => {
        const limitTextArr = [];
        buyLimitRules &&
            buyLimitRules.map((rules: any) => {
                const type = rules?.buyLimitType;
                if (type) {
                    let text = '';
                    BUY_LIMIT_RULE[type]?.forEach((item: any) => {
                        if (rules[item.key]) {
                            text += (item?.text || '').replace(
                                /\{\s*num\s*\}/,
                                rules[item?.key],
                            );
                        }
                    });
                    text && limitTextArr.push(text);
                }
            });
        if (!limitTextArr.length) {
            return '不限购';
        }
        return limitTextArr.join('、');
    }, [buyLimitRules]);

    /**
     * 使用规则
     */
    const useRule = productData?.itemShowRule?.purchaseNotesRule?.useRule;
    const useRuleTextList = useMemo(() => {
        let useRuleTextArr = [];
        // 如果商家编辑了文案，则展示商家文案
        if (useRule?.instruction) {
            const instructionList =
                useRule?.instruction &&
                useRule?.instruction.split('\n').filter((item: string) => item);
            if (instructionList) {
                useRuleTextArr = useRuleTextArr.concat(instructionList);
            }
        } else {
            // 否则默认展示
            // 使用范围：XXX
            // 退款规则：XXX
            // 单次最多使用XX张团购券
            if (
                useRule?.useScopeLimit &&
                Array.isArray(useRule?.useScopeLimit) &&
                useRule?.useScopeLimit.length > 0
            ) {
                useRuleTextArr.push(
                    `使用范围：${useRule?.useScopeLimit.join('、')}`,
                );
            }
            if (refundText) {
                useRuleTextArr.push(`退款规则：${refundText}`);
            }
            if (useRule?.singleUseLimit) {
                useRuleTextArr.push(
                    `单次最多使用${useRule?.singleUseLimit}张团购券`,
                );
            }
        }

        return useRuleTextArr;
    }, [useRule, refundText]);
    // 是否唤起电话弹窗
    const handleShowPopup = () => {
        handleShowAlert && handleShowAlert();
    };
    const getSubView = (title: string, content?: any) => {
        return (
            <>
                {title && (
                    <CommonText
                        customizationUlPoint={styles.customizationUlPoint}
                    >
                        <Text style={styles.subtitle}>{title}</Text>
                    </CommonText>
                )}
                {content && (
                    <View
                        style={[
                            styles.subContentLine,
                            styles.subContentDistance,
                        ]}
                    >
                        <Text style={[styles.subContent]}>{content}</Text>
                    </View>
                )}
            </>
        );
    };
    return (
        <View style={styles.container}>
            <Text style={styles.title}>使用须知</Text>
            {/* 有效期 */}
            {!!expiryDateText && (
                <View style={styles.packageDetailItemWrapper}>
                    {getSubView('有效期', expiryDateText)}
                </View>
            )}

            {/* 可用时间 */}
            {!!useTimeRuleText && (
                <View style={styles.packageDetailItemWrapper}>
                    {getSubView('可用时间', useTimeRuleText)}
                </View>
            )}
            {/* 不可用日期 */}
            {invalidDateTextList.length > 0 && (
                <View style={[styles.packageDetailItemWrapper]}>
                    {getSubView('不可用日期')}
                    {invalidDateTextList &&
                        invalidDateTextList.length &&
                        invalidDateTextList.map((invalidDateText) => {
                            return (
                                <View style={[styles.subContentDistance]}>
                                    <Text style={styles.subContent}>
                                        {invalidDateText}
                                    </Text>
                                </View>
                            );
                        })}
                    <View
                        style={[
                            styles.subContentLine,
                            styles.subContentDistance,
                        ]}
                    />
                </View>
            )}

            {/* 限购政策 */}
            {!!limitText && (
                <View style={styles.packageDetailItemWrapper}>
                    {getSubView('限购政策', limitText)}
                </View>
            )}

            {/* 预约规则 */}
            <View style={styles.packageDetailItemWrapper}>
                {getSubView('预约规则', reservationText)}
            </View>

            {/* 使用规则 */}
            {useRuleTextList.length > 0 && (
                <View style={styles.packageDetailItemWrapper}>
                    {getSubView('使用规则')}
                    {useRuleTextList &&
                        useRuleTextList.length &&
                        useRuleTextList.map((useRuleText) => {
                            return (
                                <View
                                    style={[styles.subContentDistance]}
                                    key={useRuleText}
                                >
                                    <Text style={styles.subContent}>
                                        {useRuleText}
                                    </Text>
                                </View>
                            );
                        })}
                    <View
                        style={[
                            styles.subContentLine,
                            styles.subContentDistance,
                        ]}
                    />
                </View>
            )}
            {/* 价格和销量说明 */}

            <TouchableOpacity activeOpacity={1} onPress={handleShowPopup}>
                <View style={styles.priceItemContianer}>
                    {getSubView('价格和销量说明')}
                    <View
                        style={[
                            styles.rowFlexAlignCenter,
                            styles.subContentDistance,
                        ]}
                    >
                        <Text style={styles.subContent}>查看全部</Text>
                        <KidIcon
                            kid={'common_base_next_24'}
                            kidColor={'color_base_black_6'}
                            size={screenUnit.screenSize(14)}
                            style={styles.priceItemArrow}
                        />
                    </View>
                </View>
            </TouchableOpacity>
        </View>
    );
};
