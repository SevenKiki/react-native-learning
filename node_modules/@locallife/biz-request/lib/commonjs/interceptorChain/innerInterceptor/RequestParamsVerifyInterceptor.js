"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _baseRequest = require("@locallife/base-request");

var _bizRequest = require("@locallife/biz-request");

class RequestParamsVerifyInterceptor extends _baseRequest.Interceptor {
  proceed() {
    return function (model) {
      var _config$requestVerify, _BizRequestImpl$defau;

      const config = model.requestConfig;
      const requestVerifyParams = (_config$requestVerify = config.requestVerifyParams) !== null && _config$requestVerify !== void 0 ? _config$requestVerify : (_BizRequestImpl$defau = _bizRequest.BizRequestImpl.defaultInterceptorParams) === null || _BizRequestImpl$defau === void 0 ? void 0 : _BizRequestImpl$defau.requestVerifyParams;

      if (requestVerifyParams) {
        for (let [key, value] of requestVerifyParams) {
          var _ref, _ref2, _model$requestParams$, _model$requestParams, _model$requestParams$2, _model$requestParams2, _model$requestParams3, _model$requestParams4, _model$requestParams5, _model$requestParams6, _model$requestParams7, _model$requestParams8, _model$requestParams9;

          let param = (_ref = (_ref2 = (_model$requestParams$ = (_model$requestParams = model.requestParams) === null || _model$requestParams === void 0 ? void 0 : (_model$requestParams$2 = _model$requestParams.params) === null || _model$requestParams$2 === void 0 ? void 0 : _model$requestParams$2[key]) !== null && _model$requestParams$ !== void 0 ? _model$requestParams$ : (_model$requestParams2 = model.requestParams) === null || _model$requestParams2 === void 0 ? void 0 : (_model$requestParams3 = _model$requestParams2.commonRequestParams) === null || _model$requestParams3 === void 0 ? void 0 : (_model$requestParams4 = _model$requestParams3.params) === null || _model$requestParams4 === void 0 ? void 0 : _model$requestParams4[key]) !== null && _ref2 !== void 0 ? _ref2 : (_model$requestParams5 = model.requestParams) === null || _model$requestParams5 === void 0 ? void 0 : (_model$requestParams6 = _model$requestParams5.queryParams) === null || _model$requestParams6 === void 0 ? void 0 : _model$requestParams6[key]) !== null && _ref !== void 0 ? _ref : (_model$requestParams7 = model.requestParams) === null || _model$requestParams7 === void 0 ? void 0 : (_model$requestParams8 = _model$requestParams7.commonRequestParams) === null || _model$requestParams8 === void 0 ? void 0 : (_model$requestParams9 = _model$requestParams8.queryParams) === null || _model$requestParams9 === void 0 ? void 0 : _model$requestParams9[key];

          if (typeof param !== value) {
            return Promise.reject({
              reason: { ...model.response,
                message: `参数 ${key} 的值类型不对，期望类型：${value}，实际类型为：${typeof param}`
              }
            });
          }
        }
      }

      return Promise.resolve(model);
    };
  }

}

exports.default = RequestParamsVerifyInterceptor;
//# sourceMappingURL=RequestParamsVerifyInterceptor.js.map