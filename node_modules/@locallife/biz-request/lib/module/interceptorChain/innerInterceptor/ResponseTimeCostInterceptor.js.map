{"version":3,"names":["Interceptor","REQUEST_FAILED","REQUEST_PATH","REQUEST_SUCCESS","RequestRubas","ResponseTimeCostInterceptor","proceed","model","endTime","Date","now","startTime","extra","sysTimeRequestStart","setDimension","requestParams","url","publish","console","log","Promise","resolve","sysTimeRequestEnd","error","code","reason","status","result","payload","Map","set","message","reject"],"sources":["ResponseTimeCostInterceptor.ts"],"sourcesContent":["import { Interceptor, InterceptorModel } from '@locallife/base-request';\nimport {\n    REQUEST_FAILED,\n    REQUEST_PATH,\n    REQUEST_SUCCESS,\n    RequestRubas,\n} from '../../util/RequestRubas';\n\n/**\n * 请求耗时纪录\n */\nexport default class ResponseTimeCostInterceptor extends Interceptor {\n    proceed(): (model: InterceptorModel) => Promise<InterceptorModel> {\n        return function (model: InterceptorModel) {\n            const endTime = Date.now();\n            const startTime = (model.extra?.sysTimeRequestStart ??\n                endTime) as number;\n            RequestRubas.setDimension(\n                REQUEST_PATH,\n                model.requestParams?.url ?? '',\n            );\n            RequestRubas.publish(REQUEST_SUCCESS);\n            console.log(\n                `@locallife/biz-request requestCostTime: ${\n                    endTime - startTime\n                }`,\n            );\n            return Promise.resolve({\n                ...model,\n                extra: { ...model.extra, sysTimeRequestEnd: endTime },\n            });\n        };\n    }\n\n    error(): (model: InterceptorModel) => Promise<InterceptorModel> {\n        return function (model: InterceptorModel) {\n            const code =\n                model.reason?.code ??\n                model.reason?.status ??\n                model.reason?.result ??\n                -1;\n            const payload = new Map();\n            payload.set('errorCode', code);\n            payload.set('errorMsg', model.reason?.message ?? '');\n            RequestRubas.setDimension(\n                REQUEST_PATH,\n                model.requestParams?.url ?? '',\n            );\n            RequestRubas.publish(REQUEST_FAILED, payload);\n            return Promise.reject(model);\n        };\n    }\n}\n"],"mappings":"AAAA,SAASA,WAAT,QAA8C,yBAA9C;AACA,SACIC,cADJ,EAEIC,YAFJ,EAGIC,eAHJ,EAIIC,YAJJ,QAKO,yBALP;AAOA;AACA;AACA;;AACA,eAAe,MAAMC,2BAAN,SAA0CL,WAA1C,CAAsD;EACjEM,OAAO,GAA2D;IAC9D,OAAO,UAAUC,KAAV,EAAmC;MAAA;;MACtC,MAAMC,OAAO,GAAGC,IAAI,CAACC,GAAL,EAAhB;MACA,MAAMC,SAAS,4CAAIJ,KAAK,CAACK,KAAV,iDAAI,aAAaC,mBAAjB,yEACXL,OADJ;MAEAJ,YAAY,CAACU,YAAb,CACIZ,YADJ,mDAEIK,KAAK,CAACQ,aAFV,yDAEI,qBAAqBC,GAFzB,yEAEgC,EAFhC;MAIAZ,YAAY,CAACa,OAAb,CAAqBd,eAArB;MACAe,OAAO,CAACC,GAAR,CACK,2CACGX,OAAO,GAAGG,SACb,EAHL;MAKA,OAAOS,OAAO,CAACC,OAAR,CAAgB,EACnB,GAAGd,KADgB;QAEnBK,KAAK,EAAE,EAAE,GAAGL,KAAK,CAACK,KAAX;UAAkBU,iBAAiB,EAAEd;QAArC;MAFY,CAAhB,CAAP;IAIH,CAlBD;EAmBH;;EAEDe,KAAK,GAA2D;IAC5D,OAAO,UAAUhB,KAAV,EAAmC;MAAA;;MACtC,MAAMiB,IAAI,2DACNjB,KAAK,CAACkB,MADA,kDACN,cAAcD,IADR,qFAENjB,KAAK,CAACkB,MAFA,mDAEN,eAAcC,MAFR,2DAGNnB,KAAK,CAACkB,MAHA,mDAGN,eAAcE,MAHR,uCAIN,CAAC,CAJL;MAKA,MAAMC,OAAO,GAAG,IAAIC,GAAJ,EAAhB;MACAD,OAAO,CAACE,GAAR,CAAY,WAAZ,EAAyBN,IAAzB;MACAI,OAAO,CAACE,GAAR,CAAY,UAAZ,6CAAwBvB,KAAK,CAACkB,MAA9B,mDAAwB,eAAcM,OAAtC,yEAAiD,EAAjD;MACA3B,YAAY,CAACU,YAAb,CACIZ,YADJ,qDAEIK,KAAK,CAACQ,aAFV,0DAEI,sBAAqBC,GAFzB,2EAEgC,EAFhC;MAIAZ,YAAY,CAACa,OAAb,CAAqBhB,cAArB,EAAqC2B,OAArC;MACA,OAAOR,OAAO,CAACY,MAAR,CAAezB,KAAf,CAAP;IACH,CAfD;EAgBH;;AAxCgE"}