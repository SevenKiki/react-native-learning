import RequestParamsVerifyInterceptor from '../interceptorChain/innerInterceptor/RequestParamsVerifyInterceptor';
import {
    BaseRequestImpl,
    Interceptor,
    IRequestParam,
    KSBaseResponse,
    RequestConfig,
} from '@locallife/base-request';
import { BizRequestConfig } from '@locallife/biz-request';
import RequestTimeCostInterceptor from '../interceptorChain/innerInterceptor/RequestTimeCostInterceptor';
import ResponseTimeCostInterceptor from '../interceptorChain/innerInterceptor/ResponseTimeCostInterceptor';
import { ResponseBaseVerifyInterceptor } from '../interceptorChain/innerInterceptor/ResponseBaseVerifyInterceptor';
import { InterceptorParams } from '../model/InterceptorParams';
import ResponseMonitorLogInterceptor from '../interceptorChain/innerInterceptor/ResponseMonitorLogInterceptor';

export class BizRequestImpl extends BaseRequestImpl {
    static defaultInterceptorParams?: InterceptorParams;

    init(interceptorParams?: InterceptorParams) {
        BizRequestImpl.defaultInterceptorParams = interceptorParams;
    }

    initInnerInterceptors(
        requestInnerInterceptors: Array<Interceptor>,
        responseInnerInterceptors: Array<Interceptor>,
        config?: BizRequestConfig,
    ) {
        super.initInnerInterceptors(
            requestInnerInterceptors,
            responseInnerInterceptors,
            config,
        );
        BizRequestImpl.defaultInterceptorParams?.customInnerRequestInterceptors?.forEach(
            (value) => {
                if (value) {
                    requestInnerInterceptors.push(value);
                }
            },
        );
        const enableRequestParamsVerify =
            config?.enableRequestParamsVerify === true ||
            (config?.enableRequestParamsVerify !== false &&
                BizRequestImpl.defaultInterceptorParams
                    ?.enableRequestParamsVerify);
        if (enableRequestParamsVerify) {
            requestInnerInterceptors.push(new RequestParamsVerifyInterceptor());
        }
        !BizRequestImpl.defaultInterceptorParams?.disableLogTimeCost &&
            requestInnerInterceptors.push(new RequestTimeCostInterceptor());
        BizRequestImpl.defaultInterceptorParams?.customInnerResponseInterceptors?.forEach(
            (value) => {
                if (value) {
                    requestInnerInterceptors.unshift(value);
                }
            },
        );
        !BizRequestImpl.defaultInterceptorParams?.disableReportMonitorLog &&
            responseInnerInterceptors.unshift(
                new ResponseMonitorLogInterceptor(),
            );
        const enableResponseBaseVerify =
            config?.enableResponseBaseVerify === true ||
            (config?.enableResponseBaseVerify !== false &&
                BizRequestImpl.defaultInterceptorParams
                    ?.enableResponseBaseVerify);
        if (enableResponseBaseVerify) {
            responseInnerInterceptors.unshift(
                new ResponseBaseVerifyInterceptor(),
            );
        }
        !BizRequestImpl.defaultInterceptorParams?.disableLogTimeCost &&
            responseInnerInterceptors.unshift(
                new ResponseTimeCostInterceptor(),
            );
    }

    getDefaultConfig(): BizRequestConfig {
        return {};
        // 先不设置默认值
        // return DefaultBizRequestConfig;
    }

    request(
        param: IRequestParam,
        config?: RequestConfig,
    ): Promise<KSBaseResponse> {
        return super.request(param, config);
    }
}
