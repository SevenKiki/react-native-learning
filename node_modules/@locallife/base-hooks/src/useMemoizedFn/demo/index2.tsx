/* eslint-disable react-native/no-inline-styles */
/* eslint-disable react/jsx-no-bind */
import React, { useState } from 'react';
import { Button, Text } from 'react-native';
import { View } from 'react-native';
import { useCallback } from 'react';
import useMemoizedFn from '../index';
import { useRef } from 'react';

// 本demo中，可以看到使用 useMemoizedFn 会比 useCallback 减少渲染次数
// 注：点击 加1 按钮，使用 useCallback 的渲染次数会被加1，而 useMemoizedFn 的渲染次数不变
// 按 Command+S，触发页面的刷新，useCallback 和 useMemoizedFn 的渲染次数会同时加1
export const Demo2 = () => {
    const [count, setCount] = useState(0);
    const plusBySetState = () => {
        setCount((c) => c + 1);
    };

    const callbackFn = useCallback(() => {
        console.log(`callbackFn：current count is ${count}`);
    }, [count]);

    const memoizedFn = useMemoizedFn(() => {
        console.log(`memoizedFn：current count is ${count}`);
    });

    return (
        <>
            <View>
                <Text>count: {count}</Text>
                <Button title="加1" onPress={plusBySetState} />
            </View>

            <View style={{ marginTop: 15 }}>
                <Text>Component with useCallback function: </Text>
                <ExpensiveTree title="callback" showCount={callbackFn} />
            </View>

            <View style={{ marginTop: 10 }}>
                <Text>Component with useMemoizedFn function: </Text>
                <ExpensiveTree title="useMemoized" showCount={memoizedFn} />
            </View>
        </>
    );
};

const ExpensiveTree = React.memo<{ [key: string]: any }>(
    ({ title, showCount }) => {
        const renderCountRef = useRef(0);
        renderCountRef.current += 1;
        return (
            <View>
                <Text>Render Count: {renderCountRef.current}</Text>
                <Button title={title} onPress={showCount} />
            </View>
        );
    },
);
