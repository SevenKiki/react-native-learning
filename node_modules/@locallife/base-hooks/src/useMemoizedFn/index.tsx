import { useRef, useMemo } from 'react';

type RefFn = (...args: any[]) => any;

type PickFunction<T extends RefFn> = (
    this: ThisParameterType<T>,
    ...args: Parameters<T>
) => ReturnType<T>;

export default function useMemoizedFn<T extends RefFn>(fn: T) {
    const fnRef = useRef<T>(fn);
    fnRef.current = useMemo(() => fn, [fn]);

    const memoizedFn = useRef<PickFunction<T>>();
    if (!memoizedFn.current) {
        memoizedFn.current = function (this, ...args) {
            return fnRef.current.apply(this, args);
        };
    }
    return memoizedFn.current as T;
}
