import useMemoizedFn from '../useMemoizedFn/index';
import { useState } from 'react';

export interface IAsyncFunc<T = any> {
    (): Promise<T>;
}

export interface IAsyncOptions {
    defaultIsRunning?: boolean;
    onSuccess?: (res: any) => void | Promise<void>;
    onError?: (err: any) => void | Promise<void>;
}

export default function useAsync(
    asyncFunc: IAsyncFunc,
    options?: IAsyncOptions,
) {
    const { defaultIsRunning = false, onSuccess, onError } = options || {};
    const [isRunning, setIsRunning] = useState(defaultIsRunning);

    const run = useMemoizedFn(async () => {
        setIsRunning(true);
        try {
            const res = await asyncFunc();
            if (onSuccess) {
                await onSuccess(res);
            }
            return res;
        } catch (e) {
            if (onError) {
                await onError(e);
            }
            throw e;
        } finally {
            setIsRunning(false);
        }
    });

    return {
        isRunning,
        run,
    };
}
