import { useCallback, useEffect, useState } from 'react';
import { NativeEventEmitter, NativeModules } from 'react-native';

export default function useActiveCallBack(cb: () => void, deps: any[] = []) {
    const [appState, setAppState] = useState('active');
    useEffect(() => {
        const appStateEmitter = new NativeEventEmitter(
            NativeModules.KRNAppState,
        );
        const appStateEmitterListener = (state) => {
            setAppState(state.appState);
        };
        appStateEmitter.addListener(
            'krnAppStateDidChange',
            appStateEmitterListener,
        );
        return () => {
            appStateEmitter.removeListener(
                'krnAppStateDidChange',
                appStateEmitterListener,
            );
        };
    }, []);
    return useCallback(() => {
        if (appState !== 'destroy' && appState !== 'hide') {
            cb();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [appState, cb, ...deps]);
}
