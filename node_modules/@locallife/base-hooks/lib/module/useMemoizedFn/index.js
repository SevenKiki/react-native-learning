import { useRef, useMemo } from 'react';
export default function useMemoizedFn(fn) {
  const fnRef = useRef(fn);
  fnRef.current = useMemo(() => fn, [fn]);
  const memoizedFn = useRef();

  if (!memoizedFn.current) {
    memoizedFn.current = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return fnRef.current.apply(this, args);
    };
  }

  return memoizedFn.current;
}
//# sourceMappingURL=index.js.map