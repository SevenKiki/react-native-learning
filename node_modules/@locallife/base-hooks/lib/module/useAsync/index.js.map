{"version":3,"names":["useMemoizedFn","useState","useAsync","asyncFunc","options","defaultIsRunning","onSuccess","onError","isRunning","setIsRunning","run","res","e"],"sources":["index.tsx"],"sourcesContent":["import useMemoizedFn from '../useMemoizedFn/index';\nimport { useState } from 'react';\n\nexport interface IAsyncFunc<T = any> {\n    (): Promise<T>;\n}\n\nexport interface IAsyncOptions {\n    defaultIsRunning?: boolean;\n    onSuccess?: (res: any) => void | Promise<void>;\n    onError?: (err: any) => void | Promise<void>;\n}\n\nexport default function useAsync(\n    asyncFunc: IAsyncFunc,\n    options?: IAsyncOptions,\n) {\n    const { defaultIsRunning = false, onSuccess, onError } = options || {};\n    const [isRunning, setIsRunning] = useState(defaultIsRunning);\n\n    const run = useMemoizedFn(async () => {\n        setIsRunning(true);\n        try {\n            const res = await asyncFunc();\n            if (onSuccess) {\n                await onSuccess(res);\n            }\n            return res;\n        } catch (e) {\n            if (onError) {\n                await onError(e);\n            }\n            throw e;\n        } finally {\n            setIsRunning(false);\n        }\n    });\n\n    return {\n        isRunning,\n        run,\n    };\n}\n"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,wBAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;AAYA,eAAe,SAASC,QAAT,CACXC,SADW,EAEXC,OAFW,EAGb;EACE,MAAM;IAAEC,gBAAgB,GAAG,KAArB;IAA4BC,SAA5B;IAAuCC;EAAvC,IAAmDH,OAAO,IAAI,EAApE;EACA,MAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAACI,gBAAD,CAA1C;EAEA,MAAMK,GAAG,GAAGV,aAAa,CAAC,YAAY;IAClCS,YAAY,CAAC,IAAD,CAAZ;;IACA,IAAI;MACA,MAAME,GAAG,GAAG,MAAMR,SAAS,EAA3B;;MACA,IAAIG,SAAJ,EAAe;QACX,MAAMA,SAAS,CAACK,GAAD,CAAf;MACH;;MACD,OAAOA,GAAP;IACH,CAND,CAME,OAAOC,CAAP,EAAU;MACR,IAAIL,OAAJ,EAAa;QACT,MAAMA,OAAO,CAACK,CAAD,CAAb;MACH;;MACD,MAAMA,CAAN;IACH,CAXD,SAWU;MACNH,YAAY,CAAC,KAAD,CAAZ;IACH;EACJ,CAhBwB,CAAzB;EAkBA,OAAO;IACHD,SADG;IAEHE;EAFG,CAAP;AAIH"}