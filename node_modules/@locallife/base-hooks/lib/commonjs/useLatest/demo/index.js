"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _index = _interopRequireDefault(require("../index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// 本Demo中，使用useLatest始终获得count最新的值
// setCount(lastestCount.current + 1)等价于setCount((c) => c + 1)
var _default = () => {
  const [count, setCount] = (0, _react.useState)(0);
  const lastestCount = (0, _index.default)(count);
  (0, _react.useEffect)(() => {
    const intervalId = setInterval(() => {
      setCount(lastestCount.current + 1); // 使用最新值的优势在于，调用setCount后，如果打印count的值始终是0，而lastestCount.current的值是实时更新的
      // console.log(
      //     `count = ${count}; lastestCount.current = ${lastestCount.current}`,
      // );
    }, 1000);
    return () => clearInterval(intervalId);
  }, [lastestCount]);
  return /*#__PURE__*/_react.default.createElement(_reactNative.Text, null, count);
};

exports.default = _default;
//# sourceMappingURL=index.js.map