"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ = _interopRequireDefault(require(".."));

var _reactNative = require("react-native");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable react-native/no-inline-styles */

/* eslint-disable react/jsx-no-bind */
// 本demo中，TestComponent一开始就挂载了，useMountUntilEffect只监听了count的状态
// 组件1 count初始值为0（相当于不符合副作用执行的条件），所以渲染组件1时，不会执行useMountUntilEffect中的逻辑，在触发加1后打印 Mounted
// 组件2 count初始值为1（相当于符合副作用执行的条件），所以渲染组件2时，也会执行useMountUntilEffect中的逻辑，不触发加1也会打印 Mounted，但是在触发加1后不会打印 Mounted
const TestComponent = _ref => {
  let {
    name,
    count
  } = _ref;
  console.log(`render ${name}`);
  (0, _.default)(() => {
    console.log(`${name} Mounted ${count}`);
  }, [count]);
  return /*#__PURE__*/_react.default.createElement(_reactNative.Text, null, "name=", name, "\uFF1Bcount = ", count);
};

var _default = () => {
  const [count, setCount] = (0, _react.useState)(0);

  const onPlusOne = () => {
    setCount(c => c + 1);
  };

  return /*#__PURE__*/_react.default.createElement(_reactNative.View, null, /*#__PURE__*/_react.default.createElement(_reactNative.Button, {
    title: "\u52A01",
    onPress: onPlusOne
  }), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      height: 20
    }
  }), /*#__PURE__*/_react.default.createElement(TestComponent, {
    name: '组件1',
    count: count
  }), /*#__PURE__*/_react.default.createElement(TestComponent, {
    name: '组件2',
    count: 1
  }));
};

exports.default = _default;
//# sourceMappingURL=index.js.map