"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _ = _interopRequireDefault(require(".."));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// 本demo中，开始只有一个按钮，点击按钮执行 run , 即 useAsync 中的 async 语句块，isRunning 和 flag 值为 true ，显示执行中
// mockAsync 中模拟了异步操作，三秒中后返回 true , isRunning 值变为 false
function mockAsync() {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve(true);
    }, 3000);
  });
}

var _default = () => {
  const [flag, setFlag] = (0, _react.useState)();
  const [isSuccess, setIsSuccess] = (0, _react.useState)();
  const {
    isRunning,
    run
  } = (0, _.default)(async () => {
    setFlag(true);
    setFlag(await mockAsync());
  }, {
    onSuccess: () => {
      setIsSuccess(true);
    },
    onError: () => {
      setIsSuccess(false);
    }
  });
  const result = isSuccess ? '执行成功' : '执行失败';
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, null, /*#__PURE__*/_react.default.createElement(_reactNative.Button, {
    onPress: run,
    title: "\u70B9\u51FB\u6267\u884C"
  }), flag && /*#__PURE__*/_react.default.createElement(_reactNative.Text, null, isRunning ? '执行中' : result));
};

exports.default = _default;
//# sourceMappingURL=index.js.map