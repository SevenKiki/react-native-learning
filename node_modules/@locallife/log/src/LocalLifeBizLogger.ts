import LocalLifeInitLogger from './LocalLifeInitLogger';

interface PVParams {
    [key: string]: any;
}
class LocalLifeBizLogger {
    private innerLog(tag: string, message: any) {
        console.log(
            `[@locallife/log][${tag}]:${
                typeof message === 'string' ? message : JSON.stringify(message)
            }`,
        );
    }

    click(action: string, params?: any, contentPackage?: any, other?: any) {
        const weblog = LocalLifeInitLogger.getWeblog();
        weblog.sendImmediately('CLICK', {
            action,
            params: params,
            contentPackage: contentPackage,
            ...other,
        });
        this.innerLog(
            'click log',
            JSON.stringify({ action, params, contentPackage }),
        );
    }

    show(action: string, params?: any, contentPackage?: any, other?: any) {
        const weblog = LocalLifeInitLogger.getWeblog();
        weblog.sendImmediately('SHOW', {
            action,
            params: params,
            contentPackage: contentPackage,
            ...other,
        });
    }

    event(action: string, params?: any, contentPackage?: any) {
        const weblog = LocalLifeInitLogger.getWeblog();
        this.innerLog(
            'event log',
            JSON.stringify({ action, params, contentPackage }),
        );
        weblog.sendImmediately('CLICK', {
            action,
            params: params,
            type: 'BACKGROUND_TASK_EVENT',
        });
    }

    pageShow(pvParams?: PVParams) {
        const weblog = LocalLifeInitLogger.getWeblog();
        const pvEventOption = LocalLifeInitLogger.getPvEventOption();
        weblog.sendImmediately('PV', {
            type: 'enter',
            page: pvEventOption.page,
            params: { ...pvEventOption.params, ...pvParams },
            coPage: !!pvEventOption.coPage,
        });
    }
}
export const localLifeBizLogger = new LocalLifeBizLogger();
