/* eslint-disable camelcase */
import { Weblog } from '@ks/weblogger/lib/log.bridge';
import AutoPV from '@ks/weblogger/lib/plugins/autopv';
import AutoTrack from '@ks/weblogger/lib/plugins/autotrack';
import Radar from '@ks-radar/radar';
import LoggerError from '../types';
import LocalLifeTaskLogger from '../LocalLifeTaskLogger';
import * as yoda from '@yoda/bridge';

interface Options {
    /** 雷达报警需要 */
    projectId?: string;
    /** 上报环境，默认production */
    env?: any;
    /** 是否启动autoPv，默认启用 */
    useAutoPv?: boolean;
    /** 启用autoPv时，插件参数 */
    autoPvOptions?: any;
    /** 是否启用autoTrack，默认启用*/
    useAutoTrack?: boolean;
    /** 启用autoTrack时，插件参数 */
    autoTrackOptions?: object;
    /** 业务标识，默认'LOCALLIFE' */
    biz?: string;
    /** vue示例 */
    app?: any;
    /** 其他 */
    [key: string]: any;
}

export class LocalLifeWebBaseLogger {
    radar = null;
    weblogger = null as null | Weblog;

    /**
     *
     * @param options 基本配置参数
     * @param weblogExtraInfo 补充配置参数，将会与基本配置完成weblogger的初始化
     * @param baseInfo 埋点基础信息配置
     */
    constructor(options: Options, weblogExtraInfo = {} as any, baseInfo) {
        const {
            projectId,
            env = 'production',
            useAutoPv = true,
            autoPvOptions,
            useAutoTrack = true,
            autoTrackOptions = {},
            biz = 'LOCALLIFE',
            app,
        } = options;

        // plugins
        let plugins = (weblogExtraInfo?.plugins || []) as any[];
        if (useAutoPv) {
            plugins.push(new AutoPV(autoPvOptions));
        }

        if (useAutoTrack) {
            // https://component.corp.kuaishou.com/docs/weblogger/views/docs/plugins.html#autotrack%E6%8F%92%E4%BB%B6
            plugins.push(new AutoTrack(autoTrackOptions));
        }

        if (projectId) {
            plugins.push(
                new Radar({
                    // 上报fcp指标数据
                    fcp: true,
                    // 雷达平台唯一标识
                    projectId,
                }),
            );
        }

        this.weblogger = new Weblog(
            {
                env,
                // 新业务埋点，落库 ks_client_log_v3；端内【桥接上报】无需配置
                proto: 'v3',
                // 在端内http 上报时传入 yoda 桥接 SDK，可以使雷达数据上报更多的 webview 信息，并会校正 js 默认获取的设备信息等。
                // 端内【桥接上报】无需配置
                yoda,
                plugins,
                ...weblogExtraInfo,
            },
            baseInfo,
        );

        this.bindAutoEvent({ app });
        this.radar = this.weblogger.plugins.radar;

        const that = this;
        LocalLifeTaskLogger.setTaskLogFn(
            this.radar
                ? ({ name, extra_info, ...other }) =>
                      that.radar.event({ name, extra_info, ...other })
                : ({ name, extra_info, ...other }) =>
                      that.sendLog('CUSTOM_EVENT', {
                          biz,
                          key: name,
                          value: { extra_info, ...other },
                      }),
        );
        LocalLifeTaskLogger.setErrorLogFn(this.error);
    }

    // 上报FMP
    private hasSendFMP = false;
    addFMP(): void {
        if (this.hasSendFMP) {
            return;
        }

        this.hasSendFMP = true;
        // weblog 是异步加载且不影响首屏的，所以时间可以提前计算
        this.radar?.fmp?.(Date.now());
    }

    // 更新上报信息
    update({ url, referUrl, ...commonPackage }) {
        url && this.weblogger.updateCurrentUrlPackage(url);
        referUrl && this.weblogger.updateReferUrlPackage(referUrl);
        if (Object.keys(commonPackage).length) {
            this.weblogger.updateCommonPackage(commonPackage);
        }
    }

    // 发埋点啦
    private sendLog(type: any, options: any) {
        this.weblogger.sendImmediately(type, options);
    }

    // 页面PV事件用这个
    pv(options: any) {
        this.sendLog('PV', options);
    }
    // 元素SHOW事件用这个
    show(options: any) {
        this.sendLog('SHOW', options);
    }
    // 点击事件用这个
    click(options: any) {
        this.sendLog('CLICK', options);
    }

    error(err: Error | LoggerError | string) {
        this.radar?.captureException?.(err);
    }

    /**
     * options第一层可包含status，若options.extra_info无status字段，外层status字段将会包含在options.extra_info进行埋点发送
     * @param options: {name: string, extra_info: any, status?: string, ...other}
     * @param isAsync
     * @param maxLifeTimeBetweenSteps 如果异步，两次任务之间最大保留时间，默认30s
     * @returns
     */
    task(options, isAsync?: boolean, maxLifeTimeBetweenSteps?: number) {
        return LocalLifeTaskLogger.task(
            options,
            isAsync,
            maxLifeTimeBetweenSteps,
        );
    }

    asyncTask(options, maxLifeTimeBetweenSteps?: number) {
        return this.task(options, true, maxLifeTimeBetweenSteps);
    }

    // 绑定事件
    private bindAutoEvent({ app }) {
        // vue
        app?.config &&
            (app.config.errorHandler = (error: Error) => {
                this.error(
                    new LoggerError({
                        name: '@locallife/log-vue-error',
                        error,
                    }),
                );
            });

        // unhandled rejection
        const that = this;
        window &&
            window.addEventListener(
                'unhandledrejection',
                function (e: PromiseRejectionEvent) {
                    that.error(
                        new LoggerError({
                            name: '@locallife/log-unhandledrejection',
                            error: e.reason,
                        }),
                    );
                    e.preventDefault();
                },
            );
    }
}

let logger: LocalLifeWebBaseLogger;
export default function LocalLifeWebLogger(...args: [Options?, any?, any?]) {
    return logger || (logger = new LocalLifeWebBaseLogger(...args));
}
