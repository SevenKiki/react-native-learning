/* eslint-disable camelcase */
import { Weblog } from '@ks/weblogger/lib/log.krnbridge';
import RadarKrn from '@ks-radar/radar/krn';
import LoggerError from '../types';
import LocalLifeTaskLogger from '../LocalLifeTaskLogger';
import LocalLifeFmpLogger from '../LocalLifeFmpLogger';
import { localLifeBizLogger } from '../LocalLifeBizLogger';
import LocalLifeInitLogger, { _IAppInitProps } from '../LocalLifeInitLogger';

interface Options extends _IAppInitProps {
    /** 是否启用radar，默认启用 */
    useRadar?: boolean;
    /** 业务标识，默认'LOCALLIFE' */
    biz?: string;
    /** 获取PV参数 */
    pageMap?: any;
    /** 其他 */
    [key: string]: any;
}

export class LocalLifeKrnBaseLogger extends Weblog {
    radar = null;

    /**
     * @param options 基本配置参数
     * @param weblogExtraInfo 补充配置参数，将会与基本配置完成weblogger的初始化
     * @param baseInfo 埋点基础信息配置
     */
    constructor(options: Options, weblogExtraInfo = {}, baseInfo) {
        let {
            useRadar = true,
            biz = 'LOCALLIFE',
            pageMap,
            ...appModel
        } = options;

        // weblogger实例
        super(
            {
                biz,
                ...weblogExtraInfo,
            },
            baseInfo,
        );

        //radar
        if (useRadar) {
            const {
                sessionId,
                bundleId,
                componentName,
                bundleVersionCode,
                bundleVersion,
            } = appModel;
            this.radar = new RadarKrn({
                weblog: this,
                sessionId,
                bundleId,
                componentName,
                bundleVersionCode,
                bundleVersion,
            });
        }

        // init appModel
        LocalLifeInitLogger.initWithAppModel(appModel, this);
        // 取链接参数及PV参数
        const pvEventOptions = pageMap(pageMap({ params: appModel }));
        LocalLifeInitLogger.setBizInfo(pvEventOptions);

        // 自动上报PV
        this.pv();

        // 自动上报T1 白屏时间
        LocalLifeFmpLogger.handleT1();

        // 榜单task所需打点事件
        const that = this;
        LocalLifeTaskLogger.setTaskLogFn(
            this.radar
                ? ({ name, extra_info, ...other }) =>
                      that.radar.event({ name, extra_info, ...other })
                : ({ name, extra_info, ...other }) =>
                      that.sendLog('CUSTOM_EVENT', {
                          biz,
                          key: name,
                          value: { extra_info, ...other },
                      }),
        );
        LocalLifeTaskLogger.setErrorLogFn(this.error);
    }

    // 第一次接口上报时间(T2)
    handleT2 = LocalLifeFmpLogger.handleT2;

    // 首屏时间（T3）
    handleT3 = LocalLifeFmpLogger.handleT3;

    // 更新上报信息
    update({ url, referUrl, ...commonPackage }) {
        url && this.updateCurrentUrlPackage(url);
        referUrl && this.updateReferUrlPackage(referUrl);
        if (Object.keys(commonPackage).length) {
            this.updateCommonPackage(commonPackage);
        }
    }

    // 发埋点
    private sendLog(type: any, options: any) {
        this.sendImmediately(type, options);
    }

    // 页面PV事件用这个
    pv(option = {}) {
        localLifeBizLogger.pageShow(option);
    }

    // 元素SHOW事件用这个
    show({ action, params, contentPackage, ...other }: any) {
        localLifeBizLogger.show(action, params, contentPackage, other);
    }

    // 点击事件用这个
    click({ action, params, contentPackage, ...other }: any) {
        localLifeBizLogger.click(action, params, contentPackage, other);
    }

    error(err: Error | LoggerError | string) {
        this.radar?.captureException?.(err);
    }

    /**
     * options第一层可包含status，若options.extra_info无status字段，外层status字段将会包含在options.extra_info进行埋点发送
     * @param options: {name: string, extra_info: any, status?: string, ...other}
     * @param isAsync
     * @param maxLifeTimeBetweenSteps 如果异步，两次任务之间最大保留时间，默认30s
     * @returns
     */
    task(options, isAsync?: boolean, maxLifeTimeBetweenSteps?: number) {
        return LocalLifeTaskLogger.task(
            options,
            isAsync,
            maxLifeTimeBetweenSteps,
        );
    }

    asyncTask(options, maxLifeTimeBetweenSteps?: number) {
        return this.task(options, true, maxLifeTimeBetweenSteps);
    }
}

let krnLogger: LocalLifeKrnBaseLogger;
/**
 * bizLogger/fmpLogger/taskLogger的功能集成版
 * bizLogger需业务方手动进行weblogger实例化传入initLogger，方可进行click等埋点上报。weblogger示例由使用方自行管理。
 * KrnLogger无需提前weblogger实例化，传入appProps即可（若页面需要指定PV参数，需传入pageMap）。将会返回logger实例单例，使用实例对象函数进行埋点上报。
 * 默认开启雷达，默认上报T1。
 * 普通打点bizLogger上报为weblogger的后台任务的任务事件，KrnLogger上报至radar
 */
export default function LocalLifeKrnLogger(...args: [Options?, any?, any?]) {
    return krnLogger || (krnLogger = new LocalLifeKrnBaseLogger(...args));
}
