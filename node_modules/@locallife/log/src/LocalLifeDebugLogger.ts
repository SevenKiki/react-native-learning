import { NativeModules, Platform } from 'react-native';
import AppVersion from './AppVersion';
import LocalLifeInitLogger from './LocalLifeInitLogger';
import { VersionUtil } from './VersionUtil';

enum LoggerType {
    VERBOSE = 1,
    DEBUG = 2,
    INFO = 3,
    WARN = 4,
    ERROR = 5,
}

function inValidVersion(): boolean {
    if (Platform.OS === 'android') {
        return VersionUtil.currentGreaterThanEqualVersion(
            AppVersion.VERSION_11_2_10,
        );
    } else if (Platform.OS === 'ios') {
        return VersionUtil.currentGreaterThanEqualVersion(
            AppVersion.VERSION_11_3_10,
        );
    }
    return false;
}

async function log(
    logType: LoggerType,
    tag: string,
    msg?: string,
    params?: object,
    error?: object,
) {
    try {
        let args = params || {};
        let message = null;
        let rootTag = LocalLifeInitLogger.getRootTag();
        if (error) {
            if (error instanceof Error) {
                args = {
                    ...args,
                    errorInfo: error.message,
                    errorStack: error.stack,
                };
                if (!msg) {
                    message = error.toString();
                }
            } else {
                args = { ...args, errorInfo: JSON.stringify(error) };
                if (!msg) {
                    console.log('传入的error非Error类型,请传递msg字段!!');
                }
            }
        }

        let { bundleId, componentName } =
            LocalLifeInitLogger.getAppModel() || {};
        if (!bundleId || !componentName) {
            let bundleInfo = NativeModules.KRNBasic.getBundleInfo(rootTag);
            bundleId = bundleInfo.bundleId;
            componentName = bundleInfo.componentName;
        }
        args = { ...args, bundleId, componentName };
        if (inValidVersion()) {
            NativeModules.Kds.invoke(
                'poi',
                'printLocalLifeLog',
                JSON.stringify({
                    logType,
                    module: '[KSLocalLife_RN]',
                    logBiz: `BundleId_${bundleId}`,
                    tag,
                    msg: msg || message || '',
                    params: args || {},
                    rootTag,
                }),
            );
        }
        console.log(
            '[logBiz:BundleId_' +
                bundleId +
                '][tag:' +
                tag +
                '][msg:' +
                (msg || message) +
                ']' +
                '[params:' +
                JSON.stringify(args || {}) +
                ']',
        );
    } catch (e) {
        console.error(`LocalLifeLogger error:${e || ''}`);
    }
}

export default class LocalLifeDebugLogger {
    static async v(tag: string, message?: string, params?: object) {
        log(LoggerType.VERBOSE, tag, message, params, null);
    }

    static async d(tag: string, message?: string, params?: object) {
        log(LoggerType.DEBUG, tag, message, params, null);
    }

    static async i(tag: string, message?: string, params?: object) {
        log(LoggerType.INFO, tag, message, params, null);
    }

    static async w(tag: string, message?: string, params?: object) {
        log(LoggerType.WARN, tag, message, params, null);
    }

    static async e(
        tag: string,
        message: string,
        params?: object,
        error?: object,
    ) {
        log(LoggerType.ERROR, tag, message, params, error);
    }
}
