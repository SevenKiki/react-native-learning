import { Weblog } from '@ks/weblogger/lib/log.krnbridge';
import LoggerError from '../types';
import LocalLifeFmpLogger from '../LocalLifeFmpLogger';
import { _IAppInitProps } from '../LocalLifeInitLogger';
interface Options extends _IAppInitProps {
    /** 是否启用radar，默认启用 */
    useRadar?: boolean;
    /** 业务标识，默认'LOCALLIFE' */
    biz?: string;
    /** 获取PV参数 */
    pageMap?: any;
    /** 其他 */
    [key: string]: any;
}
export declare class LocalLifeKrnBaseLogger extends Weblog {
    radar: any;
    /**
     * @param options 基本配置参数
     * @param weblogExtraInfo 补充配置参数，将会与基本配置完成weblogger的初始化
     * @param baseInfo 埋点基础信息配置
     */
    constructor(options: Options, weblogExtraInfo: {}, baseInfo: any);
    handleT2: typeof LocalLifeFmpLogger.handleT2;
    handleT3: typeof LocalLifeFmpLogger.handleT3;
    update({ url, referUrl, ...commonPackage }: {
        [x: string]: any;
        url: any;
        referUrl: any;
    }): void;
    private sendLog;
    pv(option?: {}): void;
    show({ action, params, contentPackage, ...other }: any): void;
    click({ action, params, contentPackage, ...other }: any): void;
    error(err: Error | LoggerError | string): void;
    /**
     * options第一层可包含status，若options.extra_info无status字段，外层status字段将会包含在options.extra_info进行埋点发送
     * @param options: {name: string, extra_info: any, status?: string, ...other}
     * @param isAsync
     * @param maxLifeTimeBetweenSteps 如果异步，两次任务之间最大保留时间，默认30s
     * @returns
     */
    task(options: any, isAsync?: boolean, maxLifeTimeBetweenSteps?: number): any;
    asyncTask(options: any, maxLifeTimeBetweenSteps?: number): any;
}
/**
 * bizLogger/fmpLogger/taskLogger的功能集成版
 * bizLogger需业务方手动进行weblogger实例化传入initLogger，方可进行click等埋点上报。weblogger示例由使用方自行管理。
 * KrnLogger无需提前weblogger实例化，传入appProps即可（若页面需要指定PV参数，需传入pageMap）。将会返回logger实例单例，使用实例对象函数进行埋点上报。
 * 默认开启雷达，默认上报T1。
 * 普通打点bizLogger上报为weblogger的后台任务的任务事件，KrnLogger上报至radar
 */
export default function LocalLifeKrnLogger(...args: [Options?, any?, any?]): LocalLifeKrnBaseLogger;
export {};
