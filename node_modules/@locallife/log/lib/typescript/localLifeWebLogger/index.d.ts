import { Weblog } from '@ks/weblogger/lib/log.bridge';
import LoggerError from '../types';
interface Options {
    /** 雷达报警需要 */
    projectId?: string;
    /** 上报环境，默认production */
    env?: any;
    /** 是否启动autoPv，默认启用 */
    useAutoPv?: boolean;
    /** 启用autoPv时，插件参数 */
    autoPvOptions?: any;
    /** 是否启用autoTrack，默认启用*/
    useAutoTrack?: boolean;
    /** 启用autoTrack时，插件参数 */
    autoTrackOptions?: object;
    /** 业务标识，默认'LOCALLIFE' */
    biz?: string;
    /** vue示例 */
    app?: any;
    /** 其他 */
    [key: string]: any;
}
export declare class LocalLifeWebBaseLogger {
    radar: any;
    weblogger: Weblog;
    /**
     *
     * @param options 基本配置参数
     * @param weblogExtraInfo 补充配置参数，将会与基本配置完成weblogger的初始化
     * @param baseInfo 埋点基础信息配置
     */
    constructor(options: Options, weblogExtraInfo: any, baseInfo: any);
    private hasSendFMP;
    addFMP(): void;
    update({ url, referUrl, ...commonPackage }: {
        [x: string]: any;
        url: any;
        referUrl: any;
    }): void;
    private sendLog;
    pv(options: any): void;
    show(options: any): void;
    click(options: any): void;
    error(err: Error | LoggerError | string): void;
    /**
     * options第一层可包含status，若options.extra_info无status字段，外层status字段将会包含在options.extra_info进行埋点发送
     * @param options: {name: string, extra_info: any, status?: string, ...other}
     * @param isAsync
     * @param maxLifeTimeBetweenSteps 如果异步，两次任务之间最大保留时间，默认30s
     * @returns
     */
    task(options: any, isAsync?: boolean, maxLifeTimeBetweenSteps?: number): any;
    asyncTask(options: any, maxLifeTimeBetweenSteps?: number): any;
    private bindAutoEvent;
}
export default function LocalLifeWebLogger(...args: [Options?, any?, any?]): LocalLifeWebBaseLogger;
export {};
