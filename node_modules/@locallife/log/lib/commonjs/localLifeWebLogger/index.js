"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LocalLifeWebBaseLogger = void 0;
exports.default = LocalLifeWebLogger;

var _log = require("@ks/weblogger/lib/log.bridge");

var _autopv = _interopRequireDefault(require("@ks/weblogger/lib/plugins/autopv"));

var _autotrack = _interopRequireDefault(require("@ks/weblogger/lib/plugins/autotrack"));

var _radar = _interopRequireDefault(require("@ks-radar/radar"));

var _types = _interopRequireDefault(require("../types"));

var _LocalLifeTaskLogger = _interopRequireDefault(require("../LocalLifeTaskLogger"));

var yoda = _interopRequireWildcard(require("@yoda/bridge"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class LocalLifeWebBaseLogger {
  /**
   *
   * @param options 基本配置参数
   * @param weblogExtraInfo 补充配置参数，将会与基本配置完成weblogger的初始化
   * @param baseInfo 埋点基础信息配置
   */
  constructor(options) {
    let weblogExtraInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let baseInfo = arguments.length > 2 ? arguments[2] : undefined;

    _defineProperty(this, "radar", null);

    _defineProperty(this, "weblogger", null);

    _defineProperty(this, "hasSendFMP", false);

    const {
      projectId,
      env = 'production',
      useAutoPv = true,
      autoPvOptions,
      useAutoTrack = true,
      autoTrackOptions = {},
      biz = 'LOCALLIFE',
      app
    } = options; // plugins

    let plugins = (weblogExtraInfo === null || weblogExtraInfo === void 0 ? void 0 : weblogExtraInfo.plugins) || [];

    if (useAutoPv) {
      plugins.push(new _autopv.default(autoPvOptions));
    }

    if (useAutoTrack) {
      // https://component.corp.kuaishou.com/docs/weblogger/views/docs/plugins.html#autotrack%E6%8F%92%E4%BB%B6
      plugins.push(new _autotrack.default(autoTrackOptions));
    }

    if (projectId) {
      plugins.push(new _radar.default({
        // 上报fcp指标数据
        fcp: true,
        // 雷达平台唯一标识
        projectId
      }));
    }

    this.weblogger = new _log.Weblog({
      env,
      // 新业务埋点，落库 ks_client_log_v3；端内【桥接上报】无需配置
      proto: 'v3',
      // 在端内http 上报时传入 yoda 桥接 SDK，可以使雷达数据上报更多的 webview 信息，并会校正 js 默认获取的设备信息等。
      // 端内【桥接上报】无需配置
      yoda,
      plugins,
      ...weblogExtraInfo
    }, baseInfo);
    this.bindAutoEvent({
      app
    });
    this.radar = this.weblogger.plugins.radar;
    const that = this;

    _LocalLifeTaskLogger.default.setTaskLogFn(this.radar ? _ref => {
      let {
        name,
        extra_info,
        ...other
      } = _ref;
      return that.radar.event({
        name,
        extra_info,
        ...other
      });
    } : _ref2 => {
      let {
        name,
        extra_info,
        ...other
      } = _ref2;
      return that.sendLog('CUSTOM_EVENT', {
        biz,
        key: name,
        value: {
          extra_info,
          ...other
        }
      });
    });

    _LocalLifeTaskLogger.default.setErrorLogFn(this.error);
  } // 上报FMP


  addFMP() {
    var _this$radar, _this$radar$fmp;

    if (this.hasSendFMP) {
      return;
    }

    this.hasSendFMP = true; // weblog 是异步加载且不影响首屏的，所以时间可以提前计算

    (_this$radar = this.radar) === null || _this$radar === void 0 ? void 0 : (_this$radar$fmp = _this$radar.fmp) === null || _this$radar$fmp === void 0 ? void 0 : _this$radar$fmp.call(_this$radar, Date.now());
  } // 更新上报信息


  update(_ref3) {
    let {
      url,
      referUrl,
      ...commonPackage
    } = _ref3;
    url && this.weblogger.updateCurrentUrlPackage(url);
    referUrl && this.weblogger.updateReferUrlPackage(referUrl);

    if (Object.keys(commonPackage).length) {
      this.weblogger.updateCommonPackage(commonPackage);
    }
  } // 发埋点啦


  sendLog(type, options) {
    this.weblogger.sendImmediately(type, options);
  } // 页面PV事件用这个


  pv(options) {
    this.sendLog('PV', options);
  } // 元素SHOW事件用这个


  show(options) {
    this.sendLog('SHOW', options);
  } // 点击事件用这个


  click(options) {
    this.sendLog('CLICK', options);
  }

  error(err) {
    var _this$radar2, _this$radar2$captureE;

    (_this$radar2 = this.radar) === null || _this$radar2 === void 0 ? void 0 : (_this$radar2$captureE = _this$radar2.captureException) === null || _this$radar2$captureE === void 0 ? void 0 : _this$radar2$captureE.call(_this$radar2, err);
  }
  /**
   * options第一层可包含status，若options.extra_info无status字段，外层status字段将会包含在options.extra_info进行埋点发送
   * @param options: {name: string, extra_info: any, status?: string, ...other}
   * @param isAsync
   * @param maxLifeTimeBetweenSteps 如果异步，两次任务之间最大保留时间，默认30s
   * @returns
   */


  task(options, isAsync, maxLifeTimeBetweenSteps) {
    return _LocalLifeTaskLogger.default.task(options, isAsync, maxLifeTimeBetweenSteps);
  }

  asyncTask(options, maxLifeTimeBetweenSteps) {
    return this.task(options, true, maxLifeTimeBetweenSteps);
  } // 绑定事件


  bindAutoEvent(_ref4) {
    let {
      app
    } = _ref4;
    // vue
    (app === null || app === void 0 ? void 0 : app.config) && (app.config.errorHandler = error => {
      this.error(new _types.default({
        name: '@locallife/log-vue-error',
        error
      }));
    }); // unhandled rejection

    const that = this;
    window && window.addEventListener('unhandledrejection', function (e) {
      that.error(new _types.default({
        name: '@locallife/log-unhandledrejection',
        error: e.reason
      }));
      e.preventDefault();
    });
  }

}

exports.LocalLifeWebBaseLogger = LocalLifeWebBaseLogger;
let logger;

function LocalLifeWebLogger() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return logger || (logger = new LocalLifeWebBaseLogger(...args));
}
//# sourceMappingURL=index.js.map