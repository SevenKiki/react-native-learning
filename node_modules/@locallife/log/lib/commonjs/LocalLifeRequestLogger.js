"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactNative = require("react-native");

var _LocalLifeInitLogger = _interopRequireDefault(require("./LocalLifeInitLogger"));

var _LocalLifeCustomLogger = _interopRequireDefault(require("./LocalLifeCustomLogger"));

var _AppVersion = _interopRequireDefault(require("./AppVersion"));

var _VersionUtil = require("./VersionUtil");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function inValidVersion() {
  if (_reactNative.Platform.OS === 'android') {
    return _VersionUtil.VersionUtil.currentGreaterThanEqualVersion(_AppVersion.default.VERSION_11_4_40);
  } else if (_reactNative.Platform.OS === 'ios') {
    return _VersionUtil.VersionUtil.currentGreaterThanEqualVersion(_AppVersion.default.VERSION_11_4_40);
  }

  return false;
}

class LocalLifeRequestLogger {
  static async logRequest(path, result, errCode, errMessage, params) {
    try {
      let args = params || {};

      let rootTag = _LocalLifeInitLogger.default.getRootTag();

      let {
        bundleId,
        componentName
      } = _LocalLifeInitLogger.default.getAppModel() || {};

      if (!bundleId || !componentName) {
        let bundleInfo = _reactNative.NativeModules.KRNBasic.getBundleInfo(rootTag);

        bundleId = bundleInfo.bundleId;
        componentName = bundleInfo.componentName;
      }

      args = { ...args,
        bundleId,
        componentName
      };

      if (inValidVersion()) {
        _reactNative.NativeModules.Kds.invoke('poi', 'reportRequestLog', JSON.stringify({
          path,
          result,
          errCode: errCode || -1,
          errMessage: errMessage || '',
          params: args || {},
          rootTag
        }));
      } else {
        _LocalLifeCustomLogger.default.logCustomEvent('LOCAL_LIFE_LOG_REQUEST', {
          path,
          result,
          errCode: errCode || -1,
          errMessage: errMessage || '',
          params: args || {}
        });
      }

      console.log('[customEventKey: LOCAL_LIFE_LOG_REQUEST]' + '[path:' + path + '][result:' + result + '][errCode:' + (errCode || -1) + '][errMessage:' + (errMessage ? JSON.stringify(errMessage) : '') + '][params:' + (params ? JSON.stringify(params) : {}) + ']');
    } catch (e) {
      console.error(`LocalLifeRequestLogger error:${e || ''}`);
    }
  }

}

exports.default = LocalLifeRequestLogger;
//# sourceMappingURL=LocalLifeRequestLogger.js.map