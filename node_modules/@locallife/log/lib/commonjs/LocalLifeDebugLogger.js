"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactNative = require("react-native");

var _AppVersion = _interopRequireDefault(require("./AppVersion"));

var _LocalLifeInitLogger = _interopRequireDefault(require("./LocalLifeInitLogger"));

var _VersionUtil = require("./VersionUtil");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LoggerType;

(function (LoggerType) {
  LoggerType[LoggerType["VERBOSE"] = 1] = "VERBOSE";
  LoggerType[LoggerType["DEBUG"] = 2] = "DEBUG";
  LoggerType[LoggerType["INFO"] = 3] = "INFO";
  LoggerType[LoggerType["WARN"] = 4] = "WARN";
  LoggerType[LoggerType["ERROR"] = 5] = "ERROR";
})(LoggerType || (LoggerType = {}));

function inValidVersion() {
  if (_reactNative.Platform.OS === 'android') {
    return _VersionUtil.VersionUtil.currentGreaterThanEqualVersion(_AppVersion.default.VERSION_11_2_10);
  } else if (_reactNative.Platform.OS === 'ios') {
    return _VersionUtil.VersionUtil.currentGreaterThanEqualVersion(_AppVersion.default.VERSION_11_3_10);
  }

  return false;
}

async function log(logType, tag, msg, params, error) {
  try {
    let args = params || {};
    let message = null;

    let rootTag = _LocalLifeInitLogger.default.getRootTag();

    if (error) {
      if (error instanceof Error) {
        args = { ...args,
          errorInfo: error.message,
          errorStack: error.stack
        };

        if (!msg) {
          message = error.toString();
        }
      } else {
        args = { ...args,
          errorInfo: JSON.stringify(error)
        };

        if (!msg) {
          console.log('传入的error非Error类型,请传递msg字段!!');
        }
      }
    }

    let {
      bundleId,
      componentName
    } = _LocalLifeInitLogger.default.getAppModel() || {};

    if (!bundleId || !componentName) {
      let bundleInfo = _reactNative.NativeModules.KRNBasic.getBundleInfo(rootTag);

      bundleId = bundleInfo.bundleId;
      componentName = bundleInfo.componentName;
    }

    args = { ...args,
      bundleId,
      componentName
    };

    if (inValidVersion()) {
      _reactNative.NativeModules.Kds.invoke('poi', 'printLocalLifeLog', JSON.stringify({
        logType,
        module: '[KSLocalLife_RN]',
        logBiz: `BundleId_${bundleId}`,
        tag,
        msg: msg || message || '',
        params: args || {},
        rootTag
      }));
    }

    console.log('[logBiz:BundleId_' + bundleId + '][tag:' + tag + '][msg:' + (msg || message) + ']' + '[params:' + JSON.stringify(args || {}) + ']');
  } catch (e) {
    console.error(`LocalLifeLogger error:${e || ''}`);
  }
}

class LocalLifeDebugLogger {
  static async v(tag, message, params) {
    log(LoggerType.VERBOSE, tag, message, params, null);
  }

  static async d(tag, message, params) {
    log(LoggerType.DEBUG, tag, message, params, null);
  }

  static async i(tag, message, params) {
    log(LoggerType.INFO, tag, message, params, null);
  }

  static async w(tag, message, params) {
    log(LoggerType.WARN, tag, message, params, null);
  }

  static async e(tag, message, params, error) {
    log(LoggerType.ERROR, tag, message, params, error);
  }

}

exports.default = LocalLifeDebugLogger;
//# sourceMappingURL=LocalLifeDebugLogger.js.map