"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactNative = require("react-native");

var _AppVersion = _interopRequireDefault(require("./AppVersion"));

var _LocalLifeCustomLogger = _interopRequireDefault(require("./LocalLifeCustomLogger"));

var _LocalLifeInitLogger = _interopRequireDefault(require("./LocalLifeInitLogger"));

var _ReportType = require("./ReportType");

var _VersionUtil = require("./VersionUtil");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function inValidVersion() {
  if (_reactNative.Platform.OS === 'android') {
    return _VersionUtil.VersionUtil.currentGreaterThanEqualVersion(_AppVersion.default.VERSION_11_2_10);
  } else if (_reactNative.Platform.OS === 'ios') {
    return _VersionUtil.VersionUtil.currentGreaterThanEqualVersion(_AppVersion.default.VERSION_11_3_10);
  }

  return false;
}

class LocalLifeJinJingLogger {
  static async reportLog2JinJing(customEventKey, isReportErrorLog, tag, message, params, error, reportType) {
    try {
      let rootTag = _LocalLifeInitLogger.default.getRootTag();

      let appModel = _LocalLifeInitLogger.default.getAppModel();

      if (inValidVersion()) {
        let {
          bundleId
        } = appModel || {};

        if (!bundleId) {
          bundleId = _reactNative.NativeModules.KRNBasic.getBundleInfo(rootTag);
        }

        let bundleIdValue = bundleId || {};
        let paramsValue = params || {};
        let reportTypeValue = reportType || _ReportType.ReportType.CUSTOM_EVENT;

        if (error) {
          if (error instanceof Error) {
            paramsValue = { ...params,
              errorInfo: error.message,
              errorStack: error.stack
            };
          } else {
            paramsValue = { ...params,
              errorInfo: JSON.stringify(error)
            };
          }
        }

        _reactNative.NativeModules.Kds.invoke('poi', 'reportLog2JinJing', JSON.stringify({
          customEventKey,
          isReportErrorLog,
          bundleId: bundleIdValue,
          tag,
          message,
          reportType: reportTypeValue,
          params: paramsValue,
          rootTag
        }));

        console.log('[customEventKey:' + customEventKey + '][logBiz:BundleId_' + bundleIdValue + '][tag:' + tag + '][msg:' + message + ']' + '[params:' + JSON.stringify(paramsValue || {}) + ']');
      } else {
        _LocalLifeCustomLogger.default.logCustomEvent(customEventKey, params);
      }
    } catch (e) {
      console.error(`LocalLifeJingJinLogger error:${e || ''}`);
    }
  }

}

exports.default = LocalLifeJinJingLogger;
//# sourceMappingURL=LocalLifeJinJingLogger.js.map