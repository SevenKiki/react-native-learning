function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { NativeModules } from 'react-native';
export class VersionUtil {
  static initVersion() {
    if (!this.currentVersion) {
      this.currentVersion = NativeModules.KRNBasic.getDeviceInfoSync().data.appVersion;
    }
  }

  static greaterThanVersion(version) {
    this.initVersion();
    return this.compareVersion(this.currentVersion, version) === 1;
  }
  /**
   * @deprecated 请使用currentGreaterThanEqualVersion
   */


  static greaterThanEqualVersion(version1, version2) {
    return this.compareVersion(version1, version2) >= 0;
  }

  static currentLessThanVersion(version) {
    this.initVersion();
    return this.compareVersion(this.currentVersion, version) === -1;
  }

  static lessThanEqualVersion(version) {
    this.initVersion();
    return this.compareVersion(this.currentVersion, version) <= 0;
  }

  static currentGreaterThanEqualVersion(version) {
    this.initVersion();
    return this.greaterThanEqualVersion(this.currentVersion, version);
  }

  static compareVersion(version1, version2) {
    let pA = 0;
    let pB = 0;
    /** 寻找当前区间的版本号 */

    let findDigit = function (str, start) {
      let i = start;

      while (str[i] !== '.' && i < str.length) {
        i++;
      }

      return i;
    };

    while (pA < version1.length && pB < version2.length) {
      let nextA = findDigit(version1, pA);
      let nextB = findDigit(version2, pB);
      let numA = +version1.substr(pA, nextA - pA);
      let numB = +version2.substr(pB, nextB - pB);

      if (numA !== numB) {
        return numA > numB ? 1 : -1;
      }

      pA = nextA + 1;
      pB = nextB + 1;
    } // 若arrayA仍有小版本号


    while (pA < version1.length) {
      let nextA = findDigit(version1, pA);
      let numA = +version1.substr(pA, nextA - pA);

      if (numA > 0) {
        return 1;
      }

      pA = nextA + 1;
    } // 若arrayB仍有小版本号


    while (pB < version2.length) {
      let nextB = findDigit(version2, pB);
      let numB = +version2.substr(pB, nextB - pB);

      if (numB > 0) {
        return -1;
      }

      pB = nextB + 1;
    } // 版本号完全相同


    return 0;
  }

}

_defineProperty(VersionUtil, "currentVersion", void 0);
//# sourceMappingURL=VersionUtil.js.map