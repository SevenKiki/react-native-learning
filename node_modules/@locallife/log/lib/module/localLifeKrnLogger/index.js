function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable camelcase */
import { Weblog } from '@ks/weblogger/lib/log.krnbridge';
import RadarKrn from '@ks-radar/radar/krn';
import LocalLifeTaskLogger from '../LocalLifeTaskLogger';
import LocalLifeFmpLogger from '../LocalLifeFmpLogger';
import { localLifeBizLogger } from '../LocalLifeBizLogger';
import LocalLifeInitLogger from '../LocalLifeInitLogger';
export class LocalLifeKrnBaseLogger extends Weblog {
  /**
   * @param options 基本配置参数
   * @param weblogExtraInfo 补充配置参数，将会与基本配置完成weblogger的初始化
   * @param baseInfo 埋点基础信息配置
   */
  constructor(options) {
    let weblogExtraInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let baseInfo = arguments.length > 2 ? arguments[2] : undefined;
    let {
      useRadar = true,
      biz = 'LOCALLIFE',
      pageMap,
      ...appModel
    } = options; // weblogger实例

    super({
      biz,
      ...weblogExtraInfo
    }, baseInfo); //radar

    _defineProperty(this, "radar", null);

    _defineProperty(this, "handleT2", LocalLifeFmpLogger.handleT2);

    _defineProperty(this, "handleT3", LocalLifeFmpLogger.handleT3);

    if (useRadar) {
      const {
        sessionId,
        bundleId,
        componentName,
        bundleVersionCode,
        bundleVersion
      } = appModel;
      this.radar = new RadarKrn({
        weblog: this,
        sessionId,
        bundleId,
        componentName,
        bundleVersionCode,
        bundleVersion
      });
    } // init appModel


    LocalLifeInitLogger.initWithAppModel(appModel, this); // 取链接参数及PV参数

    const pvEventOptions = pageMap(pageMap({
      params: appModel
    }));
    LocalLifeInitLogger.setBizInfo(pvEventOptions); // 自动上报PV

    this.pv(); // 自动上报T1 白屏时间

    LocalLifeFmpLogger.handleT1(); // 榜单task所需打点事件

    const that = this;
    LocalLifeTaskLogger.setTaskLogFn(this.radar ? _ref => {
      let {
        name,
        extra_info,
        ...other
      } = _ref;
      return that.radar.event({
        name,
        extra_info,
        ...other
      });
    } : _ref2 => {
      let {
        name,
        extra_info,
        ...other
      } = _ref2;
      return that.sendLog('CUSTOM_EVENT', {
        biz,
        key: name,
        value: {
          extra_info,
          ...other
        }
      });
    });
    LocalLifeTaskLogger.setErrorLogFn(this.error);
  } // 第一次接口上报时间(T2)


  // 更新上报信息
  update(_ref3) {
    let {
      url,
      referUrl,
      ...commonPackage
    } = _ref3;
    url && this.updateCurrentUrlPackage(url);
    referUrl && this.updateReferUrlPackage(referUrl);

    if (Object.keys(commonPackage).length) {
      this.updateCommonPackage(commonPackage);
    }
  } // 发埋点


  sendLog(type, options) {
    this.sendImmediately(type, options);
  } // 页面PV事件用这个


  pv() {
    let option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    localLifeBizLogger.pageShow(option);
  } // 元素SHOW事件用这个


  show(_ref4) {
    let {
      action,
      params,
      contentPackage,
      ...other
    } = _ref4;
    localLifeBizLogger.show(action, params, contentPackage, other);
  } // 点击事件用这个


  click(_ref5) {
    let {
      action,
      params,
      contentPackage,
      ...other
    } = _ref5;
    localLifeBizLogger.click(action, params, contentPackage, other);
  }

  error(err) {
    var _this$radar, _this$radar$captureEx;

    (_this$radar = this.radar) === null || _this$radar === void 0 ? void 0 : (_this$radar$captureEx = _this$radar.captureException) === null || _this$radar$captureEx === void 0 ? void 0 : _this$radar$captureEx.call(_this$radar, err);
  }
  /**
   * options第一层可包含status，若options.extra_info无status字段，外层status字段将会包含在options.extra_info进行埋点发送
   * @param options: {name: string, extra_info: any, status?: string, ...other}
   * @param isAsync
   * @param maxLifeTimeBetweenSteps 如果异步，两次任务之间最大保留时间，默认30s
   * @returns
   */


  task(options, isAsync, maxLifeTimeBetweenSteps) {
    return LocalLifeTaskLogger.task(options, isAsync, maxLifeTimeBetweenSteps);
  }

  asyncTask(options, maxLifeTimeBetweenSteps) {
    return this.task(options, true, maxLifeTimeBetweenSteps);
  }

}
let krnLogger;
/**
 * bizLogger/fmpLogger/taskLogger的功能集成版
 * bizLogger需业务方手动进行weblogger实例化传入initLogger，方可进行click等埋点上报。weblogger示例由使用方自行管理。
 * KrnLogger无需提前weblogger实例化，传入appProps即可（若页面需要指定PV参数，需传入pageMap）。将会返回logger实例单例，使用实例对象函数进行埋点上报。
 * 默认开启雷达，默认上报T1。
 * 普通打点bizLogger上报为weblogger的后台任务的任务事件，KrnLogger上报至radar
 */

export default function LocalLifeKrnLogger() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return krnLogger || (krnLogger = new LocalLifeKrnBaseLogger(...args));
}
//# sourceMappingURL=index.js.map