import LocalLifeInitLogger from './LocalLifeInitLogger';

class LocalLifeBizLogger {
  innerLog(tag, message) {
    console.log(`[@locallife/log][${tag}]:${typeof message === 'string' ? message : JSON.stringify(message)}`);
  }

  click(action, params, contentPackage, other) {
    const weblog = LocalLifeInitLogger.getWeblog();
    weblog.sendImmediately('CLICK', {
      action,
      params: params,
      contentPackage: contentPackage,
      ...other
    });
    this.innerLog('click log', JSON.stringify({
      action,
      params,
      contentPackage
    }));
  }

  show(action, params, contentPackage, other) {
    const weblog = LocalLifeInitLogger.getWeblog();
    weblog.sendImmediately('SHOW', {
      action,
      params: params,
      contentPackage: contentPackage,
      ...other
    });
  }

  event(action, params, contentPackage) {
    const weblog = LocalLifeInitLogger.getWeblog();
    this.innerLog('event log', JSON.stringify({
      action,
      params,
      contentPackage
    }));
    weblog.sendImmediately('CLICK', {
      action,
      params: params,
      type: 'BACKGROUND_TASK_EVENT'
    });
  }

  pageShow(pvParams) {
    const weblog = LocalLifeInitLogger.getWeblog();
    const pvEventOption = LocalLifeInitLogger.getPvEventOption();
    weblog.sendImmediately('PV', {
      type: 'enter',
      page: pvEventOption.page,
      params: { ...pvEventOption.params,
        ...pvParams
      },
      coPage: !!pvEventOption.coPage
    });
  }

}

export const localLifeBizLogger = new LocalLifeBizLogger();
//# sourceMappingURL=LocalLifeBizLogger.js.map